[{"instruction": "When did Virgin Australia start operating?", "input": "Virgin Australia, the trading name of Virgin Australia Airlines Pty Ltd, is an Australian-based airline. It is the largest airline by fleet size to use the Virgin brand. It commenced services on 31 August 2000 as Virgin Blue, with two aircraft on a single route.[3] It suddenly found itself as a major airline in Australia's domestic market after the collapse of Ansett Australia in September 2001. The airline has since grown to directly serve 32 cities in Australia, from hubs in Brisbane, Melbourne and Sydney.[4]", "output": "Virgin Australia commenced services on 31 August 2000 as Virgin Blue, with two aircraft on a single route.", "category": "IT"}, {"instruction": "Given this paragraph about Pittsford, New York, what year was the town settled?", "input": "The Town of Pittsford (formerly part of the town of Northfield) was settled in 1789 and incorporated in 1796. The Village of Pittsford was incorporated in 1827. It was named by Colonel Caleb Hopkins, War of 1812 hero and subsequently Pittsford Town Supervisor, for the town of his birth, Pittsford, Vermont.", "output": "The town of Pittsford was settled in 1789.", "category": "IT"}, {"instruction": "Find all sports from this passage that use the term hat-trick.", "input": "The term first appeared in 1858 in cricket, to describe H. H. Stephenson taking three wickets with three consecutive deliveries. Fans held a collection for Stephenson, and presented him with a hat bought with the proceeds.[2][full citation needed] The term was used in print for the first time in 1865 in the Chelmsford Chronicle.[3][non-primary source needed] The term was eventually adopted by many other sports including hockey, association football,[4] Formula 1 racing, rugby, and water polo.", "output": "Term hat-trick is primarily used in Cricket but is also adopted in hockey, association football, Formula 1 racing, rugby, and water polo.", "category": "IT"}, {"instruction": "From the text below extract the types of species and the percentage of its habitat in the form {Species}:{Percentage} and place them as a bullet list", "input": "India is a megadiverse country, a term employed for 17 countries which display high biological diversity and contain many species exclusively indigenous, or endemic, to them.[195] India is a habitat for 8.6% of all mammal species, 13.7% of bird species, 7.9% of reptile species, 6% of amphibian species, 12.2% of fish species, and 6.0% of all flowering plant species.[196][197] Fully a third of Indian plant species are endemic.[198] India also contains four of the world's 34 biodiversity hotspots,[68] or regions that display significant habitat loss in the presence of high endemism.[l][199]", "output": "Here are the types of species and their percentages stated in the given text:\nMammal species : 8.6%\nBird species : 13.7%\nReptile species : 7.9%\nAmphibian species : 6%\nFish species : 12.2%\nFlowering Plant species : 6.0%", "category": "IT"}, {"instruction": "Classify the following as types of birds or types of snakes: robin, cobra, rattlesnake, eagle, viper, raptor, bluejay, cottonmouth, copperhead, sparrow.", "input": "", "output": "Robin, eagle, raptor, bluejay, and sparrow are all kinds of birds. Cobra, rattlesnake, viper, cottonmouth, and copperhead are several types of snakes.", "category": "IT"}, {"instruction": "Write a paragraph about AI governance.", "input": "", "output": "The AI arms race is heating up, and breakthroughs are happening at an accelerating pace.\n\nThe release of ChatGPT by OpenAI represents a profound leap forward in how humans interface with machines, showcasing the startling progress in large language models. Meanwhile generative AI capabilities such as Dall-E, Stable Diffusion, and Midjourney are able to generate highly realistic and detailed images from text descriptions, demonstrating a level of creativity and imagination that was once thought to be exclusively human.\n\nHumans seem fundamentally wired to continuously advance technology and improve our knowledge and capabilities. Also, the human brain tends to think linearly, causing us to underestimate the exponential progress of technology. Companies and nations are incentivized by market forces and geopolitical game theory to pursue better intelligence through the advancement of AI.\n\nThe Future of Life Institute recently published Pause Giant AI Experiments: An Open Letter. The letter \u2014 with notable signatories including Elon Musk, Steve Wozniak and Andrew Yang \u2014 caused a stir, calling for a 6 month pause on advanced AI development:\n\n\u201cTherefore, we call on all AI labs to immediately pause for at least 6 months the training of AI systems more powerful than GPT-4. This pause should be public and verifiable, and include all key actors. If such a pause cannot be enacted quickly, governments should step in and institute a moratorium.\u201d\n\nMuch of the media and public discourse in response to this letter has focused on who signed it and pushing back on the notion that humanity faces an imminent existential threat of artificial superintelligence. Dystopian claims of runaway artificial intelligence seem hyperbolic to many people, and calling for a 6 month moratorium is not realistic. Good luck convincing China to \u201cpause\u201d their efforts in the AI arms race.\n\nBut are there no boundaries? Should we proceed with no guidelines?\n\nFor example \u2026\n\nAre we comfortable outsourcing decisions to black box AI systems that lack transparency and explainability, making it impossible for humans to understand the reasoning behind decisions?\nShould we be worried about the development of AI-powered autonomous weapons that make decisions about the use of lethal force without human input?\nShould we be worried about the potential for malicious actors to use AI for nefarious purposes, such as sophisticated propaganda campaigns?\nAre our current laws, regulations and political systems equipped to handle the rapid influx of new AI alignment questions that society will grapple with in the very near future?\nAs AI becomes more advanced, it may become difficult to understand, which could lead to unintended outcomes. AI systems can behave in ways that are unforeseen and difficult to control. The AI alignment problem is a societal challenge that requires collaboration between researchers, engineers, entrepreneurs, policymakers, and the public. It will also require international cooperation between governments and the private sector. This is not just a technical challenge, but also a philosophical and ethical one.\n\nThe open letter mentioned above goes on to recommend:\n\n\u201cAI research and development should be refocused on making today\u2019s powerful, state-of-the-art systems more accurate, safe, interpretable, transparent, robust, aligned, trustworthy, and loyal.\u201d\n\nThis is certainly a worthy goal, and it can be achieved by doing AI in the open. What we currently lack is a framework. Society needs a set of procedures and protocols to make the recommendation from The Future of Life Institute actionable.\n\nJointly, we must consider and debate the pros and cons of many ideas, including but not limited to:\n\nMandatory disclosure of model details, including training datasets, evaluation methodologies, and known biases\nDevelopment of a framework that establishes model monitoring and audit requirements for advanced AI systems\nImplementation of laws that impose liability for AI-caused harm\nEstablishment of a regulatory authority for oversight and tracking of highly capable AI systems\nThe first step in achieving a productive framework for safe AI development is an open dialogue among the many stakeholders involved, which includes everyone. We must rise above the hyper-politicized discourse that our dishonest and broken media often forces upon us. This topic is too important and the ramifications are too profound. Join me in advocating for an intelligent and respectful conversation on AI \u2014 one that solicits input and open debate from a diverse set of voices to help ensure a path forward that is in our collective best interest.", "category": "IT"}, {"instruction": "Who prepares the Global Hunger Index?", "input": "", "output": "Global Hunger Index is jointly prepared by Welhunger Life and Concern Worldwide", "category": "IT"}, {"instruction": "Who won the 149th Boat Race?", "input": "The 149th Boat Race took place on 6 April 2003. Held annually, the Boat Race is a side-by-side rowing race between crews from the Universities of Oxford (in dark blue) and Cambridge (in light greenish blue) along a 4.2-mile (6.8 km) tidal stretch of the River Thames in south-west London. The lead changed twice during the race, which Oxford won by one foot (30 cm), the smallest margin of victory in the history of the event. The close race has been described as \"epic,\" while Olympic gold medalist Steve Redgrave suggested that the race was the \"greatest we will see in our lifetimes.\"\n\nUmpired by the Boat Race veteran Boris Rankov, the 2003 race was the first to be scheduled on a Sunday. As a result of a collision between the Cambridge boat and a launch, a member of the Cambridge crew was replaced just two days before the race. This was the first Boat Race to feature two sets of brothers on opposing sides. In the reserve race Goldie beat Isis and Oxford won the Women's race.", "output": "The 149th Boat Race took place on April 6, 2003 and was held between the Universities of Oxford and Cambridge. Oxford won the face by one foot (30 cm), making it the smallest margin of victory in the history of the event.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Ilimba, Khim", "input": "", "output": "Ilimba is percussion, Khim is string.", "category": "IT"}, {"instruction": "Who is Stephen King?", "input": "Stephen Edwin King (born September 21, 1947) is an American author of horror, supernatural fiction, suspense, crime, science-fiction, and fantasy novels. Described as the \"King of Horror\", a play on his surname and a reference to his high standing in pop culture,[2] his books have sold more than 350 million copies,[3] and many have been adapted into films, television series, miniseries, and comic books. King has published 64 novels, including seven under the pen name Richard Bachman, and five non-fiction books.[4] He has also written approximately 200 short stories, most of which have been published in book collections.[", "output": "Stephen King is an American author of horror, supernatural fiction, suspense, crime, science-fiction, and fantasy novels. He is described as the \"King of Horror\" for his high standing in pop culture, his books have sold more than 350 million copies, and many have been adapted into films, television series, miniseries, and comic books", "category": "IT"}, {"instruction": "Give me a list of the greatest chess players of all time", "input": "", "output": "The greatest chess players of all time include Garry Kasparov, Magnus Carlsen, and Bobby Fischer.", "category": "IT"}, {"instruction": "What is the team that Michael Jordan played?", "input": "", "output": "Chicago Bulls", "category": "IT"}, {"instruction": "Given a reference text about the E.S. Hoyt House, tell me how big the inside of the house is and how many rooms it has.", "input": "The E.S. Hoyt House is a historic house in Red Wing, Minnesota, United States, designed by the firm of Purcell & Elmslie and built in 1913. The house is listed on the National Register of Historic Places. It is also a contributing property to the Red Wing Residential Historic District.[2]\n\nDescription and history\nThe house is one of their more elaborate designs because its owner had a budget that allowed for lavish decoration. The result is comparable to the William Gray Purcell House and the Edward L. Powers House, both in Minneapolis. The horizontal lines of the Prairie School are more pronounced in this house; they are expressed in the bands of art glass windows on both levels and the cantilevered second story.[3] Its owner, E.S. Hoyt, was the president of the Red Wing Stoneware Company.[4]\n\nThe exterior is clad with brick on the first floor and red stucco on the second floor. The house has ten rooms and about 3,600 square feet (330 m2) of floor space. It has 99 diamond-paned art glass windows and a considerable amount of quarter sawn white oak wood ornamentation. The second story of the house is cantilevered over the first story. The entrance opens into a hallway that leads to a library on the left and a living room on the right. The living room, dining room, and an enclosed porch are all stretched across the front of the house and provide plenty of light through the art glass windows. Several of these windows provide panoramic views of the Mississippi River. The kitchen is located behind the dining room, although it has been remodeled since its original design. The second floor of the house has four bedrooms and two bathrooms, several of which have corner windows that expand the sense of space. The maid's room, over the kitchen, had a separate staircase.[", "output": "The E.S. Hoyt House is about 3,600 square feet and has ten rooms.", "category": "IT"}, {"instruction": "Tell me a story in a few sentences about food and how a few short words can make someone hungry", "input": "", "output": "Driving past the Farmer's Market Caf\u00e9 on the Al in Suffolk, England, I saw a sign outside that read, in huge letters, Ham Hock Hash. Nothing else. No other food, no opening times, nothing. Just three little words that launched a thousand U-turns.", "category": "IT"}, {"instruction": "Which inventions of the 20th century had the greatest positive impact on human lifespan?", "input": "", "output": "It would be hard to argue against vaccinations or antibiotics, which have combined to limit or eliminate many life-threatening diseases throughout most of the world, such as polio, tuberculosis, and bacterial infections. Improved labor and delivery practices have significantly cut down maternal and infant morbidity rates. Electricity and synthetic fertilizers have also played key roles in establishing safe and plentiful food supply chains. There are many other examples as well.", "category": "IT"}, {"instruction": "What is the name of the major school of praxiology not developed by Ludwig von Mises", "input": "In philosophy, praxeology or praxiology (/\u02ccpr\u00e6ksi\u02c8\u0252l\u0259d\u0292i/; from Ancient Greek \u03c0\u03c1\u1fb6\u03be\u03b9\u03c2 (praxis) 'deed, action', and -\u03bb\u03bf\u03b3\u03af\u03b1 (-logia) 'study of') is the theory of human action, based on the notion that humans engage in purposeful behavior, contrary to reflexive behavior and other unintentional behavior.\n\nFrench social philosopher Alfred Espinas gave the term its modern meaning, and praxeology was developed independently by two principal groups: the Austrian school, led by Ludwig von Mises, and the Polish school, led by Tadeusz Kotarbi\u0144ski.[1]", "output": "The major school of praxiology not developed by Ludwig von Mises is the Polish school, which was led by Tadeusz Kotarbi\u0144ski.", "category": "IT"}, {"instruction": "Give me a bulleted list of all artists that performers on the Trolls World Tour Soundtrack.", "input": "Trolls World Tour: Original Motion Picture Soundtrack is the soundtrack album to the 2020 DreamWorks Animation film Trolls World Tour, released by RCA Records on March 13, 2020. The soundtrack is produced primarily by singer-songwriter Justin Timberlake.[1] The singles \"The Other Side\" by SZA and Timberlake and \"Don't Slack\" by Anderson .Paak and Timberlake were released prior to the album.[2]\n\nBackground\nAs well as reprising his voice role as Branch in the sequel, Justin Timberlake also served as executive producer for its soundtrack, as he did on the original film's soundtrack, released in 2016. He revealed a handwritten list of the tracks on the soundtrack on his social media on February 13, also tagging the major artists featured on it.[3]\n\nFollowing the plot of the film, in which the Trolls from the first film discover that Trolls around the world are divided by six different types of music (pop, funk, classical, techno, country, and rock), the soundtrack features songs in those genres.[4]\n\nTrack listing\nNo.\tTitle\tWriter(s)\tProducer(s)\tLength\n1.\t\"The Other Side\" (SZA and Justin Timberlake)\t\nSol\u00e1na RoweSarah AaronsJustin TimberlakeLudwig G\u00f6ranssonMax Martin\nTimberlakeG\u00f6ransson\n3:08\n2.\t\"Trolls Wanna Have Good Times\" (Anna Kendrick, Justin Timberlake, James Corden, Ester Dean, Icona Pop, Kenan Thompson and The Pop Trolls)\t\nThompsonBernard EdwardsChristopher HartzDmitry BrillHerbie HancockLady Miss KierG\u00f6ranssonNile RodgersQ-TipRobert HazardTowa Tei\nG\u00f6ransson\t3:25\n3.\t\"Don't Slack\" (Anderson .Paak and Justin Timberlake)\t\nTimberlakeBrandon AndersonG\u00f6ransson\nTimberlakeAnderson .PaakG\u00f6ransson\n2:54\n4.\t\"It's All Love\" (Anderson .Paak, Justin Timberlake, Mary J. Blige and George Clinton)\t\nAndersonJames FauntleroyJoseph ShirleyG\u00f6ransson\nShirleyG\u00f6ransson\n3:35\n5.\t\"Just Sing (Trolls World Tour)\" (Justin Timberlake, Anna Kendrick, Kelly Clarkson, Mary J. Blige, Anderson .Paak and Kenan Thompson)\t\nTimberlakeAaronsG\u00f6ranssonMartin\nTimberlakeG\u00f6ransson\n3:34\n6.\t\"One More Time\" (Anthony Ramos)\t\nThomas BangalterGuy-Manuel de Homem-ChristoAnthony Moore\nG\u00f6ransson\t2:42\n7.\t\"Atomic Dog World Tour Remix\" (George Clinton and Parliament-Funkadelic, Anderson .Paak and Mary J. Blige)\t\nClintonDavid SpradleyGarry ShiderAnderson\nClintonShirleyG\u00f6ransson\n4:17\n8.\t\"Rainbows, Unicorns, Everything Nice\" (Walt Dohrn and Joseph Shirley)\tAidan Jensen\tG\u00f6ransson\t0:12\n9.\t\"Rock N Roll Rules\" (Haim and Ludwig G\u00f6ransson)\t\nAlana HaimDanielle HaimEste HaimG\u00f6ransson\nG\u00f6ransson\t3:10\n10.\t\"Leaving Lonesome Flats\" (Dierks Bentley)\t\nChris StapletonTimberlake\nTimberlakeG\u00f6ransson\n3:10\n11.\t\"Born to Die\" (Kelly Clarkson)\t\nStapletonTimberlake\nTimberlakeG\u00f6ransson\n3:26\n12.\t\"Trolls 2 Many Hits Mashup\" (Anna Kendrick, Justin Timberlake, James Corden, Icona Pop and The Pop Trolls)\t\nAnslem DouglasArmando PerezDonnie WahlbergDan HartmanEmma BuntonYoo Gun-hyungPark Jai-sangDavid ListenbeeMark WahlbergMatthew RoweMelanie BrownMelanie ChrisholmPeter SchroederBiff StannardSandy WilhelmStefan GordySkyler GordyFaheem Najm\nG\u00f6ransson\t1:01\n13.\t\"Barracuda\" (Rachel Bloom)\t\nAnn WilsonMichael DerosierNancy WilsonRoger Fisher\nG\u00f6ransson\t4:06\n14.\t\"Yodel Beat\" (Ludwig G\u00f6ransson)\tG\u00f6ransson\tG\u00f6ransson\t2:50\n15.\t\"Crazy Train\" (Rachel Bloom)\t\nOzzy OsbourneRandy RhoadsBob Daisley\nG\u00f6ransson\t3:15\n16.\t\"I Fall to Pieces\" (Sam Rockwell)\t\nHank CochranHarlan Howard\nG\u00f6ransson\t2:14\n17.\t\"Perfect for Me\" (Justin Timberlake)\t\nTimberlakeKenyon DixonG\u00f6ransson\nTimberlakeG\u00f6ransson\n3:47\n18.\t\"Rock You Like a Hurricane\" (Bloom)\t\nHerman RarebellKlaus MeineRudolf Schenker\nG\u00f6ransson\t3:05\n19.\t\"It's All Love (History of Funk)\" (George Clinton, Mary J. Blige, Anderson .Paak)\t\nAndersonFauntleroyShirleyG\u00f6ransson\nShirleyG\u00f6ransson\n2:10\n20.\t\"Just Sing (Trolls World Tour)\" (Justin Timberlake, Anna Kendrick, James Corden, Kelly Clarkson, George Clinton, Mary J. Blige, Anderson .Paak, Rachel Bloom, Kenan Thompson, Anthony Ramos, Red Velvet, Icona Pop and Sam Rockwell)\t\nS. RoweTimberlakeAaronsG\u00f6ranssonMartin\nTimberlakeG\u00f6ransson\n4:00\nTotal length:\t60:00", "output": "\u2022 (SZA and Justin Timberlake)\n\u2022 (Anna Kendrick, Justin Timberlake, James Corden, Ester Dean, Icona Pop, Kenan Thompson and The Pop Trolls)\n\u2022 (Anderson .Paak and Justin Timberlake)\n\u2022 (Anderson .Paak, Justin Timberlake, Mary J. Blige and George Clinton)\n\u2022 (Trolls World Tour)\" (Justin Timberlake, Anna Kendrick, Kelly Clarkson, Mary J. Blige, Anderson .Paak and Kenan Thompson)\n\u2022 (Anthony Ramos)\n\u2022 (George Clinton and Parliament-Funkadelic, Anderson .Paak and Mary J. Blige)\n\u2022 (Walt Dohrn and Joseph Shirley)\n\u2022 (Haim and Ludwig G\u00f6ransson)\n\u2022 (Dierks Bentley)\n\u2022 (Kelly Clarkson)\n\u2022 (Anna Kendrick, Justin Timberlake, James Corden, Icona Pop and The Pop Trolls)\n\u2022 (Rachel Bloom)\n\u2022 (Ludwig G\u00f6ransson)\n\u2022 (Rachel Bloom)\n\u2022 (Sam Rockwell)\n\u2022 (Justin Timberlake)\n\u2022 (Bloom)\n\u2022 (George Clinton, Mary J. Blige, Anderson .Paak)\n\u2022 (Justin Timberlake, Anna Kendrick, James Corden, Kelly Clarkson, George Clinton, Mary J. Blige, Anderson .Paak, Rachel Bloom, Kenan Thompson, Anthony Ramos, Red Velvet, Icona Pop and Sam Rockwell)", "category": "IT"}, {"instruction": "How much is in a baker's dozen?", "input": "", "output": "A baker's dozen is not 12, it is 13. There is a story for the origin of this practice that dates back to medieval times and bakers throwing in an extra roll or loaf of bread, to avoid being found guilty of cheating their customers based on prices vs quantity of wheat flour sold. In modern times, the practice is more about generosity of your baker; though you might not find a baker who actually gives you 13 when you pay for a dozen donuts.", "category": "IT"}, {"instruction": "Which is the best work from Goethe?", "input": "The most important of Goethe's works produced before he went to Weimar were G\u00f6tz von Berlichingen (1773), a tragedy that was the first work to bring him recognition, and the novel The Sorrows of Young Werther (German: Die Leiden des jungen Werthers) (1774), which gained him enormous fame as a writer in the Sturm und Drang period which marked the early phase of Romanticism. Indeed, Werther is often considered to be the \"spark\" which ignited the movement, and can arguably be called the world's first \"best-seller\". During the years at Weimar before he met Schiller in 1794, he began Wilhelm Meister's Apprenticeship[42] and wrote the dramas Iphigenie auf Tauris (Iphigenia in Tauris),[43] Egmont,[44] and Torquato Tasso[45] and the fable Reineke Fuchs.[46]To the period of his friendship with Schiller belong the conception of Wilhelm Meister's Journeyman Years (the continuation of Wilhelm Meister's Apprenticeship), the idyll of Hermann and Dorothea, the Roman Elegies and the verse drama The Natural Daughter.[47] In the last period, between Schiller's death, in 1805, and his own, appeared Faust Part One (1808), Elective Affinities (1809), the West-Eastern Diwan (an 1819 collection of poems in the Persian style, influenced by the work of Hafez), his autobiographical Aus meinem Leben: Dichtung und Wahrheit (From My Life: Poetry and Truth, published between 1811 and 1833) which covers his early life and ends with his departure for Weimar, his Italian Journey (1816\u201317), and a series of treatises on art. Faust, Part Two was completed before his 1832 death and published posthumously later that year. His writings were immediately influential in literary and artistic circles.[47]", "output": "Assuming that literature is not an exact science and that works cannot be divided into objectively assessable works, such as good, bad or excellent, and that Goethe created a large number of pieces, I will answer the question as follows:\nThe most important works for Goethe are Goetz von Berlichingen and The Sorrows of Young Werther, since these works gave him initial fame in the Sturm und Drang period.", "category": "IT"}, {"instruction": "Why there is no infant rice cereal in the market now?", "input": "", "output": "Because there are more concerns on the arsenic in the rice. And it is a bigger concerns for the babies. FDA says that the rice intake for infants is about three times greater than for adults relative to body weight. So more and more families start to change to other alternatives. infant rice cereal is gone by time.", "category": "IT"}, {"instruction": "What is an isotherm?", "input": "An isotherm is a line that connects points on a map that have the same temperature. Therefore, all points through which an isotherm passes have the same or equal temperatures at the time indicated. An isotherm at 0 \u00b0C is called the freezing level. The term was coined by the Prussian geographer and naturalist Alexander von Humboldt, who as part of his research into the geographical distribution of plants published the first map of isotherms in Paris, in 1817.", "output": "An isotherm is a line that connects points on a map that have the same temperature.", "category": "IT"}, {"instruction": "What is the fastest way to travel between the United States and Croatia?", "input": "", "output": "The fastest way to travel would be by airplane, which would be faster than a boat trip", "category": "IT"}, {"instruction": "Think up 5 different reasons to give my boss to take off work.", "input": "", "output": "Here are 5 different reasons you can give your boss to take off work:\n1. You have to go to your kid's award ceremony\n2. You got food poisoning\n3. The power at your house went out\n4. You car is in the shop and you have no ride to work\n5. Your family made a surprise visit to see you.", "category": "IT"}, {"instruction": "What is used to make the dough of boiled Chinese dumplings?", "input": "", "output": "Wheat is used to make the flour of boiled Chinese dumplings.", "category": "IT"}, {"instruction": "Identify which animal species is alive or extinct: Polacanthus, Olive Ridley Turtle", "input": "", "output": "Olive Ridley Turtle is alive, Polacanthus is extinct.", "category": "IT"}, {"instruction": "What is the difference between natural and real numbers?", "input": "", "output": "Natural numbers include positive whole numbers. For example, 1 and 2 belong to the natural set of numbers. Real numbers include any numbers between minus infinity and plus infinity. Natural numbers are subset of real numbers.", "category": "IT"}, {"instruction": "How many total seats are there?", "input": "Parliamentary elections were held in Norway on 7 October 1957. The result was a victory for the Labour Party, which won 78 of the 150 seats in the Storting. As a result, the Gerhardsen government continued in office.\n\nThis was the last time a single party won a majority of seats on its own in a Norwegian election.", "output": "150 seats", "category": "IT"}, {"instruction": "What is feeding Springfield Reservoir?", "input": "The Broad Brook Canal is a water-supply canal feeding the Springfield Reservoir (a.k.a. the Ludlow Reservoir) in Ludlow, Massachusetts, a public water supply for the city of Springfield, Massachusetts. Its northern segment is also known as the Jabish Canal.\n\nThe canal was first constructed circa 1875. It was 11,960 feet (3,650 m) in length, and fed the Springfield Reservoir at its eastern side with water collected in the Belchertown Reservoir and swamp. This water, however, was thought to be of poor quality, and thus in 1890\u20131891 the canal was extended north through the Belchertown Reservoir to Jabish Brook, east of Broad Brook. After this addition, the canal's total length was about 8 miles (13 km), of which 1,400 feet (430 m) ran through a cast-iron pipe (54 inches in diameter) across the Cherry Valley dam. The entire canal was worked to be 22 feet (6.7 m) wide at the surface, 8 feet (2.4 m) wide at the bottom, with a depth of 4.66 feet (1.42 m).", "output": "The Broad Brook Canal is a water supply canal feeding the Springfield Reservoir also known as Ludlow Reservoir. It is the main water supply for the city of Springfield, Massachusetts. The Broad Brook canal was constructed in 1875 and is 11,960 feet in length.", "category": "IT"}, {"instruction": "Why do some people prefer to drink hot water than cold water?", "input": "", "output": "People live in the north tend to live drinking hot beverages, such as tea or hot coco due to the cold weather in the winter. However, for people who have low tolerance in caffeine, it is better for them to not drink the previously listed beverages. A warm cup of water could help heat up the body, while reduce the intake of caffeine. \n\nAlso, in development areas, cold water source may not be sanitary for people to intake directly. After boiling the water, it kills 99% of germs, and will make it safer for people to drink as well.", "category": "IT"}, {"instruction": "How should I prioritize my time?", "input": "", "output": "There's many ways to do this. A good rule of thumb is - how you spend your time should reflect your priorities. So I'd recommend\n- List out your highest priority goals in the part(s) of your life you're looking to optimize your time eg: time for yourself, time with family, time with friends, time at work etc\n- Do a sanity check on how you spend your time currently and see if it is out of alignment. You'll then know where to make adjustments\n- Periodically (eg: every few months), repeat this exercise to course correct as things change in your life", "category": "IT"}, {"instruction": "Solve the following equation: y = 7x + 2 where x = 2", "input": "", "output": "Sure, we can solve this equation step by step:\n\n1. y = 7(2) + 2\n2. y = 14 + 2\n3. y = 16\n\nThe final answer is 16", "category": "IT"}, {"instruction": "Give me a list of some of the most popular song from 70s Japanese Pop singer, Mariya Takeuchi", "input": "", "output": "1. Plastic Love\n2. Stay with Me\n3. September\n4. Miracle Love\n5. Yume No Tsuzuki", "category": "IT"}, {"instruction": "Classify each of the following as an American coffee shop chain or an American fast-food hamburger restaurant: Starbucks, Dunkin Donuts, McDonald's, In-N-Out, Dutch Bros, Coffee Bean & Tea Leaf, Burger King, Carl's Jr", "input": "", "output": "Coffee shop chain: Starbucks, Dunkin Donuts, Dutch Bros, Coffee Bean & Tea Leaf\nFast-food hamburger restaurant: McDonald's, In-N-Out, Burger King, Carl's Jr", "category": "IT"}, {"instruction": "What is an unsecured loan?", "input": "", "output": "Unsecured loans are monetary loans that are not secured against the borrower's assets.", "category": "IT"}, {"instruction": "How does running slow make you run faster?", "input": "", "output": "There has been a recent shift in thinking about the types of training that makes a distance runner faster while mitigating the risk of injuries.  It has been found that running up to 80% of your  weekly miles at a very comfortable slow pace was optimal for the fastest improvement.  A slow pace can be measured by running at or below 70% of your maximum heart rate (MHR=220 beats per minute minus your age).  For those who don't have a heart rate monitor, another way to measure that you are in this zone is by being able to have a conversation without being out of breath. This \u201crun slow to get faster\" methodology has been embraced by the elite running community and some believe has contributed to the multiple recent world records for both men and women in the middle and long distances.  This has also been shown to have the same effect on beginner runners and had tremendous benefits that resulted in improved overall speed performance, while reducing the risk of injury in getting to your race day.", "category": "IT"}, {"instruction": "Give me a bulleted list of all of the Star Wars movies in order by release date.", "input": "", "output": "1. Episode IV: A New Hope (1977)\n2. Episode V: The Empire Strikes Back (1980)\n3. Episode VI: Return of the Jedi (1983)\n4. Episode I: The Phantom Menace (1999)\n5. Episode II: Attack of the Clones (2002)\n6. Episode III: Revenge of the Sith (2005)\n7. Episode VII: The Force Awakens (2015)", "category": "IT"}, {"instruction": "Given this paragraph about the M26, tell me how many times Hunt finished in the top 3, and explain your reasoning.", "input": "McLaren relied on the M23 during the rest of the season and for the first few races of 1977 until it was deemed necessary that the M26 was to race in light of the wilting performance of its predecessor. The redesigned car made its debut at the Spanish Grand Prix, where it proved to be a solid, if unspectacular performer. James Hunt, who initially hated the car knuckled down to improve the race pace and reliability of the M26, and throughout the season the car's performance improved noticeably. Hunt won three times during the course of the season, and scored two other podium finishes in the second half of the season. Two other potential victories were lost in Austria and Canada through reliability issues when Hunt was leading easily. At season's end, McLaren had scored 69 points and were third in the constructors' championship.", "output": "He placed in the top 3 a total of 5 times, because he won three times and had an additional two podium finishes.", "category": "IT"}, {"instruction": "List all the persons in the text in alphabetical order using their surname: \n\nAt acute times where there is a lot of pressure crossing the Channel, whether that\u2019s on tunnel or ferries, then I think there\u2019s always going to be a backup. I just urge everybody to be a bit patient while the ferry companies work their way through the backlog.\u201d\n\nLater, speaking on the Laura Kuenssberg programme on BBC One, Braverman denied the situation at Dover would repeat itself and blamed \u201cbad weather\u201d.\n\nBut her comments variously attracted ire and ridicule. The Liberal Democrats\u2019 home affairs spokesperson, Alistair Carmichael, said: \u201cThese comments show Suella Braverman is in complete denial about the impact of the Conservative government\u2019s botched deal with Europe on our borders. For Conservative ministers like Braverman, it is always someone else\u2019s fault.\n\n\u201cBusinesses and travellers are being tied up in reams of red tape but ministers are refusing to lift a finger. It shows the Conservative party is out of touch, out of excuses and should be out of power.\u201d\n\nThe former Conservative cabinet minister David Gauke, who was stripped of the Tory whip for rebelling in a Brexit vote, tweeted: \u201cIf we were in the EU, the French would not need to do individual passport checks. If no individual passport checks, the process at Dover would be quicker. The Dover queues are, therefore, partly caused by Brexit. Not a contentious point, surely?\u201d\n\nCaroline Lucas, the Green party MP, described Braverman as being \u201con another planet as usual\u201d. She said that the home secretary\u2019s comments regarding no Brexit link contradicted those expressed by the port\u2019s chief executive. In an interview with the Observer a year ago, Doug Bannister, admitted Brexit was causing longer processing times at the border.", "input": "", "output": "- Doug Bannister\n- Suella Braverman\n- Alistair Carmichael\n- David Gauke\n- Laura Kuenssberg \n- Caroline Lucas", "category": "IT"}, {"instruction": "Classify each of the following as either a quantitative major or qualitative major: English, mathematics, physics, statistics, history, law", "input": "", "output": "Qualitative: English, history, law \nQuantitative: mathematics, physics, statistics", "category": "IT"}, {"instruction": "Who is Richard Wayne Bogosian?", "input": "Richard Wayne Bogosian (born July 18, 1937) is an American diplomat.", "output": "Richard Wayne Bogosian (born July 18, 1937) is an American diplomat. He was the United States Ambassador to Chad from 1990 to 1993 and Niger from 1985 to 1988.\nHe graduated from Tufts College with an A.B. in 1959 and the University of Chicago with a J.D. in 1962. He joined the U.S. Foreign Service in 1962. He oversaw many diplomatic posts, including at the Foreign Service Institute from 1962 to 1963, in the Bureau of Near Eastern and South Asian Affairs at the Department of State in 1963, at the U.S. Embassy in Baghdad, Iraq from 1963 to 1965, at the Foreign Service Institute again in 1965, as vice consul for the U.S. Embassy in Paris, France, from 1966 to 1968, in the Bureau of Near East and South Asian Affairs at the Department of State from 1968 to 1969, in the Bureau for Intelligence and Research at the Department of State from 1969 to 1971, and in the Foreign Service Institute for Economics in 1972.\n\nHe was chief of the economic section at the U.S. Embassy in Kuwait from 1972 to 1976, and Deputy Chief of Mission at the U.S. Embassy in Khartoum, Sudan, from 1976 to 1979. From 1976 to 1979, Bogosian was the chief of the Aviation Negotiations Division. He was the Director of East African Affairs from 1982 to 1985, and was nominated to be the United States Ambassador to Niger on August 1, 1985, by President Ronald Reagan.\nFrom 1988 to 1990 he was the Director of the Office of Monetary Affairs.In 1990, Bogosian became the United States Ambassador to Chad from 1990 to 1993. From 1993 to 1994, he was the Coordinator at the U.S. Liaison Office in Mogadishu, Somalia, and Coordinator for Rwanda and Burundi from 1996 to 1997, after the Rwandan genocide.\n\nBogosian speaks Arabic and French. He is married to Claire Marie Bogosian, and has three children.", "category": "IT"}, {"instruction": "What is Python?", "input": "", "output": "Python is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation via the off-side rule.\n\nPython is dynamically typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. It is often described as a \"batteries included\" language due to its comprehensive standard library.", "category": "IT"}, {"instruction": "When was The White Mandigos band formed?", "input": "The White Mandingos are a rock supergroup from Woodstock, New York consisting of rapper Murs, former Rolling Stone journalist and MTV / VH1 producer Sacha Jenkins and Bad Brains' bassist Darryl Jenifer.[3]\n\nBiography\nThe band was formed in late 2012[4] when Jenkins met up at Jenifer's house in Woodstock to discover if there was anything in common between their respective favourite music genres. They considered their initial collaborations unimpressive, so Jenkins suggested collaborating with Murs, who provided lyrics.[5][6]\n\nTheir first album, The Ghetto Is Tryna Kill Me was released in June 2013, and followed with a short tour of the eastern United States, including gigs in New York's New Museum, Boston and Washington DC.[7] The album is a concept album around Tyrone White, a young black man from a New York City housing project,[1][8] who subsequently obtains a recording contract and gets a white girlfriend.[7] Jenifer and Jenkins have described the album Tommy by The Who as an important influence.[7] Reviewing the album, Baltimore City Paper 's Baynard Woods thought the group \"actually manage to do service to punk and hip hop\" and praised the band's sense of humour, particularly the music video for their first single, \"My First White Girl\".[4] Washington City Paper's Marcus J Moore described the video for the group's \"Warn A Brotha\" as \"a cool ode to skateboarding\".[9]", "output": "The White Mandingos was formed in late 2012, and their first album 'The Guetto is Tryna Kill Me' was released in June 2013.", "category": "IT"}, {"instruction": "Extract what previous provinces Kardzhali a part of in the past", "input": "The territory of Kardzhali province was acquired by Bulgaria during the First Balkan War in 1912. In 1913 the region was organized as the district (\u043e\u043a\u0440\u044a\u0433, okr\u0103g in Bulgarian) of Mestanli. This district was part of Stara Zagora province from 1934 until 1949,[2] then it was transferred to the newly formed Haskovo district. In 1959 Kardzhali became the center of a new district with similar borders to the current province. Between 1987 and 1999, the region was part of Haskovo Province, after which it was restored, now as a province and with slightly changed borders.", "output": "Kardzhali was once a part of Stara Zagora province and Haskovo Province until it was restored in 1999", "category": "IT"}, {"instruction": "how to do a self-diagnose of burning out?", "input": "", "output": "Examples to look out for burning out including: Inability to stop thinking about work even when you\u2019re not at work; Relationships with either co-workers or families and friends suffer; Feeling unexplained aches and pains; You spend lots of money outsourcing various personal tasks; Feeling mentally strained- with no plans for vacations; You wonder where you\u2019ll be in the future.", "category": "IT"}, {"instruction": "What causes mortgage interest rates to rise in the US?", "input": "", "output": "Mortgage rates are tied to many factors including the inflation, economic growth, and the Federal Reserve's (Fed) monetary policy. For instance, if the Fed increases rates, this usually results in increased mortgate rates since banks need to ensure that the loan can achieve better returns than investing in US bonds.", "category": "IT"}, {"instruction": "Give me some movie/tv series to learn English", "input": "", "output": "There are several tv series that can be used to learn English. \n\n1. \"Friends\" is an American television sitcom that lasts ten seasons from Sep 22, 1994 to May 6, 2004. The show revolves around six friends in their 20s and 30s who live in Manhattan, New York City. The language used in Friends is casual and not challenging to understand. Watching Friends to learn English will help you to build up your vocabulary. \n\n2. \"The Big Bang Theory\" is an American television sitcom about two physicists at Caltech who share an apartment and their friends. The show has some challenging English word that requires some domain knowledge to understand. This show is recommended to people who have an intermediate English level.", "category": "IT"}, {"instruction": "Who was Luis Gonzalez de Ubieta", "input": "Luis Gonz\u00e1lez de Ubieta y Gonz\u00e1lez del Campillo (1899 \u2013 1950[1]) was an admiral of the Spanish Republican Navy during the Spanish Civil War. He died in exile as the captain of the Panamanian merchant vessel Chiriqui, refusing to be rescued when the ship under his command sank in the Caribbean Sea not far from Barranquilla.[2]", "output": "Luis Gonzalez de Ubieta y Gonzalez del Campillo (1899 \u2013 1950) was an admiral of the Spanish Republican Navy during the Spanish Civil War. He died in exile as the captain of the Panamanian merchant vessel Chiriqui, refusing to be rescued when the ship under his command sank in the Caribbean Sea not far from Barranquilla.", "category": "IT"}, {"instruction": "What of the following component part of either Data Engineering or  Machine learning? Delta Live Table (DLT), MLFlow, Autoloader, AutoML", "input": "", "output": "Delta Live Table (DLT) is used to Data Engineering, MLFlow is used for Machine Learning, Autoloader is used to Data Engineering, AutoML is used for Machine Learning", "category": "IT"}, {"instruction": "List 10 highest-grossing actors in the world.", "input": "The following are non-definitive lists of the actors with the highest career-film grosses. There are box-office gross revenue lists, which are not adjusted for inflation, as well as lists for the number of box-office ticket sales. Because of the long-term effects of inflation on movie theater ticket prices, a list unadjusted for inflation gives far more weight to later actors.[1] Therefore, the gross revenue lists are largely meaningless for comparing acting careers widely separated in time, as many actors from earlier eras will never appear on a modern unadjusted list, despite their films' achieving higher commercial success when adjusted for price increases.[2]", "output": "The following are non-definitive lists of the actors with the highest career-film grosses. There are box-office gross revenue lists, which are not adjusted for inflation, as well as lists for the number of box-office ticket sales. Because of the long-term effects of inflation on movie theater ticket prices, a list unadjusted for inflation gives far more weight to later actors. Therefore, the gross revenue lists are largely meaningless for comparing acting careers widely separated in time, as many actors from earlier eras will never appear on a modern unadjusted list, despite their films' achieving higher commercial success when adjusted for price increases.\n\nLead roles\nThis list only includes leading roles and lead ensemble roles, including voice acting. The list is updated as of 12 January 2023.\n\nRank\tActor\tWorldwide total[3]\tTop-grossing film\tFilms\tAverage\n1\tScarlett Johansson\t$14,519,031,650\tAvengers: Endgame ($2,794,731,755)\t33\t$439,970,656\n2\tRobert Downey Jr.\t$14,393,065,668\tAvengers: Endgame ($2,794,731,755)\t43\t$334,722,457\n3\tSamuel L. Jackson\t$14,376,505,937\tAvengers: Endgame ($2,794,731,755)\t64\t$224,632,905\n4\tZoe Salda\u00f1a\t$12,805,874,340\tAvatar ($2,899,384,102)\t30\t$426,862,478\n5\tChris Hemsworth\t$11,958,567,765\tAvengers: Endgame ($2,794,731,755)\t25\t$478,342,711\n6\tChris Pratt\t$11,742,796,476\tAvengers: Endgame ($2,794,731,755)\t23\t$510,556,369\n7\tTom Cruise\t$11,547,725,996\tTop Gun: Maverick ($1,487,575,965)\t43\t$268,551,767\n8\tChris Evans\t$11,277,890,989\tAvengers: Endgame ($2,794,731,755)\t29\t$388,892,793\n9\tTom Hanks\t$10,704,310,520\tToy Story 4 ($1,073,064,540)\t55\t$194,623,828\n10\tVin Diesel\t$10,537,096,327\tAvengers: Infinity War ($2,048,359,754)\t27\t$390,262,827", "category": "IT"}, {"instruction": "what is Stoicism", "input": "Stoicism is a school of Hellenistic philosophy founded by Zeno of Citium in Athens in the early 3rd century BCE. It is a philosophy of personal virtue ethics informed by its system of logic and its views on the natural world, asserting that the practice of virtue is both necessary and sufficient to achieve eudaimonia (happiness, lit.\u2009'good spiritedness'): one flourishes by living an ethical life. The Stoics identified the path to eudaimonia with a life spent practicing virtue and living in accordance with nature.\n\nAlongside Aristotelian ethics, the Stoic tradition forms one of the major founding approaches to virtue ethics.[1] The Stoics are especially known for teaching that \"virtue is the only good\" for human beings, and that external things, such as health, wealth, and pleasure, are not good or bad in themselves (adiaphora) but have value as \"material for virtue to act upon\". Many Stoics\u2014such as Seneca and Epictetus\u2014emphasized that because \"virtue is sufficient for happiness\", a sage would be emotionally resilient to misfortune. The Stoics also held that certain destructive emotions resulted from errors of judgment, and they believed people should aim to maintain a will (called prohairesis) that is \"in accordance with nature\". Because of this, the Stoics thought the best indication of an individual's philosophy was not what a person said but how a person behaved.[2] To live a good life, one had to understand the rules of the natural order since they believed everything was rooted in nature.\n\nStoicism flourished throughout the Roman and Greek world until the 3rd century CE, and among its adherents was Emperor Marcus Aurelius. It experienced a decline after Christianity became the state religion in the 4th century CE. Since then, it has seen revivals, notably in the Renaissance (Neostoicism) and in the contemporary era (modern Stoicism).[3]", "output": "Stoicism is a school of Hellenistic philosophy founded by Zeno of Citium in Athens in the early 3rd century BCE. It is a philosophy of personal virtue ethics informed by its system of logic and its views on the natural world, asserting that the practice of virtue is both necessary and sufficient to achieve eudaimonia (happiness, lit.\u2009'good spiritedness'): one flourishes by living an ethical life. The Stoics identified the path to eudaimonia with a life spent practicing virtue and living in accordance with nature.\n\nAlongside Aristotelian ethics, the Stoic tradition forms one of the major founding approaches to virtue ethics.[1] The Stoics are especially known for teaching that \"virtue is the only good\" for human beings, and that external things, such as health, wealth, and pleasure, are not good or bad in themselves (adiaphora) but have value as \"material for virtue to act upon\". Many Stoics\u2014such as Seneca and Epictetus\u2014emphasized that because \"virtue is sufficient for happiness\", a sage would be emotionally resilient to misfortune. The Stoics also held that certain destructive emotions resulted from errors of judgment, and they believed people should aim to maintain a will (called prohairesis) that is \"in accordance with nature\". Because of this, the Stoics thought the best indication of an individual's philosophy was not what a person said but how a person behaved.[2] To live a good life, one had to understand the rules of the natural order since they believed everything was rooted in nature.\n\nStoicism flourished throughout the Roman and Greek world until the 3rd century CE, and among its adherents was Emperor Marcus Aurelius. It experienced a decline after Christianity became the state religion in the 4th century CE. Since then, it has seen revivals, notably in the Renaissance (Neostoicism) and in the contemporary era (modern Stoicism).[3]", "category": "IT"}, {"instruction": "What are really considered the Seven Wonders of the World?", "input": "", "output": "There is a lot of debate and even different classifications have come up to define what are the actual Seven Wonders of the World. There are some that are considered the Seven Ancient Wonders and there are some that are considered the New Seven Wonders, but there seems to be a definitive list of the Seven Wonders which is the following: \nThe Great Wall of China\nThe Taj Mahal\nThe Colosseum\nChichen Itza\nMachu Picchu\nChrist the Redeemer\nPetra", "category": "IT"}, {"instruction": "What are the key benefits of Delta Live Tables?", "input": "", "output": "Here are the key benefits of Delta Live Tables:\n\n1. Enable citizen engineers to self serve and innovate rapidly with simple pipeline development and maintenance \n2. Trust your data with built-in quality controls and data quality monitoring to ensure accurate and useful BI, Data Science, and ML \n3. Scale with automated administration through broader visibility into pipeline operations, automatic error handling, and auto-scaling capabilities\n4. Support a wider variety of use cases by unlocking the development of real-time and incremental data pipelines to a wider audience", "category": "IT"}, {"instruction": "What shape are Philodendron leaves?", "input": "The leaves are usually large and imposing, often lobed or deeply cut, and may be more or less pinnate. They can also be oval, spear-shaped, or in many other possible shape variations. The leaves are borne alternately on the stem. A quality of philodendrons is that they do not have a single type of leaf on the same plant. Instead, they have juvenile leaves and adult leaves, which can be drastically different from one another. The leaves of seedling philodendrons are usually heart-shaped early in the life of the plant. But after it has matured past the seedling stage, the leaves will acquire the typical juvenile leaf's shape and size. Later in the philodendron's life, it starts producing adult leaves, a process called metamorphosis.[8] Most philodendrons go through metamorphosis gradually; there is no immediately distinct difference between juvenile and adult leaves.[9] Aside from being typically much bigger than the juvenile leaves, the shape of adult leaves can be significantly different. In fact, considerable taxonomic difficulty has occurred in the past due to these differences, causing juvenile and adult plants to mistakenly be classified as different species.", "output": "They are spear-shaped", "category": "IT"}, {"instruction": "Please extract Sinclair's awards from this paragraph and list them in bullets in order from oldest to most recent.", "input": "Sinclair has received numerous awards for his research, including the Irving S. Wright Award of Distinction from the American Federation for Aging Research in 2018, the Advance Award in Life Sciences from the Australian government in 2017, and the Australian Society for Medical Research Medal in 2014.[33][34][35][3] In 2014, Sinclair was included in Time 100 as one of the hundred most influential people in the world, and in 2018 he was included in Time magazine's 50 Most Influential People in Health Care.[36][37][38][39] In 2018, Sinclair was made an officer of the Order of Australia (AO) for \"distinguished service to medical research into the biology of ageing and lifespan extension, as a geneticist and academic, to biosecurity initiatives, and as an advocate for the study of science\" (2018 Australia Day Honours).[40]", "output": "-Time's 100 most influential people in the world\n-Australian Society for Medical Research Medal\n-Advance Award in Life Sciences\n-Irving S Wright Award of Distinction\n-Time magazine's 50 Most Influential People in Health Care\n-Officer of the Order of Australia", "category": "IT"}, {"instruction": "Tell me whether the following animals are part of the cat family: ocelot, lion, jackal, caracal, leopard, fox, tiger, lynx.", "input": "", "output": "Ocelot, lion, caracal, leopard, tiger, lynx are all species that are part of the Felidae family (commonly known as cats). Jackals and foxes are part of the Canidae (or dog) family. While the two groups have physical similarities, they also have distinctive physical and behavioral differences.", "category": "IT"}, {"instruction": "Why should you visit Ireland?", "input": "", "output": "Ireland is one of the most beautiful places that I've lived.  It does rain quite a bit but on a sunny day I've never seen a more beautiful place.  The grass is a vivid green and the nature comes to life on those sunny days.  If you like history it's also a great place to explore with various ruins scattered across the country as well as plenty of castles.  Ireland also has some great beaches and while the water is cold it's also refreshing and worth the beauty that you will find while you explore the beaches.  If it's nightlife you are looking for look no further than Temple Bar in Dublin.  The restaurants and pubs are very welcoming with a diverse cuisine that will satisfy anyone's appetite.", "category": "IT"}, {"instruction": "What is the name of the meme crypto coin that Elon Musk made famous?", "input": "", "output": "Elon Musk brought attention to the crypto currency Dogecoin by tweeting the word \"One word: Doge\". This brought the coin into meme status with its value starting at $0.0047 and skyrocketing to $0.7376 by May 2021.", "category": "IT"}, {"instruction": "When was the first bicycle race?", "input": "The first bicycle race is popularly held to have been a 1,200 m (3,900 ft) race on the 31 May 1868 at the Parc de Saint-Cloud, Paris, France. It was won by expatriate Englishman James Moore who rode a wooden bicycle with solid rubber tires. The machine is now on display at the museum in Ely, Cambridgeshire, England.", "output": "It's commonly believed that the first bicycle race was held May 31, 1868 at the Parc de Saint-Cloud, Paris, France.  The race distance was 1,200 m and was won by James Moore, an expatriate Englishman.  Moore rode a wooden bicycle with solid rubber tires.  Moore's bicycle is now on display in a museum in England.", "category": "IT"}, {"instruction": "I want to buy a work monitor which is to be used along with the laptop. What features of monitor should be considered?", "input": "", "output": "Based on type of work \nFor coding or text content creation \n - size 24-28 inch monitor would suffice\n - resolution 1920 * 1080 or lower \n - can be swirled to landscape or portrait mode\n - refresh rate of 60-90 hz\nFor video or game content creation \n - size 28 or higher curved monitors\n - resolution QHD, UHD, 4K\n - refresh rate 120 hz\n - preferable having speakers", "category": "IT"}, {"instruction": "Tell me which one of the following countries are in the European Union: The Netherlands, Switzerland, Germany, Finland, the United Kingdom, Italy, Luxembourg, Turkey, Australia, Vietnam, Canada.", "input": "", "output": "The Netherlands, Germany, Finland, Italy and Luxembourg are in the European Union.\n\nRest of the countries: Switzerland, the United Kingdom, Turkey, Australia, Vietnam and Canada are not a part of the European Union but might have deals allowing them to benefit from the certain conveniences of the European Union such as free trade.\n\nFor example, while Switzerland has very close ties with European Union nations and has similar benefits, they are not a part of the EU. Switzerland enjoys benefits such as freedom of movement of people between the EU member states and Switzerland, this is due to a separate agreement: Agreement on the Free Movement of Persons (AFMP).", "category": "IT"}, {"instruction": "Who is Malcolm X?", "input": "Malcolm X (born Malcolm Little, later el-Hajj Malik el-Shabazz; May 19, 1925 \u2013 February 21, 1965) was an American Muslim minister and human rights activist who was a prominent figure during the civil rights movement. A spokesman for the Nation of Islam until 1964, he was a vocal advocate for Black empowerment and the promotion of Islam within the Black community. A posthumous autobiography, on which he collaborated with Alex Haley, was published in 1965.", "output": "Malcolm X (born Malcolm Little, later el-Hajj Malik el-Shabazz; May 19, 1925 \u2013 February 21, 1965) was an American Muslim minister and human rights activist who was a prominent figure during the civil rights movement. A spokesman for the Nation of Islam until 1964, he was a vocal advocate for Black empowerment and the promotion of Islam within the Black community. A posthumous autobiography, on which he collaborated with Alex Haley, was published in 1965.\n\nMalcolm spent his adolescence living in a series of foster homes or with relatives after his father's death and his mother's hospitalization. He committed various crimes, being sentenced to 10 years in prison in 1946 for larceny and burglary. In prison he joined the Nation of Islam (adopting the name Malcolm X to symbolize his unknown African ancestral surname while discarding \"the White slavemaster name of 'Little'\"), and after his parole in 1952 quickly became one of the organization's most influential leaders. He was the public face of the organization for 12 years, advocating Black empowerment and separation of Black and White Americans, and criticizing Martin Luther King Jr. and the mainstream civil rights movement for its emphasis on nonviolence and racial integration.[2][3] Malcolm X also expressed pride in some of the Nation's social welfare achievements, such as its free drug rehabilitation program. From the 1950s onward, Malcolm X was subjected to surveillance by the Federal Bureau of Investigation (FBI).\n\nIn the 1960s, Malcolm X began to grow disillusioned with the Nation of Islam, as well as with its leader, Elijah Muhammad. He subsequently embraced Sunni Islam and the civil rights movement after completing the Hajj to Mecca, and became known as \"el-Hajj Malik el-Shabazz,\"[4] which roughly translates to \"The Pilgrim Malcolm the Patriarch\".[5][6][7] After a brief period of travel across Africa, he publicly renounced the Nation of Islam and founded the Islamic Muslim Mosque, Inc. (MMI) and the Pan-African Organization of Afro-American Unity (OAAU). Throughout 1964, his conflict with the Nation of Islam intensified, and he was repeatedly sent death threats. On February 21, 1965, he was assassinated in New York City. Three Nation members were charged with the murder and given indeterminate life sentences; in 2021, two of the convictions were vacated. Speculation about the assassination and whether it was conceived or aided by leading or additional members of the Nation, or with law enforcement agencies, has persisted for decades.\n\nA controversial figure accused of preaching racism and violence, Malcolm X is also a widely celebrated figure within African-American and Muslim American communities for his pursuit of racial justice. He was posthumously honored with Malcolm X Day, on which he is commemorated in various cities across the United States. Hundreds of streets and schools in the U.S. have been renamed in his honor, while the Audubon Ballroom, the site of his assassination, was partly redeveloped in 2005 to accommodate the Malcolm X and Dr. Betty Shabazz Memorial and Educational Center.", "category": "IT"}, {"instruction": "What is counterintelligence?", "input": "", "output": "Counterintelligence is an activity aimed at protecting an agency's intelligence program from an opposition's intelligence service.  It includes gathering information and conducting activities to prevent espionage, sabotage, assassinations or other intelligence activities conducted by, for, or on behalf of foreign powers, organizations or persons.", "category": "IT"}, {"instruction": "How does water feel?", "input": "", "output": "Water is typically a fluid at room temperature, as a fluid it feels wet.  As a solid, its ice, which feels hard.  As a gas, its vapor, which feels like a cool mist.", "category": "IT"}, {"instruction": "5 best Resume titles", "input": "", "output": "Savvy & Energetic Director with Robust Skills in Marketing ,PR, IT, Healthcare , Administration\nLicensed FL Attorney and Experienced Educator Seeking Remote Work\nBilingual, dedicated, and proactive with experience in visual communication, office clerk, and CS.\nFlexible Professional with Experience in Account Management and International Consulting\nExperienced customer enthusiast ready to deliver diamond-level service!", "category": "IT"}, {"instruction": "Did Magic Johnson or Larry Bird win more collegiate and professional basketball championships?", "input": "", "output": "Magic Johnson. Magic Johnson has won 6 total which are the 1979 NCAA Championship (defeated Larry Bird), and NBA Championships in 1980, 1982, 1985, 1987 and 1988. Larry Bird has only won three NBA Championships and zero collegiate championships.", "category": "IT"}, {"instruction": "How do you gain muscle?", "input": "", "output": "Gaining muscle mass requires proper exercise and a good diet. A good diet is important to give the body the nutrient it needs in order to sustain muscle growth. On the flip side, properly stressing the muscles will stimulate them to grow. This requires a variance of different exercises to work the muscle group. Otherwise, the muscle will build resistance to an often repeated exercise, and growth for that muscle will plateau.", "category": "IT"}, {"instruction": "What are some tricks to learning a new language?", "input": "", "output": "Learning a new language can be a great challenge. Here are some tips to help you learn a new language:\n1. Turn on Netflix subtitles or dubbing. You'll hear and read how people actually talk, including slang.\n2. Join an online chat group for other people learning your language or find someone in your community to practice speaking with.\n3. Use flash cards to common words and phrases. \n4. Listen to radio or podcasts in your new language.", "category": "IT"}, {"instruction": "What is Hornachuelos?", "input": "", "output": "Hornachuelos is a small, picturesque village in the Southern Region of Spain called Andalusia. It is famous for its ancient history, Roman walls and Natural Park.", "category": "IT"}, {"instruction": "What is WordPress?", "input": "WordPress (WP or WordPress.org) is a free and open-source content management system (CMS) written in hypertext preprocessor (PHP) language and paired with a MySQL or MariaDB database with supported HTTPS. Features include a plugin architecture and a template system, referred to within WordPress as \"Themes\". WordPress was originally created as a blog-publishing system but has evolved to support other web content types including more traditional mailing lists and Internet fora, media galleries, membership sites, learning management systems (LMS) and online stores.", "output": "WordPress is a Content Management System (CMS) written in hypertext preprocessor (PHP). It uses either a MySQL or MariaDB database and has a robust library of WordPress plugins and themes for customization.", "category": "IT"}, {"instruction": "Classify each country as landlocked or not landlocked: China, Bolivia, Paraguay, Morocco, Ireland, Austria, Switzerland", "input": "", "output": "China: Not Landlocked\nBolivia: Landlocked\nParaguay: Landlocked\nMorocco: Not Landlocked\nIreland: Not Landlocked\nAustria: Landlocked\nSwitzerland: Landlocked", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Lummi stick, Timple", "input": "", "output": "Timple is string, Lummi stick is percussion.", "category": "IT"}, {"instruction": "Which onsen villages in Japan are the best to visit for foreign tourists? And what should I do once I'm in an onsen village?", "input": "", "output": "There are many great onsen villages in Japan in which tourists of any nationals can enjoy the experience of bathing in natural hot springs. Some great examples are Hakone, Kusatsu and Nyuto Onsen. Ideally, you would want to spend a day or two in a village as these villages are often located in beautiful nature and offer great opportunities for hiking and walking.", "category": "IT"}, {"instruction": "What genre did the Chicks (formerly the Dixie Chicks) begin their career in?", "input": "", "output": "The Chicks established themselves in the genre of Country Music", "category": "IT"}, {"instruction": "Tell me if these vegetables are or are not green: carrot, courgette, bell pepper, radish, spaghetti squash, onion.", "input": "", "output": "carrot - not green\ncourgette - green\nbell pepper - may be green\nradish - not green\nspaghetti squash - not green\nonion - may be green", "category": "IT"}, {"instruction": "What is a Peloton in a bicycle race?", "input": "", "output": "The peloton in a bicycle race is the group of riders all riding in a tightly grouped formation.  Riding in a group allows riders to save energy by drafting behind riders who are in the front.  When an individual or small group attempts to ride away in front of the peloton it is referred to as a break away.", "category": "IT"}, {"instruction": "can i run for president?", "input": "", "output": "According to the U.S. constitution you must meet the following requirements:\n\n- Be a natural-born citizen of the United States. \n- Be at least 35 years old. \n- Have been a resident of the United States for 14 years.", "category": "IT"}, {"instruction": "Categorize these paint colours as \u201cprimary\u201d, \u201csecondary\u201d, and \u201ctertiary\u201d according to the Quiller color wheel.\n\nCadmium Yellow Light, Permanent Green Light, Viridian Green, Green Blue, Phthalocyanine Blue, Ultramarine Blue, Ultramarine Violet, Magenta, Permanent Rose, Cadmium Red, Cadmium Scarlet, Cadmium Orange", "input": "", "output": "Primary: Cadmium Yellow Light, Phthalocyanine Blue, Permanent Rose\nSecondary: Viridian Green, Ultramarine Violet, Cadmium Scarlet\nTertiary: Permanent Green Light, Green Blue, Ultramarine Blue, Magenta, Cadmium Red, Cadmium Orange", "category": "IT"}, {"instruction": "Tell me whether each food is from a grain or animal: quinoa, millet, couscous, ribeye steak, pork belly, chicken wing", "input": "", "output": "Quinoa: Grain\nMillet: Grain\nCouscous: Grain\nRibeye Steak: Animal\nPork Belly: Animal\nChicken Wing: Animal", "category": "IT"}, {"instruction": "Can you tell if someone has hypothyroidism by looking at their face?", "input": "", "output": "Quite often, symptoms of hypothyroidism can be seen by the appearance of an individual's face or neck. The first and most common symptom is an unusually puffy or swollen face or neck.  Individuals with hypothyroidism may also have thin eyebrows, with the outer portion of the brow either extremely sparse or missing.  Dry skin on the face and neck, persistent acne around the mouth or chin, tired, swollen looking eyes and thinning hair are also common symptoms of hypothyroidism.  If you or someone you know are experiencing any of these symptoms, it's important to be seen by a doctor.", "category": "IT"}, {"instruction": "Will AI replace all human beings?", "input": "", "output": "When I was writing down those words used to train an AI model, I feel funny. Some of my friends expressed concern that AI could soon replace humans and take away all of our jobs. However, I see things differently. I believe that AI has the potential to develop rapidly, and I'm excited to see how it will transform the world in my lifetime. If AI can create more resources, we may be able to live more comfortably and work fewer hours. This could allow us to pursue our passions and interests without worrying so much about survival. Additionally, in the future, humans may be able to live alongside AI, which mean live more longer and stronger.", "category": "IT"}, {"instruction": "Give me a chronological bulleted list based on a timeline of events", "input": "Olson served as a law clerk for Judge Barbara Jacobs Rothstein on the United States District Court for the Western District of Washington for two years immediately after finishing law school. She served as a trial attorney and later Deputy Director of the National Church Arson Task Force in the United States Department of Justice Civil Rights Division from 1992 to 1997. From 1994 to 1997, she also worked part-time as an adjunct professor at George Washington University Law School.\n\nIn 1997, Olson joined the Office of the United States Attorney for the District of Idaho, rising to the rank of Senior Litigation Counsel at the time of her appointment in 2010.[4]\n\nAfter Olson resigned in 2017, she joined the Boise office of Stoel Rives, a law firm that operates in the Pacific Northwest.[5][6] In 2021, Olson was included on a shortlist of possible nominees to succeed Judge B. Lynn Winmill.[7][8]", "output": "* 1992 to 1997: Olson served as a trial attorney and later Deputy Director of the National Church Arson Task Force in the United States Department of Justice Civil Rights Division\n* 1994 to 1997: Olson worked part-time as an adjunct professor at George Washington University Law School\n* 1997: Olson joined the Office of the United States Attorney for the District of Idaho\n* 2010: Olson rose to the rank of Senior Litigation Counsel\n* 2017: Olson resigned\n* 2017: Olson joined the Boise office of Stoel Rives, a law firm that operates in the Pacific Northwest\n* 2021: Olson was included on a shortlist of possible nominees to succeed Judge B. Lynn Winmill", "category": "IT"}, {"instruction": "Did Sir Winston Churchill win the Nobel Peace Prize?", "input": "", "output": "No, Sir Winston Churchill did not win the Nobel Peace Prize. He was nominated for the Nobel Peace Prize twice, in 1945 and in 1950, and did not win it.\nHowever, he did win the Nobel Prize in Literature in 1953.", "category": "IT"}, {"instruction": "Are the Golden State Warriors a good basketball team?", "input": "", "output": "The Golden State Warriors won the most recent NBA championship in 2022.  In the last 8 years they reached the NBA finals 6 times, won 4 championships, and set the record for regular seasons wins with 73.  Stephen Curry, the Warriors best player, also won the NBA Most Valuable Player award twice during that same span.  This success is generally regarded as a dynasty, a term used to describe a dominating team over a long period.\n\nHowever, this season the Warriors have struggled.  Despite winning the most recent NBA championship only 9 months ago, near the end of this regular season they are only a few games above .500.  Their current record is 42-38 as of today, which is only the 13th best record in the NBA out of 30 teams.\n\nThe reason for the drop is not clear.  The Warriors have the same starting lineup as last year with 4 All-Stars and when playing at Home their record is among the best in the league.  However, when playing on the road the Warriors have one of the worst records at 9-30.  A big factor in their road losses is lack of good defense, as opposing teams score considerably more points against the Warriors than when the Warriors play at home.  There seems to be a lack of focus and intensity from the Warriors players on defense in these away games and in the NBA, where the margin between winning and losing is very thin, that has seemed to make the difference.", "category": "IT"}, {"instruction": "What are some fun ways that you could spend time with your family?", "input": "", "output": "There are many different fun activities that you could do with your family. Some examples include going for a walk, visiting a museum, watching a movie, doing an arts and crafts project, playing a board game, or trying a new restaurant. Please note that your decision ought to consider factors such as the ages, health, interests, and available time of the family members.", "category": "IT"}, {"instruction": "What is the Pulitzer Prize for Fiction?", "input": "", "output": "The Pulitzer in Fiction is awarded each year to the American author who published the best novel written in the prior year.", "category": "IT"}, {"instruction": "According to the given paragraph, how do convolutional neural networks avoid overfitting in machine learning?", "input": "In deep learning, a convolutional neural network (CNN) is a class of artificial neural network most commonly applied to analyze visual imagery. CNNs use a mathematical operation called convolution in place of general matrix multiplication in at least one of their layers. They are specifically designed to process pixel data and are used in image recognition and processing. They have applications in image and video recognition, recommender systems, image classification, image segmentation, medical image analysis, natural language processing, brain\u2013computer interfaces, and financial time series.\n\nCNNs are also known as Shift Invariant or Space Invariant Artificial Neural Networks (SIANN), based on the shared-weight architecture of the convolution kernels or filters that slide along input features and provide translation-equivariant responses known as feature maps. Counter-intuitively, most convolutional neural networks are not invariant to translation, due to the downsampling operation they apply to the input.\n\nCNNs are regularized versions of multilayer perceptrons. Multilayer perceptrons are usually fully connected networks, that is, each neuron in one layer is connected to all neurons in the next layer. The \"full connectivity\" of these networks make them prone to overfitting data. Typical ways of regularization, or preventing overfitting, include: penalizing parameters during training (such as weight decay) or trimming connectivity (skipped connections, dropout, etc.) Developing robust datasets also increases the probability that CNNs will learn the generalized principles that characterize a given dataset rather than the biases of a poorly-populated set.", "output": "A Convolutional Neural Network (CNN) has a fully connected layer in which each neuron is connected to every neuron in the next layer, this structure helps to avoid overfitting", "category": "IT"}, {"instruction": "Give me an overview of the different types of SOC reports and what they are used for", "input": "System and Organization Controls (SOC), (also sometimes referred to as service organizations controls) as defined by the American Institute of Certified Public Accountants (AICPA), is the name of a suite of reports produced during an audit. It is intended for use by service organizations (organizations that provide information systems as a service to other organizations) to issue validated reports of internal controls over those information systems to the users of those services. The reports focus on controls grouped into five categories called Trust Service Principles.[1] The AICPA auditing standard Statement on Standards for Attestation Engagements no. 18 (SSAE 18), section 320, \"Reporting on an Examination of Controls at a Service Organization Relevant to User Entities' Internal Control Over Financial Reporting\", defines two levels of reporting, type 1 and type 2. Additional AICPA guidance materials specify three types of reporting: SOC 1, SOC 2, and SOC 3.\n\nTrust Service Principles\nSOC 2 reports focus on controls addressed by five semi-overlapping categories called Trust Service Principles which also support the CIA triad of information security:[1]\n\nSecurity\nFirewalls\nIntrusion detection\nMulti-factor authentication\nAvailability\nPerformance monitoring\nDisaster recovery\nIncident handling\nConfidentiality\nEncryption\nAccess controls\nFirewalls\nProcessing Integrity\nQuality assurance\nProcess monitoring\nAdherence to principle\nPrivacy\nAccess control\nMulti-factor authentication\nEncryption\nReporting\nLevels\nThere are two levels of SOC reports which are also specified by SSAE 18:[1]\n\nType I, which describes a service organization's systems and whether the design of specified controls meet the relevant trust principles. (Are the design and documentation likely to accomplish the goals defined in the report?)\nType II, which also addresses the operational effectiveness of the specified controls over a period of time (usually 9 to 12 months). (Is the implementation appropriate?)\nTypes\nThere are three types of SOC reports.[2]\n\nSOC 1 \u2013 Internal Control over Financial Reporting (ICFR)[3]\nSOC 2 \u2013 Trust Services Criteria[4][5]\nSOC 3 \u2013 Trust Services Criteria for General Use Report[6]\nAdditionally, there are specialized SOC reports for Cybersecurity and Supply Chain.[7]\n\nSOC 1 and SOC 2 reports are intended for a limited audience \u2013 specifically, users with an adequate understanding of the system in question. SOC 3 reports contain less specific information and can be distributed to the general public.", "output": "The different types of SOC reports are SOC 1, SOC 2, and SOC 3. Each report is used for a third party organization to understand the controls of another organization. SOC 1 reports cover controls over financial reporting, SOC 2 reports cover the trust services criteria (security, availability, confidentiality, processing integrity, and privacy), and SOC 3 reports are  general use SOC 2 reports.", "category": "IT"}, {"instruction": "Who played Harry Bosch in the eponymous TV series?", "input": "Detective Hieronymus \"Harry\" Bosch is a fictional character created by American author Michael Connelly. Bosch debuted as the lead character in the 1992 novel The Black Echo, the first in a best-selling police procedural series now numbering 24 novels.\n\nThe novels are more or less coincident in timeframe with the year in which they were published. Harry, as he is commonly known by his associates, is a veteran police homicide detective with the Los Angeles Police Department. He was named after the 15th-century Dutch artist Hieronymus Bosch.\n\nTitus Welliver portrayed the title character from 2015 to 2021 in Bosch, a television series adapted from the novels, and from 2022 in its spin-off series Bosch: Legacy.", "output": "Titus Welliver played Detective Harry Bosch in \"Bosch\" and in \"Bosch:Legacy\".", "category": "IT"}, {"instruction": "Would you typically find each of the following items in a bathroom, bedroom, kitchen or living room? Couch, pillow, dish soap, bedside table, oven, shower, toilet, coffee table, coffee machine", "input": "", "output": "Couch: living room, pillow: bedroom, dish soap: kitchen, bedside table: bedroom, oven: kitchen, shower: bathroom, toilet: bathroom, coffee table: living room, coffee machine: kitchen", "category": "IT"}, {"instruction": "What is Mario Puzo's most famous book?", "input": "", "output": "The Godfather.  Originally published in 1969, is a novel about a fictional crime family in New York.", "category": "IT"}, {"instruction": "what was population of India during Mauryan Era?", "input": "Prehistory to early 19th century\nThe following table lists estimates for the population of India (including what are now Pakistan and Bangladesh) from prehistory up until 1820. It includes estimates and growth rates according to five economic historians, along with interpolated estimates and overall aggregate averages derived from their estimates.[citation needed]\n\nEstimates of historical world population\n\nYear\tAggregate average\tPeriod\tAverage\n % growth\n/ century\nPopulation\t% of World population\n10,000 BC\t1,000\t0.83%\tStone Age\t30.28\n4000 BC\t1,000,000\t30.83%\n2000 BC\t13,000,000\t37.143%\tBronze Age\t26.25\n500 BC\t25,000,000\t41.70%\tIron Age\t\n400 BC\t26,000,000\t43.96%\n200 BC\t31,000,000\t47.63%\tMaurya era\t\n1 AD\t35,000,000\t35.56%\tClassical\nera\t\n200\t41,000,000\t36.15%\n400\t47,000,000\t40%\n500\t50,000,000\t43.58%\n600\t53,000,000\t48.83%\tEarly\nmedieval\nera\t\n700\t60,000,000\t56.67%\n800\t64,000,000\t55%\n900\t70,000,000\t53.34%\n1000\t79,000,000\t30%\n1100\t83,000,000\t35%\tLate\nmedieval\nera\t\n1200\t86,000,000\t36.67%\n1300\t91,000,000\t38.34%\n1400\t97,000,000\t30%\n1500\t105,000,000\t21.67%\n1600\t140,000,000\t23.33%\tEarly modern era\t\n1650\t170,000,000\t26.15%\n1700\t140,000,000\t20%\n1750\t183,000,000\t21.53%\n1800\t200,000,000\t20%\n1820\t210,000,000\t19.09%\nThe population grew from the South Asian Stone Age in 10,000 BC to the Maurya Empire in 200 BC at a steadily increasing growth rate,[19] before population growth slowed down in the Early Medieval Era up to 700 AD, and then started decreasing the up to 1500 AD.[20][21]\n\nUnder Mughal Empire, India experienced a high economic and demographic upsurge,[19] due to Mughal agrarian reforms that intensified agricultural production.[22] 15% of the population lived in urban centres, higher than the percentage of the population in 19th-century British India[23] and contemporary Europe[23] up until the 19th century.[24] Those estimates were criticised by Tim Dyson, who considers them exaggerations. According to Dyson, urbanisation of the Mughal empire was less than 9%[25]\n\nUnder the reign of Akbar (reigned 1556\u20131605) in 1600, the Mughal Empire's urban population was up to 17 million people, larger than the urban population in Europe.[26] By 1700, Mughal India had an urban population of 23 million people, larger than British India's urban population of 22.3 million in 1871.[27] Nizamuddin Ahmad (1551\u20131621) reported that, under Akbar's reign, Mughal India had 120 large cities and 3,200 townships.[23] A number of cities in India had a population between a quarter-million and half-million people,[23] with larger cities including Agra (in Agra Subah) with up to 800,000 people[28] and Dhaka (in Bengal Subah) with over 1 million people.[29] Mughal India also had a large number of villages, with 455,698 villages by the time of Aurangzeb (reigned 1658\u20131707).[26]", "output": "It was around 31,000,000 during Maurya Era (200BC) .", "category": "IT"}, {"instruction": "In which part of Germany is the town Kirchenlamitz located?", "input": "Kirchenlamitz is a town in the district of Wunsiedel, in Bavaria, Germany. It is situated in the Fichtelgebirge, 13 km northwest of Wunsiedel and 19 km south of Hof.", "output": "Bavaria", "category": "IT"}, {"instruction": "How does a zipper work?", "input": "", "output": "A zipper is used to repeatedly open and close two edges of a surface together, typically on garment bags, luggage, coats, and pants. Zippers refer to the system of two surface edges and a slider, where a human pulls the slider one direction to open and another direction to close. The slider interlocks \"teeth\" together to make the surfaces bind when they close, and disconnects the teeth apart when then open. Zippers are usually made from metal or plastic.", "category": "IT"}, {"instruction": "Identify which animal species is alive or extinct: Giant Panda, Oviraptor", "input": "", "output": "Oviraptor is extinct, Giant Panda is alive.", "category": "IT"}, {"instruction": "Tell me whether these cities are in Minnesota, Arizona or neither.", "input": "", "output": "Duluth - Minnesota\nBisbee - Arizona\nBend - Neither\nSt Joseph - Minnesota\nWhy - Arizona\nGuaymas - Neither", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Jingle, Utogardon", "input": "", "output": "Utogardon is string, Jingle is percussion.", "category": "IT"}, {"instruction": "What is Augusta National Golf Club?", "input": "Augusta National Golf Club was founded by Bobby Jones and Clifford Roberts, the course was designed by Jones and Alister MacKenzie[3] and opened for play in 1932.[5] Since 1934, the club has played host to the annual Masters Tournament, one of the four men's major championships in professional golf, and the only major played each year at the same course. It was the top-ranked course in Golf Digest's 2009 list of America's 100 greatest courses[6] and was the number ten-ranked course based on course architecture on Golfweek Magazine's 2011 list of best classic courses in the United States", "output": "Augusta National Golf Club, sometimes referred to as Augusta is a private Golf Club in Augusta Georgia that was opened in 1932.  Augusta is famously known for hosting the Masters Tournament which is one of the four men's major championships in professional golf, and the only major played each year at the same course.", "category": "IT"}, {"instruction": "Based on this paragraph about the Final Fantasy series, who created it?", "input": "Final Fantasy is a Japanese science fantasy anthology media franchise created by Hironobu Sakaguchi and developed and owned by Square Enix (formerly Square). The franchise centers on a series of fantasy and science fantasy role-playing video games. The first game in the series was released in 1987, with 15 numbered main entries having been released to date.", "output": "Hironobu Sakaguchi", "category": "IT"}, {"instruction": "Tell me whether these are part of the judicial, executive, or legislative branch of government: Supreme Court, President, House, Senate", "input": "", "output": "Supreme Court: Judicial\nPresident: Executive\nHouse: Legislative\nSenate: Legislative", "category": "IT"}, {"instruction": "Categorize the following countries based on the language their majority speaks: Iraq, Iran, Turkey, UAE, Qatar, Afghanistan, Syria", "input": "", "output": "Iran and Afghanistan are majority Farsi (or a variation of it) speaking. Turkey is the majority Turkish speaking. Majority of people in Iraq, UAE, Qatar, and Syria speak Arabic. Contrary to the generally held belief that Iran and Afghanistan are a Arabic speaking countries, they are not. Farsi is a totally different language.", "category": "IT"}, {"instruction": "What country has hosted the Olympic Games the most often?", "input": "", "output": "The United States has hosted the Olympic Games 8 times between summer and winter Games.", "category": "IT"}, {"instruction": "What do The Matrix, Point Break, Constantine, and John Wick have in common?", "input": "", "output": "They are all Keanu Reeves movies.", "category": "IT"}, {"instruction": "What is the Von Neumann architecture?", "input": "", "output": "Nearly all modern computers are based on this famous architecture consisting of a central processing unit, a memory for storing instructions and data, and a bus to transmit data between components including input and output devices.", "category": "IT"}, {"instruction": "What is the difference between tennis and pickleball?", "input": "", "output": "Pickleball is a slower-paced game. The court is smaller than a tennis court so there is less ground to cover. Pickleball paddles are lighter than tennis rackets; even the ball itself is lighter. Pickleball is typically easier on your joints compared to tennis. Some believe pickleball is an easier sport to learn.", "category": "IT"}, {"instruction": "Extract all of the names of people in the below text separated by commas and ordered in alphabetical order by first name", "input": "In addition to being well known for articles about scenery, history, and the most distant corners of the world, the magazine has been recognized for its book-like quality and its standard of photography. It was during the tenure of Society President Alexander Graham Bell and editor Gilbert H. Grosvenor (GHG) that the significance of illustration was first emphasized, in spite of criticism from some of the Board of Managers who considered the many illustrations an indicator of an \u201cunscientific\u201d conception of geography. By 1910, photographs had become the magazine's trademark and Grosvenor was constantly on the search for \"dynamical pictures\" as Graham Bell called them, particularly those that provided a sense of motion in a still image. In 1915, GHG began building the group of staff photographers and providing them with advanced tools including the latest darkroom.The magazine began to feature some pages of color photography in the early 1930s, when this technology was still in its early development. During the mid-1930s, Luis Marden (1913\u20132003), a writer and photographer for National Geographic, convinced the magazine to allow its photographers to use the so-called \"miniature\" 35 mm Leica cameras loaded with Kodachrome film over bulkier cameras with heavy glass plates that required the use of tripods.In 1959, the magazine started publishing small photographs on its covers, later becoming larger photographs. National Geographic photography quickly shifted to digital photography for both its printed magazine and its website. In subsequent years, the cover, while keeping its yellow border, shed its oak leaf trim and bare table of contents, to allow for a full page photograph taken for one of the month's articles. Issues of National Geographic are often kept by subscribers for years and re-sold at thrift stores as collectibles. The standard for photography has remained high over the subsequent decades and the magazine is still illustrated with some of the highest-quality photojournalism in the world. In 2006, National Geographic began an international photography competition, with over eighteen countries participating.", "output": "Alexander Graham Bell, Gilbert H. Grosvenor, Luis Marden", "category": "IT"}, {"instruction": "What events did John James Monckton set the world record for?", "input": "John James Monckton (28 October 1938 \u2013 29 June 2017)[1] was an Australian backstroke swimmer who won a silver medal in the 100-metre event at the 1956 Summer Olympics in Melbourne. Although he set multiple world records, he never won an Olympic gold medal.[2]\n\nAn apprentice carpenter from the New England region of New South Wales, Monckton appeared to be primed to win gold at the 1956 Olympics. At the national team camp in Townsville before the games, he became the first person to swim 400-metre backstroke in under five minutes. Although it was not a regularly contested event at international level, it was a promising sign for the event to be included for medal competition in the Olympics. He also set world records in the 110- and 220-yard freestyle events.\n\nAt the Olympics, Monckton was the fastest qualifier in the heats and semifinal, but was upstaged in the final by teammate David Theile.[2]\n\nIn the absence of Theile, who had retired after the Olympics to study medicine at university, Monckton dominated backstroke swimming, winning the 110-yard backstroke event at the 1958 British Empire and Commonwealth Games in Cardiff and also the 4\u00d7110-yard medley relay.[2] Monckton then prepared for another Olympics in 1960 in Rome, with Theile deferring his studies to defend his Olympic title. Monckton again led the qualifying in the heats and semifinals. However, in the final, he misjudged the turn and broke a finger. He limped home in seventh position, with Theile successfully defending his title.[3] Monckton continued competing in the hope of reaching a third Olympics in 1964, but retired after his performances began to deteriorate.\n\nHe married Maureen Giles, an Australian swimmer at the 1956 Olympics.[4]\n\nHe was inducted into the Sport Australia Hall of Fame in 1999.[5]\n\nThe Monckton Aquatic Centre in his hometown of Armidale is named for him.", "output": "John James Monckton set world records for the 400-metre backstroke, 220-yard freestyle and 110-yard freestyle events.", "category": "IT"}, {"instruction": "From the Passage please find out what are the cause of climate change", "input": "In common usage, climate change describes global warming\u2014the ongoing increase in global average temperature\u2014and its effects on Earth's climate system. Climate change in a broader sense also includes previous long-term changes to Earth's climate. The current rise in global average temperature is more rapid than previous changes, and is primarily caused by humans burning fossil fuels.[2][3] Fossil fuel use, deforestation, and some agricultural and industrial practices increase greenhouse gases, notably carbon dioxide and methane.[4] Greenhouse gases absorb some of the heat that the Earth radiates after it warms from sunlight. Larger amounts of these gases trap more heat in Earth's lower atmosphere, causing global warming.\n\nDue to climate change, deserts are expanding, while heat waves and wildfires are becoming more common.[5] Increased warming in the Arctic has contributed to melting permafrost, glacial retreat and sea ice loss.[6] Higher temperatures are also causing more intense storms, droughts, and other weather extremes.[7] Rapid environmental change in mountains, coral reefs, and the Arctic is forcing many species to relocate or become extinct.[8] Even if efforts to minimise future warming are successful, some effects will continue for centuries. These include ocean heating, ocean acidification and sea level rise.[9]", "output": "1. Climate change is primarily caused by humans burning fossil fuels.\n2. Fossil fuel use, \n3. deforestation,\n4.agricultural and industrial practices increase", "category": "IT"}, {"instruction": "Tell me whether these are names of soft drinks or coffee: Starbucks, Peet's, Blue Bottle, Coca-Cola, Sprite, Canada Dry, Pepsi", "input": "", "output": "Starbucks is a brand of coffee\nPeet's is a brand of coffee\nBlue Bottle is a brand of coffee\nCoca-Cola is a soft drink\nSprite is a soft drink\nCanada Dry is a soft drink\nPepsi is a soft drink", "category": "IT"}, {"instruction": "Please provide a short biography of The Needle from the passage provided.", "input": "The Needle is a fictional character, a mutant supervillain appearing in American comic books published by Marvel Comics. Created by Mark Gruenwald, Carmine Infantino, and Al Gordon, the character first appeared in Spider-Woman #9 (December 1978). Creator Mark Gruenwald brought the character back during his run on the West Coast Avengers as a member of the villain team Night Shift, which included other former Spider-Woman foes.\n\nAfter being mugged one night while leaving work, Josef Saint, an elderly tailor, lost an eye and his ability to speak. While recuperating, he discovered that he has the power to paralyze with his gaze. Seeking revenge, Saint assumed the guise of the vigilante the Needle. Armed with a yard-long needle, the mute villain attacked young men on the streets at night, sewing their mouths shut. After victimizing S.H.I.E.L.D. agent Jerry Hunt, the Needle incurred the wrath of Spider-Woman, the agent's girlfriend, and she took him out with a close-range venom blast. He was subsequently arrested.\n\nWith other superhuman adventurers and criminals, the Needle was imprisoned by the Locksmith, but then freed by Spider-Woman.\n\nThe Needle joined the Night Shift, and teamed with Captain America against the Power Broker and his augmented mutates. Alongside the Night Shift, he tested Moon Knight to take over as the leader of the Night Shift. Later, alongside the Night Shift, he battled the West Coast Avengers. Alongside the Night Shift, the second Hangman, and Satannish, he battled the Avengers West Coast; his abilities had been enhanced by Satannish's black magic.\n\nThe Needle was later defeated by Armory.\n\nNeedle appears with the Night Shift, as part of the Hood's gang. They battle the Midnight Sons, and Needle impales Daimon Hellstrom with his needle, before Jennifer Kale knocks him off with a spell. He and the Night Shift are killed when the zombie virus mutates and becomes airborne. The virus cloud begins to rain blood, and reanimates the Night Shift as zombies. Dormammu assumes control of the Night Shift and uses them to fight the Midnight Sons. When Jennifer Kale and the Black Talon contain the virus within the Zombie (Simon Garth), the Night Shift members are apparently restored to normal, and the Hood teleports away with them.", "output": "The Needle is a mutant supervillain created by Mark Gruenwald, Carmine Infantino, and Al Gordon. He first appeared in Spider-Woman #9 (December 1978) and was brought back during his run on the West Coast Avengers as a member of the villain team Night Shift. He was imprisoned by the Locksmith and freed by Spider-Woman. He joined the Night Shift and teamed with Captain America against the Power Broker and his augmented mutates. He also battled the West Coast Avengers, the second Hangman, and Satannish.\n\nHe was later defeated by Armory. Needle appears with the Night Shift, as part of the Hood's gang, and they battle the Midnight Sons. They are killed when the zombie virus mutates and becomes airborne. Dormammu assumes control of the Night Shift and uses them to fight the Midnight Sons. When Jennifer Kale and the Black Talon contain the virus within the Zombie, the Night Shift members are restored to normal and the Hood teleports away with them.", "category": "IT"}, {"instruction": "From the passage identify the most common colloquial terms for dismissal in the United States and United Kingdom. Display the results in comma separated format.", "input": "Termination of employment or separation of employment is an employee's departure from a job and the end of an employee's duration with an employer. Termination may be voluntary on the employee's part, or it may be at the hands of the employer, often in the form of dismissal (firing) or a layoff. Dismissal or firing is usually thought to be the employee's fault, whereas a layoff is generally done for business reasons (for instance, a business slowdown, or an economic downturn) outside the employee's performance.\n\nFiring carries a stigma in many cultures and may hinder the jobseeker's chances of finding new employment, particularly if they have been terminated from a previous job. Jobseekers sometimes do not mention jobs from which they were fired on their resumes; accordingly, unexplained gaps in employment, and refusal or failure to contact previous employers are often regarded as \"red flags\".[1]\n\nDismissal is when the employer chooses to require the employee to leave, usually for the reason that is the employee's fault. The most common colloquial terms for dismissal in the United States are \"getting fired\" or \"getting canned\" whereas in the United Kingdom the terms \"getting the sack\" or \"getting sacked\" are also used.", "output": "getting fired, getting canned, getting the sack, getting sacked", "category": "IT"}, {"instruction": "What is a good city to visit in Michigan in the summer?", "input": "", "output": "Michigan is well known for the variety of activities it offers year round. In the summer, camping, golfing, bicycling, hiking and swimming are some of the popular activities locals and visitors enjoy. While there are many great cities in the state that cater to these and other activities, a perennial favorite is Traverse City. Traverse City is located on the western side of Michigan right on Lake Michigan and Grand Traverse Bay. This side of Michigan is often referred to as the Middle or Third Coast given the abundant shoreline. Traverse City is known for ease of access to all of the activities listed above as well as offering a small town feel with larger city amenities. There are also numerous cities and destinations all within a day\u2019s drive including the famous Sleeping Bear Sand Dunes national lakeshore. The western side of Michigan is also known for its wine production and Traverse City has over 30 wineries within a 30 minute drive. Throughout the summer, Traverse City hosts many events, the most famous being the National Cherry Festival as Michigan is the largest tart cherry producing state in the US.", "category": "IT"}, {"instruction": "Given this paragraph about Dartmouth College traditions, which homecoming-related traditions are illegal?", "input": "Dartmouth Night starts the college's traditional \"Homecoming\" weekend with an evening of speeches, a parade, and a bonfire. Traditionally, the freshman class builds the bonfire and then runs around it a set number of times in concordance with their class year; the class of 2009 performed 109 circuits, the class of 1999 performed 99, etc. The College officially discourages a number of student traditions of varying degrees of antiquity. During the circling of the bonfire, upperclassmen encourage the freshmen to \"touch the fire\", an action legally considered trespassing and prohibited by police officials present. At halftime of the Homecoming football game on the Saturday of the weekend, some upperclassmen encourage freshman to \"rush the field\", although no upperclassman has seen a significant rush since several injuries sustained during the 1986 rush prompted the school to ban the practice. Among the two or three students who sometimes run across the field, those who are arrested are charged with trespassing (the independent newspaper The Dartmouth Review claimed to set up a fund to automatically pay any fines associated with freshman who rush the field.) However, in 2012 this was proven false when two students rushed the field and were arrested for disorderly conduct. The Dartmouth Review ignored their emails until finally replying and denying that this fund had ever existed. These students then had to pay $300 fines out of pocket. For the 2011 Homecoming game, however, over 40 members of the Class of 2015 rushed the field at homecoming without any action taken by Safety and Security or the Hanover Police Department.", "output": "Touching the bonfire, and rushing the football field during halftime of the homecoming game", "category": "IT"}, {"instruction": "Please write a bulleted list of the key people involved in the construction of the Amsterdam Centraal station, and their role in the project.", "input": "Amsterdam Centraal was designed by Pierre Cuypers, who is also known for his design of the Rijksmuseum in Amsterdam. While Cuypers was the principal architect, it is believed that he focused mostly on the decoration of the station building and left the structural design to railway engineers.[4] The station was built by contractor Philipp Holzmann. The new central station replaced Amsterdam Willemspoort Station, which had closed in 1878, as well as the temporary Westerdok Station used from 1878 to 1889. The idea for a central station came from Johan Rudolph Thorbecke, then the Netherlands Minister of the Interior and responsible for the national railways, who, in 1884, laid two proposals before the Amsterdam municipal council. In the first proposal, the station would be situated between the Leidseplein and the Amstel river. In the other, it would be built in the open harbour front allowing for the station to be connected to the existing main lines in the area to the west and the south, but also to a projected new northern line.", "output": "The key people involved in the construction of Amsterdam Centraal station were:\n- Pierre Cuypers: designer\n- Philipp Holzmann: building contractor\n- Johan Rudolph Thorbecke: proposer", "category": "IT"}, {"instruction": "Based on the passage provided in which years the movie named 'A star is Born' was released?", "input": "A Star Is Born (1937 film), starring Janet Gaynor and Fredric March, directed by William A. Wellman\nA Star Is Born (1954 film), starring Judy Garland and James Mason, directed by George Cukor\nA Star Is Born (1976 film), starring Barbra Streisand and Kris Kristofferson, directed by Frank Pierson\nA Star Is Born (2018 film), starring Lady Gaga and Bradley Cooper, directed by Bradley Cooper", "output": "1937, 1954, 1976 and 2018.", "category": "IT"}, {"instruction": "What causes ocean tides?", "input": "", "output": "Tides are very long waves moving across the ocean and are caused by the gravitational forces exerted on the earth by the moon. When the highest point in the long-period wave reaches a shoreline the area experiences high tide. When the lowest point of the wave, the trough, reaches shore the area experiences low tide. The earth is mostly water and the water \"points\" at the moon, the parts of the Earth experiencing high tide is the water drawing towards the moon. The \"pointing\" water that faces the moon is formed because the gravitational pull of the moon is strongest on whichever side of the Earth faces it. Gravity pulls the ocean towards the moon and high tide occurs.\n\nThe bulge on the far side of the Earth is caused by inertia. The water moving away from the moon resists the gravitational forces that attempt to pull it in the opposite direction. Because the gravitational pull of the moon is weaker on the far side of the Earth, inertia wins, the ocean bulges out and high tide occurs. As the Earth spins, different areas of the planet face the moon, and this rotation causes the tides to cycle around the planet.", "category": "IT"}, {"instruction": "Given these paragraphs about Large language models, when was the first model in OpenAI's GPT series trained?", "input": "A large language model (LLM) is a language model consisting of a neural network with many parameters (typically billions of weights or more), trained on large quantities of unlabelled text using self-supervised learning. LLMs emerged around 2018 and perform well at a wide variety of tasks. This has shifted the focus of natural language processing research away from the previous paradigm of training specialized supervised models for specific tasks.\n\nProperties\nThough the term large language model has no formal definition, it often refers to deep learning models having a parameter count on the order of billions or more. LLMs are general purpose models which excel at a wide range of tasks, as opposed to being trained for one specific task (such as sentiment analysis, named entity recognition, or mathematical reasoning). The skill with which they accomplish tasks, and the range of tasks at which they are capable, seems to be a function of the amount of resources (data, parameter-size, computing power) devoted to them, in a way that is not dependent on additional breakthroughs in design.\n\nThough trained on simple tasks along the lines of predicting the next word in a sentence, neural language models with sufficient training and parameter counts are found to capture much of the syntax and semantics of human language. In addition, large language models demonstrate considerable general knowledge about the world, and are able to \"memorize\" a great quantity of facts during training.\n\nHallucinations\nMain article: Hallucination (artificial intelligence)\nIn artificial intelligence in general, and in large language models in particular, a \"hallucination\" is a confident response that does not seem to be justified by the model's training data.\n\nEmergent abilities\n\nOn a number of natural language benchmarks involving tasks such as question answering, models perform no better than random chance until they reach a certain scale (in this case, measured by training computation), at which point their performance sharply increases. These are examples of emergent abilities.\nUnpredictable abilities that have been observed in large language models but that were not present in simpler models (and that were not explicitly designed into the model) are usually called \"emergent abilities\". Researchers note that such abilities \"cannot be predicted simply by extrapolating the performance of smaller models\". These abilities are discovered rather than programmed-in or designed, in some cases only after the LLM has been publicly deployed. Hundreds of emergent abilities have been described. Examples include multi-step arithmetic, taking college-level exams, identifying the intended meaning of a word, chain-of-thought prompting, decoding the International Phonetic Alphabet, unscrambling a word\u2019s letters, identifying offensive content in paragraphs of Hinglish (a combination of Hindi and English), and generating a similar English equivalent of Kiswahili proverbs.\n\nArchitecture and training\nLarge language models have most commonly used the transformer architecture, which, since 2018, has become the standard deep learning technique for sequential data (previously, recurrent architectures such as the LSTM were most common). LLMs are trained in an unsupervised manner on unannotated text. A left-to-right transformer is trained to maximize the probability assigned to the next word in the training data, given the previous context. Alternatively, an LLM may use a bidirectional transformer (as in the example of BERT), which assigns a probability distribution over words given access to both preceding and following context. In addition to the task of predicting the next word or \"filling in the blanks\", LLMs may be trained on auxiliary tasks which test their understanding of the data distribution such as Next Sentence Prediction (NSP), in which pairs of sentences are presented and the model must predict whether they appear side-by-side in the training corpus.\n\nThe earliest LLMs were trained on corpora having on the order of billions of words. The first model in OpenAI's GPT series was trained in 2018 on BookCorpus, consisting of 985 million words. In the same year, BERT was trained on a combination of BookCorpus and English Wikipedia, totalling 3.3 billion words. In the years since then, training corpora for LLMs have increased by orders of magnitude, reaching up to hundreds of billions or trillions of tokens.\n\nLLMs are computationally expensive to train. A 2020 study estimated the cost of training a 1.5 billion parameter model (1-2 orders of magnitude smaller than the state of the art at the time) at $1.6 million.\n\nA 2020 analysis found that neural language models' capability (as measured by training loss) increased smoothly in a power law relationship with number of parameters, quantity of training data, and computation used for training. These relationships were tested over a wide range of values (up to seven orders of magnitude) and no attenuation of the relationship was observed at the highest end of the range (including for network sizes up to trillions of parameters).\n\nApplication to downstream tasks\nBetween 2018 and 2020, the standard method for harnessing an LLM for a specific natural language processing (NLP) task was to fine tune the model with additional task-specific training. It has subsequently been found that more powerful LLMs such as GPT-3 can solve tasks without additional training via \"prompting\" techniques, in which the problem to be solved is presented to the model as a text prompt, possibly with some textual examples of similar problems and their solutions.\n\nFine-tuning\nMain article: Fine-tuning (machine learning)\nFine-tuning is the practice of modifying an existing pretrained language model by training it (in a supervised fashion) on a specific task (e.g. sentiment analysis, named entity recognition, or part-of-speech tagging). It is a form of transfer learning. It generally involves the introduction of a new set of weights connecting the final layer of the language model to the output of the downstream task. The original weights of the language model may be \"frozen\", such that only the new layer of weights connecting them to the output are learned during training. Alternatively, the original weights may receive small updates (possibly with earlier layers frozen).\n\nPrompting\nSee also: Prompt engineering and Few-shot learning (natural language processing)\nIn the prompting paradigm, popularized by GPT-3, the problem to be solved is formulated via a text prompt, which the model must solve by providing a completion (via inference). In \"few-shot prompting\", the prompt includes a small number of examples of similar (problem, solution) pairs. For example, a sentiment analysis task of labelling the sentiment of a movie review could be prompted as follows:\n\nReview: This movie stinks.\nSentiment: negative\n\nReview: This movie is fantastic!\nSentiment:\n\nIf the model outputs \"positive\", then it has correctly solved the task. In zero-shot prompting, no solve examples are provided. An example of a zero-shot prompt for the same sentiment analysis task would be \"The sentiment associated with the movie review 'This movie is fantastic!' is\".\n\nFew-shot performance of LLMs has been shown to achieve competitive results on NLP tasks, sometimes surpassing prior state-of-the-art fine-tuning approaches. Examples of such NLP tasks are translation, question answering, cloze tasks, unscrambling words, and using a novel word in a sentence. The creation and optimisation of such prompts is called prompt engineering.\n\nInstruction tuning\nInstruction tuning is a form of fine-tuning designed to facilitate more natural and accurate zero-shot prompting interactions. Given a text input, a pretrained language model will generate a completion which matches the distribution of text on which it was trained. A naive language model given the prompt \"Write an essay about the main themes of Hamlet.\" might provide a completion such as \"A late penalty of 10% per day will be applied to submissions received after March 17.\" In instruction tuning, the language model is trained on many examples of tasks formulated as natural language instructions, along with appropriate responses. Various techniques for instruction tuning have been applied in practice. OpenAI's InstructGPT protocol involves supervised fine-tuning on a dataset of human-generated (prompt, response) pairs, followed by reinforcement learning from human feedback (RLHF), in which a reward function was learned based on a dataset of human preferences. Another technique, \"self-instruct\", fine-tunes the language model on a training set of examples which are themselves generated by an LLM (bootstrapped from a small initial set of human-generated examples).\n\nhttps://en.wikipedia.org/wiki/Large_language_model", "output": "2018.", "category": "IT"}, {"instruction": "Why is a higher interest rate on my home worse?", "input": "", "output": "Getting a higher interest rate on a home loan increases the payments on your loan. Over time, a higher interest rate can greatly increase the amount that you pay to your lender. However, a silver lining might be the lower home prices that often accompany higher interest rates. It\u2019s possible that refinancing after interest rates drop might provide an opportunity to pay less on your loan down the road.", "category": "IT"}, {"instruction": "What is the most famous 'Running of the Bulls' event?", "input": "A running of the bulls (Spanish: encierro, from the verb encerrar, 'to corral, to enclose'; Occitan: abrivado, literally 'haste, momentum'; Catalan: correbous, 'run-bulls') is an event that involves running in front of a small group of bulls, typically six but sometimes ten or more, that have been let loose on sectioned-off streets in a town, usually as part of a summertime festival. Particular breeds of cattle may be favored, such as the toro bravo in Spain, also often used in post-run bullfighting, and Camargue cattle in Occitan France, which are not fought. Bulls (non-castrated male cattle) are typically used in such events.\n\nThe most famous bull-run is the encierro held in Pamplona during the nine-day festival of Sanfermines in honor of Saint Fermin. It has become a major global tourism event, today very different from the traditional, local festival. More traditional summer bull-runs are held in other places such as towns and villages across Spain and Portugal, in some cities in Mexico, and in the Occitan (Camargue) region of southern France. Bull-running was formerly also practiced in rural England, most famously at Stamford until 1837.", "output": "The most famous 'Running of the Bulls' event is held annually in Pamplona Spain during the nine-day festival of Sanfermines in honor of Saint Fermin.", "category": "IT"}, {"instruction": "Based on this paragraph, what was the main focus of Mohammad Shah I's reign over his sultanate?", "input": "When Mohammad inherited the newly born sultanate from his father Alauddin, the land was still infested with thieves and robbers. As such he spent the entire part of his reign in establishing law in his land. He ordered his governors to never give refuge to anyone who defied his authority. This campaign was successful and at the end of his reign,the land became peaceful and law abiding. He also sat on the takht-\u0113-firoza or The Turquoise throne which was gifted to him by Kapaya Nayaka.[5]", "output": "Mohammad was mainly focused on establishing law and order within his territory during his reign in order to remove thieves and robbers.", "category": "IT"}, {"instruction": "What are some examples of CPU architectures that do not use a dedicated flag register?", "input": "Some CPU architectures, such as the MIPS and Alpha, do not use a dedicated flag register. Others do not implicitly set and/or read flags. Such machines either do not pass implicit status information between instructions at all, or they pass it in an explicitly selected general purpose register.", "output": "Some examples of CPU architectures that do not use a dedicated flag register include MIPS and Alpha.", "category": "IT"}, {"instruction": "Share the best 7 European Cities for Nightlife", "input": "", "output": "1. Berlin \n2. Amsterdam\n3. Prague\n4. Budapest\n5. Dublin \n6. London\n7. Barcelona", "category": "IT"}, {"instruction": "Where do bears live?", "input": "", "output": "Bears are native to every continent on earth besides Antarctica. Polar bears live in the Arctic, black bears live in North America and Asia, brown bears live in North America, Asia, and Europe, and Panda bears live in Asia.", "category": "IT"}, {"instruction": "What is Ana Mar\u00eda Gonzalez famous for", "input": "Ana Mar\u00eda Gonz\u00e1lez (born 13 April 1951[1]) is a Spanish lyric soprano trained in Argentina, known for performing at the Teatro Col\u00f3n from 1973 to 1994. Although associated with the Italian lyric repertoire, she also excelled in lyric soprano roles of the French repertoire such as Manon, Marguerite, and Juliette, which brought her international fame.[2]", "output": "Ana Mar\u00eda Gonzalez (born 13 April 1951[1]) is a Spanish lyric soprano trained in Argentina, known for performing at the Teatro Col\u00f3n from 1973 to 1994. Although associated with the Italian lyric repertoire, she also excelled in lyric soprano roles of the French repertoire such as Manon, Marguerite, and Juliette, which brought her international fame.", "category": "IT"}, {"instruction": "What is the capital city of Malaysia?", "input": "", "output": "The capital city of Malaysia is Kuala Lumpur.", "category": "IT"}, {"instruction": "Give me the TLDR on using llamas to guard my livestock.", "input": "Using llamas as livestock guards in North America began in the early 1980s, and some sheep producers have used llamas successfully since then. Some would even use them to guard their smaller cousins, the alpaca.[37][38] They are used most commonly in the western regions of the United States, where larger predators, such as coyotes and feral dogs, are prevalent. Typically, a single gelding (castrated male) is used.\n\nResearch suggests the use of multiple guard llamas is not as effective as one. Multiple males tend to bond with one another, rather than with the livestock, and may ignore the flock. A gelded male of two years of age bonds closely with its new charges and is instinctively very effective in preventing predation. Some llamas appear to bond more quickly to sheep or goats if they are introduced just prior to lambing. Many sheep and goat producers indicate a special bond quickly develops between lambs and their guard llama and the llama is particularly protective of the lambs.\n\nUsing llamas as guards has reduced the losses to predators for many producers. The value of the livestock saved each year more than exceeds the purchase cost and annual maintenance of a llama. Although not every llama is suited to the job, most are a viable, nonlethal alternative for reducing predation, requiring no training and little care.[39]", "output": "TLDR: LLamas can be used as livestock guards. Typically a single castrated male is the best choice (multiple males will bond with each other instead of bonding with the livestock). Generally llamas are cost effective, require no training and little care.", "category": "IT"}, {"instruction": "Identify which car manufacturer is Chinese or American: Dongfeng, Chrysler", "input": "", "output": "Chrysler is American, Dongfeng is Chinese", "category": "IT"}, {"instruction": "Tell me about the football career of Adao", "input": "Carlos Manuel Pereira Pinto (born 3 April 1960), commonly known as Ad\u00e3o, is a Portuguese former footballer who played as a central midfielder.\n\nClub career\nBorn in Chaves, Vila Real District, Ad\u00e3o started his career with hometown club G.D. Chaves, moving to the Primeira Liga in 1980 with Varzim SC. He appeared in only eight games in his first season, which ended in relegation, but helped with 27 and three goals to an immediate promotion.\n\nIn summer 1985, Ad\u00e3o joined Vit\u00f3ria de Guimar\u00e3es. In his second year he played 30 matches as starter and scored twice \u2013 including once in 1\u20130 away win over S.C. Braga in the Minho derby \u2013 as his team finished in third position.\n\nAd\u00e3o signed with C.F. Os Belenenses for 1988\u201389. On 12 October 1988, in that campaign's UEFA Cup, he scored the game's only goal at home against Bayer 04 Leverkusen, as the Lisbon side ousted the title holders 2\u20130 on aggregate.[1] Later in the season he also appeared in the final of the Portuguese Cup, won after beating S.L. Benfica.[2]\n\nAged 30, Ad\u00e3o moved to F.C. Penafiel, spending his last three years (of five overall) in the second division. Over the course of 11 seasons, he amassed top-tier totals of 279 games and 16 goals.", "output": "Carlos Manuel Pereira Pinto (born 3 April 1960), commonly known as Adao, is a Portuguese former footballer who played as a central midfielder.\n\nBorn in Chaves, Vila Real District, Adao started his career with hometown club G.D. Chaves, moving to the Primeira Liga in 1980 with Varzim SC. He appeared in only eight games in his first season, which ended in relegation, but helped with 27 and three goals to an immediate promotion.\n\nIn summer 1985, Adao joined Vitoria de Guimaraes. In his second year he played 30 matches as starter and scored twice \u2013 including once in 1\u20130 away win over S.C. Braga in the Minho derby \u2013 as his team finished in third position.\n\nAdao signed with C.F. Os Belenenses for 1988\u201389. On 12 October 1988, in that campaign's UEFA Cup, he scored the game's only goal at home against Bayer 04 Leverkusen, as the Lisbon side ousted the title holders 2\u20130 on aggregate. Later in the season he also appeared in the final of the Portuguese Cup, won after beating S.L. Benfica.\n\nAged 30, Adao moved to F.C. Penafiel, spending his last three years (of five overall) in the second division. Over the course of 11 seasons, he amassed top-tier totals of 279 games and 16 goals.", "category": "IT"}, {"instruction": "How can I learn to snowboard?", "input": "", "output": "Buying or renting a snowboard, snowboard boots, bindings, snowboard pants, and jacket at your favorite snowboard shop is the first step. Next, check the snow conditions and availability of lessons at the ski resort of your choice. Lift tickets and lessons can be purchased for the day online.  Lastly, drive to the ski resort with your gear, and register to find your snowboard instructor, who will start with lesson basics on how to strap in, stand, stop, and carve your snowboard.", "category": "IT"}, {"instruction": "Write a brief passage arguing for mandating Electric Vehicles (EVs) over gas combustion vehicles in the United States.", "input": "", "output": "Electric Vehicles (EVs) provide several key benefits to the United States over Internal Combustion Engine (ICE) vehicles. Firstly, EVs are powered strictly by electricity, which can be produced by renewable methods such as solar or wind power. Secondly, EVs produce significantly less greenhouse gases than ICEs, which will help reduce our carbon footprint and help improve the effects of climate change. Thirdly, EVs are safer and require less maintenance than ICEs, as there is no engine and less moving parts, and there is not a flammable fuel in the vehicle.", "category": "IT"}, {"instruction": "From the passage provided, extract the low end in Celsius of the optimal coffee extraction temperature range.", "input": "Coffee beans must be ground and brewed to create a beverage. The criteria for choosing a method include flavor and economy. Almost all methods of preparing coffee require that the beans be ground and then mixed with hot water long enough to allow the flavor to emerge but not so long as to draw out bitter compounds. The liquid can be consumed after the spent grounds are removed. Brewing considerations include the fineness of the grind, how the water is used to extract the flavor, the ratio of coffee grounds to water (the brew ratio), additional flavorings such as sugar, milk, and spices, and the technique to be used to separate spent grounds. Optimal coffee extraction occurs between 91 and 96 \u00b0C (196 and 205 \u00b0F). Ideal holding temperatures range from 85 to 88 \u00b0C (185 to 190 \u00b0F) to as high as 93 \u00b0C (199 \u00b0F) and the ideal serving temperature is 68 to 79 \u00b0C (154 to 174 \u00b0F).", "output": "The low end of the optimal coffee extraction temperature range is 91 \u00b0C.", "category": "IT"}, {"instruction": "Tell me if these drinks are alcoholic or not: Coca-Cola, Mountain Dew, Budweiser, Rum, Vodka, Tomato Juice, Orange Juice, Sprite, Tequila, Margarita", "input": "", "output": "Budweiser, Rum, Vodka, Tequila and Margarita are alcoholic beverages", "category": "IT"}, {"instruction": "Given this paragraph about WWII, how many fatalities happened?", "input": "World War II or the Second World War, often abbreviated as WWII or WW2, was a global conflict that lasted from 1939 to 1945. The vast majority of the world's countries, including all of the great powers, fought as part of two opposing military alliances: the Allies and the Axis. Many participants threw their economic, industrial, and scientific capabilities behind this total war, blurring the distinction between civilian and military resources. Aircraft played a major role, enabling the strategic bombing of population centres and the delivery of the only two nuclear weapons ever used in war.\n\nWorld War II was by far the deadliest conflict in history; it resulted in an estimated 70 to 85 million fatalities, mostly among civilians. Tens of millions died due to genocides (including the Holocaust), starvation, massacres, and disease. In the wake of the Axis defeat, Germany and Japan were occupied, and war crimes tribunals were conducted against German and Japanese leaders.\n\nThe causes of World War II are debated, but contributing factors included the Second Italo-Ethiopian War, Spanish Civil War, Second Sino-Japanese War, Soviet\u2013Japanese border conflicts, the rise of fascism in Europe, and European tensions in the aftermath of World War I. World War II is generally considered to have begun on 1 September 1939, when Nazi Germany, under Adolf Hitler, invaded Poland. The United Kingdom and France subsequently declared war on Germany on 3 September. Under the Molotov\u2013Ribbentrop Pact of August 1939, Germany and the Soviet Union had partitioned Poland and marked out their \"spheres of influence\" across Finland, Estonia, Latvia, Lithuania and Romania. From late 1939 to early 1941, in a series of campaigns and treaties, Germany conquered or controlled much of continental Europe, in a military alliance with Italy, Japan and other countries called the Axis. Following the onset of campaigns in North Africa and East Africa, and the fall of France in mid-1940, the war continued primarily between the European Axis powers and the British Empire, with war in the Balkans, the aerial Battle of Britain, the Blitz of the United Kingdom, and the Battle of the Atlantic. On 22 June 1941, Germany led the European Axis powers in an invasion of the Soviet Union, opening the Eastern Front, the largest land theatre of war in history.", "output": "World War II lasted from 1939 to 1945 and was by far the deadliest conflict in history. It is estimated that there were 70-85 million fatalities, mostly among civilians. Tens of millions died due to genocides, starvation, assacres, and disease.", "category": "IT"}, {"instruction": "How to play a forehead in tennis", "input": "", "output": "Let's assume you are an adult and a right-hand player:\n\nFirst, you do split steps, hold the racket with your left hand and put your right hand below your left hand on the racket\nSecond, when the ball just left the racket of your opponent, you rotate yourself so your body faces the right side of the court. Keep looking at the ball and your body steady in the process. You should bend your legs a little bit to lower your center of gravity.\nYou should find your racket on the right side of your body, now hold it loosely with your right hand using a semi-western grip, release your left hand and move it in the direction of the incoming ball. At the same time, step out using your left leg so the distance between your legs is a little bit wider than your shoulders, and keep your center of gravity on your right leg.\nNow the ball starts to bounce and reach its highest point, you are going to hit the ball. You push your right foot to the ground and move your body weight from bottom to front, lower the racket head, and turn your pelvis from right to left at the same time. All of these powers combine into the force toward the front and your right-hand uses it to pull your racket from back to front and hit the ball right at the sweet point of your racket, keep pushing the racket until it reaches a limit where you cannot push any more and then release your racket and let the racket\u2018s inertia lead you from right to left. You should keep turning your body from right to left as well as moving your body weight from back to front until you body is fully facing your opponent and your body weight stands on the front of your left foot. Your shoulder will touch your chin if you do it right. your racket will be on the left side of your body without your control.", "category": "IT"}, {"instruction": "Which of the companies in this list are social media platforms: Twitter, Amazon, Instagram, Square, Venmo, Tiktok, Apple.", "input": "", "output": "In this list, Twitter, Instagram, and Tiktok are social media platforms.", "category": "IT"}, {"instruction": "what is the current location of Voyager 1 spacecraft in the cosmos?", "input": "", "output": "As of the moment when this question was asked, Voyager 1 is 14,798,213,369 miles away from the earth, 14,825,446,288 miles away from the sun. It takes approximately 22 hours for the light to travel in one way direction from Voyager 1 to the planet earth.", "category": "IT"}, {"instruction": "Give me 5 ways to use a ripe avocado", "input": "", "output": "1. Avocado toast (if you\u2019re feeling adventurous, add garlic oil and pepper and use sourdough bread)\n2. Guacamole (possible additives include: garlic, salt, red onions, tomatoes and lime juice) \n3. Diced on your favorite taco \n4. Blended in a smoothie (you can also freeze avocado cubes and add to smoothies later)\n5. Cubed or sliced with a little salt and pepper on a pretzel cracker", "category": "IT"}, {"instruction": "List the ten episode titles from the sixth season of \"Game of Thrones\" in broadcast order.", "input": "", "output": "The Red Woman, Home, Oathbreaker, Book of the Stranger, The Door, Blood of My Blood, The Broken Man, No One, Battle of the Bastards, The Winds of Winter", "category": "IT"}, {"instruction": "What is the largest airline in the world ?", "input": "The largest airlines in the world can be defined in several ways. As of 2022, Delta Air Lines is the largest by revenue, assets value and market capitalization, China Southern Air Holding by passengers carried, American Airlines Group by revenue passenger mile, fleet size, numbers of employees and destinations served, FedEx Express by freight tonne-kilometers, Ryanair by number of routes, Turkish Airlines by number of countries served.", "output": "The largest airlines in the world can be defined in several ways. As of 2022, Delta Air Lines is the largest by revenue, assets value and market capitalization, China Southern Air Holding by passengers carried, American Airlines Group by revenue passenger mile, fleet size, numbers of employees and destinations served, FedEx Express by freight tonne-kilometers, Ryanair by number of routes, Turkish Airlines by number of countries served.", "category": "IT"}, {"instruction": "Name 5 popular musicians", "input": "", "output": "Taylor Swift, Vance Joy, The Script, Coldplay, Lady Gaga", "category": "IT"}, {"instruction": "From this summary, list three ways in which artificial intelligence systems show behavior misaligned human values, covered by Brian Christian in the three sections of his book \"The Alignment Problem\"?", "input": "The book is divided into three sections: Prophecy, Agency, and Normativity. Each section covers researchers and engineers working on different challenges in the alignment of artificial intelligence with human values.\n\nProphecy\nIn the first section, Christian interweaves discussions of the history of artificial intelligence research, particularly the machine learning approach of artificial neural networks such as the Perceptron and AlexNet, with examples of how AI systems can have unintended behavior. He tells the story of Julia Angwin, a journalist whose ProPublica investigation of the COMPAS algorithm, a tool for predicting recidivism among criminal defendants, led to widespread criticism of its accuracy and bias towards certain demographics. One of AI's main alignment challenges is its black box nature (inputs and outputs are identifiable but the transformation process in between is undetermined). The lack of transparency makes it difficult to know where the system is going right and where it is going wrong.\n\nAgency\nIn the second section, Christian similarly interweaves the history of the psychological study of reward, such as behaviorism and dopamine, with the computer science of reinforcement learning, in which AI systems need to develop policy (\"what to do\") in the face of a value function (\"what rewards or punishment to expect\"). He calls the DeepMind AlphaGo and AlphaZero systems \"perhaps the single most impressive achievement in automated curriculum design.\" He also highlights the importance of curiosity, in which reinforcement learners are intrinsically motivated to explore their environment, rather than exclusively seeking the external reward.\n\nNormativity\nThe third section covers training AI through the imitation of human or machine behavior, as well as philosophical debates such as between possibilism and actualism that imply different ideal behavior for AI systems. Of particular importance is inverse reinforcement learning, a broad approach for machines to learn the objective function of a human or another agent. Christian discusses the normative challenges associated with effective altruism and existential risk, including the work of philosophers Toby Ord and William MacAskill who are trying to devise human and machine strategies for navigating the alignment problem as effectively as possible.", "output": "In the first section, Prophecy, the author talks about predictive models making decisions that are difficult to examine and may become discriminative or unfair.\n\nIn the second section, Agency, about reinforcement learning systems, despite some remarkable achievements, are guided nearly exclusively by their objective function, not so much by curiosity to discover the world.\n\nIn the third section, Normativity, inverse reinforcement learning techniques face the challenge of figuring out the objective function of humans.", "category": "IT"}, {"instruction": "How big is the universe?", "input": "", "output": "While the entire size of the universe is unknown, scientists have estimated that the universe is approximately 93 billion light-years in diameter.", "category": "IT"}, {"instruction": "Is it a good idea to have a protein shake after a gym workout? How do I make one?", "input": "", "output": "Most health professionals agree that consuming extra protein with strength training is helpful. Some experts recommend one gram of protein per pound of body weight over the entire day, though there are a variety of studies on the subject with differing recommendations. The recent consensus view is a post-workout recovery meal is a good idea, typically within 30 minutes to two hours of completing strength training. A mix of carbohydrates and protein is recommended. \n\nTo make one for yourself:\n1. Get a good protein source, typically a protein powder. Casein and Whey proteins are popular choices. \n2. Add the protein powder to a shaker. Some are small and handheld; other models use electricity. \n3. Following the instructions on the protein powder, add water or milk. Typically, 4 to 8 oz of liquid for one scoop (30g) of powder. \n4. Optionally add your favorite fruits, such as bananas or strawberries.\n5. Shake things together for around a minute. \n\nEnjoy, but be sure to vary your protein sources as a part of a healthy and balanced diet!", "category": "IT"}, {"instruction": "To which countries have The Netherlands borders with.", "input": "The Netherlands (Dutch: Nederland [\u02c8ne\u02d0d\u0259rl\u0251nt] (listen)), informally Holland,[12][13] is a country located in northwestern Europe with overseas territories in the Caribbean. It is the largest of four constituent countries of the Kingdom of the Netherlands.[14] The Netherlands consists of twelve provinces; it borders Germany to the east, and Belgium to the south, with a North Sea coastline to the north and west. It shares maritime borders with the United Kingdom, Germany and Belgium in the North Sea.[15] The country's official language is Dutch, with West Frisian as a secondary official language in the province of Friesland.[1] Dutch, English and Papiamento are official in the Caribbean territories.[1]\n\nThe four largest cities in the Netherlands are Amsterdam, Rotterdam, The Hague and Utrecht.[16] Amsterdam is the country's most populous city and the nominal capital.[17] The Hague holds the seat of the States General, Cabinet and Supreme Court.[18] The Port of Rotterdam is the busiest seaport in Europe.[19] Schiphol is the busiest airport in the Netherlands, and the third busiest in Europe. The Netherlands is a founding member of the European Union, Eurozone, G10, NATO, OECD, and WTO, as well as a part of the Schengen Area and the trilateral Benelux Union. It hosts several intergovernmental organisations and international courts, many of which are centred in The Hague.[20]\n\nNetherlands literally means \"lower countries\" in reference to its low elevation and flat topography, with nearly 26% falling below sea level.[21] Most of the areas below sea level, known as polders, are the result of land reclamation that began in the 14th century.[22] In the Republican period, which began in 1588, the Netherlands entered a unique era of political, economic, and cultural greatness, ranked among the most powerful and influential in Europe and the world; this period is known as the Dutch Golden Age.[23] During this time, its trading companies, the Dutch East India Company and the Dutch West India Company, established colonies and trading posts all over the world.[24][25]\n\nWith a population of 17.8 million people, all living within a total area of 41,850 km2 (16,160 sq mi)\u2014of which the land area is 33,500 km2 (12,900 sq mi)\u2014the Netherlands is the 16th most densely populated country in the world and the second-most densely populated country in the European Union, with a density of 531 people per square kilometre (1,380 people/sq mi). Nevertheless, it is the world's second-largest exporter of food and agricultural products by value, owing to its fertile soil, mild climate, intensive agriculture, and inventiveness.[26][27][28]\n\nThe Netherlands has been a parliamentary constitutional monarchy with a unitary structure since 1848. The country has a tradition of pillarisation and a long record of social tolerance, having legalised abortion, prostitution and euthanasia, along with maintaining a liberal drug policy. The Netherlands allowed women's suffrage in 1919 and was the first country to legalise same-sex marriage in 2001. Its mixed-market advanced economy has the thirteenth-highest per capita income globally.", "output": "The Netherlands borders Germany to the east, and Belgium to the south, with a North Sea coastline to the north and west. It shares maritime borders with the United Kingdom, Germany and Belgium in the North Sea.", "category": "IT"}, {"instruction": "What are some plastic use reduction ideas", "input": "", "output": "Plastic is a pollutant that won't easily degrade. However; its versatility can't be dismissed and its not easy to get away from its usage in our day to day lives. We can however optimize and reduce the usage. \n1) Invest in a solid reusable grocery bag made out of non plastic material\n2) If you don't have your own reusable grocery bag please insist your grocery store to bag your groceries in paper bags\n3) This may be a surprise to you but the inner lining of canned beverages is plastic. So getting canned beverages may not be a 100% plastic free experience it's a much effective one than having the same beverage in a plastic bottle\n4)  Offices can install filter based water machines rather than storing plastic water bottles.\n5) Invest in a reusable water jug or water bottle to avoid use and throw plastic water bottles", "category": "IT"}, {"instruction": "What is guitar amp modeling?", "input": "", "output": "Guitar amp modeling is a digital technology for reproducing the sound and feel of playing guitar through physical amplifiers.  This technology may be embodied in a piece of outboard gear, or as a software plugin for a digital audio workstation.  In recent years, guitar amp modeling has advanced to the point of being difficult to discern by ear from the sound of the amplifiers being modeled.  Some brands associated with advanced guitar amp modeling include Line 6, Fractal Audio, and Neural DSP.", "category": "IT"}, {"instruction": "Classify each of the following as \"heavy\" or \"light\": elephant, feather, hippo, paper, whale", "input": "", "output": "Elephant: Heavy\nFeather: Light\nHippo: Heavy\nPaper: Light\nWhale: Heavy", "category": "IT"}, {"instruction": "Where should I live in Indiana?", "input": "", "output": "There are many great places to live in Indiana. It depends on what is most important to you. If living near a body of water is important to you, you may want to look in northern Indiana near many lakes and Lake Michigan. If great schools are important to you, you might want to look at Zionsville, Indiana. This city has the best public school system in the state. Lastly, if you want to live near a college campus, you might enjoy a town like Bloomington or West Lafayette to be near Indiana University or Purdue University, respectively.", "category": "IT"}, {"instruction": "Who was Cleopatra's first husband", "input": "", "output": "Ptolemy Dionysus \u2013 her brother", "category": "IT"}, {"instruction": "What is the difference between a bass guitar and a normal guitar?`", "input": "", "output": "A bass guitar typically has four strings which are tuned to G, D, A and E in the standard tuning. A standard guitar, on the other hand, has six strings which are tuned to E, B, G, D, A and E in the standard tuning.", "category": "IT"}, {"instruction": "How is data engineering different from data science?", "input": "", "output": "Data Engineering occurs before data science in the data lifecycle. Data can be generated from various sources and this raw data may be structured, semi structured or even unstructured. To make sense of this data, data has to be ingested and transformed. This is when data engineering comes into picture. Data engineering includes the process of extracting the raw data, ingesting data into a system like a data lake, transforming the data for business needs and finally loading it into a table. This is commonly known as ELT (Extract-Load-Transform). ETL (Extract-Transform-Load) is also possible where transformation happens before the loading stage.\nData Science and Analytics is the next step in the data lifecycle. Once the data needed for specific business need is available, data scientists use this data to run machine learning models to find the most accurate model. This data is available to the data scientists in the form of tables. Data analysts also use this data to do some exploratory analysis and create dashboards. \nIn essence, the data lifecycle would look as follows:\nRaw data from different sources -> Data Engineering -> Data Science and Analytics", "category": "IT"}, {"instruction": "Who was Paramahansa Yogananda?", "input": "Paramahansa Yogananda (born Mukunda Lal Ghosh; January 5, 1893 \u2013 March 7, 1952) was an Indian Hindu monk, yogi and guru who introduced millions to the teachings of meditation and Kriya Yoga through his organization Self-Realization Fellowship (SRF) / Yogoda Satsanga Society (YSS) of India, and who lived his last 32 years in America.[2] A chief disciple of the Bengali yoga guru Swami Sri Yukteswar Giri, he was sent by his lineage to spread the teachings of yoga to the West, to prove the unity between Eastern and Western religions and to preach a balance between Western material growth and Indian spirituality.[3] His long-standing influence in the American yoga movement, and especially the yoga culture of Los Angeles, led him to be considered by yoga experts as the \"Father of Yoga in the West.\"[4][5][6]", "output": "Paramahansa Yogananda was an Indian Hindu monk who introduced large populations of people to the meditation and Kriya Yoga. He organized Self-Realization Fellowship (SRF) / Yogoda Satsanga Society (YSS) of India and was sent by his Guru Swami Sri Yukteswar Giri to the United States to speak the knowledge of Yoga to the West. He was known as  \"Father of Yoga in the West.\"", "category": "IT"}, {"instruction": "Based on the text below, please summarise in a few lines", "input": "Cricket is a bat-and-ball game played between two teams of eleven players on a field at the centre of which is a 22-yard (20-metre) pitch with a wicket at each end, each comprising two bails balanced on three stumps. The batting side scores runs by striking the ball bowled at one of the wickets with the bat and then running between the wickets, while the bowling and fielding side tries to prevent this (by preventing the ball from leaving the field, and getting the ball to either wicket) and dismiss each batter (so they are \"out\"). Means of dismissal include being bowled, when the ball hits the stumps and dislodges the bails, and by the fielding side either catching the ball after it is hit by the bat, but before it hits the ground, or hitting a wicket with the ball before a batter can cross the crease in front of the wicket. When ten batters have been dismissed, the innings ends and the teams swap roles. The game is adjudicated by two umpires, aided by a third umpire and match referee in international matches. They communicate with two off-field scorers who record the match's statistical information.\n\nForms of cricket range from Twenty20, with each team batting for a single innings of 20 overs (each \"over\" being a set of 6 fair opportunities for the batting team to score) and the game generally lasting three hours, to Test matches played over five days. Traditionally cricketers play in all-white kit, but in limited overs cricket they wear club or team colours. In addition to the basic kit, some players wear protective gear to prevent injury caused by the ball, which is a hard, solid spheroid made of compressed leather with a slightly raised sewn seam enclosing a cork core layered with tightly wound string.", "output": "Cricket is a bat-and-ball game played between two teams with\u00a0eleven players each. The game is played in a field with a pitch at the center with wickets at either end. There is a batting team and a bowling team. The game is adjudicated by two on-field umpires, a third umpire, and a referee. There are various forms of the game, starting from Twenty20, which generally lasts up to 3 hours to test cricket, played\u00a0over 5 days.", "category": "IT"}, {"instruction": "What was Freddie Mercury's real name?", "input": "", "output": "Farrokh Bulsara", "category": "IT"}, {"instruction": "How do I optimize my Kafka consumption in Spark for low latency?", "input": "", "output": "You can tune the batch size and processing time to ensure that your Spark job can keep up with the data volume and maintain low latency.", "category": "IT"}, {"instruction": "Who were the major players in the Watergate conspiracy?", "input": "The Watergate scandal was a major political scandal in the United States involving the administration of President Richard Nixon from 1972 to 1974 that led to Nixon's resignation. The scandal stemmed from the Nixon administration's persistent attempts to cover up its involvement in the June 17, 1972 break-in of the Democratic National Committee headquarters at the Washington, D.C., Watergate Office Building.", "output": "The list begins with the President of the United States, Richard Nixon. John Dean served as the Counsel to the President, and was a lead witness whose testimony blew the case wide open, naming many top presidential aides as being closely involved. H.R. Haldeman, John Ehrlichman, and John Mitchell were all senior members of the administration who resigned in disgraced and were convicted. Howard Hunt and G. Gordon Liddy played major roles in the Watergate break-in. \n\nA major figure in the conspiracy was Daniel Ellsberg, but not for any wrongdoing. Rather, he was a target of the Nixon White House, and an attempted burglary of his psychiatrist's office was just one of the illegal acts that the White House covered up.", "category": "IT"}, {"instruction": "Classify each of the following animals as being domesticated or wild: dog, bear, dolphin, cat, cow, hippo, rhino", "input": "", "output": "Dog: Domesticated\nBear: Wild\nDolphin: Wild\nCat: Domesticated\nCow: Domesticated\nHippo: Wild\nRhino: Wild", "category": "IT"}, {"instruction": "Was the Pixie Lott song \"Mama Do\" ever the #1 single?", "input": "\"Mama Do (Uh Oh, Uh Oh)\" debuted at number one on the UK Singles Chart, selling 58,840 downloads in its first week.[15] Lott described her reaction upon learning the song reached number one: \"I was in bed at my mum and dad's, where I still live, in Brentwood, Essex. I was on the laptop, and I got a phone call from my A&R man. He really dragged it out. I said, 'Please put me out of my misery.' And he said, 'I'm really, really sorry but... you're No 1!' I spent the rest of the day running around the house, screaming.\"[16]\n\nThe single was certified silver by the British Phonographic Industry (BPI) on 28 August 2009 for sales in excess of 200,000 copies.[17] Exactly 11 years later, on 28 August 2020, the certification was upgraded to gold for sales and streams of over 400,000.[17] As a result of the single's popularity at the time, the single's iTunes B-side, \"Use Somebody\", debuted and peaked, during the single's release week, on the UK Singles Chart at number 52 on sales of 4,409 downloads.[15]\n\nThe single also had considerable success outside the UK, reaching the top 10 in Denmark and France, and the top 20 in Ireland, Netherlands and New Zealand.[18][19][20]", "output": "\"Mama Do\" debuted at #1 on the UK Singles Chart in its first week and also was successful outside the UK, appearing in the Top 10 in Denmark and France and the Top 20 in Ireland, the Netherlands, and New Zealand. The British Phonographic Industry certified it as Silver the same year it was released and upgraded the certification to Gold eleven years later.", "category": "IT"}, {"instruction": "Are plastic bags and containers bad for the environment?", "input": "", "output": "In short, yes.\n\nSurprisingly, though, that has not always been the consensus, and in some cases, it is not true.\n\nIn the 1970s energy crisis, reducing the weight of materials, and increasing the shelf life of goods (which helps with optimizing transportation methods) were widely lauded as environmentally positive. In short, paper bags weigh more than plastic bags, and transportation requires fossil fuels, and of course fossil fuels impact the environment in widely documented ways.\n\nAlso, some plastics like PET have great recycling track records. So if it reduces energy consumption, increases shelf life, and can be recycled it seems like a huge environmental win.\n\nHowever, plastics are very durable, and now micro-plastics are everywhere. They are in the deepest ocean trenches, accumulated in many species of animals and plants, and will be for our lifetimes. Their toxicity and negative impacts are just beginning to be understood. This has driven the removal of \"single use plastics\" from a lot of commerce, with further reductions called for by environmental groups worldwide.", "category": "IT"}, {"instruction": "What are five totally distinct, creative ways to describe the usefulness of an idle mind?", "input": "", "output": "1. An idle mind is like a garden waiting to be planted with the seeds of creative ideas.\n2. An idle mind is like a blank canvas waiting to be filled with fresh and original thoughts.\n3. An idle mind is like a time machine that can transport us to a different world of possibilities.\n4. An idle mind is like a treasure chest full of hidden riches waiting to be unearthed.\n5. An idle mind is like a garden hose that can irrigate us with ideas and solutions.", "category": "IT"}, {"instruction": "What is an actuary?", "input": "", "output": "An actuary is a specialist in the valuation of the financial impact of risk and uncertainty. They apply statistical techniques and expert industry knowledge. Actuaries usually work in the insurance and banking industries.", "category": "IT"}, {"instruction": "Tell me wether these are cities, or states? IL, chicago, Texas, Fremont, Washington, Washington DC, san jose, bay area", "input": "", "output": "Washington DC, Chicago, Freemont, San jose are cities, and IL, Texas, Washington are US states. Bay area is neither a state nor a city. It is referring to the area in northern CA which consists of multiple cities.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Sabar, Sharud", "input": "", "output": "Sharud is string, Sabar is percussion.", "category": "IT"}, {"instruction": "What is the fastest car?", "input": "", "output": "In 2017, the Koenigsegg Agera RS reached a top speed of 447.19 km/h (277.87 mph).", "category": "IT"}, {"instruction": "When is India's independence day?", "input": "", "output": "India celebrates her independence day on the 15th day of August every year. The prime minister hoists the national flag at red fort and gives a speech to the nation.", "category": "IT"}, {"instruction": "Who won the 63rd staging of the Limerick Senior Hurling Championship?", "input": "On 29 September 1957, Claughaun won the championship after a 7-07 to 3-02 defeat of St. Patrick's in the final.", "output": "The 1957 Limerick Senior Hurling Championship was the 63rd staging of the Limerick Senior Hurling Championship since its establishment by the Limerick County Board in 1887.\n\nCappamore were the defending champions, however, they were defeated by St. Patrick's.\n\nOn 29 September 1957, Claughaun won the championship after a 7-07 to 3-02 defeat of St. Patrick's in the final. It was their sixth championship title overall and their first championship title since 1926.", "category": "IT"}, {"instruction": "Give me a list of 10 different SciFi movies and which year they were released", "input": "", "output": "Independence Day (1999)\nDune (2021)\nSolaris (2002)\nInception (2010)\nGattaca (1997)\nJurassic Park (1993)\nAI Artificial Intelligence (2001)\nThe Matrix (1999)\nThe Terminator (1994)\nStar Wars (1977)", "category": "IT"}, {"instruction": "When did Hungary gain its independence?", "input": "", "output": "Hungary declared independence on October 17, 1918 and officially formed its government on November 1 of that year.", "category": "IT"}, {"instruction": "Why do people enjoy surfing", "input": "", "output": "Surfing is enjoyable because it connects you with the ocean and can often be seen as therapeutic. Additionally surfing can often be a great form of exercise which helps maintain a healthy lifestyle. Lastly, surfing is done in the ocean and typically near a beach. People enjoy the atmosphere and joy the beach brings.", "category": "IT"}, {"instruction": "What is the English Premier League?", "input": "", "output": "The English Premier League is the top flight of men\u2019s football in England. The 38 match season extends from August to May, during which each of 20 teams play a home and away match against each of the other teams. A win earns a team 3 points, a draw is 1 point, and a loss is 0 points. The team with the most points at the end of the season wins. Unlike American sports, there are no playoffs to determine a champion. The 3 teams with the least points are relegated to the second level of English football, The Championship. To fill those spots in the next season, the top 3 teams from The Championship are promoted to the Premier League.", "category": "IT"}, {"instruction": "Who is the 'sole Survivor' on the TV Show Survivor?", "input": "Survivor is a reality-competition television franchise produced in many countries around the world. The show features a group of contestants deliberately marooned in an isolated location, where they must provide basic survival necessities for themselves. The contestants compete in challenges for rewards and immunity from elimination. The contestants are progressively eliminated from the game as they are voted out by their fellow contestants until only one remains to be awarded the grand prize and named the \"Sole Survivor\".", "output": "The contestants are progressively eliminated from the game as they are voted out by their fellow contestants until only one remains to be awarded the grand prize and named the \"Sole Survivor\".", "category": "IT"}, {"instruction": "Why do companies play dividends?", "input": "", "output": "Companies will pay dividends out of their after tax earnings. It's generally done to signal to shareholders that the balance sheet is strong and that growth is expected without the need to reinvest all free cashflow back into the business.", "category": "IT"}, {"instruction": "Which major league baseball season is considered Sid Gordon's breakout year?", "input": "In 1948 Gordon was 3rd in the National League in slugging percentage (.537), 4th in RBIs (107), 5th in home runs (30; a career high) and at-bats per home run (17.4), 6th in runs (100; a career high) and total bases (280), 8th in batting average (.299), 9th in walks (74) and OBP (.390), and 10th in stolen bases (8).[7] He was voted onto the All-Star team for his first time.[7] The Giants held \"Sid Gordon Day\" at the Polo Grounds, and he received a new car, golf clubs, and a set of luggage.[9] July 3 was also dubbed \"Sid Gordon Day\" at Ebbets Field, marking a rare honor for a visiting player.[10] He finished 4th in voting for the 1948 National League MVP.", "output": "Sid Gordon during his second stint with the New York Giants in 1948 had one of the best all around hitting performance seasons in mayor league baseball history.   Gordon finished in the top ten in ten National League offensive performance statistics including third in slugging percentage (.537), 4th in RBIs (107), 5th in home runs (30; a career high) and at-bats per home run (17.4), 6th in runs (100; a career high) and total bases (280), 8th in batting average (.299), 9th in walks (74) and OBP (.390), and 10th in stolen bases (8).  Sid Gordon was also voted to the all-star team and finished 4th in voting for the National League   most valuable player (MVP) award.", "category": "IT"}, {"instruction": "Classify the cities based on whether they are located in Eritrea or Gabon.\nKeren, Franceville, Asmara, Port-Gentil, Assab, Libreville", "input": "", "output": "Eritrea - Asmara, Keren, Assab\nGabon - Libreville, Port-Gentil, Franceville", "category": "IT"}, {"instruction": "What is Depreciation", "input": "", "output": "Depreciation is the drop in value of an asset due to wear and tear, age and obsolescence (going out of date) as recorded in an organization's financial records.", "category": "IT"}, {"instruction": "Give me a list of the last five \"Best New Artist\" Grammy winners.", "input": "", "output": "1. Samara Joy, 2023\n2. Olivia Rodrigo, 2022\n3. Megan Thee Stallion, 2021\n4. Billie Eilish, 2020\n5. Dua Lipa, 2019", "category": "IT"}, {"instruction": "In a bingo game, which number is represented by the phrase \u201ctwo little ducks\u201d?", "input": "", "output": "22", "category": "IT"}, {"instruction": "What is knitting?", "input": "", "output": "Knitting is a craft process of working yarn in interlocking loops (called knit stitches and purl stitches) to create fabric items such as socks, scarves, blankets, hats, etc. Knitted items can be hand crafted or created on a knitting machine.", "category": "IT"}, {"instruction": "Please summarize the timeline of the Chinese Exclusion Act.", "input": "The Chinese Exclusion Act was a United States federal law signed by President Chester A. Arthur on May 6, 1882, prohibiting all immigration of Chinese laborers for 10 years. The law excluded merchants, teachers, students, travelers, and diplomats.[1] The Chinese Exclusion Act was the first and only major U.S. law ever implemented to prevent all members of a specific national group from immigrating to the United States.[2]\n\nPassage of the law was preceded by growing anti-Chinese sentiment and anti-Chinese violence, as well as various policies targeting Chinese migrants.[3] The act followed the Angell Treaty of 1880, a set of revisions to the U.S.\u2013China Burlingame Treaty of 1868 that allowed the U.S. to suspend Chinese immigration. The act was initially intended to last for 10 years, but was renewed and strengthened in 1892 with the Geary Act and made permanent in 1902. These laws attempted to stop all Chinese immigration into the United States for ten years, with exceptions for diplomats, teachers, students, merchants, and travelers. They were widely evaded.[4]\n\nThe law remained in force until the passage of the Magnuson Act in 1943, which repealed the exclusion and allowed 105 Chinese immigrants to enter the United States each year. Chinese immigration later increased with the passage of the Immigration and Nationality Act of 1952, which abolished direct racial barriers, and later by the Immigration and Nationality Act of 1965, which abolished the National Origins Formula.[5]", "output": "The Chinese Exclusion Act was signed on May 6, 1882. The act was initially intended to last for 10 years, but was renewed and strengthened in 1892 with the Geary Act and made permanent in 1902. The law remained in force until the passage of the Magnuson Act in 1943, which repealed the exclusion.", "category": "IT"}, {"instruction": "What are some foods to cook to celebrate St. Patrick's Day?", "input": "", "output": "Most people in Ireland and elsewhere like to celebrate St. Patrick's Day with traditional (or regionally adapted) Irish foods. These can include things like: corned beef and cabbage, potatoes, scotched eggs, shoulder bacon, soda bread, shepard's pie, beef stew, corned beef hash, colcannon.", "category": "IT"}, {"instruction": "Which is longest road or highway or motorway in the world", "input": "This article lists the world's longest road routes that are either officially numbered or otherwise known under a single name. Some of the roads may still be partially planned or under construction.\n\nPan-American Highway\t30,000 km (19,000 mi)[1]\tAmericas\tPrudhoe Bay, Alaska, United States United States\tPuerto Montt or Quell\u00f3n, Chile Chile or Ushuaia, Argentina Argentina\tLongest road according to the Guinness Book of Records.[2]\nIncomplete at the Dari\u00e9n Gap, causing the northern and southern segments to be actually long about 11,500 and 9,600 km.", "output": "the longest road in the world is in Americas. The longest road is a highway called Pan American highway. It spans 30000 Kilometers or 19000 miles. It starts from Prudhoe Bay, Alaska in United states and ends at Puerto Montt or Quell\u00f3n, Chile Chile or Ushuaia, Argentina Argentina\n\nThe pan american highway is registered as longest road in the world in guiness book of world records \n\nThere are also other categories of longest road in the worlds like Asian highway which starts in Kap\u0131kule, Turkey and ends in Tokyo, Japan. Asian highway is longest uninterrupted highway in the world. Length of the asian highway is 20557 Kilometers or 12774 miles\n\nLongest road within the single country is in Australia. The name of the road is Highway 1. This is loop road and legnth of the highway is 14500 Kilometers or 9000 miles", "category": "IT"}, {"instruction": "What is Jenkins?", "input": "", "output": "Jenkins is an open source automation server. It helps automate the parts of software development related to building, testing, and deploying, facilitating continuous integration and continuous delivery.", "category": "IT"}, {"instruction": "What are common swimming strokes?", "input": "", "output": "The most common swimming strokes include the four strokes used in competition: freestyle (sometimes referred to as \"the crawl\"), breast stroke, back stroke and butterfly. In addition, some people swim using a side stroke or a doggy paddle (which looks a lot like the stroke dogs use when swimming).", "category": "IT"}, {"instruction": "Give me a bullet list of some popular dashboard and visualisation tools", "input": "", "output": "- Microsoft Power BI. It integrates very well with Microsoft office ecosystem and simple to use and get started\n- Tableau. Although having the same value proposition as that of Power BI, analysts generally prefer it when they need to create powerful and complex dashboards. Like Power Bi, it also supports tons of data connectors.\n- Metabase. It is an open-source BI and data visualization tool which is good for getting your team started with a baseline dashboard layer.\n- Datapad. This tool recently started to gain popularity for KPI dashboards. Thanks to its mobile-first KPI dashboard, it is ideal for small to medium enterprises and a lot of solopreneurs uses it to manage their business KPIs.", "category": "IT"}, {"instruction": "What do you think about the existence of alien lifeform?", "input": "", "output": "Despite there is no direct evidence to support the existence of aliens, we human beings still put effort into finding them. Given the human nature I can see 3 outcomes. One is we eventually find one. Another is we continue searching until the end of humanity.Last one is we somehow prove we are the only life form in the universe. Yet either result is the final step. What would we do if we did find aliens? What would we do if we exhausted all methods yet still no results? What if there are things just not perceivable to human beings? I guess what matters is not the final result, but the progress and efforts we put into it. Given the universe is so huge, what else would you wanna search for?", "category": "IT"}, {"instruction": "What language is HP GL", "input": "HP-GL, short for Hewlett-Packard Graphics Language and often written as HPGL, is a printer control language created by Hewlett-Packard (HP). HP-GL was the primary printer control language used by HP plotters.[1] It was introduced with the plotter HP-8972 in 1977 and became a standard for almost all plotters. Hewlett-Packard's printers also usually support HP-GL/2 in addition to PCL.[2]", "output": "HP-GL, short for Hewlett-Packard Graphics Language and often written as HPGL, is a printer control language created by Hewlett-Packard (HP). HP-GL was the primary printer control language used by HP plotters. It was introduced with the plotter HP-8972 in 1977 and became a standard for almost all plotters. Hewlett-Packard's printers also usually support HP-GL/2 in addition to PCL.", "category": "IT"}, {"instruction": "Which of Shakespeare\u2019s plays is the longest?", "input": "", "output": "Hamlet.", "category": "IT"}, {"instruction": "What are some ways to care for a new tree", "input": "", "output": "There are many ways to care for a young tree to ensure its future health and success.  Some ways you may want to care for a young tree include:\n - Frequent watering.  The amount of water and frequency will vary depending on the tree and climate but frequent, deep watering is essential for early development.\n - Nutrients.  Fertilizers may aid in the early stages.  Be sure to read the manufacturers label and instructions before application.\n - Mulch.  Applying mulch to the base of the tree aids in weeds suppression and moisture retention. \n - Remove nearby weeds/plants.  Weeds and plants can provide competition to your tree for important resources.  Remove any near the root system of your tree.\n\nThese are just some ways you can ensure a healthy start to your tree!", "category": "IT"}, {"instruction": "From the passage provided, extract the programming languages supported by Flink. Separate them with a comma.", "input": "Flink provides a high-throughput, low-latency streaming engine[9] as well as support for event-time processing and state management. Flink applications are fault-tolerant in the event of machine failure and support exactly-once semantics.[10] Programs can be written in Java, Scala,[11] Python,[12] and SQL[13] and are automatically compiled and optimized[14] into dataflow programs that are executed in a cluster or cloud environment.[15]", "output": "Java, Scala, Python, SQL", "category": "IT"}, {"instruction": "Give me a comma separated list of all the organizations Henry Holst worked for based on this article.", "input": "The Henry Holst String Quartet was founded by the Danish violinist Henry Holst in 1931. Holst had studied at the Royal Danish Conservatory under Axel Gade and Carl Nielsen. In 1923, he was appointed leader of the Berlin Philharmonic Orchestra, but in 1931 he moved to Manchester as a Professor at the Royal Manchester College of Music.[1]\n\nThe move to Manchester led to the formation of the Henry Holst String Quartet with Charles Taylor (second violin), Herbert Downes (viola) and Anthony Pini (cello).[2] The ensemble was recognised as fine quartet, touring extensively in the UK and broadcasting on BBC Radio.[3] They played a number of times in Liverpool for the Rodewald Concert Society in the 1934 and 1937 seasons.[4]\n\nErnest Element (2nd violin) and Frank Venton (viola) also sometimes played for the quartet. Herbert Downes left to lead his own quartet in 1935. Charles Taylor also left to found his own quartet and was replaced by Reginald Stead as second violin. Reginald Stead later became the leader of the BBC Northern Orchestra. Anthony Pini joined the London Philharmonic Orchestra in 1932 and was replaced by John C Hock as cellist. The Henry Holst Quartet finally disbanded when Henry Holst formed the Philharmonia Quartet in 1941 at the instigation of Walter Legge to record for Columbia Records.[5]", "output": "Berlin Philharmonic Orchestra, Royal Manchester College of Music, Columbia Records", "category": "IT"}, {"instruction": "Please list the main dog predators according to the passage", "input": "Although dogs are the most abundant and widely distributed terrestrial carnivores, feral and free-ranging dogs' potential to compete with other large carnivores is limited by their strong association with humans. For example, a review of the studies in dogs' competitive effects on sympatric carnivores did not mention any research on competition between dogs and wolves. Although wolves are known to kill dogs, they tend to live in pairs or in small packs in areas where they are highly persecuted, giving them a disadvantage facing large dog groups.\n\nWolves kill dogs wherever they are found together. In some instances, wolves have displayed an uncharacteristic fearlessness of humans and buildings when attacking dogs to the extent that they have to be beaten off or killed. Although the numbers of dogs killed each year are relatively low, it induces a fear of wolves entering villages and farmyards to take dogs and losses of dogs to wolves have led to demands for more liberal wolf hunting regulations.\n\nCoyotes and big cats have also been known to attack dogs. In particular, leopards are known to have a preference for dogs and have been recorded to kill and consume them, no matter what their size. Siberian tigers in the Amur River region have killed dogs in the middle of villages. This indicates that the dogs were targeted. Amur tigers will not tolerate wolves as competitors within their territories, and the tigers could be considering dogs in the same way. Striped hyenas are known to kill dogs in their range.", "output": "wolves, Coyotes, leopards, Siberian tigers, Striped hyenas", "category": "IT"}, {"instruction": "Given a reference text about the Spellenspektakel, tell me where it takes place and what games are played.", "input": "The Spellenspektakel is the largest board game convention in the Netherlands, featuring game demonstrations, tournaments and other game related activities. It focusses on traditional strategy boardgames, collectible card games, pen-and-paper role-playing games and miniatures wargames. Game publishers participate by showing and demonstrating their new releases to the public. Additionally, the Spellenspektakel hosts numerous game stores and player communities.[1] Visitors can try any game on display and buy the ones they prefer. During the 2019 edition at the Jaarbeurs venue in Utrecht, the Spellenspektakel welcomed over 14,000 people[2]", "output": "The Spellenspektakel takes place in the Netherlands where board games are played.", "category": "IT"}, {"instruction": "Jokic or Embiid for the MVP?", "input": "", "output": "I would give the MVP award to Nikola Jokic.", "category": "IT"}, {"instruction": "What are some of the sight seeing and outdoor activities to do in Portugal, Spain", "input": "", "output": "Day 1: Arrival in Lisbon\n- Transfer from the airport to the hotel (8.6 miles/14 km)\n\nDay 2: Lisbon\n- Visit to Bel\u00e9m Tower (5.5 miles/9 km)\n- Jer\u00f3nimos Monastery\n- St. George's Castle\n- Alfama neighborhood \n\nDay 3: Sintra\n- Visit to Pena Palace (18.7 miles/30 km)\n- Sintra National Palace\n- Cabo da Roca (14.6 miles/23.5 km)\n\nDay 4: Cascais\n- Beach day in Cascais (16.8 miles/27 km)\n- Visit to Boca do Inferno\n- Cascais Marina\n\nDay 5: \u00d3bidos\n- Visit to \u00d3bidos Castle (52.8 miles/85 km)\n- Walk through the village\n- Visit to Alcoba\u00e7a Monastery (22.8 miles/37 km)\n\nDay 6: Nazar\u00e9\n- Visit to Nazar\u00e9 beach (30.7 miles/49.5 km)\n- Cable car ride\n- Visit to the Chapel of Our Lady of Nazar\u00e9\n\nDay 7: Coimbra\n- Visit to Coimbra University (68.3 miles/110 km)\n- Walk through the historic center\n- Visit to the Old Cathedral\n\nDay 8: Aveiro\n- Boat ride through the canals of Aveiro (44.7 miles/72 km)\n- Visit to the Aveiro Cathedral\n- Walk through the Fisherman's Quarter\n\nDay 9: Porto\n- Visit to the Ribeira neighborhood (46.6 miles/75 km)\n- Climb the Cl\u00e9rigos Tower\n- Visit to the S\u00e3o Bento train station\n- Tour of the Port wine cellars\n\nDay 10: Departure from Porto\n- Transfer from the hotel to the airport (10.4 miles/17 km)", "category": "IT"}, {"instruction": "Why is the most of the world's land is north of the equator?", "input": "", "output": "It just happened to be the way at the moment. Believe it or not, the earth's continents are slowly moving. Around 300 million years ago, our planet had one big mass of land called Pangaea. It was mainly south of the equator. In another 200 million years, things will look different again.", "category": "IT"}, {"instruction": "How many awards did the film The Walrus and the Whistleblower win per this entry of information?", "input": "The Walrus and the Whistleblower is a 2020 Canadian documentary film directed by Nathalie Bibeau.[1] The film profiles Phil Demers, a former employee of Marineland who attempted to blow the whistle on allegedly inhumane treatment of animals at the institution.[2]\n\nAccording to a film industry newsletter, the film was made \"in association with the Documentary Channel, and CBC Docs\".[3] The Documentary Channel's announcement about the film stated that Demers had \"appeared four times on the Joe Rogan show, has testified before the Canadian Senate, and is being sued for $1.5 million for plotting to steal Smooshi, the walrus\".[4]\n\nThe film premiered as part of the 2020 Hot Docs Canadian International Documentary Festival.[5] Due to the COVID-19 pandemic in Canada it was not screened theatrically, but premiered as part of the festival's online streaming component[6] and aired on CBC Television on May 28 as part of the network's special Hot Docs at Home series of films from the festival.[1]\n\nIn June 2020, the film was named as the winner of 2020 Rogers Audience Award, alongside the films 9/11 Kids, There's No Place Like This Place, Anyplace, First We Eat and The Forbidden Reel, and as Overall Favourite at Hot Docs. The Audience Award allowed the film to be fast tracked in the Academy Award for Best Documentary Feature category, \"provided it meets all other criteria for eligibility\".[7] Northern Banner, a division of Raven Banner Entertainment, subsequently announced that it had acquired the rights to distribute the film in Canada, probably starting before year end. The US and international distribution rights went to Gravitas Ventures.[3]\n\nThe film received a nomination for the Donald Brittain Award at the 9th Canadian Screen Awards in 2021.[8]", "output": "2.  the 2020 Rogers Audience Award, and the Donald Brittain Award in 2021.", "category": "IT"}, {"instruction": "What are some areas that firefighters can safely stay in while fighting a wildfire?", "input": "Outcomes from Project Vesta have been integrated into firefighter training in Australia and are beginning to appear in the United States.\n\nFirefighters try to stay out of the dead man zone at all times, working from safe points such as burnt ground or a large area of non-burnable ground, such as a cricket or Australian rules football oval, or a large car park. This is achieved by attacking the fire from the flanks, or the rear, so that burnt ground is always nearby, and the fire is always in front of the firefighters. This avoids two disadvantages of attacking fires at the head of the fire where spot fires may start behind them or changes in wind behavior might accelerate the spread of the fire.\n\nThe result of several inquiries into firefighter death in Australian bushfires found that firefighters should stay out of the dead man zone and that they should always keep 250 liters of water in their truck for personal safety. This is now a standard operating procedure in the NSW Rural Fire Service, Country Fire Service and Country Fire Authority in Australia.", "output": "Firefighters can use burnt areas, car parks and sports areas to stay safe during a wildfire", "category": "IT"}, {"instruction": "List me some important facts about Tobiashammer from given text", "input": "The first hammer forge was probably built in 1482 on the River Ohra. In 1592 the mill was bought by Tobias Albrecht, since when it has been named after him. The works originally had three huge iron hammers which were raised by the motion of a water wheel.\n\nThe mill made iron products such as scythes, sickles, ploughshares, lances and swords. Later, it also carried out copper processing; washbowls, washtubs, kettle drums, brewing implements, pots, cans and pans were made. The kettle drums, which were produced into the late 20th century, were made from a single piece of copper, forged under the tilt hammer and still set a standard today in terms of their sound.", "output": "1. On the River Ohra, the first hammer forge was probably constructed around 1482.\n2. Tobias Albrecht purchased the mill in 1592, and ever since, it has carried his name.\n3. The factory's three enormous iron hammers, which were elevated by the rotation of a water wheel, were originally installed.\n4. The mill produced iron tools like lances, scythes, sickles, and ploughshares.\n5. Later, it also engaged in copper processing; pots, cans, pans, brewing equipment, kettle drums, washbowls, and washtubs were produced.\n6. The single-piece copper kettle drums, which were forged with the tilt hammer and produced until the late 20th century, set a standard for sound even today.", "category": "IT"}, {"instruction": "Describe a morning routine from a 2 year olds perspective", "input": "", "output": "I wake up and I'm alone in my bed, it's dark and I feel afraid. I call out for my mommy and feel so relieved when I hear her footsteps to my bedroom. She snuggles in beside me and I feel happy and content. I wake again with sunshine in my eyes and know it's morning time as the sun is up. I rollover and see my mommy is still sleeping beside me. I sit up and tell her it's morning time. My brother comes running in and asks me to play in the playroom. I'm so excited to go play with my toys! I race down the hall and pick out my favorite puzzle, it has all the colors of the rainbow! I ask my brother for help to complete the puzzle and feel proud when it's done. I hear my mommy calling us from downstairs, she is saying breakfast is ready. My tummy feels hungry and I go downstairs and to the kitchen island where she brings my favorite, a big bowl of porridge! As I'm eating, I feel some fall on my chin. I point this out to mommy and she wipes it with a cloth. When I'm finished, mommy says it's time to get dressed. I want to help so I take off my pajamas all by myself!", "category": "IT"}, {"instruction": "How much wood would a woodchuck chuck if a woodchuck could chuck wood?", "input": "", "output": "This phrase is not meant to have an answer because it's a tongue twister. Tongue twisters are meant to be difficult to say, especially when spoken quickly. It's regarded as a fun way for children to learn about alliteration, how to pronounce and enunciate similar sounding words with different meaning and supports a basis for spoken language development.", "category": "IT"}, {"instruction": "Tell me whether these are literary characters or fruits: Gandalf, banana, Frodo Baggins, Aragorn, orange, apple, Sauron", "input": "", "output": "Gandalf - literary character\nBanana - fruit\nFrodo Baggins - literary character\nAragorn  - literary character\norange - fruit\napple - fruit\nSauron - literary character", "category": "IT"}, {"instruction": "What is the difference between common law and civil law?", "input": "", "output": "The primary difference between common law and civil law is that in common law jurisdictions, published court decisions are of primary importance to understanding legal rules. In civil law jurisdictions, published rules or statutes are of primary importance. Common law's origins are found in England, where court decisions filled in gaps in \"writs\" issued by the monarch. Civil law, by comparison, traces its origins to codes of laws compiled beginning around the time of the Roman Empire. \n\nWhile there are around 150 countries that largely follow a common law model, and 80 that follow a civil law model, the reality is that many jurisdictions incorporate elements of both common law and civil law. Even within a country, different models may apply.", "category": "IT"}, {"instruction": "Given this paragraph about Sam Baker, what is the Outland Trophy?", "input": "Baker attended the University of Southern California, where he played for coach Pete Carroll's USC Trojans football team from 2003 to 2007. He was a first-team All-American as a redshirt sophomore in 2005.\n\nHe was on the official 2006 watch list for the Lombardi Award and the Outland Trophy for the best lineman. In his collegiate career Baker blocked for Reggie Bush and Matt Leinart. He was named a first-team All-Pacific-10 Conference selection by the league's coaches in 2005 and 2006.[1] He was a recognized as a consensus first-team All-American, having received first-team honors from the Football Writers Association of America, Sporting News and CBSSports.com.\n\nGoing into his fourth year as a starter, Baker was on the Lombardi Award and Outland Trophy watch lists. He was ranked as one of the \"Top 20 Players Heading Into 2007\" by Sports Illustrated.[2] Before his final season in 2007, Baker was already regarded by most NFL scouts as a certain top-five player in the 2008 NFL Draft.[3]", "output": "The Outland Trophy is given to the best offensive lineman in college football.", "category": "IT"}, {"instruction": "What makes the Expanse series better than other sci-fi?", "input": "", "output": "What really sets The Expanse apart from other popular science fiction is the science. It's common for sci-fi writers to throw the laws of physics out the window or create a fake invention that bends the rules without any scientific basis to make their concept work. The Expanse has a realism that is unparalleled. If you've ever found yourself yelling at your book or TV saying \"That's not even close to possible\" then this is the sci-fi series for you.", "category": "IT"}, {"instruction": "How do you cook ribs?", "input": "", "output": "1.       Spread French's mustard all over the ribs\n2.       Season ribs top and bottom liberally with the rub. Seriously don't be shy.\n3.       Place ribs on a smoker at 225 for 2-3 hours (oak).\n4.       In a bowl mix one cup of honey, brown sugar, a table spoon of apple cider vinegar, Mix together and Drizzle in the middle of the foil, place ribs top side down in the foil. Wrap tight.\n5.       Return to the smoke for another 1.5-2 hours or until tender but not 'falling off the bone'\n6.       In a sauce pan add a bottle of your favorite BBQ sauce, one cup of apple jelly, one finely shredded apple, and one tsp of rib rub.\n7.       Pull them out of the foil, season again with rub.\n8.       Top with BBQ sauce with apple and apple jelly.\n9.       Put the ribs back on the pit for 30 minutes for the sauce to set-up.\n \nIngredients:\n \n\u00b7         Three racks of pork ribs\n\u00b7         Rib rub\n\u00b7         French\u2019s mustard\n\u00b7         Honey\n\u00b7         Brown sugar\n\u00b7         Apple cider vinegar\n\u00b7         KC Masterpiece BBQ sauce\n\u00b7         Apple jelly\n\u00b7         One finely shredded apple", "category": "IT"}, {"instruction": "Who is Rajinikanth?", "input": "", "output": "Rajinikanth is an Indian action who primarily acts in Tamil movies. Shivaji Rao Gaikwad, known professionally as Rajinikanth (/r\u0259d\u0292\u026an\u026ak\u0251\u02d0n\u03b8/),[b] is an Indian actor, producer and screenwriter who works mainly in Tamil cinema. [5] In a career spanning over five decades, he has done more than 160 films that includes films in Tamil, Hindi, Telugu, Kannada, Bengali, and Malayalam. He is widely regarded as one of the most successful and popular actors in the history of Indian cinema.", "category": "IT"}, {"instruction": "Extract from the text year in which Italy First was launched", "input": "Italy First was launched as a \"political association\" in October 2013 by Gianni Alemanno, a former mayor of Rome (2008\u20132013) for the PdL.[3][4] A long-time politician of the Italian Social Movement (MSI) and National Alliance (AN), within which he led the Social Right faction, Alemanno had left the PdL a few days earlier. The founding manifesto of Italy First included criticism of the PdL, its participation in the European People's Party and its compliance to Europeanism and economic liberalism. One of the first political campaigns of the new party was against the euro currency.", "output": "2013", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Damaru, Laouto", "input": "", "output": "Damaru is percussion, Laouto is string.", "category": "IT"}, {"instruction": "Based on the reference text, what was the start date and the expected completion date of the reconstruction project on the Howard Frankland bridge.", "input": "After the widening project in 1992, Interstate 275 was increased to eight lanes on the bridge itself. However, this did not increase capacity on either end of the bridge. Backups were still seen on the Howard Frankland heading into Tampa, primarily due to a bottleneck at the SR 60/Veterans Expressway exit. On the St. Petersburg side, after a comprehensive reconstruction project that took over ten years, lane counts were increased from four lanes prior to the bridge to six lanes through downtown St. Petersburg, and eight lanes from Gandy Boulevard to the bridge.\n\nA reconstruction project was planned to begin in 2017 for the new Gateway Expressway project, a plan to build a new toll road to connect different parts in Pinellas County. However, FDOT planned to reconstruct the interstate in smaller phases rather than the original larger two-phase project and the start of construction was delayed to 2020.\n\nOnce the reconstruction project is finished in 2025, major traffic congestion on the Howard Frankland bridge is expected to be significantly reduced by the addition of new lanes.[8] On January 7, 2021, FDOT postponed by a week to January 16, 2021 the start date for removing an overpass and the corresponding exit ramp over I-275. It had been scheduled to shut down by 8 p.m., EST, January 9, through January 10. This work was part of the U.S. $600 million toll road project.[9] On January 16 to 17, 2021, workers removed the 4th street north interchange bridge (overpass) from 8 p.m. on January 16, to 12 p.m. on January 17. Exit 32 was closed until late 2021 while the new overpass is constructed.[10]\n\nOverall construction on this large project began in fall 2020 and completion is expected in late 2025.[4] A completely new bridge will carry southbound traffic. Once that bridge is completed, the existing southbound bridge will be converted to carry northbound traffic. When all traffic is moved to the final alignment, the existing northbound bridge will be removed.[4] The newly built bridge for southbound traffic will include a separate pathway for pedestrian and bicycle traffic, and additional vehicle traffic lanes.[", "output": "The reconstruction project of the Howard Frankland bridge started in fall of 2020 and is expected to be completed in 2025.", "category": "IT"}, {"instruction": "What is the largest state by land size in the United States of America?", "input": "", "output": "The largest state by land size in the United States of America is Alaska.", "category": "IT"}, {"instruction": "What colors are typically associated with Christmas?", "input": "", "output": "Red and Green are associated with Christmas", "category": "IT"}, {"instruction": "Given this reference text about Jimmy John's, how many Jimmy John's locations are there?", "input": "Jimmy John's is an American sandwich chain headquartered in Champaign, Illinois. The business was founded by Jimmy John Liautaud in 1983.[3] After Liautaud graduated from high school, his father gave him a choice to either join the military or start a business. Liautaud, choosing the latter, initially decided to start a hot dog business, but changed to opening a sandwich business due to costs.\n\nThe Jimmy John's franchise has over 2700 locations, with 98% of them being franchises.[4] in 2016, Roark Capital Group purchased a majority stake in the company. Later, in 2019, Inspire Brands purchased the company from Roark Capital Group for an unspecified amount.", "output": "There are currently 2700 locations in the Jimmy John's franchise.", "category": "IT"}, {"instruction": "Why do people like Red Light Therapy?", "input": "", "output": "Red Light Therapy is good for anti-aging as well as other benefits. It has been shown to increase the amount of collagen your body produces, thus helping to decrease fine lines and wrinkles. Additionally, it can help reduce the appearance of scars and stretch marks. It's easy, painless and can even be done at home in as little as 3-10 minutes each day.", "category": "IT"}, {"instruction": "Classify the following by how they are affected by a strong permanent magnet as one of \"attract\", \"repel\", \"nothing\": iron nail, paper clips, a tin can, a compass, a plastic cup, a glass window, a leather wallet, a brick, a magnet of opposite polarity, pyrolytic carbon sheet.", "input": "", "output": "Items that are strongly or weakly attracted are called \"ferromagnetic\" and \"paramagnetic\", respectively. These include: iron nail, paper clips, a tin can, a compass.\nItems that are repelled by a magnet are either \"paramagnetic\" or themselves permanent magnets of the opposite polarity, including: a magnet of opposite polarity, pyrolytic carbon sheet. Items that are not affected by a permanent magnet are called \"nonmagnetic\" and include: a plastic cup, a glass window, a leather wallet, a brick.", "category": "IT"}, {"instruction": "What family do tigers, lions and panthers all belong to?", "input": "", "output": "Tigers, lions and panthers are all a part of the cat family", "category": "IT"}, {"instruction": "Why do people like to travel?", "input": "", "output": "There are many reasons that people like to travel and the motivation to travel is always unique to each person. The most common reasons are to explore globally famous landmarks, new cultures, different authentic food and to meet new people, which will expand the perspective of different cultures and their value systems.\n\nAlso, to unwind and relax from their day to busy schedules. Apart from that with the wide use of social media platforms people have more information and knowledge to get influence. People also travel for research and educational purposes to places such as museums, and historical landmarks.\n\nOverall, traveling can be an enriching, relaxing, and fulfilling experience that will gather beautiful lifelong memories, experiences, and lessons.", "category": "IT"}, {"instruction": "Classify each of the following whether they help or hurt vision: glasses, binoculars, blindfold, sleep mask, telescope", "input": "", "output": "Glasses: Help Vision\nBinoculars: Help Vision\nBlindfold: Hurt Vision\nSleep Mask: Hurt Vision\nTelescope: Help Vision", "category": "IT"}, {"instruction": "What is the best way to define a data&AI strategy?", "input": "", "output": "Translate your business and digital strategy into your data and AI vision and strategy highlighting the biggest opportunity areas optimizing your current business as well as new innovative businesses utilizing AI and data.\n\nIdentify the business processes (product development, production, sales & marketing, supply chain, pricing, HR, finance, etc.) where you want to use data and AI.\n\nUnderstand the current state of your data and AI capabilities.\n\nDescribe the target state for your business processes once data and AI capabilities have been deployed.\n\nDefine new data-driven business and product ideas.\n\nDefine your execution roadmap, including investments.\n\nExecute the first data and AI use cases by creating your AI playbook, aiming at production readiness.\n\nAutomate and scale up operations", "category": "IT"}, {"instruction": "Identify which instrument is string or woodwind: Domra, Xaphoon", "input": "", "output": "Xaphoon is woodwind, Domra is string.", "category": "IT"}, {"instruction": "What is the difference between a chihuaha and a golden retriever?", "input": "", "output": "Chihuahas are a breed of dog and they are generally smaller in size. They can be long or short haired. Their temperament is that they like to bark a lot and are easily agitated. Regardless, Chihuaha dogs make great companions and lap dogs. \n\nGolden retrievers are a breed of dog and they are generally larger in size. They are very intelligent dogs and can be easily trained. They are used as service dogs to help people, for example they can be a guide dog for the blind. Their temperament is that they are calm and focused. Golden retrievers are also great companion dogs.", "category": "IT"}, {"instruction": "Can you recommend 3 diverse National Parks in California worth a visit?", "input": "", "output": "California is home to several top tier National Parks. Yosemite would be at top of many lists for its natural beauty, including granite formations like Half Dome and El Capitan, lofty waterfalls like Yosemite and Bridalveil and distinctive landscapes like Tuolumne Meadows and the Mariposa Grove of giant sequoias. Lassen National Park is hidden gem in the northeast corner of the state. One can day hike to the top of the namesake volcano and explore active signs of vulcanism such as the fumaroles and mudpots of Bumpass Hell. Joshua Tree National Park, in the southeast part of the state, is fairly distinct from both Yosemite and Lassen with desert flora and fauna, include the namesake tree which is actually a succulent.", "category": "IT"}, {"instruction": "In 64th Annual Grammy Awards,  best album of the year award was given to", "input": "", "output": "Jon Batiste was awarded the best album of the year in 64th Annual Grammy Awards", "category": "IT"}, {"instruction": "What are the top attractions to visit in Cancun?", "input": "", "output": "Cancun is divided into two areas. Downtown, also known as Ciudad Cancun \u2014 and Cancun Island, also known as The Hotel Zone or \u201cZona Hotelera\u201d. The Hotel Zone is the primary tourist area, synonymous with resorts, catamarans, wild nightlife and beaches. It\u2019s a 15-mile strip of sand shaped like the number seven. This is where most people stay.\n\nAs the name implies, there are tons of hotels as well as most of the nightlife and beaches. Restaurants and bars line the only road, Kulkukan Boulevard, which runs from one side of the Hotel Zone to the other.\n\nApart from the Hotel Zone, the other visiting places are:\n1. Any of the All inclusive resorts like XCaret, Hotel Ziva and Grand Sirenis etc.\n2. Visit Downtown Cancun to explore local culture and delicious street food\n3. Snorkeling or Paragliding near Cancun\n4. Exploring amazing Cenotes- Cenotes are natural sinkholes filled with water formed in limestone caves\n5. Explore Chichen Itza Maya Ruins -  Chichen Itza Maya Ruins are amazing ancient pyramids dates back to 5th century.\n6. Day Trip to Isla Mujeres - Isla Mujeres, which translates to \u201cThe Island of Women\u201d, gets its name from the temple of Ixchel, the Maya goddess of fertility. This small island is only 20 minutes from Cancun by ferry from Hotel Zone.Isla Mujeres offers stunning views thanks to its rocky coast and gorgeous bays. It is also the first spot where you can see the sunrise in Mexico. This sleepy fishing village offers a well-deserved pause from the crazy nightlife of Cancun", "category": "IT"}, {"instruction": "Give me a list of the most recent Men's Indian Cricket Team captains in ODIs", "input": "", "output": "- Hardik Pandya \n- KL Rahul \n- Shikhar Dhawan\n- Rohit Sharma \n- Ajinkya Rahane \n- Virat Kohli \n- Gautam Ganbhir \n- Suresh Raina \n- MS Dhoni", "category": "IT"}, {"instruction": "What are the starting Pokemon in Pokemon Red and Blue?", "input": "", "output": "The grass type Pokemon Bulbasaur, the water type Pokemon Squirtle, and the fire type Pokemon Charmander.", "category": "IT"}, {"instruction": "Classify the eight planets of Earth's solar system as rocky or gaseous, according to their primary composition.", "input": "", "output": "Mercury - rocky\nVeuns - rocky\nEarth - rocky\nMars - rocky\nJupiter - gaseous\nSaturn - gaseous\nUranus - gaseous\nNeptune - gaseous", "category": "IT"}, {"instruction": "How reliable is public transportation?", "input": "", "output": "Reliability of public transportation varies drastically depending on which city you are in and depends on investment and maintenance of existing infrastructure. For example, the public transportation network in Switzerland spans a wide network that comprises of trains, trams, busses, and ferries, runs timely on a schedule to the minute, and is used as a primary mode of transportation for many residents. In contrast, it can be challenging to get around many cities in the United States without a car. Public transportation ridership often depends on reliability, which in turn often determines the availability of investments in the required infrastructure. This creates an unfortunate cycle making it very difficult for public transportation to become more reliable without external investments where the system is funding itself.", "category": "IT"}, {"instruction": "What are some ways to inculcate practice based learning in kids?", "input": "", "output": "Learning by doing is one of the best ways a kid can learn a concept. One way to do this is by using STEM based home kits that complement what a kid learns at school. For every concept the kid learns at school they should be exposed to application of the concept in the real world. Additionally, modern technology like virtual reality and augmented reality can fill the gap to an extent. Using Virtual Reality kids can see and visit places such as factories, landmarks which are hard to visit. Using Augmented Reality kids can see things right in from of them and can interact deeply with the 3D object closely. the learning curriculum must be comprehensive and emphasize experiential learning.", "category": "IT"}, {"instruction": "Which is a species of fish? Nurse or Nurse shark", "input": "", "output": "Nurse shark", "category": "IT"}, {"instruction": "Who invented the radio?", "input": "The invention of radio communication was preceded by many decades of establishing theoretical underpinnings, discovery and experimental investigation of radio waves, and engineering and technical developments related to their transmission and detection. These developments allowed Guglielmo Marconi to turn radio waves into a wireless communication system.", "output": "The radio was invented by Guglielmo Marconi, which allowed the harnessing of radio waves into a wireless communication system.  This invention did not happen in a vacuum.  It was enabled by investigating radio waves and understanding how to detect and transmit them.", "category": "IT"}, {"instruction": "Which city are Stroopwafels from?", "input": "", "output": "Stroopwafels are a type of Dutch waffle-like cake made with ground or shredded wheat and a variety of fillings. They are most commonly found in the city of Haarlem, Netherlands.", "category": "IT"}, {"instruction": "What is System Thinking", "input": "", "output": "Systems thinking is a way of making sense of complexity by looking at it in terms of wholes and relationships rather than splitting it into parts.  It is based on the idea that all critical processes in an organization are interrelated and work together to achieve a common goal.", "category": "IT"}, {"instruction": "What is the difference between a paint and a pinto?", "input": "", "output": "A paint horse is a breed called the \"American Paint Horse\" with bloodlines from registered Quarter Horses, Thoroughbreds or Arabian horses with bold two-color markings and a pinto is a loose term used to describe any horse with bold white markings on its coat but can be any breed.", "category": "IT"}, {"instruction": "Why is Arsenal FC a great football club?", "input": "", "output": "Arsenal is one of the greatest football clubs in the world for many reasons. First of all, it has one of the largest global fanbases from all continents on the globe. The fan base headcount is within the top 10 of all existing sports teams. It has been one of the most successful clubs in terms of winning silverware, with 13 league titles and 14 FA cups to its name. It has a rich history of having international players that go on to become some of the greatest players in football/soccer history. The club is also located in the heart of London, making it a popular team for people from all around the world to come and visit. It has one of the best stadiums in Europe, Emirates Stadium, that can seat 65,000+ attendants and has an incredible atmosphere on game day.", "category": "IT"}, {"instruction": "Which is more important, Nature or Nurture?", "input": "", "output": "The Nature vs Nurture argument has existed for as long as humans have been able to consider complex thought. The debate as to whether the nature (the intrinsic nature, the attitude, or the predisposition), or the nurture (the care, the teachings, or the conditioning) of a child is more responsible for who or what they become in adult life. \n\nLargely it is considered that humans are a product of context (Nurture). The situations in which we are raised have a considerable bearing on who we become in later life. But, it's not necessarily so black and white. There are countless examples of children having been born into extremely difficult circumstances, who have grown to be well rounded, high contributing members of society. \n\nAs a result, It would be reasonable to assume that Nature is a strong factor, regardless of the Nurture (the environment) in which a person is raised. After all, there's no guarantee that someone growing up in an abusive household will then abuse others themselves. So then is Nature more important? \n\nThe difficulty with the debate is that no one individual is the same as another. Experiments to establish the efficacy of Nature vs Nurture are difficult to perform. Not only from a human rights perspective, but additionally from a variable standpoint as well. Really there are far too many variables to control with regards to human nature, that any imposition of control on the Nurture element would be imbalanced. \n\nWhen considering this question, it's important to recognise that developmental psychology is still in its early stages, and to understand that both Nature AND Nurture are necessary factors in human development.", "category": "IT"}, {"instruction": "Give me a list of the best movies I've never seen.", "input": "", "output": "I would definitely recommend to watch Lord of the Rings. It is a great fantasy movie about friendship and how in the end, the good always prevails. The scale and grandeur, also the cast of the movie was superb. Any film where Tom Hanks is in the lead role should also be watched, as an actor he is simply amazing, and comes across so natural and convincing. If you like action movies, I can heartily recommend all the James Bond movies with Daniel Craig in the lead role. The cinematography, tension, music all play together so well. Speaking of cinematography, one would be amiss to not watch the latest movies of David Villeneuve, for example Inception or Dune. Timothee Chalamais, who is leading role in Dune, also did a great performance in 'The King' - if you liked the character in Dune for example. Other movies would be Interstellar, a great Sci-Fi movie, the Hunger Games trilogy and so many more.", "category": "IT"}, {"instruction": "Give me a list of the 3 best activities to do with your kids when the weather is bad outside", "input": "", "output": "Build a fort in the living room with blankets, pillows and chairs. Watch nostalgic movies like The Goonies, Sandlot and Honey, I Shrunk the kids. Build a lego castle.", "category": "IT"}, {"instruction": "Provide a brief summary of the reaction to the creation of LIV Golf", "input": "Human rights groups have criticized LIV Golf as sportswashing, a political strategy by Saudi Arabia to cleanse its repressive global image[48] through sport.[49] Human Rights Watch, for example, called the Saudi endeavor \"an effort to distract from its serious human rights abuses by taking over events that celebrate human achievement\".[50]\n\nGreg Norman has been accused of aiding the repressive Saudi government for his own financial gain.[51] In 2021, Norman denied that he was being used for sportswashing and said he works for LIV because of his passion for the sport.[52] Later, in May 2022, Norman defended the involvement of Saudi Crown Prince Mohammed bin Salman with Jamal Khashoggi's murder, saying, \"Look, we've all made mistakes, and you just want to learn from those mistakes and how you can correct them going forward.\" His statement drew extensive criticism. Khashoggi's fianc\u00e9e, Hatice Cengiz, said it was hurtful that \"Jamal's brutal killing is brushed off as a 'mistake' and that we should just move on\".[53][54]\n\nOn 22 June 2022, a group of nearly 2,500 survivors of family members killed or injured during the September 11 attacks wrote an open letter to golfers who have remained loyal to the PGA Tour thanking them for not defecting to LIV Golf. The letter read in part, \"Thank you for standing up for decency. Thank you for standing up for the 9/11 Families. Thank you for resisting the Kingdom of Saudi Arabia's efforts to cleanse its reputation by buying off professional athletes...To those of you who have chosen what is right over blood money from a corrupt, destructive sports entity and its Saudi backers, please continue to stand strong.\"[55] On 17 July 2022, a group of September 11 victims' family members condemned former U.S. President Donald Trump for hosting the LIV Golf tour at his Trump National Golf Club in Bedminster, New Jersey; the group's letter to Trump noted that he himself had blamed Saudi Arabia for the 9/11 attack during a 2016 interview on Fox News.[56]\n\nTiger Woods, who turned down an offer of $700 million to $800 million to join LIV Golf,[57] was asked in July 2022 about the golfers who had joined. \"I disagree with it. I think that what they've done is they've turned their back on what has allowed them to get to this position,\" Woods said at a press conference before the 2022 Open Championship. \"I know what the PGA Tour stands for and what we have done and what the tour has given us, the ability to chase after our careers and to earn what we get and the trophies we have been able to play for and the history that has been a part of this game.\"[58]", "output": "Overall, the reaction to the creation of the LIV Golf has been negative. For example, human rights groups have criticized LIV Golf as sportswashing, a group of 2500 survivors of family members killed during the September 11 attacks wrote a letter to golfers who stayed with the PGA Tour thanking them staying, and Tiger Woods said he thinks that the players who went to LIV Golf turned their back on what has allowed them to get to this position.", "category": "IT"}, {"instruction": "Why do some people select private schools over public schools?", "input": "", "output": "Some of the typical reasons people select private schools over public schools are\n1. They can afford private school and believe they can get marginal advantages\n2. Private schools offer a smaller student to teacher ratio\n3. Private schools have connections to some of the niche colleges \n4. The curriculum is usually ahead of the public school for the same grade.", "category": "IT"}, {"instruction": "What is the nickname for West Ham United?", "input": "", "output": "West Ham United, a UK Premier League soccer team based in East London, are known as both the Irons and the Hammers. Both names refer to the origins of the club as the team of the Thames Ironworks. The club's badge includes a pair of crossed hammers. Whilst many know West Ham as the Hammers most fans tend to refer to them as the Irons particularly in the chant \"Come on You Irons\".", "category": "IT"}, {"instruction": "Who are the top 5 non-fiction writers of all time?", "input": "", "output": "1) Margaret Atwood\n2) James Baldwin\n3)Mark Bowden\n4) Ta-Nehisi Coates\n5)  Robin Cook", "category": "IT"}, {"instruction": "What is Angel Falls?", "input": "Angel Falls (Spanish: Salto \u00c1ngel; Pemon language: Kerepakupai Mer\u00fa meaning \"waterfall of the deepest place\", or Parakup\u00e1 Ven\u00e1, meaning \"the fall from the highest point\") is a waterfall in Venezuela. It is the world's tallest uninterrupted waterfall, with a height of 979 metres (3,212 ft) and a plunge of 807 m (2,648 ft). The waterfall drops over the edge of the Auy\u00e1n-tepui mountain in the Canaima National Park (Spanish: Parque Nacional Canaima), a UNESCO World Heritage site in the Gran Sabana region of Bol\u00edvar State. The height figure, 979 m (3,212 ft), mostly consists of the main plunge but also includes about 400 metres (1,300 ft) of sloped cascade and rapids below the drop and a 30-metre-high (100 ft) plunge downstream of the talus rapids.", "output": "Angel Falls (Spanish: Salto \u00c1ngel; Pemon language: Kerepakupai Mer\u00fa meaning \"waterfall of the deepest place\", or Parakup\u00e1 Ven\u00e1, meaning \"the fall from the highest point\") is a waterfall in Venezuela. It is the world's tallest uninterrupted waterfall, with a height of 979 metres (3,212 ft) and a plunge of 807 m (2,648 ft). The waterfall drops over the edge of the Auy\u00e1n-tepui mountain in the Canaima National Park (Spanish: Parque Nacional Canaima), a UNESCO World Heritage site in the Gran Sabana region of Bol\u00edvar State. The height figure, 979 m (3,212 ft), mostly consists of the main plunge but also includes about 400 metres (1,300 ft) of sloped cascade and rapids below the drop and a 30-metre-high (100 ft) plunge downstream of the talus rapids.\n\nThe falls are along a fork of the R\u00edo Kerepacupai Mer\u00fa which flows into the Chur\u00fan River, a tributary of the Carrao River, itself a tributary of the Orinoco River.", "category": "IT"}, {"instruction": "Given this paragraph about bicycle manufacturer Colnago, what Italian automobile company did Colnago work with to develop new carbon fiber technology?", "input": "Since the 1980s, while Colnago continued to produce high-end steel bikes, they began to produce cycle frames using material other than steel, including titanium, aluminum, carbon fiber and mixed materials. One unique frame from this period, the Bititan, has a dual titanium down tube. Crimped and oversize tubes were used on the Tecnos\u2013one of the lightest production steel bikes produced. Similarly crimped oversized aluminum tubes were used on the Dream frame. In 1981 Colnago prototyped the CX Pista\u2013a full monocoque carbon fiber cycle with disc wheels, which was shown at the Milan bike show.[12] Subsequently, Colnago worked with Ferrari to develop new carbon fiber technology, and Ernesto also credits their engineers for challenging him regarding fork design, which led to Colnago's innovative Precisa straight-bladed steel fork (1987). Colnago also experimented with multi-material frames, including the CT-1 and CT-2 constructed with titanium main tubes, carbon fiber forks and rear stays, and a similarly constructed (although short-lived) Master frame constructed with steel main tubes, carbon forks and stays.[13]", "output": "Colnago worked with Ferrari to develop new carbon fiber technology.", "category": "IT"}, {"instruction": "Plan a weekend long vacation to Madrid, and mention multiple specific places you would visit and how you would travel in the city", "input": "", "output": "On Saturday we would start off by visiting the Reina Sofia museum, which we would get to by taking the metro system. We would then continue to the Prado art museum in the afternoon, which we would also get to by metro and walking from the Reina Sofia. We'd then grab a late lunch at a nearby cafe, before walking over to the nearby Parque Retiro, which is one of the main parks in Madrid. We'd spend the afternoon there and take out a boat for a row on the lake, and then in the evening we'd grab empanadas for dinner from a bakery. The next day, we'd start off the day with a casual coffee and slow morning breakfast. We'd then check out the botanical gardens, and then the National Anthropological Museum in the afternoon. Finally, we'd finish our weekend with a visit to the Madrid Opera house.", "category": "IT"}, {"instruction": "Based on the text, please give me a brief summary of the history of the DTES neighbourhood in Vancouver", "input": "Around the beginning of the 20th century, the DTES was Vancouver's political, cultural and retail centre. Over several decades, the city centre gradually shifted westwards, and the DTES became a poor neighbourhood,[1] although relatively stable. In the 1980s, the area began a rapid decline due to several factors, including an influx of hard drugs, policies that pushed sex work and drug-related activity out of nearby areas, and the cessation of federal funding for social housing. By 1997, an epidemic of HIV infection and drug overdoses in the DTES led to the declaration of a public health emergency. As of 2018, critical issues include opioid overdoses, especially those involving the drug fentanyl; decrepit and squalid housing; a shortage of low-cost rental housing; and mental illness, which often co-occurs with addiction.", "output": "The DTES has transformed from the focal point of Vancouver\u2019s cultural and commercial life at the start of the 20th Century to an impoverished neighbourhood with many socio-economic problems by the 1980s. Since the 1990s, the DTES has been home to a public health emergency due to drug overdoses, HIV infection, a housing crisis, and mental health problems.", "category": "IT"}, {"instruction": "What are your favorite musical instruments?", "input": "", "output": "Guitar, flute, bagpipes, cello, saxophone.", "category": "IT"}, {"instruction": "When was Rhual constructed?", "input": "Rhual is a Grade I listed building in Flintshire. This small mansion has medieval origins and is surrounded by a large landscaped park. The present building was constructed in 1634 by Evan Edwards, a member of a well established Flintshire family which traced its descent from the Welsh king Hywel Dda.[1] He most likely incorporated an older medieval house into the north wing of the current building. The house has since been built upon further, and the east and south entrances were created in the 19th century.", "output": "Rhual was constructed in 1634 by Evan Edwards.", "category": "IT"}, {"instruction": "Identify which animal species is alive or extinct: Purussaurus, Albacore Tuna", "input": "", "output": "Albacore Tuna is alive, Purussaurus is extinct.", "category": "IT"}, {"instruction": "What to do in Mexico City?", "input": "", "output": "Mexico City also known as CDMX is the capital of Mexico. It is becoming an attraction to tourists all over the world. The downtown area was built on top of pre-hispanic temples. You can see this by visiting Templo Mayor, which was discovered while doing an excavation for new construction. The main plaza is called Z\u00f3calo,  where you can see the Presidential Palace and the cathedral. You can also visit Palacio de Bellas Artes and some museums in this area. \n\nOne of the most popular streets is Paseo de la Reforma, modeled after  Champs-\u00c9lys\u00e9es. And now it is where a lot of modern and tall buildings have been developed. The Museo Nacional de Antropolog\u00eda is located nearby, and it's one of the most popular museums in the city.\n\nOther neighborhoods that have become very popular are Colonia Roma and Condesa, attracting tourists and digital nomads in the last several years. These neighborhoods are well known for the variety of restaurants and nightlife.\n\nOther places to visit are Coyoacan, Xochimilco, and of course Teotihuacan, which is a prehispanic archeological site located about 40 km outside of Mexico City.", "category": "IT"}, {"instruction": "what is a computer?", "input": "", "output": "A computer is a machine that can be programmed to carry out sequences of arithmetic or logical operations (computation) automatically.", "category": "IT"}, {"instruction": "Is it fun to play guitar? How do you start playing guitar?", "input": "", "output": "Playing guitar is a worthwhile and super fun exercise for anyone, but especially those that are musically inclined.  Even for a beginner, its not difficult to be able to start playing simple songs from great artists like the Rolling Stones, The Beatles, Jimi Hendrix, or even Led Zeppelin.  The best way to get started is by understanding open chords, both major and minor, and simple string picking patterns.", "category": "IT"}, {"instruction": "Pitch me some bad ideas for cologne scents.", "input": "", "output": "- Goat cheese\n- Dead bird\n- Nursing home\n- Gasoline\n- Carcase\n- Sweat\n- Basement must\n- Mold", "category": "IT"}, {"instruction": "Provide a table of the various recruiting lists that Calvin Johnson was named to and who named him to the list and do it in CSV format", "input": "Johnson was rated among the nation's top 10 wide receivers and top 100 players by virtually every recruiting analyst. He was tabbed the No. 4 wide receiver and No. 15 player in the nation by TheInsiders.com, and named to the Super Southern 100 by the Atlanta Journal-Constitution, the Rivals 100 by Rivals.com, TheInsiders.com Hot 100, the SuperPrep All-America 275, and the Prep Star Top 100 Dream Team.[3]\n\nJohnson was also rated as the best player in Georgia, No. 12 in the Southeast and No. 37 in the nation by Rivals.com, the No. 7 wide receiver in the nation by SuperPrep, and first-team all-state selection (Class AAAA) by the Atlanta Journal-Constitution. Finally, he was tabbed to the AJC's preseason Super 11.[3] By the time he was a junior, he was ranked as within the top 10 wide receivers and the top 100 players in the nation by almost every writer.[3]", "output": "Sure, here is text in a CSV format of the various recruiting lists that Calvin Johnson was named to and who named him to the list:\n\nList name,List owner\nSuper Southern 100,Atlanta Journal-Constitution\nthe Rivals 100,Rivals.com\nTheInsiders.com Hot 100,TheInsiders.com\nthe SuperPrep All-America 275,SuperPrep\nPrep Star Top 100 Dream Team,Prep Star", "category": "IT"}, {"instruction": "What products and services are offered by Falco electronics?", "input": "Falco's main business activities are the design and manufacture of power magnetics, semiconductors and circuitboards. In addition the company designs and manufactures common mode chokes, current sensors, gate drives, power inductors, line transformers, THT inductors, watt hour meters, lighting systems, printed computer boards, mechanical assembly systems, and also provides plastic molding, metal stamping and electronic manufacturing, OEM design and testing services.[4] Falco is a major supplier to international OEMs and brand name electronics manufacturers alike. Falco has regionalized branches in Los Angeles and Miami in the United States; Munich, Germany; Milan, Desenzano, and Bologna, Italy; Manila, The Philippines, Bangalore, India; Xiamen, China and Hong Kong.[5] Falco has manufacturing plants in Mexico, China and India.[6]", "output": "Falco designs and manufactures components used by Original Equipment Manufacturers in producing consumer electronics.  Components include semiconductors, circuitboards, sensors, transformers, inductors, and meters as well as material-related components such as plastic molding and metal stamping.", "category": "IT"}, {"instruction": "How popular is K-pop around the world?", "input": "Modern K-pop \"idol\" culture began in the 1990s, as K-pop idol music grew into a subculture that amassed enormous fandoms of teenagers and young adults.[7][8] After a slump in early idol music, from 2003, TVXQ and BoA started a new generation of K-pop idols that broke the music genre into the neighboring Japanese market and continue to popularize K-pop internationally today.[9][10] With the advent of online social networking services and South Korean TV shows, the current spread of K-pop and South Korean entertainment, known as the Korean Wave, is seen not only in East Asia and Southeast Asia, but also in Pakistan, Bangladesh, India, Latin America, North Africa, Southern Africa and East Africa, the Middle East and throughout the Western world, gaining an international audience.", "output": "K-pop is a popular music genre that has a fan following across the whole world. It spread to worldwide fandom with the advent and proliferation of online social networking services.", "category": "IT"}, {"instruction": "How do you explain cloud computing to a 5 year old?", "input": "", "output": "Imagine you are building some thing using lego pieces. All of your legos are in basket.  As you start to build your desired structure you start to take 1-3 or couple of handful of legos from the basket. As you start to give some shape to the structure you are designing you start to put back some of the legos into the basket you don't need. Overtime you keep changing the shape slightly here and there; sometimes making the structure smaller and sometimes a little bigger. And you are doing all of these from the lego collection in the basket of yours. Cloud computing in a similar way is compute power that you can rent out from a cloud provider who has huge data centers spread across the world (This is the basket). As your application needs compute resources to meet the demand; you borrow compute resources from the cloud providers data center and give it back when you don't need it.", "category": "IT"}, {"instruction": "Can you tell me about the history of sports in Philadelphia?", "input": "Philadelphia is one of thirteen cities that hosts teams in the \"Big Four\" major sports leagues in North America, and Philadelphia is one of just four cities in which one team from every league plays within city limits. These major sports teams are the Philadelphia Phillies of Major League Baseball (MLB), the Philadelphia Eagles of the National Football League (NFL), the Philadelphia 76ers of the National Basketball Association (NBA) and the Philadelphia Flyers of the National Hockey League (NHL). Each team has played in Philadelphia since at least the 1960s, and each team has won at least two championships. Since 2010, the Greater Philadelphia area also has been the home of the Philadelphia Union of Major League Soccer (MLS), making the Philadelphia market one of only nine cities that hosts a team in the five major sports leagues. Prior to the 1980s, Philadelphia was home to several other notable professional franchises, including the Philadelphia Athletics, the Frankford Yellow Jackets, the Philadelphia Warriors, the Philadelphia Quakers, Philadelphia Atoms, and the Philadelphia Field Club.", "output": "Philadelphia host teams in the 4 major sport leagues. Over the years, there has been varying success from the teams. In some years, there have been teams at the bottom of the league. Most years, teams are within reach of the league championship. Philadelphia Phillies and Philadelphia Eagles have been teams with the most success with both teams ending as runner up to the league championship. The Philadelphia Sixers has been a top tier team but has not been able to get past the second round of playoffs in the last few years. Philadelphia sports fans are notoriously loyal, demanding of their players and aggressive against fans of opposing team fans.", "category": "IT"}, {"instruction": "Given a reference text about David Moses ben Meir Dyte, tell me what he is known for.", "input": "David Moses ben Meir Dyte (c.\u20091770\u20131830) was an English Jewish quill merchant who distinguished himself by preventing the assassination attempt on George III by James Hadfield on 15 May 1800.[1]\n\nDyte was attending Colley Cibber's play She Would and She Would Not at the Theatre Royal, Drury Lane when Hadfield fired a horsepistol at the King. Dyte, seated directly behind the shooter, struck the assailant and deflected the shot.[2][3] It is said that Dyte asked as his sole reward the right to sell opera tickets, then a monopoly at the royal disposal.[4] In 1802 he was appointed 'Purveyor of Pens and Quills to the Royal Household'.[5] The incident was immortalised in the play Jew Dyte by Harold Rubinstein.\n\nDyte was the father of Henry Dyte, who served as Honorary Secretary to the Blind Society; and the grandfather of D. H. Dyte, Surgeon to the Jewish Board of Guardians, and Charles Dyte, a parliamentarian in the colony of Victoria.", "output": "David Moses ben Meir Dyte is known for preventing an assassination attempt by James Hadfield on George III.", "category": "IT"}, {"instruction": "What are the primary breathing apparatuses for scuba", "input": "Breathing apparatus\nMain article: Scuba set\n\nRecreational diver putting on his scuba set before diving\nThe defining equipment used by a scuba diver is the eponymous scuba, the self-contained underwater breathing apparatus which allows the diver to breathe while diving, and is transported by the diver. It is also commonly referred to as the scuba set.\n\nAs one descends, in addition to the normal atmospheric pressure at the surface, the water exerts increasing hydrostatic pressure of approximately 1 bar (14.7 pounds per square inch) for every 10 m (33 feet) of depth. The pressure of the inhaled breath must balance the surrounding or ambient pressure to allow controlled inflation of the lungs. It becomes virtually impossible to breathe air at normal atmospheric pressure through a tube below three feet under the water.[2]\n\nMost recreational scuba diving is done using a half mask which covers the diver's eyes and nose, and a mouthpiece to supply the breathing gas from the demand valve or rebreather. Inhaling from a regulator's mouthpiece becomes second nature very quickly. The other common arrangement is a full face mask which covers the eyes, nose and mouth, and often allows the diver to breathe through the nose. Professional scuba divers are more likely to use full face masks, which protect the diver's airway if the diver loses consciousness.[43]\n\nOpen-circuit\nMain article: Diving regulator\n\nAqualung Legend second stage (demand valve) regulator\n\nAqualung first stage regulator\n\nGekko dive computer with attached pressure gauge and compass\n\nSuunto submersible pressure gauge display\nOpen circuit scuba has no provision for using the breathing gas more than once for respiration.[1] The gas inhaled from the scuba equipment is exhaled to the environment, or occasionally into another item of equipment for a special purpose, usually to increase the buoyancy of a lifting device such as a buoyancy compensator, inflatable surface marker buoy or small lifting bag. The breathing gas is generally provided from a high-pressure diving cylinder through a scuba regulator. By always providing the appropriate breathing gas at ambient pressure, demand valve regulators ensure the diver can inhale and exhale naturally and without excessive effort, regardless of depth, as and when needed.[23]\n\nThe most commonly used scuba set uses a \"single-hose\" open circuit 2-stage demand regulator, connected to a single back-mounted high-pressure gas cylinder, with the first stage connected to the cylinder valve and the second stage at the mouthpiece.[1] This arrangement differs from \u00c9mile Gagnan's and Jacques Cousteau's original 1942 \"twin-hose\" design, known as the Aqua-lung, in which the cylinder pressure was reduced to ambient pressure in one or two stages which were all in the housing mounted to the cylinder valve or manifold.[23] The \"single-hose\" system has significant advantages over the original system for most applications.[44]\n\nIn the \"single-hose\" two-stage design, the first stage regulator reduces the cylinder pressure of up to about 300 bars (4,400 psi) to an intermediate pressure (IP) of about 8 to 10 bars (120 to 150 psi) above ambient pressure. The second stage demand valve regulator, supplied by a low-pressure hose from the first stage, delivers the breathing gas at ambient pressure to the diver's mouth. The exhaled gases are exhausted directly to the environment as waste through a non-return valve on the second stage housing. The first stage typically has at least one outlet port delivering gas at full tank pressure which is connected to the diver's submersible pressure gauge or dive computer, to show how much breathing gas remains in the cylinder.[44]\n\nRebreather\n\nAn Inspiration electronic fully closed circuit rebreather\nMain article: Diving rebreather\nLess common are closed circuit (CCR) and semi-closed (SCR) rebreathers which, unlike open-circuit sets that vent off all exhaled gases, process all or part of each exhaled breath for re-use by removing the carbon dioxide and replacing the oxygen used by the diver.[45] Rebreathers release few or no gas bubbles into the water, and use much less stored gas volume, for an equivalent depth and time because exhaled oxygen is recovered; this has advantages for research, military,[1] photography, and other applications. Rebreathers are more complex and more expensive than open-circuit scuba, and special training and correct maintenance are required for them to be safely used, due to the larger variety of potential failure modes.[45]\n\nIn a closed-circuit rebreather the oxygen partial pressure in the rebreather is controlled, so it can be maintained at a safe continuous maximum, which reduces the inert gas (nitrogen and/or helium) partial pressure in the breathing loop. Minimising the inert gas loading of the diver's tissues for a given dive profile reduces the decompression obligation. This requires continuous monitoring of actual partial pressures with time and for maximum effectiveness requires real-time computer processing by the diver's decompression computer. Decompression can be much reduced compared to fixed ratio gas mixes used in other scuba systems and, as a result, divers can stay down longer or require less time to decompress. A semi-closed circuit rebreather injects a constant mass flow of a fixed breathing gas mixture into the breathing loop, or replaces a specific percentage of the respired volume, so the partial pressure of oxygen at any time during the dive depends on the diver's oxygen consumption and/or breathing rate. Planning decompression requirements requires a more conservative approach for a SCR than for a CCR, but decompression computers with a real-time oxygen partial pressure input can optimise decompression for these systems. Because rebreathers produce very few bubbles, they do not disturb marine life or make a diver's presence known at the surface; this is useful for underwater photography, and for covert work.[36]", "output": "The most common breathing apparatus for Scuba Diving is an open circuit single hose 2-stage demand regulator connected to a single gas cylinder.  A less common apparatus is a Closed Circuit or Semi-Closed rebreather.", "category": "IT"}, {"instruction": "What are two languages spoken in Spain other than Castilian Spanish?", "input": "", "output": "Two other languages spoken in Spain are Catalan and Basque, also known as euskara", "category": "IT"}, {"instruction": "Why do humans like dogs?", "input": "", "output": "Dogs are very popular pets. People like dogs for different reasons, but dogs are known to be very loyal. They also can help provide protection to the owner. There are also dogs with special skills, such as helper dogs that can help guide a person with an eye impairment. Despite their popularity, not everyone enjoys the company of dogs. Some people are allergic to most dogs.", "category": "IT"}, {"instruction": "What are some popular movies from the 1980s?", "input": "", "output": "Some popular movies that were released in the 1980s are Sixteen Candles, The Breakfast Club, Pretty in Pink, Scarface, The Outsiders, Heathers, Stand By Me, ET, The Princess Bride, The Terminator, Aliens, Friday the 13th, St. Elmo's Fire, Children of the Corn, Grease 2, Purple Rain, Clue, A Nightmare on Elm Street, Lucas, Gremlins, Better Off Dead and Some Kind of Wonderful", "category": "IT"}, {"instruction": "What is the difference between American Football and European Football?", "input": "", "output": "Prior to American Football coming into existence, European Football was played throughout the world as an athletic sport that entailed kicking a round ball into an opponent's goal. European Football is typically played on a grass turf surface called a pitch. European Football was actually first called soccer before its adoption by the entire world and ended up settling on the name football. This is where the common confusion surrounds European Football and American Football. American Football, created much later than European Football, is played with a pig skin with a prolate shape on a grass turf surface, much like European Football. In American Football, instead of using their feet, players use their hands to pass the ball to one another through the air or hand the ball off to one another and attempt to run into the opponent's endzone. When European Football eventually came to the United States, the moniker soccer remained with the sport. This is why European Football is the same as American Soccer and American Football is not the same as European Football.", "category": "IT"}, {"instruction": "What are some questions I can ask my mom to get to know her better?", "input": "", "output": "\u2022 What were your first few years of motherhood like for you?\n\u2022 Was there any family drama you protected me from when I was younger?\n\u2022 What is your happiest memory of us?\n\u2022 What do you look forward to?\n\u2022 What was the most memorable thing I ever did for you?\n\u2022 What's something you want me to always remember after you're gone?\n\u2022 What's your favorite thing to do with me, or with our family?", "category": "IT"}, {"instruction": "Why do some people like horror films?", "input": "", "output": "Horror films can provide a safe way for us to mentally rehearse how we'd handle real danger.  Some people actually enjoy the scary emotions that horror films elicit.   It can provide a unique adrenaline rush, somewhat similar to other fearful activities, like white water rafting, jumping out of airplanes, amusement park rides and flying in a small aircraft.  For many, horror films are their least liked movie genre for those same reasons.  They might prefer a romantic comedy or action triller, without all the blood and diabolical antagonists.", "category": "IT"}, {"instruction": "I would like to get a camper for the family vacations.  What things do I need to be aware of when buying one?", "input": "", "output": "Top considerations for a camper would be budget, size, weight, & payload required by the tow vehicle.  Payload is usually the most overlooked factor as many times trailers can go well over the payload shown by the manufacturer.  It is usually best to have a tow vehicle that has a buffer of payload over so that you can safely tow a trailer.  Most car/truck manufacturers share must higher towing capabilities than actual since options can bring down the amount of payload and tow capacity.", "category": "IT"}, {"instruction": "What is Bart Simpson's best friend named?", "input": "", "output": "Millhouse", "category": "IT"}, {"instruction": "What is the difference between open-toed and close-toed shoes?", "input": "", "output": "Open-toed shoes refer to footwear that exposes the toes. They can reveal just the toes (think of a show with the toe portion cut out) or the entire foot (e.g., sandals). Closed toe shoes are any shoes that cover the toes.", "category": "IT"}, {"instruction": "What were gulags and who lived in them?", "input": "The Gulag[c][d][10][11][9] was the government agency in charge of the Soviet network of forced labour camps which were set up by order of Vladimir Lenin, reaching its peak during Joseph Stalin's rule from the 1930s to the early 1950s.[12] English-language speakers also use the word gulag in reference to each of the forced-labor camps that existed in the Soviet Union, including the camps that existed in the post-Lenin era.[13][14] The full official name of the agency changed several times.\n\nThe Gulag is recognized as a major instrument of political repression in the Soviet Union. The camps housed a wide range of convicts, from petty criminals to political prisoners, a large number of whom were convicted by simplified procedures, such as NKVD troikas or other instruments of extrajudicial punishment. In 1918\u20131922, the agency was administered by the Cheka, followed by the GPU (1922\u20131923), the OGPU (1923\u20131934), later known as the NKVD (1934\u20131946), and the Ministry of Internal Affairs (MVD) in the final years. The Solovki prison camp, the first correctional labour camp which was constructed after the revolution, was opened in 1918 and legalized by a decree, \"On the creation of the forced-labor camps\", on April 15, 1919.", "output": "Gulags were forced labour camps created during the Soviet Union that were used as an instrument of political repression and punishment. Gulags housed a wide range of individuals, from political prisoners to petty criminals.", "category": "IT"}, {"instruction": "How do I keep my plants alive?", "input": "", "output": "Ensuring your plants are getting the proper amount of food, water, and sunlight is important to keeping them alive. Some plants require more exact care, whereas others can thrive in many conditions. Check online or local resources to understand your plants specific needs, then ensure you're following a plan to keep your plant fed and hydrated.", "category": "IT"}, {"instruction": "Why Interlaken is famous", "input": "", "output": "Because of it's beautiful village. There are many wonderful scenic village adjacent to mountains and fountains.", "category": "IT"}, {"instruction": "What are 6 different types of pizza toppings?", "input": "", "output": "Pepperoni, Sausage, Onions, Peppers, Ham, Bacon", "category": "IT"}, {"instruction": "When you are going kayaking in california in the summer, which of these clothes would be appropriate to wear: a lifejacket, a swimsuit, a wetsuit, sweatpants, a knit hat, a ball-cap", "input": "", "output": "A lifejacket would be appropriate, and so would a swimsuit or a ball-cap, but a wetsuit, sweatpants, or a knit hat would not be appropriate", "category": "IT"}, {"instruction": "Extract the teams that Bob Sanders played throughout his career, and put them in a comma-separated list.", "input": "Demond \"Bob\" Sanders (born February 24, 1981) is an American former professional football player who was a safety in the National Football League (NFL) for eight seasons. He played college football for the Iowa Hawkeyes and was drafted by the Indianapolis Colts in the second round of the 2004 NFL Draft. He was named NFL Defensive Player of the Year in 2007 and also played for the San Diego Chargers in his final season in 2011.\n\nSanders was nicknamed \"The Sandman\" because of his hard hits and tackles, and was also called \"The Eraser\" by former Colts' coach Tony Dungy because of his tendency to erase the mistakes of his teammates. He spent the majority of his career battling injuries, having played more than six games in a single season only twice, in 2005 and 2007.", "output": "Iowa Hawkeyes, Indianapolis Colts, San Diego Chargers", "category": "IT"}, {"instruction": "Given a reference text about the 2022 Mazar-i-Sharif mosque bombing, how many people were injured and killed?", "input": "2022 Mazar-i-Sharif mosque bombing\n\nOn 21 April 2022, a powerful bomb rocked the Shia Seh Dokan mosque[1] in Mazar-i-Sharif, Balkh Province, Afghanistan killing at least 31 people and injuring more than 87 others. The Islamic State \u2013 Khorasan Province claimed responsibility via Telegram.[2][3]\n\nWorshippers were performing the Zuhr prayer inside the mosque when the bomb exploded.[4] Authorities counted 31 dead and at least 87 injured, six of whom were wounded critically.[4]\n\nThe bombing was part of a series of attacks on the same day, including two explosions targeting Taliban officers in Kunduz and Khogyani District and a bombing that injured two Shia children in Kabul.[4][5]", "output": "At least 31 people were killed and more than 87 others were injured in the 2022 Mazar-i-Sharif mosque bombing.", "category": "IT"}, {"instruction": "Give me a bulleted list of the Seven Wonders of Portugal and their construction dates:", "input": "", "output": "In Portugal, you can find these 7 wonders:\n\n- Castle of Guimar\u00e3es, 10th century\n- Castle of \u00d3bidos, 1195\n- Batalha Monastery, 1385\n- Alcoba\u00e7a Monastery, 1153\n- Jer\u00f3nimos Monastery, 1502\n- Pena Palace, 1854\n- Bel\u00e9m Tower, 1521", "category": "IT"}, {"instruction": "Name some male celebrities who have been diagnosed with breast cancer.", "input": "", "output": "Rod Roddy, Peter Criss, Richard Roundtree, Montel Williams", "category": "IT"}, {"instruction": "What are the seven wonders of the world?", "input": "The Seven Wonders of the Ancient World, also known as the Seven Wonders of the World or simply the Seven Wonders, is a list of seven notable structures present during classical antiquity. The first known list of seven wonders dates back to the 2nd\u20131st century BC.\n\nWhile the entries have varied over the centuries, the seven traditional wonders are the Great Pyramid of Giza, the Colossus of Rhodes, the Lighthouse of Alexandria, the Mausoleum at Halicarnassus, the Temple of Artemis, the Statue of Zeus at Olympia, and the Hanging Gardens of Babylon. Using modern-day countries, two of the wonders were located in Greece, two in Turkey, two in Egypt, and one in Iraq. Of the seven wonders, only the Pyramid of Giza, which is also by far the oldest of the wonders, still remains standing, with the others being destroyed over the centuries. There is scholarly debate over the exact nature of the Hanging Gardens, and there is doubt as to whether they existed at all.", "output": "The seven wonders of the world consist of; the Great Pyramid of Giza, The Colossus of Rhodes, the Lighthouse of Alexandria, the Mausoleum at Halicarnassus, the Temple of Artemis, the Statue of Zeus at Olympia, and the Hanging Gardens of Babylon.", "category": "IT"}, {"instruction": "What\u2019s a recipe for chimichurri?", "input": "", "output": "Start with parsley as the foundation of the sauce, add salt, pepper, garlic powder, oregano, paprika and a touch of black garlic, finally, add olive oil mixing all spices throughly.", "category": "IT"}, {"instruction": "What is a viral video?", "input": "", "output": "Viral video is one that is popular and generate a lot of views which is appealing for advertisers", "category": "IT"}, {"instruction": "Given this paragraph about blockchain, how did blockchain influence bitcoin cryptocurrency?", "input": "Blockchains are typically managed by a peer-to-peer (P2P) computer network for use as a public distributed ledger, where nodes collectively adhere to a consensus algorithm protocol to add and validate new transaction blocks. Although blockchain records are not unalterable, since blockchain forks are possible, blockchains may be considered secure by design and exemplify a distributed computing system with high Byzantine fault tolerance. A blockchain was created by a person (or group of people) using the name (or pseudonym) Satoshi Nakamoto in 2008 to serve as the public distributed ledger for bitcoin cryptocurrency transactions, based on previous work by Stuart Haber, W. Scott Stornetta, and Dave Bayer. The implementation of the blockchain within bitcoin made it the first digital currency to solve the double-spending problem without the need of a trusted authority or central server. The bitcoin design has inspired other applications and blockchains that are readable by the public and are widely used by cryptocurrencies. The blockchain may be considered a type of payment rail.", "output": "Blockchain is the technology that enables the existence of cryptocurrency and bitcoin is the name of the best-known cryptocurrency. The implementation of bitcoin using blockchain made it the first digital currency to solve the double-spending problem without the need of a trusted authority or central server. Bitcoin has inspired other applications and blockchains that are highly available, public, and are widely used by cryptocurrencies.", "category": "IT"}, {"instruction": "List five items you would need to survive in the wilderness.", "input": "", "output": "Water, food, Knife,  First Aid Kit, Lighter or Matches,", "category": "IT"}, {"instruction": "What is the Shiba Inu (crypto)?", "input": "", "output": "Shiba Inu token (ticker: SHIB) is a decentralized cryptocurrency created in August 2020 by an anonymous person or group known as \"Ryoshi\". It is named after the Shiba Inu (\u67f4\u72ac), a Japanese breed of dog originating in the Ch\u016bbu region, the same breed that is depicted in Dogecoin's symbol, itself originally a satirical cryptocurrency based on the Doge meme. Shiba Inu has been characterized as a \"meme coin\" and a pump-and-dump scheme.", "category": "IT"}, {"instruction": "What is the Swiney Prize?", "input": "The Swiney Prize, a British award made every five years by the Royal Society of Arts with the Royal College of Physicians, was set up by the will of George Swiney, an English physician who died in 1844.\n\nThe prize came to be awarded alternately for medical jurisprudence and general jurisprudence. New cups were designed, after an initial stable period when a pattern by Daniel Maclise was reused. The first new design came in 1919, by Melvin Oliver.[1][2][3][4]\n\nGeorge Swiney (1793\u20131844)\nGeorge Swiney, a physician, was the son of William Swiney (1748\u20131829), Admiral of the Red. He was born on 8-Jun-1793 at St Marylebone, Middlesex, England. He was educated at Edinburgh University, where he graduated M.D. in 1816. Having retired from practice, he settled in London, lived a secluded life, and acquired a reputation as an eccentric. He spent much time on his will and died at Grove Street, Camden Town, on 21 January 1844. He bequeathed \u00a35,000 to the Society of Arts, to found a quinquennial prize for the best published essay on jurisprudence, the prize to be adjudicated jointly by the Society of Arts and the London College of Physicians[5]", "output": "The Swiney Prize is a British award issued every five years by the Royal Society of Arts with the Royal College of Physicians. The prize is awarded for medical jurisprudence and general jurisprudence (alternately). The award was set up by the will of George Swiney, an English physician who died in 1844.", "category": "IT"}, {"instruction": "what is one good example on a hackathon project for a middle school student for programming?", "input": "", "output": "After months of lockdowns and social distancing, schools finally reopened for in-person classes, and parents are thrilled to be able to attend their children's concerts and performances once again. Many parents had missed these events and were eager to show their support for their children's artistic pursuits. Parents are excited to attend her in-person concert, but many of them quickly realized that they didn't know much about classical music, which made it difficult for them to fully appreciate the performance.\n\nAs a kid who loves music, I always feel so proud and happy when my parents attend my concerts and performances. However, I often wonder if they are truly able to enjoy the music as much as I do, especially since they may not know much about the background and context of the pieces that are being played.\n\nI believe that knowing the background of the music can make a huge difference in how much someone enjoys it. When you understand the story and history behind a piece of music, it becomes more than just a series of notes and melodies; it becomes a powerful expression of emotion and meaning. Also knowing the background of the music can help us appreciate and connect with the music on a deeper level, allowing us to use it as a powerful tool for stress relief and relaxation. By actively listening and understanding the expressive qualities of the music, we can harness its potential to enhance our mood and promote emotional wellbeing.", "category": "IT"}, {"instruction": "what is Sociology?", "input": "", "output": "Sociology is a social science that focuses on society, human social behavior, patterns of social relationships, social interaction, and aspects of culture associated with everyday life.[1][2][3] It uses various methods of empirical investigation and critical analysis[4]:\u200a3\u20135\u200a to develop a body of knowledge about social order and social change.[4]:\u200a32\u201340\u200a While some sociologists conduct research that may be applied directly to social policy and welfare, others focus primarily on refining the theoretical understanding of social processes and phenomenological method. Subject matter can range from micro-level analyses of society (i.e. of individual interaction and agency) to macro-level analyses (i.e. of social systems and social structure)", "category": "IT"}, {"instruction": "Why were the Beatles so popular?", "input": "The English rock band the Beatles are commonly regarded as the foremost and most influential band in popular music history. With a line-up comprising John Lennon, Paul McCartney, George Harrison and Ringo Starr, they sparked the \"Beatlemania\" phenomenon in 1963, gained international superstardom in 1964, and remained active until their break-up in 1970. Over the latter half of the decade, they were often viewed as orchestrators of society's developments. Their recognition concerns their effect on the era's youth and counterculture, British identity, popular music's evolution into an art form, and their unprecedented following.\n\nMany cultural movements of the 1960s were assisted or inspired by the Beatles. In Britain, their rise to national prominence signalled the youth-driven changes in postwar society, with respect to social mobility, teenagers' commercial influence, and informality. They spearheaded the shift from American artists' global dominance of rock and roll to British acts (known in the US as the British Invasion) and inspired many young people to pursue music careers. From 1964 to 1970, the group had the top-selling US single one out of every six weeks, and the top-selling US album one out of every three weeks. In 1965, they were awarded MBEs, the first time such an honour was bestowed on a British pop act. A year later, Lennon controversially remarked that the band were \"more popular than Jesus now\".\n\nThe Beatles often incorporated classical elements, traditional pop forms and unconventional recording techniques in innovative ways, especially with the albums Rubber Soul (1965), Revolver (1966) and Sgt. Pepper's Lonely Hearts Club Band (1967). Many of their advances in production, writing, and artistic presentation were soon widespread. Other cultural changes initiated by the group include the elevation of the album to become the dominant form of record consumption over singles, a wider interest in psychedelic drugs and Eastern spirituality, and several fashion trends. The band also pioneered with their record sleeves and music videos, as well as informed music styles such as jangle, folk rock, power pop, psychedelia, progressive rock and heavy metal. By the end of the decade, the group were seen as an embodiment of the era's sociocultural movements, exemplified by the sentiment of their 1967 song \"All You Need Is Love\".\n\nOver the 1960s as a whole, the Beatles were the dominant youth-centred pop act on the sales charts. They broke numerous sales and attendance records, many of which they have or had maintained for decades, and continue to enjoy a canonised status unprecedented for popular musicians. Their songs are among the most recorded in history, with cover versions of \"Yesterday\" exceeding thousands. As of 2009, they were the best-selling band in history, with estimated sales of over 600 million records worldwide.[1][2] Time included them in its list of the twentieth century's 100 most important people.[3]", "output": "The Beatles were the foremost rock band in popular music history. They broke numerous sales and many of these have maintained for decades.", "category": "IT"}, {"instruction": "Given the context below, please answer the provided question: \n\nContext: \nIn fact, the first highlight moment of the Chat Assistant occurred twelve years ago at the launch event of the fifth-generation iPhone. Scott Forstall, then Apple's software chief, pressed a button on the iPhone to summon Siri and asked it questions. Inquiring about the weather, searching for restaurants, checking stock prices. Keep in mind that this was a time when smartphones were far from widespread, and being able to check stock prices on a mobile phone was already a very novel thing.\n\nQuestion: \nWho was the software chief during the first release of Apple Siri?", "input": "", "output": "Scott Forstall", "category": "IT"}, {"instruction": "Given this paragraph about the dimensions of a volleyball court, is there a difference between the hight of the net for men's competitions vs women's competitions?", "input": "A volleyball court is 9 m \u00d7 18 m (29.5 ft \u00d7 59.1 ft), divided into equal square halves by a net with a width of one meter (39.4 in).[18] The top of the net is 2.43 m (7 ft 11+11\u204416 in) above the centre of the court for men's competition, and 2.24 m (7 ft 4+3\u204416 in) for women's competition, varied for veterans and junior competitions.", "output": "The net is 19 cm higher for men's competitions (243 cm) than for women's competitions (224 cm).", "category": "IT"}, {"instruction": "What is the attraction in the United States for the Jeep Wrangler?", "input": "", "output": "The Jeep Wrangler represents the current version of the original Jeep Willys platform which was first released in 1940 for the U.S. Army.  The Jeep Wrangler platform first became available in 1987 and has become one of the most recognizable vehicles manufactured today.  The love Wrangler owners have for their vehicles stems from the utilitarian nature of the platform, the ability to remove the top and doors in warmer weather, the wide array of aftermarket modifications available, as well as its extensive off road capabilities directly off the showroom floor. Jeep enthusiasts, also known as \u201cJeepers,\u201d often wave at each other when passing in opposite directions.  This tradition stemmed from the use of the Willy\u2019s model in the US military where out of reverence and courtesy passing soldiers driving their Jeeps would wave or salute each other depending on rank.  This tradition continues today amongst Wrangler owners and has been affectionately dubbed the \u201cJeep Wave.\u201d", "category": "IT"}, {"instruction": "Describe the sensation of taking a cold shower and explain the rationale for why someone might take one.", "input": "", "output": "When you take a shower with very cold water, you throw your body into a temporary state of shock. You feel your skin raise. Your toes may curl a bit. Your eyes may widen. If it is early morning and you're still waking up, you may find that you suddenly feel very alert. \n\nBy leaving a room with a warm and comfortable temperature and entering a space with water produced at a chilly and uncomfortable temperature you actually trick your body. The sudden shift produces alertness that can be beneficial for people who are trying to wake up without caffeine and other stimulants or are otherwise trying to train their bodies to tolerate harsh conditions.", "category": "IT"}, {"instruction": "Imagine you are getting married and are attending a wedding cake tasting. Describe five different flavors you try, with combinations of both cake and frosting for each tasting. Pick one best flavor at the end of the five tastings.", "input": "", "output": "The first flavor I try is vanilla cake with a buttercream frosting. The cake is good, but too plain and basic. Next we try a vanilla cake with a chai frosting, and I like it a lot more, since I love spice. Although I do worry that the vanilla cake might be a bit plain. A third option is a dark chocolate cake with a cherry and chocolate ganache filling, which is very rich and moist, which I appreciate. Fourth we try a lemon drizzle cake, which is nice but I'm not sure the right choice for the rest of our menu. And for our final flavor we try a matcha cake with white chocolate frosting, which has a very nice cake but I think the frosting is too sweet. Finally, I decide to pick the chocolate and cherry combination because I think it had the best cake and frosting combination.", "category": "IT"}, {"instruction": "I dont think I should pursue higher education. From the following, what are some pros and cons of getting a masters education?\n\ndegree to show mastery of a subject\nTakes money\nHard work is required\nLosing out on entrepreneurial opportunities by the time spent studying\ndegree to show mastery of a subject\nskill development\nTime away from family\nSet you up for lifelong success\nrespect in society", "input": "", "output": "Pros:\nskill development\nrespect in society\ndegree to show mastery of a subject\nSet you up for lifelong success\n\nCons:\nTakes money\nHard work is required\nTime away from family\nLosing out on entrepreneurial opportunities by the time spent studying", "category": "IT"}, {"instruction": "Write an essay describing why baseball should be considered America's pastime.", "input": "", "output": "Baseball is the oldest professional sport in America. It began in the late 1800s. The sport dates back to to the civil war era, which is where it started to become known as America's pastime. It coincides with a plethora of historical and cultural aspects of life in America. While the game has a vast amount of historical significance, it also seems to reflect changes that occur in our society. For example, over the past several decades we have seen a huge influx in players from all over the globe, with greater representation from countries like Dominican Republic, Venezuela, Puerto Rico, Japan and many others. America has always been considered a land of opportunity and this is evident with baseball. The MLB is the most prestigious league when it comes to baseball and is dream destination for any player. If you are good enough, you are sometime given the opportunity to play here. Recently we have seen a huge increase in the international representation of players in the league. As times have changed and the world has become more global, we also see this transpire in baseball. Baseball is America's pastime because it is a preservation of historical values, but also adapts and reflects current cultural values, which always keeps it relevant.", "category": "IT"}, {"instruction": "Fix the typos and grammar below", "input": "Bernd Rosemeyer (14 October 1909 \u2013 28 January 1938) was a german racing driver andd speed record holder. He is considered on of the greatest racing driver of all time. Tough he was no a member of the Nazi party, she was made a member of the SS for propaganda purposes and hold the rank off Hauptsturmf\u00fchrer.", "output": "Bernd Rosemeyer (14 October 1909 \u2013 28 January 1938) was a German racing driver and speed record holder. He is considered one of the greatest racing drivers of all time. Though he was not a member of the Nazi party, he was made a member of the SS for propaganda purposes and held the rank of Hauptsturmf\u00fchrer.[1]", "category": "IT"}, {"instruction": "Who are some of the main characters in the show \"South Park\"?", "input": "", "output": "Some of the main characters in the show \"South Park\" are Cartman, Kenny, Kyle, and Stan.", "category": "IT"}, {"instruction": "Given this reference text about a video game, when was Donkey Kong released?", "input": "Nintendo was founded in 1889 as Nintendo Karuta[c] by craftsman Fusajiro Yamauchi and originally produced handmade hanafuda playing cards. After venturing into various lines of business during the 1960s and acquiring a legal status as a public company, Nintendo distributed its first console, the Color TV-Game, in 1977. It gained international recognition with the release of Donkey Kong in 1981 and the Nintendo Entertainment System and Super Mario Bros. in 1985.", "output": "1981", "category": "IT"}, {"instruction": "What are your 5 favourite museums in London?", "input": "", "output": "Here are my 5 favourite museums in London:\n\n- Natural History Museum\n- The National Gallery\n- British Museum\n- Tate Modern\n- Royal Air Force Museum", "category": "IT"}, {"instruction": "Who regulates banks in Australia?", "input": "", "output": "The Australian Prudential Regulatory Authority (APRA) is the prudential regulator of the Australian financial services industry.", "category": "IT"}, {"instruction": "Who was Nike in Greek Mythology?", "input": "In Greek mythology, Nike (/\u02c8na\u026aki/ (listen); Ancient Greek: \u039d\u03af\u03ba\u03b7, lit.\u2009'victory', ancient: [n\u01d0\u02d0.k\u025b\u02d0], modern: [\u02c8ni.ci]) was a goddess who personified victory in any field including art, music, war, and athletics.[1] She is often portrayed in Greek art as Winged Victory in the motion of flight;[2] however, she can also appear without wings as \"Wingless Victory\"[3] when she is being portrayed as an attribute of another deity such as Athena.[4] In Greek literature Nike is described as both an attribute and attendant to the gods Zeus and Athena.[5] Nike gained this honored role beside Zeus during the Titanomachy where she was one of the first gods to offer her allegiance to Zeus.[6] At Athens, Nike became a servant to Athena as well as an attribute of her due to the prominent status Athena held in her patron city. The fusion of the two goddesses at Athens has contributed to the ambiguity surrounding Nike's origins. It is unclear whether she originated from a character trait of the Greek goddess Athena or has always existed as an independent deity.[7] Her origin story in Greek mythology is also slightly ambiguous, with the Theogony claiming Nike to be the daughter of Styx and Pallas[8] while the Homeric Hymns describe Ares as being Nike's father.[9] Her Roman equivalent was Victoria.", "output": "Nike is the god of 'victory' in Greek mythology, and is often portrayed in art Winged Victory in the motion of flight.", "category": "IT"}, {"instruction": "Order the following list descending 8, 5,2,4,8,9", "input": "", "output": "This is the correct order 9,8,8,5,4,2", "category": "IT"}, {"instruction": "What are people from Wisconsin also referred to as?", "input": "", "output": "Some people refer to people from Wisconsin as Cheeseheads because of the amount of dairy that is produced by the state.  It was a derogatory term set in from a local sports rivalry with people from Illinois, however the Cheeseheads from Wisconsin embraced it, and now wear Cheesehead hats to local sporting events.", "category": "IT"}, {"instruction": "Write a response to a veteran interested in renting my house", "input": "", "output": "Hello,\n\nThank you for your inquiry, it\u2019s so nice to meet you. We\u2019d love to keep our home in the vet community, thank you for your service! When would you prefer to move in?\n\nI\u2019ll send you our rental application for you to complete as a next step.", "category": "IT"}, {"instruction": "What are the main considerations for chick care when raising backyard chickens?", "input": "Purchasing chickens - Chicken owners need to find a place to purchase chickens. Oftentimes, people purchase chickens at local feed stores, or through a hatchery.\n\nCreating a brooder - Chickens not being raised by a mother hen need assistance from their owner to survive. Chickens are raised in a brooder, which can look like a variety of things. Many individuals create their own brooder out of cardboard, plastic or wood. Different sources identify a variety of different square feet per bird needed, but a rule of thumb can be two square feet per chicken. This number can be lowered when the chick is young, but as they grow they will need at least two square feet per bird. It is important that chicken owners place their brooder in a draft-free place, yet still allow holes in the brooder for ventilation.[citation needed]\n\nHeating and bedding - Chicks require a warm environment. In a brooder, this warm environment is created artificially with a heat lamp. My Pet Chicken recommends a red heat lamp, because a white heat lamp can create a harsh and uncomfortable environment for the baby chicks. During the first week of the chicks' life, a temperature of 95 degrees Fahrenheit is required. The temperature can be decreased by 5 degrees F. each week of the chicks life, until they reach week 6. At week 6, the birds should have enough feathers grown to be moved into their chicken coop. Checking on chicks often is important, as chicks that are too cold will huddle together to attempt to retain warmth, and chicks that are too hot will spread out in the brooder in attempts to cool down. Temperature can be adjusted accordingly by lowering and raising the heat lamp in the chick's brooder. Temperature can also be monitored by the use of a thermometer.[citation needed] Wooden chips are often used in the bottom of the brooder as a bedding.[21]\n\nFood and water - Chicks require different food than adult chickens. Chicks need a mash or dust food so that they are able to digest it without grit. Adult chickens are able to digest grit, which allows them to eat bigger food pellets. Purchasing chick food from a local feed store that is specifically for baby chicks will ensure that all nutritional requirements are being met. There are different types of food for different types of chicks. Chicks that are grown for egg-laying purposes require a lower protein level than chicks that are grown as a source of meat. Chicks should be fed and given water out of containers that ensure the chicks' safety, as some containers can injure the chicks or cause easy drowning.[21]", "output": "When raising backyard chickens, there are several considerations for chick care.  First of all, you have to purchase the chicks.  Then, you have to create a brooder to keep the chicks in.  Next, you have to address heating and bedding.  Finally, you have to provide them with the appropriate food and water.", "category": "IT"}, {"instruction": "What happened to Captain Bligh after the Mutiny on the Bounty?", "input": "", "output": "Captain Bligh and eighteen other men were set adrift in mid-ocean by the mutineers.  Navigating by memory and astronomical observation alone, Bligh led the tiny boat all the way to the Dutch colony of Timor.  The men suffered greatly from hunger, thirst, and dangerous weather.  After reaching Timor, they sailed a proper ship to Batavia and, from there, returned to England.", "category": "IT"}, {"instruction": "Name a style of hot yoga.", "input": "", "output": "Bikram.", "category": "IT"}, {"instruction": "What is data visualisation in the context of business intelligence?", "input": "", "output": "Data visualisation in any context is the art and science of organising data in such a way that makes it easily consumable by a human audience. Specifically, in the context of business intelligence, you are typically presenting facts and insights about a business to stakeholders in order for them to take action and make better decisions to run that business. \n\nGood data visualisation combines user experience design with an understanding of how people interpret data to provide something intuitive and compelling for the intended audience to use. \n\nHere are some examples of design and interpretation choices you might make:\n\nIn terms of design, many cultures write on a page from top to bottom, left to right. This means that the first place on any visualisation that a person from any of these cultures will look is top left. Consequently, the content you put in the top left space of your dashboard should be a critically important part of the story you are trying to tell. In a culture that writes right to left you might put higher-value content on the right-hand side of the visualisation. \n\nIn terms of in terms interpretation you want to key into things that people are naturally good at interpreting. For example, if you are presenting sales by product category and you have 10 product categories you could choose to leverage a bar chart where the length of the bar represents sales or a pie chart where the angle of the slice represents sales. A bar chart would be a better choice because people find it easy to compare the length of a bar. We cannot distinguish between the sizes of a slice with anywhere near the same level of accuracy. Choosing a pie chart would leave your users spending more time and effort interpreting your data visualisation than if you had chosen a bar chart to present the information to them.", "category": "IT"}, {"instruction": "List the years in which Anne Rochelle Steely Ramirez participated in Sprint events based on the passage. Use bulleted format to represent the years and sort in ascending order.", "input": "Anne Rochelle Steely Ramirez (born October 23, 1962), n\u00e9e Anne Rochelle Steely, is a former long-distance runner who competed internationally for the United States. She specialized in the 3,000 meters on the track and later competed in road running events.\n\nShe made her international debut in cross country and helped the United States the women's team title at the IAAF World Cross Country Championships in 1985. Her focus changed to the 3,000 meters, a distance in which she was a two-time US champion (outdoors in 1991 and indoors in 1992). She reached the final of that event at the 1991 World Championships in Athletics and the 1992 Barcelona Olympics.\n\nSteely's performances deteriorated and she was diagnosed with hyperthyroidism. However, she made an athletic comeback in 1998 and she won two national road titles, as well as appearing at the Goodwill Games and IAAF World Half Marathon Championships that year. She made one more appearance at the World Half Marathon event in 2000, but retired to focus on education studies.", "output": "1985\n1991\n1992\n1998\n2000", "category": "IT"}, {"instruction": "What are the defense mechanisms?", "input": "Different theorists have different categorizations and conceptualizations of defence mechanisms. Large reviews of theories of defence mechanisms are available from Paulhus, Fridhandler and Hayes (1997)[13] and Cramer (1991).[14] The Journal of Personality published a special issue on defence mechanisms (1998).[15]\n\nIn the first definitive book on defence mechanisms, The Ego and the Mechanisms of Defence (1936),[16] Anna Freud enumerated the ten defence mechanisms that appear in the works of her father, Sigmund Freud: repression, regression, reaction formation, isolation, undoing, projection, introjection, turning against one's own person, reversal into the opposite, and sublimation or displacement.[17]\n\nSigmund Freud posited that defence mechanisms work by distorting id impulses into acceptable forms, or by unconscious or conscious blockage of these impulses.[16] Anna Freud considered defense mechanisms as intellectual and motor automatisms of various degrees of complexity, that arose in the process of involuntary and voluntary learning.[18]\n\nAnna Freud introduced the concept of signal anxiety; she stated that it was \"not directly a conflicted instinctual tension but a signal occurring in the ego of an anticipated instinctual tension\".[16] The signalling function of anxiety was thus seen as crucial, and biologically adapted to warn the organism of danger or a threat to its equilibrium. The anxiety is felt as an increase in bodily or mental tension, and the signal that the organism receives in this way allows for the possibility of taking defensive action regarding the perceived danger.\n\nBoth Freuds studied defence mechanisms, but Anna spent more of her time and research on five main mechanisms: repression, regression, projection, reaction formation, and sublimation. All defence mechanisms are responses to anxiety and how the consciousness and unconscious manage the stress of a social situation.[19]\n\nRepression: when a feeling is hidden and forced from the consciousness to the unconscious because it is seen as socially unacceptable\nRegression: falling back into an early state of mental/physical development seen as \"less demanding and safer\"[19]\nProjection: possessing a feeling that is deemed as socially unacceptable and instead of facing it, that feeling or \"unconscious urge\" is seen in the actions of other people[19]\nReaction formation: acting the opposite way that the unconscious instructs a person to behave, \"often exaggerated and obsessive\". For example, if a wife is infatuated with a man who is not her husband, reaction formation may cause her to \u2013 rather than cheat \u2013 become obsessed with showing her husband signs of love and affection.[19]\nSublimation: seen as the most acceptable of the mechanisms, an expression of anxiety in socially acceptable ways[19]\nOtto F. Kernberg (1967) developed a theory of borderline personality organization of which one consequence may be borderline personality disorder. His theory is based on ego psychological object relations theory. Borderline personality organization develops when the child cannot integrate helpful and harmful mental objects together. Kernberg views the use of primitive defence mechanisms as central to this personality organization. Primitive psychological defences are projection, denial, dissociation or splitting and they are called borderline defence mechanisms. Also, devaluation and projective identification are seen as borderline defences.[20]\n\nIn George Eman Vaillant's (1977) categorization, defences form a continuum related to their psychoanalytical developmental level.[21][non-primary source needed] They are classified into pathological, immature, neurotic and \"mature\" defences.\n\nRobert Plutchik's (1979) theory views defences as derivatives of basic emotions, which in turn relate to particular diagnostic structures. According to his theory, reaction formation relates to joy (and manic features), denial relates to acceptance (and histrionic features), repression to fear (and passivity), regression to surprise (and borderline traits), compensation to sadness (and depression), projection to disgust (and paranoia), displacement to anger (and hostility) and intellectualization to anticipation (and obsessionality).[22]\n\nThe Diagnostic and Statistical Manual of Mental Disorders (DSM-IV) published by the American Psychiatric Association (1994) includes a tentative diagnostic axis for defence mechanisms.[23] This classification is largely based on Vaillant's hierarchical view of defences, but has some modifications. Examples include: denial, fantasy, rationalization, regression, isolation, projection, and displacement.", "output": "There are multiple definitions of defense mechanism based on different theories. Generally, defense mechanisms are human responses responses to anxiety and how the consciousness and unconscious manage the stress of a social situation. Some of the most common defense mechanisms include:\n\nRepression: forcing a feeling from the consciousness to the unconscious because it is seen as socially unacceptable\n\nRegression: falling back into an early state of mental/physical development seen as less demanding and safer\n\nProjection: possessing a feeling that is deemed as socially unacceptable and instead of facing it, that feeling or \"unconscious urge\" is seen in the actions of other people\n\nReaction formation: acting the opposite way that the unconscious instructs a person to behave, \"often exaggerated and obsessive\". For example, if a wife is infatuated with a man who is not her husband, reaction formation may cause her to \u2013 rather than cheat \u2013 become obsessed with showing her husband signs of love and affection.\n\nSublimation: seen as the most acceptable of the mechanisms, an expression of anxiety in socially acceptable ways", "category": "IT"}, {"instruction": "What is the format of an email?", "input": "", "output": "Emails contain a username, the @ symbol, and a website domain. The website domain must contain a \".\" (dot), where the left and right side of the dot are nonempty. For example, lorem.ipsum@dolor.com is an email.", "category": "IT"}, {"instruction": "Why is it important to vote?", "input": "", "output": "Voting is a fundamental right and responsibility for citizens of any country. It helps citizens participate in democracy and influence key policies and decisions that influence everyone;s life", "category": "IT"}, {"instruction": "What was the first name of Thomas Attewell's brother and cousin?", "input": "Thomas Attewell (7 November 1869 \u2013 6 July 1937) was an English first-class cricketer. Attewell was a right-handed batsman who bowled right-arm medium pace. He was born at Keyworth, Nottinghamshire.\n\nHis brother William played first-class cricket for Nottinghamshire and the Marylebone Cricket Club, as well as Test cricket for England. His cousin Walter Attewell played first-class cricket for Nottinghamshire.", "output": "William and Walter", "category": "IT"}, {"instruction": "Classify the following Stephen King works as either a 'book', a 'movie' or 'both': Shawshank Redemption, Carrie, Under the Dome, Sleeping Beauties, The Shining, Sleepwalkers, Dreamcatcher, Bag of Bones, Creepshow, Insomnia, The Green Mile, Cat's Eye", "input": "", "output": "Shawshank Redemption - both\nCarrie - both\nUnder the Dome - book\nSleeping Beauties - book\nThe Shining - both\nSleepwalkers - movie\nDreamcatcher - both\nBag of Bones - book\nCreepshow - movie\nInsomnia - book\nThe Green Mile - both\nCat's Eye - movie", "category": "IT"}, {"instruction": "What are the steps to perform breathing meditation?", "input": "", "output": "The simplest, most elegant and accessible breathing meditation technique is called \"Sohum Sadhana\". The way to perform it is the following:\n1. Sit in a comfortable posture. Any posture which you can maintain without unsure stress anywhere on the body is fine.\n2. Close your eyes.\n3. Breathe in and out as you normally would.\n4. While inhaling, mentally recite the syllable \"So\", with a long \"o\", which stretches as long as inhalation action continues.\n5. While exhaling, mentally recite the syllable \"hum\", with the \"um\" pronounced as in \"rum\". Let the ending \"m\" sound continue until the end of the exhalation action.\n6. Keeps repeating steps 5 and 6 as long as you want.", "category": "IT"}, {"instruction": "What does airplane glide ratio mean?", "input": "", "output": "Airplane glide ratio is a measure of an airplane's glide performance. It is the ratio between distance forward to distance downward for an airplane in free, unpowered flight. Glide ratio is affected by properties such as aerodynamical drag, wing construction, and more. Sailplanes are among the most efficient airplanes, achieving glide ratios over 70:1.", "category": "IT"}, {"instruction": "Let me know if you think these are musical instruments or tools: Piano, chisel, Marimba, hammer, drill, scissor, violin, drums, screwdriver, brass, clarinet.", "input": "", "output": "Piano, marimba, violin, drums and brass are all musical instruments. Piano belongs to the percussive chordophone family. A violin is a bowed stringed musical instrument. Marimba and the drums are percussion instruments. A brass falls under the category of wind instruments, while a clarinet is considered a woodwind instrument.\n\nFrom your list, the following items are tools: chisel, hammer, drill and screwdriver. Chisel is a hand tool used for carving a hard material such as wood, stone, or metal. With a scissor, you normally cut paper and potentially some types of thin plastic. A hammer is a multi-purpose tool that you can use, for example, to secure objects with nails in wood, pull nails from wood and demolish objects. A drill is commonly used to drill holes or to drive screws into wood, metal, concrete and other materials. Last, a screwdriver is a mechanical hand tool that can you can use to drive screws in similar materials.", "category": "IT"}, {"instruction": "Who is the top baseball player based on offensive categories that are not in the major league baseball hall of fame with no chance of getting in while alive.", "input": "", "output": "While there is an exhaustive amount of ways one could approach this answer, there is arguable only one player in all of the major offensive categories that is not in the hall of fame.  That player is Pete Rose.   Players like Barry Bonds and Albert Pujols may have better overall statistics in the power categories of baseball, but they still have an outside chance to get into the hall of fame, whereas Pete Rose has been banned for life by major league baseball and does not have any current pathway into the hall of fame.  Speculation is that this will change posthumously, but the executives of major league baseball will not consider any change to this status while he is alive.", "category": "IT"}, {"instruction": "How difficult is it to learn how to juggle?", "input": "", "output": "Learning to juggle is not difficult, but requires consistent and deliberate practice to master. Most people are capable of learning the basics if they commit to practicing the movements over the course of a few weeks. Once you learn how to juggle with three balls, you can increase the number of balls to make it more difficult.", "category": "IT"}, {"instruction": "Identify which animal species is alive or extinct: Archelon Turtle, Bornean Orangutan", "input": "", "output": "Archelon Turtle is extinct, Bornean Orangutan is alive.", "category": "IT"}, {"instruction": "Give me a bulleted list of different ways to make a lot of money.", "input": "", "output": "The following are different ways you can make a lot of money:\n1. Obtain a high paying job\n2. Start a business\n3. Receive an inheritance\n4. Invest in real estate\n5. Buy stocks", "category": "IT"}, {"instruction": "What is a Fixed asset in finance?", "input": "", "output": "A fixed asset is one which is intended to be used for several years. Examples are buildings,\nmachinery and vehicles.", "category": "IT"}, {"instruction": "Extract the non-meat ingredients of the sandwich in the passage provided. Separate them with a pipe symbol.", "input": "A typical Vietnamese roll or sandwich is a fusion of meats and vegetables from native Vietnamese cuisine such as ch\u1ea3 l\u1ee5a (pork sausage), coriander leaf (cilantro), cucumber, pickled carrots, and pickled daikon combined with condiments from French cuisine such as p\u00e2t\u00e9, along with red chili and buttery mayonnaise. However, a wide variety of popular fillings are used, from x\u00edu m\u1ea1i (a Chinese cuisine) to even ice cream. In Vietnam, bread rolls and sandwiches are typically eaten for breakfast or as a snack.", "output": "cilantro | cucumber | picked carrots | pickled daikon | red chili | mayonnaise", "category": "IT"}, {"instruction": "What are some important things to bring on a bicycle ride.", "input": "", "output": "There are many things that you may want to bring on a bicycle ride. A tire repair kit is important for bicycle rides in case you get a flat tire. You should also wear a helmet to protect against serious injury in case of an accident. Some other useful things to bring on a bike ride may include water, snacks, sun glasses, sun screen, and a local map.", "category": "IT"}, {"instruction": "Think of lots of different sources of light to read a book", "input": "", "output": "A lamp, an overhead light, a candle, the sun, a book light", "category": "IT"}, {"instruction": "Give me a list of fantastic movies", "input": "", "output": "Oceans 11, Interstellar, The Imitation Game, and The Dark Knight", "category": "IT"}, {"instruction": "What are popular street foods from Maharashtra in India", "input": "", "output": "Some of the most popular street food list is Vada Pav, Misal Pav, Kanda Bhaji, Pav Bhaji , Sabudana Vada and Sabudana Khichadi. All of these are primarily vegetarian.", "category": "IT"}, {"instruction": "What is the world's oldest annual marathon based on the reference text below?", "input": "The Boston Marathon began on 19 April 1897, and was inspired by the success of the first marathon competition in the 1896 Summer Olympics. It is the world's oldest run annual marathon, and ranks as one of the world's most prestigious road racing events. Its course runs from Hopkinton in southern Middlesex County, to Copley Square in Boston. Johnny Hayes' victory at the 1908 Summer Olympics also contributed to the early growth of long-distance running and marathoning in the United States.[26][27] Later that year, races around the holiday season including the Empire City Marathon held on New Year's Day 1909 in Yonkers, New York, marked the early running craze referred to as \"marathon mania\".[28] Following the 1908 Olympics, the first five amateur marathons in New York City were held on days that held special meanings: Thanksgiving Day, the day after Christmas, New Year's Day, Washington's Birthday, and Lincoln's Birthday.[29]\n\nFrank Shorter's victory in the marathon at the 1972 Summer Olympics would spur national enthusiasm for the sport more intense than that which followed Hayes' win 64 years earlier.[27] In 2014, an estimated 550,600 runners completed a marathon within the United States.[30] This can be compared to 143,000 in 1980. Today marathons are held all around the world on a nearly weekly basis.[31]", "output": "The Boston Marathon is the world's oldest annual marathon, beginning on April 19th 1897.", "category": "IT"}, {"instruction": "From the passage provided, extract the year Pro Kabaddi League was established.", "input": "Asian Games\nMain article: Kabaddi at the Asian Games\n(video) Kabaddi being played in Japan, 2015\nKabaddi was played as a demonstration event at the First Asian Games in 1951,[6][7][8] and again in 1982,[12] before becoming a medal event for the first time in 1990.[12]\n\nThe Indian national team won every men's and women's kabaddi competition in the Asian Games from 2002 through 2014. At the 2018 Asian Games, Iran became the first country other than India to win gold medals in kabaddi, with India's men's team winning bronze, and India's women's team being beaten by Iran to win silver.[25]\n\nPro Kabaddi League\nMain article: Pro Kabaddi League\nThe Pro Kabaddi League was established in 2014.[26] The league modeled its business upon that of the Indian Premier League of Twenty20 cricket, with a large focus on marketing, the backing of local broadcaster Star Sports, and changes to the sport's rules and its presentation to make it more suitable for a television audience.[27] The Pro Kabaddi League quickly became a ratings success on Indian television; the 2014 season was watched by at least 435 million viewers over the course of the season, and the inaugural championship match was seen by 98.6 million viewers.[28][29]\n\nAdditional rules are used in the Pro Kabaddi League to encourage scoring: when a defensive side has three or fewer players remaining, tackles are worth two points instead of one. Furthermore, if a team performs two empty raids in a row, the next raider must score a point, or else they will be declared out and the opposing team will score a point.[14][15][16][17]", "output": "The Pro Kabaddi League was established in 2014", "category": "IT"}, {"instruction": "Given a reference text about Georg Friedrich Parrot, tell me when and where he was born as well as what he studied.", "input": "Georg Friedrich Parrot (15 July 1767 \u2013 8 July 1852) was a German scientist, the first rector of the Imperial University of Dorpat (today Tartu, Estonia) in what was then the Governorate of Livonia of the Russian Empire.[1]\n\nEducation\nGeorges-Fr\u00e9d\u00e9ric Parrot was born in M\u00f6mpelgard (now Montb\u00e9liard) (then part of the Duchy of W\u00fcrttemberg, from 1806 in France). His father, a surgeon by profession and the local duke's physician in ordinary, had a respectable position in the society becoming the mayor of his hometown. As the family was Protestants, they sent Georg Friedrich to study physics and mathematics at the University of Stuttgart in Stuttgart, the capital of the Duchy (1782\u20131786).", "output": "Georg Friedrich Parrot was born on July 15, 1767 in M\u00f6mpelgard. He studied physics and mathematics at the University of Stuttgart.", "category": "IT"}, {"instruction": "Who is the best golfer to ever play the game?", "input": "", "output": "Tiger Woods is the best golfer ever for several reasons. He set or broke most major records in the history of the PGA tour. He was named Player of the Year ten times and was the fifth player to ever win a career grand slam which he accomplished at the age of 24. He has won each major at least three times. There hasn't been a golfer that has been more dominant across every major category for as long as Tiger Woods was.", "category": "IT"}, {"instruction": "Classify the numbers based on their divisibility by 5 or 3\n15, 55, 33, 50, 99", "input": "", "output": "Divisible by 3: 15, 33, 99\nDivisible by 5: 15, 55, 50", "category": "IT"}, {"instruction": "Which of the following animals are primates: Human, Dog, Bonobos, Cat, Bats, Goat, Bears, Orangutans, Wolf, Lion, Squirrel, Koala, Cheetah, Deer, Orca, Gorillas, Camel, Hamsters, Lemurs, Blue whale, Chimpanzee", "input": "", "output": "Not all of them are primates! From that list the primates are:\n\n- Human\n- Bonobos\n- Orangutans\n- Gorillas\n- Lemurs\n- Chimpanzee", "category": "IT"}, {"instruction": "Given this paragraph about cycling, who holds the record for the most Tour de France stage victories?", "input": "As a road cyclist, Mark Cavendish turned professional in 2005, and achieved eleven wins in his first professional season. Cavendish has won 34 Tour de France stages, tying him for first on the all-time list with Eddy Merckx, contributing to a third-highest total of fifty-three Grand Tour stage victories. He won the Men's road race at the 2011 road world championships, becoming the second male British rider to do so after Tom Simpson. Cavendish has also won the points classification in all three of the grand tours: the 2010 Vuelta a Espa\u00f1a, the 2011, and 2021 Tours de France[15] and the 2013 Giro d'Italia. In 2012, he became the first person to win the final Champs-\u00c9lys\u00e9es stage in the Tour de France in four consecutive years.", "output": "Mark Cavendish is tied with Eddie Merckx for the most Tour de France stage victories with 34.", "category": "IT"}, {"instruction": "How many years passed from Ghana's decline to the Mali Empire consolidating western Sudan?", "input": "By the ninth century CE, a string of dynastic states, including the earliest Hausa states, stretched across the sub-Saharan savannah from the western regions to central Sudan. The most powerful of these states were Ghana, Gao, and the Kanem-Bornu Empire. Ghana declined in the eleventh century, but was succeeded by the Mali Empire which consolidated much of western Sudan in the thirteenth century. Kanem accepted Islam in the eleventh century.", "output": "Ghana declined in the 11th century, Mali Empire consolidated much of western Sudan in the 13th century, so 2 centuries passed which equals 200 years.", "category": "IT"}, {"instruction": "What are some good yoga poses for beginners?", "input": "", "output": "The practice of yoga can be a beneficial addition to a healthy lifestyle. Yoga is considered to increase flexibility and muscle strength. A few positions for beginners include :\n1. Downward facing dog\n2. Mountain pose\n3. Warrior I\n4. Warrior II\n5. Triangle pose\n\nThese gentler positions provide a safe introduction to the practice of yoga for beginners", "category": "IT"}, {"instruction": "What is Cryptocurrency?", "input": "A cryptocurrency, crypto-currency, or crypto is a digital currency designed to work as a medium of exchange through a computer network that is not reliant on any central authority, such as a government or bank, to uphold or maintain it.[2] It is a decentralized system for verifying that the parties to a transaction have the money they claim to have, eliminating the need for traditional intermediaries, such as banks, when funds are being transferred between two entities.[3]", "output": "Cryptocurrency is the digital currency built on the blockchain or other network which allows people to exchange and trade for goods. There are over 1000 different kinds of cryptocurrency around the world and each of them is designed differently. Currently, the popular cryptocurrencies are Bitcoin, Ethereum, and Dogecoin.", "category": "IT"}, {"instruction": "Write a brief about your recent vacation", "input": "", "output": "It was family time and no other place came to my mind for a relaxing time to be spent with family. The serene backwaters of the resort were the perfect destination to enjoy the long weekend. This was my daughter's first long drive and she enjoyed the outing and all the nearby vacation spots we visited. We enjoyed the tour and are looking forward to our next visit!", "category": "IT"}, {"instruction": "Write a haiku about sitting on the shore and watching the waves.", "input": "", "output": "I sit on the shore \nobserving the waves crashing\nover and over", "category": "IT"}, {"instruction": "From the passage provided, extract the names and published work of the early economists. Identify the name and then the published work separated with a dash. Separate the name and published works pairs with a semi-colon.", "input": "At the dawn as a social science, economics was defined and discussed at length as the study of production, distribution, and consumption of wealth by Jean-Baptiste Say in his Treatise on Political Economy or, The Production, Distribution, and Consumption of Wealth (1803). These three items are considered by the science only in relation to the increase or diminution of wealth, and not in reference to their processes of execution. Say's definition has prevailed up to our time, saved by substituting the word \"wealth\" for \"goods and services\" meaning that wealth may include non-material objects as well. One hundred and thirty years later, Lionel Robbins noticed that this definition no longer sufficed, because many economists were making theoretical and philosophical inroads in other areas of human activity. In his Essay on the Nature and Significance of Economic Science, he proposed a definition of economics as a study of a particular aspect of human behaviour, the one that falls under the influence of scarcity, which forces people to choose, allocate scarce resources to competing ends, and economize (seeking the greatest welfare while avoiding the wasting of scarce resources). For Robbins, the insufficiency was solved, and his definition allows us to proclaim, with an easy conscience, education economics, safety and security economics, health economics, war economics, and of course, production, distribution and consumption economics as valid subjects of the economic science.\" Citing Robbins: \"Economics is the science which studies human behavior as a relationship between ends and scarce means which have alternative uses\". After discussing it for decades, Robbins' definition became widely accepted by mainstream economists, and it has opened way into current textbooks. Although far from unanimous, most mainstream economists would accept some version of Robbins' definition, even though many have raised serious objections to the scope and method of economics, emanating from that definition. Due to the lack of strong consensus, and that production, distribution and consumption of goods and services is the prime area of study of economics, the old definition still stands in many quarters.", "output": "Jean-Baptiste Say - Treatise on Political Economy or, The Production, Distribution, and Consumption of Wealth;  Lionel Robbins - Essay on the Nature and Significance of Economic Science", "category": "IT"}, {"instruction": "Classify each of the following as either a country or a city: Sweden, France, Paris, Bali, Rotterdam, Seville, India, San Fransisco, Amritsar, Portugal", "input": "", "output": "Countries: Sweden, France, India, Portugal\nCities: Paris, Bali, Rotterdam,Seville,San Fransisco, Amritsar", "category": "IT"}, {"instruction": "What is the fastest train in the world?", "input": "", "output": "Shanghai Maglev in Shanghai, China", "category": "IT"}, {"instruction": "How to lose weight?", "input": "", "output": "1.\tDrink Plenty of water\n2.\tTake proper sleep\n3.\tEat high fibre foods\n4.\tAvoid junk foods\n5.\tEat Regular meals\n6.\tEat plenty of fruit and veggies\n7.\tExercise thrice a week", "category": "IT"}, {"instruction": "Tell me which animals are bigger than the average human: Dog, Mouse, Elephant, Rhino, Hippo, Cat, Squirrel.", "input": "", "output": "Sure. Here are the selections from above that are larger than the average human: Elephant, Rhino, and Hippo.", "category": "IT"}, {"instruction": "What is rheological weldability?", "input": "Rheological weldability (RW) of thermoplastics considers the materials flow characteristics in determining the weldability of the given material.[1] The process of welding thermal plastics requires three general steps, first is surface preparation. The second step is the application of heat and pressure to create intimate contact between the components being joined and initiate inter-molecular diffusion across the joint and the third step is cooling.[2] RW can be used to determine the effectiveness of the second step of the process for given materials.", "output": "Rheological weldability describes the effectiveness of applying heat and pressure to join two materials.", "category": "IT"}, {"instruction": "Is it safe to look at the sun directly?", "input": "", "output": "No, it is not safe to look directly at the sun as it can cause damage to the eyes", "category": "IT"}, {"instruction": "What are the toxic house plants for cats?", "input": "", "output": "If you have cats as pets, be careful about having these house plants around. Ingesting part of these plants can be very dangerous for your feline friends.\n-  Lilies such as easter lilies, stargazers, daylilies, etc. can cause kidney failure and death\n- Sago palm leaves can release a toxin that causes liver damage\n- Desert rose can affect heart rate and cause vomiting\n- Bulbs of plants such as daffodils and tulips can cause convulsions, diarrhea, and vomiting\n- a toxic chemical from azaleas can lead to coma, cardiovascular collapse and death", "category": "IT"}, {"instruction": "Given a reference text about the Mauritius fody, tell me what they look like.", "input": "The Mauritius fody (Foudia rubra) is a rare species of bird in the weaver family. It is endemic to the island of Mauritius. It is classified by BirdLife International as being endangered.[2] It is also on the United States' Endangered Species List with an endangered status.[3]\n\nThis bird is 14 centimeters long. Breeding males are olive brown with a red head, breast and rump patch and black lores.[2] While females, non-breeding males and juveniles are olive brown with white wing bars and a brown bill.\n\nThe bird lives in several types of forest, including degraded areas, as well as plantations. Stands of Japanese cedar (Cryptomeria japonica) have replaced native vegetation and now provide protection against predators.[4] It feeds on insects like grasshoppers, beetle larvae, caterpillars, and also spiders. Berries are eaten regularly by some individuals. It feeds on nectar regularly, using its specialised brush-tipped tongue.[5]\n\nThe bird is a weaver, the male and female cooperating to weave each nest, from material like grass, moss and small twigs.[4]", "output": "Male and female Mauritius fody birds have different appearances. Breeding males are olive brown with red heads, breast and rump patches, and black lores. Females and non-breeding males are olive brown with white wing bars and brown bills.", "category": "IT"}, {"instruction": "Given this article about Operation Aurora, which companies were targeted in the attacks?", "input": "Operation Aurora was a series of cyber attacks conducted by advanced persistent threats such as the Elderwood Group based in Beijing, China, with ties to the People's Liberation Army.[2] First publicly disclosed by Google on January 12, 2010, in a blog post,[1] the attacks began in mid-2009 and continued through December 2009.[3]\n\nThe attack was aimed at dozens of other organizations, of which Adobe Systems,[4] Akamai Technologies,[5] Juniper Networks,[6] and Rackspace[7] have publicly confirmed that they were targeted. According to media reports, Yahoo, Symantec, Northrop Grumman, Morgan Stanley,[8] and Dow Chemical[9] were also among the targets.\n\nAs a result of the attack, Google stated in its blog that it plans to operate a completely uncensored version of its search engine in China \"within the law, if at all,\" and acknowledged that if this is not possible, it may leave China and close its Chinese offices.[1] Official Chinese sources claimed this was part of a strategy developed by the U.S. government.[10]\n\nThe attack was named \"Operation Aurora\" by Dmitri Alperovitch, Vice President of Threat Research at cybersecurity company McAfee. Research by McAfee Labs discovered that \"Aurora\" was part of the file path on the attacker's machine that was included in two of the malware binaries McAfee said were associated with the attack. \"We believe the name was the internal name the attacker(s) gave to this operation,\" McAfee Chief Technology Officer George Kurtz said in a blog post.[11]\n\nAccording to McAfee, the primary goal of the attack was to gain access to and potentially modify source code repositories at these high-tech, security, and defense contractor companies. \"[The SCMs] were wide open,\" says Alperovitch. \"No one ever thought about securing them, yet these were the crown jewels of most of these companies in many ways\u2014much more valuable than any financial or personally identifiable data that they may have and spend so much time and effort protecting.\"[12]\n\nHistory\n\nFlowers left outside Google China's headquarters after its announcement it might leave the country\nOn January 12, 2010, Google revealed on its blog that it had been the victim of a cyber attack. The company said the attack occurred in mid-December and originated from China. Google stated that over 20 other companies had been attacked; other sources have since cited that more than 34 organizations were targeted.[9] As a result of the attack, Google said it was reviewing its business in China.[1] On the same day, United States Secretary of State Hillary Clinton issued a brief statement condemning the attacks and requesting a response from China.[13]\n\nOn January 13, 2010, the news agency All Headline News reported that the United States Congress plans to investigate Google's allegations that the Chinese government used the company's service to spy on human rights activists.[14]\n\nIn Beijing, visitors left flowers outside of Google's office. However, these were later removed, with a Chinese security guard stating that this was an \"illegal flower tribute\".[15] The Chinese government has yet to issue a formal response, although an anonymous official stated that China was seeking more information on Google's intentions.[16]\n\nAttackers involved\nFurther information: Cyberwarfare by China\nTechnical evidence including IP addresses, domain names, malware signatures, and other factors, show Elderwood was behind the Operation Aurora attack. The \"Elderwood\" group was named by Symantec (after a source-code variable used by the attackers), and is referred to as the \"Beijing Group\" by Dell Secureworks. The group obtained some of Google's source code, as well as access to information about Chinese activists.[17] Elderwood also targeted numerous other companies in the shipping, aeronautics, arms, energy, manufacturing, engineering, electronics, financial, and software sectors.[2][18]\n\nThe \"APT\" designation for the Chinese threat actors responsible for attacking Google is APT17.[19]\n\nElderwood specializes in attacking and infiltrating second-tier defense industry suppliers that make electronic or mechanical components for top defense companies. Those firms then become a cyber \"stepping stone\" to gain access to top-tier defense contractors. One attack procedure used by Elderwood is to infect legitimate websites frequented by employees of the target company \u2013 a so-called \"water hole\" attack, just as lions stake out a watering hole for their prey. Elderwood infects these less-secure sites with malware that downloads to a computer that clicks on the site. After that, the group searches inside the network to which the infected computer is connected, finding and then downloading executives' e-mails and critical documents on company plans, decisions, acquisitions, and product designs.[2]\n\nAttack analysis\nIn its blog posting, Google stated that some of its intellectual property had been stolen. It suggested that the attackers were interested in accessing Gmail accounts of Chinese dissidents. According to the Financial Times, two accounts used by Ai Weiwei had been attacked, their contents read and copied; his bank accounts were investigated by state security agents who claimed he was under investigation for \"unspecified suspected crimes\".[20] However, the attackers were only able to view details on two accounts and those details were limited to things such as the subject line and the accounts' creation date.[1]\n\nSecurity experts immediately noted the sophistication of the attack.[11] Two days after the attack became public, McAfee reported that the attackers had exploited purported zero-day vulnerabilities (unfixed and previously unknown to the target system developers) in Internet Explorer and dubbed the attack \"Operation Aurora\". A week after the report by McAfee, Microsoft issued a fix for the issue,[21] and admitted that they had known about the security hole used since September.[22] Additional vulnerabilities were found in Perforce, the source code revision software used by Google to manage their source code.[23][24]\n\nVeriSign's iDefense Labs claimed that the attacks were perpetrated by \"agents of the Chinese state or proxies thereof\".[25]\n\nAccording to a diplomatic cable from the U.S. Embassy in Beijing, a Chinese source reported that the Chinese Politburo directed the intrusion into Google's computer systems. The cable suggested that the attack was part of a coordinated campaign executed by \"government operatives, public security experts and Internet outlaws recruited by the Chinese government.\"[26] The report suggested that it was part of an ongoing campaign in which attackers have \"broken into American government computers and those of Western allies, the Dalai Lama and American businesses since 2002.\"[27] According to The Guardian's reporting on the leak, the attacks were \"orchestrated by a senior member of the Politburo who typed his own name into the global version of the search engine and found articles criticising him personally.\"[28]\n\nOnce a victim's system was compromised, a backdoor connection that masqueraded as an SSL connection made connections to command and control servers running in Illinois, Texas, and Taiwan, including machines that were running under stolen Rackspace customer accounts. The victim's machine then began exploring the protected corporate intranet that it was a part of, searching for other vulnerable systems as well as sources of intellectual property, specifically the contents of source code repositories.\n\nThe attacks were thought to have definitively ended on Jan 4 when the command and control servers were taken down, although it is not known at this point whether or not the attackers intentionally shut them down.[29] However, the attacks were still occurring as of February 2010.[3]\n\nResponse and aftermath\nThe German, Australian, and French governments publicly issued warnings to users of Internet Explorer after the attack, advising them to use alternative browsers at least until a fix for the security hole was made.[30][31][32] The German, Australian, and French governments considered all versions of Internet Explorer vulnerable or potentially vulnerable.[33][34]\n\nIn an advisory on January 14, 2010, Microsoft said that attackers targeting Google and other U.S. companies used software that exploits a hole in Internet Explorer. The vulnerability affects Internet Explorer versions 6, 7, and 8 on Windows 7, Vista, Windows XP, Server 2003, Server 2008 R2, as well as IE 6 Service Pack 1 on Windows 2000 Service Pack 4.[35]\n\nThe Internet Explorer exploit code used in the attack has been released into the public domain, and has been incorporated into the Metasploit Framework penetration testing tool. A copy of the exploit was uploaded to Wepawet, a service for detecting and analyzing web-based malware operated by the computer security group at the University of California, Santa Barbara. \"The public release of the exploit code increases the possibility of widespread attacks using the Internet Explorer vulnerability,\" said George Kurtz, CTO of McAfee, of the attack. \"The now public computer code may help cybercriminals craft attacks that use the vulnerability to compromise Windows systems.\"[36]\n\nSecurity company Websense said it identified \"limited public use\" of the unpatched IE vulnerability in drive-by attacks against users who strayed onto malicious Web sites.[37] According to Websense, the attack code it spotted is the same as the exploit that went public last week.[clarification needed] \"Internet Explorer users currently face a real and present danger due to the public disclosure of the vulnerability and release of attack code, increasing the possibility of widespread attacks,\" said George Kurtz, chief technology officer of McAfee, in a blog update.[38] Confirming this speculation, Websense Security Labs identified additional sites using the exploit on January 19.[39] According to reports from Ahnlab, the second URL was spread through the Instant Messenger network Misslee Messenger, a popular IM client in South Korea.[39]\n\nResearchers have created attack code that exploits the vulnerability in Internet Explorer 7 (IE7) and IE8\u2014even when Microsoft's recommended defensive measure (Data Execution Prevention (DEP)) is turned on.[dubious \u2013 discuss] According to Dino Dai Zovi, a security vulnerability researcher, \"even the newest IE8 isn't safe from attack if it's running on Windows XP Service Pack 2 (SP2) or earlier, or on Windows Vista RTM (release to manufacturing), the version Microsoft shipped in January 2007.\"[40]\n\nMicrosoft admitted that the security hole used had been known to them since September.[22] Work on an update was prioritized[41] and on Thursday, January 21, 2010, Microsoft released a security patch aiming to counter this weakness, the published exploits based on it and a number of other privately reported vulnerabilities.[42] They did not state if any of the latter had been used or published by exploiters or whether these had any particular relation to the Aurora operation, but the entire cumulative update was termed critical for most versions of Windows, including Windows 7.\n\nSecurity researchers continued to investigate the attacks. HBGary, a security firm, released a report in which they claimed to have found some significant markers that might help identify the code developer. The firm also said that the code was Chinese language based but could not be specifically tied to any government entity.[43]\n\nOn February 19, 2010, a security expert investigating the cyber-attack on Google, has claimed that the people behind the attack were also responsible for the cyber-attacks made on several Fortune 100 companies in the past one and a half years. They have also tracked the attack back to its point of origin, which seems to be two Chinese schools, Shanghai Jiao Tong University and Lanxiang Vocational School.[44] As highlighted by The New York Times, both of these schools have ties with the Chinese search engine Baidu, a rival of Google China.[45] Both Lanxiang Vocational and Jiaotong University have denied the allegation.[46][47]\n\nIn March 2010, Symantec, which was helping investigate the attack for Google, identified Shaoxing as the source of 21.3% of all (12 billion) malicious emails sent throughout the world.[48]\n\nGoogle retrospective\nOn October 3, 2022, Google on YouTube released a six-episode series[49] covering the events that occurred during Operation Aurora, with commentary from insiders who dealt with the attack, though the series primary focus was to reassure the Google-using public that measures are in place to counter hacking attempts.", "output": "Google, Adobe Systems, Akamai Technologies, Juniper Networks, Rackspace, Yahoo, Symantec, Northrop Grumman, Morgan Stanley, and Dow Chemical appear to have been targted in these attacks.  Some pubically confirmed this while others were claimed to be targeted in media reports.", "category": "IT"}, {"instruction": "From the text given, extract the iPhone Models and the announcement dates and list them using the bullets in the format {iPhone Models} - {Announcement Date}", "input": "Jobs unveiled the first-generation iPhone to the public on January 9, 2007, at the Macworld 2007 convention at the Moscone Center in San Francisco.[19] The iPhone incorporated a 3.5-inch multi-touch display with few hardware buttons, and ran the iPhone OS operating system with a touch-friendly interface, then marketed as a version of Mac OS X.[20] It launched on June 29, 2007, at a starting price of US$499 in the United States, and required a two-year contract with AT&T.[21]\n\n\nWorldwide iPhone availability:\n  iPhone available since its original release\n  iPhone available since the release of iPhone 3G\nOn July 11, 2008, at Apple's Worldwide Developers Conference (WWDC) 2008, Apple announced the iPhone 3G, and expanded its launch-day availability to twenty-two countries, and it was eventually released in 70 countries and territories.[22][23] The iPhone 3G introduced faster 3G connectivity, and a lower starting price of US$199 (with a two-year AT&T contract).[24] Its successor, the iPhone 3GS, was announced on June 8, 2009, at WWDC 2009, and introduced video recording functionality.[25]\n\n\nFirst iPhone on display under glass at the January 2007 Macworld show\nThe iPhone 4 was announced on June 7, 2010, at WWDC 2010, and introduced a redesigned body incorporating a stainless steel frame and a rear glass panel.[26] At release, the iPhone 4 was marketed as the \"world's thinnest smartphone\";[26] it uses the Apple A4 processor, being the first iPhone to use an Apple custom-designed chip. It introduced the Retina display, having four-times the display resolution of preceding iPhones, and was the highest-resolution smartphone screen at release;[26] a front-facing camera was also introduced, enabling video calling functionality via FaceTime.\n\nUsers of the iPhone 4 reported dropped/disconnected telephone calls when holding their phones in a certain way, and this issue was nicknamed \"antennagate\".[27] In January 2011, as Apple's exclusivity agreement with AT&T was expiring, Verizon announced that they would be carrying the iPhone 4, with a model compatible with Verizon's CDMA network releasing on February 10.\n\nThe iPhone 4S was announced on October 4, 2011, and introduced the Siri virtual assistant, a dual-core A5 processor, and an 8 megapixel camera with 1080p video recording functionality. The iPhone 5 was announced on September 12, 2012, and introduced a larger 4-inch screen, up from the 3.5-inch screen of all previous iPhone models, as well as faster 4G LTE connectivity.[30] It also introduced a thinner and lighter body made of aluminum alloy, and the 30-pin dock connector of previous iPhones was replaced with the new, reversible Lightning connector.[30]\n\n\nBottom angle comparison between iPhone 5C (top), iPhone 5s (middle), and iPhone 4S (bottom).\nThe iPhone 5S and iPhone 5C were announced on September 10, 2013. The iPhone 5S included a 64-bit A7 processor, becoming the first ever 64-bit smartphone;[31] it also introduced the Touch ID fingerprint authentication sensor. The iPhone 5C was a lower-cost device that incorporated hardware from the iPhone 5, into a series of colorful plastic frames.\n\nOn September 9, 2014, Apple introduced the iPhone 6 and iPhone 6 Plus, and included significantly larger screens than the iPhone 5S, at 4.7-inch and 5.5-inch respectively; both models also introduced mobile payment technology via Apple Pay.[33] Optical image stabilization was introduced to the 6 Plus' camera. The Apple Watch was also introduced on the same day, and is a smartwatch that operates in conjunction with a connected iPhone. Some users experienced bending issues from normal use with the iPhone 6 and 6 Plus, particularly on the latter model, and this issue was nicknamed \"bendgate\".[34]\n\nThe iPhone 6S and 6S Plus were introduced on September 9, 2015, and included a more bend-resistant frame made of a stronger aluminum alloy, as well as a higher resolution 12-megapixel main camera capable of 4K video recording.[35] The first-generation iPhone SE was introduced on March 21, 2016, and was a low-cost device that incorporated newer hardware from the iPhone 6S, in the frame of the older iPhone 5S.[36]\n\nThe iPhone 7 and 7 Plus were announced on September 7, 2016, which introduced larger camera sensors, IP67-certified water and dust resistance, and a quad-core A10 Fusion processor utilizing big.LITTLE technology;[37] the 3.5mm headphone jack was removed, and was followed by the introduction of the AirPods wireless earbuds.[38] Optical image stabilization was added to the 7's camera. A second telephoto camera lens was added on the 7 Plus, enabling two-times optical zoom, and \"Portrait\" photography mode which simulates bokeh in photos.[39]\n\nThe iPhone 8, 8 Plus, and iPhone X were announced on September 12, 2017, in Apple's first event held at the Steve Jobs Theater in Apple Park. All models featured rear glass panel designs akin to the iPhone 4, wireless charging, and a hexa-core A11 Bionic chip with \"Neural Engine\" AI accelerator hardware. The iPhone X additionally introduced a 5.8-inch OLED \"Super Retina\" display with a \"bezel-less\" design, with a higher pixel density and contrast ratio than previous iPhones with LCD displays, and introduced a stronger frame made of stainless steel. It also introduced Face ID facial recognition authentication hardware, in a \"notch\" screen cutout, in place of Touch ID;[40][41] the home button was removed to make room for additional screen space, replacing it with a gesture-based navigation system.[42] At its US$999 starting price, the iPhone X was the most expensive iPhone at launch.[43]\n\n\nPicture of the cameras on the iPhone 13 Pro. Newer iPhone models have been praised for their camera quality.\nThe iPhone XR, iPhone XS, and XS Max were announced on September 12, 2018. All models featured the \"Smart HDR\" computational photography system, and a significantly more powerful \"Neural Engine\".[44] The XS Max introduced a larger 6.5-inch screen. The iPhone XR included a 6.1-inch LCD \"Liquid Retina\" display, with a \"bezel-less\" design similar to the iPhone X, but does not include a second telephoto lens; it was made available in a series of vibrant colors, akin to the iPhone 5C, and was a lower-cost device compared to the iPhone X and XS.[45]\n\nThe iPhone 11, 11 Pro, and 11 Pro Max were announced on September 10, 2019. The iPhone 11 was the successor to the iPhone XR, while the iPhone 11 Pro and 11 Pro Max succeeded the iPhone XS and XS Max. All models gained an ultra-wide lens, enabling two-times optical zoom out, as well as larger batteries for longer battery life.[46][47] The second-generation iPhone SE was introduced on April 17, 2020, and was a low-cost device that incorporated newer hardware from the iPhone 11, in the frame of the older iPhone 8, while retaining the home button and the Touch ID sensor.[48]\n\nThe iPhone 12, 12 Mini, 12 Pro, and 12 Pro Max were announced via a livestream event on October 13, 2020. All models featured OLED \"Super Retina XDR\" displays, introduced faster 5G connectivity, and the MagSafe magnetic charging and accessory system; a slimmer flat-edged design was also introduced, which combined with stronger glass-ceramic front glass, added better drop protection compared to previous iPhones.[49][50] The iPhone 12 Mini introduced a smaller 5.4-inch screen, while the 12 Pro and 12 Pro Max had larger screens of 6.1-inch and 6.7-inch respectively. The iPhone 12 Pro and 12 Pro Max additionally added a Lidar sensor for better accuracy in augumented reality (AR) applications.\n\nThe iPhone 13, 13 Mini, 13 Pro, and 13 Pro Max were announced via a livestream event on September 14, 2021. All models featured larger camera sensors, larger batteries for longer battery life, and a narrower \"notch\" screen cutout.[51] The iPhone 13 Pro and 13 Pro Max additionally introduced smoother adaptive 120 Hz refresh rate \"ProMotion\" technology in its OLED display, and three-times optical zoom in the telephoto lens.[52] The low-cost third-generation iPhone SE was introduced on March 8, 2022, and incorporated the A15 Bionic chip from the iPhone 13, but otherwise retained similar hardware to the second-generation iPhone SE.\n\nThe iPhone 14, 14 Plus, 14 Pro, and 14 Pro Max were announced on September 7, 2022. All models introduced satellite phone emergency calling functionality. The iPhone 14 Plus introduced the large 6.7-inch screen size, first seen on the iPhone 12 Pro Max, into a lower-cost device.[53] The iPhone 14 Pro and 14 Pro Max additionally introduced a higher-resolution 48-megapixel main camera, the first increase in megapixel count since the iPhone 6S; it also introduced always-on display technology to the lock screen, and an interactive status bar interface integrated in a redesigned screen cutout, entitled \"Dynamic Island\".", "output": "Here is a bullet list of iPhone Models and the corresponding announcement dates in the format {iPhone Models} - {Announcement Date}:\n\n{first generation iPhone} - {January 9, 2007}\n{iPhone 3G} - {July 11, 2008}\n{iPhone 3GS} - {June 8, 2009}\n{iPhone 4} - {June 7, 2010}\n{iPhone 4s} - {October 4, 2011}\n{iPhone 5} - {September 12, 2012}\n{iPhone 5S and iPhone 5C} - {September 10, 2013}\n{iPhone 6 and iPhone 6 Plus} - {September 9, 2014}\n{iPhone 6S and iPhone 6S Plus} - {September 9, 2015}\n{first generation iPhone SE} - {March 21, 2016}\n{iPhone 7 and iPhone 7 Plus} - {September 7, 2016}\n{iPhone 8, iPhone 8 Plus and iPhone X} - {September 12, 2017}\n{iPhone XR, iPhone XS, and iPhone XS Max} - {September 12, 2018}\n{iPhone 11, iPhone 11 Pro and iPhone 11 Pro Max} - {September 10, 2019}\n{second generation iPhone SE} - {April 17, 2020}\n{iPhone 12, iPhone 12 Mini, iPhone 12 Pro, and iPhone 12 Pro Max} - {October 13, 2020}\n{iPhone 13, iPhone 13 Mini, iPhone 13 Pro and iPhone 13 Pro Max} - {September 14, 2021}\n{third generation iPhone SE} - {March 8, 2022}\n{iPhone 14, iPhone 14 Plus, iPhone 14 Pro and iPhone 14 Pro Max} - {September 7, 2022}", "category": "IT"}, {"instruction": "Please share some important points to remember for Oscar awards from the given text", "input": "The Academy Awards, also known as the Oscars, are awards for artistic and technical merit for the film industry. They are presented annually by the Academy of Motion Picture Arts and Sciences (AMPAS), in recognition of excellence in cinematic achievements as assessed by the Academy's voting membership. The Academy Awards are regarded by many as the most prestigious, significant awards in the entertainment industry in the United States and worldwide. The Oscar statuette depicts a knight rendered in the Art Deco style.", "output": "1.\tThe Oscars, usually referred to as the Academy Awards, are prizes given to filmmakers for outstanding artistic and technical achievement.\n2.\tThe Academy of Motion Picture Arts and Sciences (AMPAS) bestows them annually in appreciation of outstanding contributions to cinema as judged by the Academy's voting membership.\n3.\tMany people consider the Academy Awards to be the most prestigious and important honours in the American and international entertainment industries.\n4.\tThe Oscar trophy has an Art Deco-styled rendering of a knight.", "category": "IT"}, {"instruction": "What is a phenotype?", "input": "", "output": "In genetics and genomics, the phenotype  is the set of observable characteristics or traits of an organism. The term covers the organism's morphology (physical form and structure), its developmental processes, its biochemical and physiological properties, its behavior, and the products of behavior. An organism's phenotype results from two basic factors: the expression of an organism's genetic code (its genotype) and the influence of environmental factors. Both factors may interact, further affecting the phenotype. When two or more clearly different phenotypes exist in the same population of a species, the species is called polymorphic. A well-documented example of polymorphism is Labrador Retriever coloring; while the coat color depends on many genes, it is clearly seen in the environment as yellow, black, and brown. Richard Dawkins in 1978 and then again in his 1982 book The Extended Phenotype suggested that one can regard bird nests and other built structures such as caddisfly larva cases and beaver dams as \"extended phenotypes\".\n\nWilhelm Johannsen proposed the genotype\u2013phenotype distinction in 1911 to make clear the difference between an organism's hereditary material and what that hereditary material produces. The distinction resembles that proposed by August Weismann (1834\u20131914), who distinguished between germ plasm (heredity) and somatic cells (the body). More recently, in The Selfish Gene (1976), Dawkins distinguished these concepts as replicators and vehicles.\n\nThe genotype\u2013phenotype distinction should not be confused with Francis Crick's central dogma of molecular biology, a statement about the directionality of molecular sequential information flowing from DNA to protein, and not the reverse.", "category": "IT"}, {"instruction": "What is a less known rule or move in Chess?", "input": "", "output": "En passant", "category": "IT"}, {"instruction": "What team represents Concordia University in Irvine, California?", "input": "The Concordia Golden Eagles are the athletic teams that represent Concordia University Irvine, located in Irvine, California, in intercollegiate sports as a member of the Division II level of the National Collegiate Athletic Association (NCAA). The Golden Eagles primarily compete in the Pacific West Conference (PacWest) for most of their sports since the 2015\u201316 academic year; while its men's volleyball team competes in the Mountain Pacific Sports Federation (MPSF); and its men's water polo team competes in the Western Water Polo Association (WWPA). CUI previously competed in the Golden State Athletic Conference (GSAC) of the National Association of Intercollegiate Athletics (NAIA) from 1987\u201388 to 2014\u201315; and as an NAIA Independent from 1981\u201382 to 1986\u201387. The CUI women's water polo team competed in the Golden Coast Conference (GCC) until the 2022 spring season.", "output": "The Concordia Golden Eagles represent Concordia University Irvine. The Golden Eagles are a member of the Division II level of the National Collegiate Athletic Association (NCAA) and primarily compete in the Pacific West Conference.", "category": "IT"}, {"instruction": "How many syllables are in the word smarter?", "input": "", "output": "There are two syllables in the word smarter: smart-er.", "category": "IT"}, {"instruction": "Why Paris is know as the city of light ?", "input": "", "output": "This is more a marketing conception of Paris, some historians think that this name came from the time where Philippe Lebon installed gas lighting on city monuments, covered passages and streets. Since then, more than 56000 street lights  make Paris the city of light", "category": "IT"}, {"instruction": "What are the main ingredients for making bread?", "input": "", "output": "Flour, water, yeast, and salt", "category": "IT"}, {"instruction": "Provide a list of diseases which spread in the Diamond Princess and the virus that caused them. Use bulleted list in the format \u2018Disease Name - Virus Name - year\u2019.", "input": "Diamond Princess is a British-registered cruise ship owned and operated by Princess Cruises. She began operation in March 2004 and primarily cruises in Asia during the northern hemisphere summer and Australia during the southern hemisphere summer. She is a subclassed Grand-class ship, which is also known as a Gem-class ship. Diamond Princess and her sister ship, Sapphire Princess, are the widest subclass of Grand-class ships, as they have a 37.5-metre (123 ft 0 in) beam, while all other Grand-class ships have a beam of 36 metres (118 ft 1 in). Diamond Princess and Sapphire Princess were both built in Nagasaki, Japan, by Mitsubishi Industries.\n\nThere have been two notable outbreaks of infectious disease on the ship \u2013 an outbreak of gastroenteritis caused by norovirus in 2016 and an outbreak of COVID-19 caused by SARS-CoV-2 in 2020. In the latter incident, the ship was quarantined for nearly a month with her passengers on board, and her passengers and crew were subject to further quarantine after disembarking. At least 712 out of the 3,711 passengers and crew were infected,[2] and by mid-April 2020 nine had died.[3][4]", "output": "Gastroenteritis - norovirus - 2016\nCOVID-19 - SARS-CoV-2 - 2020", "category": "IT"}, {"instruction": "Give me a list of ways to lose weight", "input": "", "output": "* Get more active\n* Drink plenty of water\n* Use a smaller plate\n* Cut down on alcohol", "category": "IT"}, {"instruction": "Who are the best guitarists of all time?", "input": "", "output": "Although there have been many great guitarists over the years, Slash, Eric Clapton, Eddie Van Halen, Jimi Hendrix, Carlos Santana, Slash, Prince and Jimmy Page are the most commonly thought of as the best ever.", "category": "IT"}, {"instruction": "What happens if don't drink water", "input": "", "output": "Getting enough water every day is essential for your health. Drinking water can prevent dehydration, a condition that can cause unclear thinking, result in mood change, cause your body to overheat, and lead to constipation and kidney stones.\nPeople who don't drink enough water daily are at greater risk of kidney stones, heart valve problems, and cancer. Even minor dehydration can affect physical and mental performance. Drinking water is also essential for the health of your mouth.", "category": "IT"}, {"instruction": "How to give a good presentation?", "input": "", "output": "Any good presentations should be well-timed. The presenter should make eye contact with the audience. They should also make use of power pauses - count \"1, 2, 3, 4, 5\" - before moving on. It may sound awkward for you but silence can be immensely powerful for audience to absorb the message. Don't be afraid to be yourself on the stage. Be mindful of your body language on the stage. Don't pace like a lion and find your resting pose. The most important thing though, is to practice! Just as how you wouldn't show up to a swimming competition without ever practicing swimming, you wouldn't just stand on the stage and expect to be able to give a good presentation. Practice is key!", "category": "IT"}, {"instruction": "Based on this article, considerations of what time zone is used for determining what land is in the dead man zone?", "input": "The dead man zone is the area directly around a bushfire that is likely to burn within five minutes given the current wind conditions or an anticipated change in wind direction. The distance this zone extends from the firefront is highly dependent on terrain, windspeed, fuel type and composition, relative humidity and ambient temperature, and can range from under 100 metres (330 ft) to well over 1 kilometre (3,300 ft).[1]", "output": "A five minute period in the future is used for creating the dead man zone.", "category": "IT"}, {"instruction": "How are the characters Balrog, Vega and M. Bison connected in Street Fighter II?", "input": "Balrog, an American boxer with a similar appearance to Mike Tyson. Called M. Bison in Japan. Once one of the world's greatest heavyweight boxers, he began working for Shadaloo for easy money. Vega, a Spanish bullfighter who wields a claw and uses a unique style of ninjutsu. Called Balrog in Japan. He is vain and wishes to eliminate ugly people from the world. Sagat, a Muay Thai kickboxer from Thailand and former World Warrior champion from the original Street Fighter. He was once known as The King of Street Fighters until he got demoted as The King of Muai Thai in his own tournament due to a narrow defeat at the hands of Ryu's shoryuken (rising dragon punch) which left a deep gash across his chest. Ever since that moment he felt disgrace, and will do anything to have a grudge match with Ryu to get his title back, even if it takes joining forces with Shadaloo. M. Bison, the leader of the criminal organization Shadaloo, who uses a mysterious power known as Psycho Power, and the final opponent of the game. Called Vega in Japan.", "output": "Balrog, an American boxer who resembles Mike Tyson, is called M. Bison in Japan. Vega, a Spanish bullfighter with a claw is called Balrog in Japan. M. Bison, the final opponent of the game, is called Vega in Japan.", "category": "IT"}, {"instruction": "Is karaoke fun?", "input": "", "output": "It depends.  Some people like karaoke, and some don't.  You might enjoy karaoke if, for example, you have an outgoing personality, like to sing or perform publicly, or enjoy bonding with others over music.  Others might find karaoke to be loud or may not like listening to amateur performers, who at times can also be intoxicated if performing at a karaoke bar.  In addition, when at a public location that offers karaoke, the songs are selected by the performer, so you cannot predict whether you will enjoy the music selection (unless you may happen to rent a private room where you can select all of the songs yourself, which is offered at certain karaoke institutions).  Interestingly, whether or not you personally would consider yourself to have a good voice does not always determine how much you will enjoy karaoke.", "category": "IT"}, {"instruction": "Who was the first coach of the Seattle SuperSonics?", "input": "On December 20, 1966, Los Angeles businessmen Sam Schulman and Eugene V. Klein, both of whom owned the AFL side San Diego Chargers, and a group of minority partners were awarded an NBA franchise for Seattle, the first major-league sports franchise in the city. Schulman served as the active partner and head of team operations, and named the team SuperSonics as a nod to the city\u2019s ties to the aviation industry, with Boeing's having recently been awarded a contract for an SST project.\n\nSeattle SuperSonics began play on October 13, 1967; they were coached by Al Bianchi, and included All-Star guard Walt Hazzard and All-Rookie Team members Bob Rule and Al Tucker. The expansion team debuted in San Francisco with a 144\u2013116 loss in their first game against Golden State Warriors. On October 21, the Seattle team's first win came against the San Diego Rockets in overtime 117\u2013110, and SuperSonics finished the season with a 23\u201359 record.", "output": "Al Bianchi was the first coach.", "category": "IT"}, {"instruction": "Name one science fiction book from China", "input": "", "output": "Three body problem is good science fiction, which win Hugo Award for best novel in 2015. It makes a good story about time and civilization. It also describes reactions from different people when they know the existence of aliens.", "category": "IT"}, {"instruction": "Why is the forum in Rome named the forum?", "input": "The Roman Forum, also known by its Latin name Forum Romanum (Italian: Foro Romano), is a rectangular forum (plaza) surrounded by the ruins of several important ancient government buildings at the center of the city of Rome. Citizens of the ancient city referred to this space, originally a marketplace, as the Forum Magnum, or simply the Forum.\n\nFor centuries the Forum was the center of day-to-day life in Rome: the site of triumphal processions and elections; the venue for public speeches, criminal trials, and gladiatorial matches; and the nucleus of commercial affairs. Here statues and monuments commemorated the city's great men. The teeming heart of ancient Rome, it has been called the most celebrated meeting place in the world, and in all history. Located in the small valley between the Palatine and Capitoline Hills, the Forum today is a sprawling ruin of architectural fragments and intermittent archaeological excavations attracting 4.5 million or more sightseers yearly.", "output": "The Forum in Rome is the location of the ruins of the ancient city of Rome.  The forum is derived from Latin, meaning rectangular plaza.  The plaza was the center of activity in Rome.  Staging speeches trials and public gatherings.", "category": "IT"}, {"instruction": "Which football team should I support?", "input": "", "output": "There are many different ways that people decide what football team to support. Many choose to support their closest team geographically. This can be for many reasons, but common among them is that it should be easier for them to attend the games, or that they might feel a sense of local pride. Some choose to support teams based on the influence of their friends or family. For example, a child may support a team because their parents do, or a person may support a team because they are introduced to that team through their friends. Some people only like to support a team that wins often, and so may base their decision on which team is most successful in current times. Finally, people may support a team because they like their style of play.", "category": "IT"}, {"instruction": "Give me some suggestions to stop my kids from whining.", "input": "", "output": "1. Explain that there are other ways to communicate.\n2. Ignore your child's whining, step away if you can't.\n3. Enforce discipline.", "category": "IT"}, {"instruction": "How does a Husqvarna automatic lawn mower operate.", "input": "", "output": "The Husqvarna Automower operates very similarly to a Roomba automated vacuum cleaner. However the main difference is that you have to lay down a wire perimeter about two inches below the lawn to guide it and it requires electrical power, usually low voltage. Once it is set up, the lawn mower can be scheduled to operate every evening on a schedule that works for you. It will cut about 1mm of grass per night and those cuttings will feed your lawn.", "category": "IT"}, {"instruction": "What name is Beijing also known by?", "input": "Beijing (/be\u026a\u02c8d\u0292\u026a\u014b/ bay-JING;[9][10] Chinese: \u5317\u4eac; pinyin: B\u011bij\u012bng; Mandarin pronunciation: [pe\u0300\u026a.t\u0255i\u0301\u014b] (listen)), alternatively romanized as Peking[11] (/pi\u02d0\u02c8k\u026a\u014b/ pee-KING),[12] is the capital of the People's Republic of China. With over 21 million residents, Beijing is the world's most populous national capital city and is China's second largest city after Shanghai.[13] It is located in Northern China, and is governed as a municipality under the direct administration of the State Council with 16 urban, suburban, and rural districts.[14] Beijing is mostly surrounded by Hebei Province with the exception of neighboring Tianjin to the southeast; together, the three divisions form the Jingjinji megalopolis and the national capital region of China.", "output": "B\u011bij\u012bng is alternatively romanized as Peking and is the capital of the People's Republic of China", "category": "IT"}, {"instruction": "How old is Tamil language?", "input": "Tamil is one of the longest-surviving classical languages of India.[11][12] A. K. Ramanujan described it as \"the only language of contemporary India which is recognizably continuous with a classical past\".[13] The variety and quality of classical Tamil literature has led to it being described as \"one of the great classical traditions and literatures of the world\".[14] Recorded Tamil literature has been documented for over 2000 years.[15] The earliest period of Tamil literature, Sangam literature, is dated from c. 300 BC until AD 300.[16][17] It has the oldest extant literature among Dravidian languages. The earliest epigraphic records found on rock edicts and 'hero stones' date from around the 3rd century BC.[18][19] About 60,000 of the approximately 100,000 inscriptions found by the Archaeological Survey of India in India are in Tamil Nadu. Of them, most are in Tamil, with only about 5 percent in other languages.[20] Tamil language inscriptions written in Brahmi script have been discovered in Sri Lanka and on trade goods in Thailand and Egypt.[21][22] The two earliest manuscripts from India,[23][24] acknowledged and registered by the UNESCO Memory of the World register in 1997 and 2005, were written in Tamil.[25]", "output": "Tamil language is one of the oldest and longest surviving classical language and is existing from 300 BC. Tamil as a literature has been documented for over 2000 years. Earliest epigraphic records found on rocks date back to 3rd century BC. It is also the official language of Singapore and Sri lanka apart from Tamil Nadu state in India.", "category": "IT"}, {"instruction": "What causes a spinning top to stop?", "input": "", "output": "Friction.  If using a frictionless environment, a top could spin indefinitely", "category": "IT"}, {"instruction": "When did Iranians convert to Islam?", "input": "The Islamization of Iran occurred as a result of the Muslim conquest of Persia in 633\u2013654. It was a long process by which Islam, though initially rejected, eventually spread among the population on the Iranian Plateau. Iranian peoples have maintained certain pre-Islamic traditions, including their language and culture, and adapted them with Islamic codes. These two customs and traditions merged as the \"Iranian Islamic\" identity.", "output": "Unlike the popular opinion that Arabs converted Iranians to Islam after defeating the Sasanian Empire, Iranians continued to practice their native religions for many centuries. The conversion to Islam was a slow process which was aided by differentiated tax systems for Muslims and non-muslims.", "category": "IT"}, {"instruction": "Why Cancun is famous", "input": "", "output": "Cancun has some best resorts in the World with all inclusive food and beverage with Private beach", "category": "IT"}, {"instruction": "Which are the top 3 states of India that account for receiving the maximum number of interstate emigrants?", "input": "The first population census in India was conducted in 1873. Since then the a decennial census has been conducted in 1881, 1891, 1901, 1911, 1921, 1931, and 1941 by the Government. Since India's independence in 1947, a census has been carried out every 10 years by the Indian Government, starting from 1951. The census in India is carried out by the Office of the Registrar General and Census Commissioner under the Ministry of Home Affairs, and is one of the largest administrative tasks conducted by a federal government.\n\nLatest population figures are based on data from the 2011 census of India.[6] During the decade of 2001\u20132011, India's annual population rising rate has slowed down from 2.15 to 1.76.[6] Based on decennial census data, Dadra and Nagar Haveli shows the highest growth rate of 55.5 percent. It is followed by Daman and Diu (53.5 percent), Meghalaya (27.8 percent) and Arunachal Pradesh (25.9 percent). Nagaland recorded the lowest growth rate of -0.5 percent.\n\nIndia has 641,000 inhabited villages and 72.2 percent of the total population reside in these rural areas.[6] Of them, 145,000 villages have a population size of 500\u2013999 persons; 130,000 villages have a population size of 1000\u20131999 and 128,000 villages have a population size of 200\u2013499. There are 3,961 villages that have a population of 10,000 persons or more. India's 27.8 percent urban population lives in more than 5,100 towns and over 380 urban agglomerations. In the decade of 1991\u20132001, migration to major cities caused a rapid increase in urban population. On the basis of net migrants by last residence during the past decade, Maharashtra had the most immigration with 2.3 million, followed by the National Capital Territory of Delhi (1.7 million), Gujarat (0.68 million) and Haryana (0.67 million). Uttar Pradesh (\u22122.6 million) and Bihar (\u22121.7 million) topped the list for interstate emigration. The four states of Uttar Pradesh, Maharashtra, Bihar, West Bengal and account for almost half (48.89 percent) of the total Indian population.", "output": "Maharashtra, National Capital of Delhi and Gujarat", "category": "IT"}, {"instruction": "When was the Bitcoin whitepaper published?", "input": "", "output": "The Bitcoin whitepaper was published on October 31, 2008.", "category": "IT"}, {"instruction": "Identify which car manufacturer is German or American: Jeep, Alpina", "input": "", "output": "Alpina is German, Jeep is American", "category": "IT"}, {"instruction": "How can I better learn a new language?", "input": "", "output": "Learning a language by using it is the most efficient way. Having a partner to practice not only help you work on your pronunciation and accent, it also incentivize you to keep practicing (similar to how having a gym buddy makes you go to the gym more often). \n\nLanguage are also meant to communicate. Allowing yourself for mistakes, whether it is an accent, bad conjugation would allow you to keep practicing and would result having a broader set of words and sentences you can use. From there correcting mistakes becomes easier as you naturally find relations between conjugation, forms etc.", "category": "IT"}, {"instruction": "From this passage, tell me what was the highest grossing movie in 2022 and what was the second highest grossing movie?", "input": "Avatar: The Way of Water became the 51st film to gross $ 1 billion worldwide,[3] the sixth film to gross $2 billion worldwide, the sixth-fastest film to cross the billion-dollar mark at 14 days,[4] the second-fastest to gross the $2 billion mark,[5][6] the highest grossing film of 2022,[7] and the highest-grossing film of the COVID-19 pandemic era.[8]\nIt had the 11th-biggest global opening of all time and the third-biggest global opening for a film in the pandemic era behind Spider-Man: No Way Home and Doctor Strange in the Multiverse of Madness, earning $441.7 million in its first weekend.[9][10]\nIt also achieved the second-highest global opening weekend ever for a film released in IMAX cinemas with $48.8 million.[9]\nWith the release of Avatar: The Way of Water, Walt Disney Studios Motion Pictures led over other film distributors in worldwide box office grosses and crossed the $4.9 billion mark for the eighth year.[11] Disney\u2019s cumulative gross was generated from 16 film releases across its various studio divisions.[12]\nTop Gun: Maverick became the 49th film to gross $1 billion worldwide.[13]\nAdditionally, the film surpassed Mission: Impossible \u2013 Fallout (2018) to become Tom Cruise's highest-grossing film of all time at the worldwide box office and also surpassed War of the Worlds (2005) to become Cruise's highest-grossing film at the domestic box office.[14]\nIt also passed The Mummy (2017) as Cruise's biggest opening weekend at the worldwide box office and also passed War of the Worlds (2005) as Cruise's biggest opening at the domestic box office and his first film to open to over $100 million in the US.\nIt also passed Pirates of the Caribbean: At World's End (2007), another Jerry Bruckheimer produced movie, to have the highest Memorial Day opening weekend[15][16] and passed Shrek 2 (2004) to have the lowest second-weekend drop for a movie that made over $100M in its opening weekend.[17]\nThe film surpassed Transformers: Dark of the Moon (2011) to become the highest-grossing film distributed solely by Paramount Pictures worldwide, and Titanic (1997) to become Paramount's highest grossing film in the United States and Canada.", "output": "The highest grossing movie in 2022 is Avatar The way of Water, which grossed $2B worldwide. I unfortunately cannot tell what was the second highest grossing movie as that information is not available in the passage you shared with me", "category": "IT"}, {"instruction": "Given a reference text about the Cuban Missile Crisis, when did the crisis occur and how long did it last?", "input": "The Cuban Missile Crisis, also known as the October Crisis (of 1962) (Spanish: Crisis de Octubre) in Cuba, the Caribbean Crisis (Russian: \u041a\u0430\u0440\u0438\u0431\u0441\u043a\u0438\u0439 \u043a\u0440\u0438\u0437\u0438\u0441, tr. Karibsky krizis, IPA: [k\u0250\u02c8r\u02b2ipsk\u02b2\u026aj \u02c8kr\u02b2iz\u02b2\u026as]) in Russia, or the Missile Scare, was a 35-day (October 16 \u2013 November 20, 1962) confrontation between the United States and the Soviet Union, which escalated into an international crisis when American deployments of missiles in Italy and Turkey were matched by Soviet deployments of similar ballistic missiles in Cuba. Despite the short time frame, the Cuban Missile Crisis remains a defining moment in national security and nuclear war preparation. The confrontation is often considered the closest the Cold War came to escalating into a full-scale nuclear war.[4]", "output": "The Cuban Missile crises lasted 35 days, from October 16 to November 20, 1962.", "category": "IT"}, {"instruction": "Write  the first paragraph of an advertising brochure describing an hotel nearby the Annecy Lake in France", "input": "", "output": "This fantastic hotel is ideally located, minutes away from the Annecy Lake, one of the purest in Europe. The water temperature reaches 27 degrees celcius at the peak season, allowing the guests to swim and enjoy several water activities including wake surf and pedalo. Finally, this region is known for being the home of several cheese specialties like \"Raclette\" and \"Tartiflette\" to name a few.", "category": "IT"}, {"instruction": "Given this text of Mao Zedong, tell me how many people were killed in Mao's era through starvation, persecution, prison labour, and mass executions?", "input": "Mao Zedong[a] (26 December 1893 \u2013 9 September 1976), also known as Chairman Mao, was a Chinese communist revolutionary who was the founder of the People's Republic of China (PRC), which he led as the chairman of the Chinese Communist Party from the establishment of the PRC in 1949 until his death in 1976. Ideologically a Marxist\u2013Leninist, his theories, military strategies, and political policies are collectively known as Maoism.\n\nMao was the son of a prosperous peasant in Shaoshan, Hunan. He supported Chinese nationalism and had an anti-imperialist outlook early in his life, and was particularly influenced by the events of the Xinhai Revolution of 1911 and May Fourth Movement of 1919. He later adopted Marxism\u2013Leninism while working at Peking University as a librarian and became a founding member of the Chinese Communist Party (CCP), leading the Autumn Harvest Uprising in 1927. During the Chinese Civil War between the Kuomintang (KMT) and the CCP, Mao helped to found the Chinese Workers' and Peasants' Red Army, led the Jiangxi Soviet's radical land reform policies, and ultimately became head of the CCP during the Long March. Although the CCP temporarily allied with the KMT under the Second United Front during the Second Sino-Japanese War (1937\u20131945), China's civil war resumed after Japan's surrender, and Mao's forces defeated the Nationalist government, which withdrew to Taiwan in 1949.\n\nOn 1 October 1949, Mao proclaimed the foundation of the PRC, a Marxist\u2013Leninist single-party state controlled by the CCP. In the following years he solidified his control through the Chinese Land Reform against landlords, the Campaign to Suppress Counterrevolutionaries, the \"Three-anti and Five-anti Campaigns\", and through a truce in the Korean War, which altogether resulted in the deaths of several million Chinese. From 1953 to 1958, Mao played an important role in enforcing command economy in China, constructing the first Constitution of the PRC, launching the industrialisation program, and initiating military projects such as the \"Two Bombs, One Satellite\" project and Project 523. His foreign policies during this time were dominated by the Sino-Soviet split which drove a wedge between China and the Soviet Union. In 1955, Mao launched the Sufan movement, and in 1957 he launched the Anti-Rightist Campaign, in which at least 550,000 people, mostly intellectuals and dissidents, were persecuted.[2] In 1958, he launched the Great Leap Forward that aimed to rapidly transform China's economy from agrarian to industrial, which led to the deadliest famine in history and the deaths of 15\u201355 million people between 1958 and 1962. In 1963, Mao launched the Socialist Education Movement, and in 1966 he initiated the Cultural Revolution, a program to remove \"counter-revolutionary\" elements in Chinese society which lasted 10 years and was marked by violent class struggle, widespread destruction of cultural artifacts, and an unprecedented elevation of Mao's cult of personality. Tens of millions of people were persecuted during the Revolution, while the estimated number of deaths ranges from hundreds of thousands to millions. After years of ill health, Mao suffered a series of heart attacks in 1976 and died at the age of 82. During the Mao era, China's population grew from around 550 million to over 900 million while the government did not strictly enforce its family planning policy.\n\nWidely regarded as one of the most influential figures of the twentieth century, Mao remains a controversial figure within and outside China. Beyond politics, Mao is also known as a theorist, military strategist, and poet. Mao has been credited with transforming China from a semi-colony to a leading world power, with greatly advanced literacy, women's rights, basic healthcare, primary education and life expectancy.[3][4][5][6] However, Mao's government was responsible for vast numbers of deaths, with estimates ranging from 40 to 80 million victims through starvation, persecution, prison labour, and mass executions.[7][8][9][10] During his leadership tenure, China was heavily involved with other Asian communist conflicts such as the Korean War, the Vietnam War, and the Cambodian Civil War.", "output": "Mao's government was responsible for vast numbers of deaths, with estimates ranging from 40 to 80 million victims through starvation, persecution, prison labour, and mass executions.", "category": "IT"}, {"instruction": "Who did John Evelyn support during the English Civil War?", "input": "Sir John Evelyn (1591\u20131664) was an English politician who sat in the House of Commons at various times between 1628 and 1660. He reluctantly supported the Parliamentary side in the English Civil War.\n\nEvelyn was the son of Sir John Evelyn of Kingston, Godstone, Surrey and Marden, MP and his wife Elizabeth Stever, daughter of William Stever of Kingston upon Thames. He was baptised at Kingston upon Thames on 20 October 1591. He was admitted at Emmanuel College, Cambridge on 13 March 1606. He was a member of the Virginia Company in 1612 and of the East India Company in 1624. He was a JP for Surrey from 1624.", "output": "the Parliamentary side", "category": "IT"}, {"instruction": "Given this paragraph, extract a list of names that are playable by the user of this game.", "input": "During the single-player campaign, the player controls five different characters from a first-person perspective. The player primarily controls Sergeant Gary \"Roach\" Sanderson, a British member of an international special forces unit named Task Force 141. In addition to Roach, the player will also assume control of Private First Class Joseph Allen (Troy Baker) and Private James Ramirez of the U.S. Army's 1st Battalion/75th Ranger Regiment.[23] The now Captain John \"Soap\" MacTavish (Kevin McKidd) serves as a senior member of Task Force 141, acting as Roach's superior officer and becomes the playable character in the final three missions of the game.[24] Lastly, the player briefly assumes the role of an astronaut stationed on the International Space Station during the height of the war between the United States and Russia.\n\nThe game's non-playable characters (NPCs) feature prominently in the story: For Task Force 141, Lieutenant Simon \"Ghost\" Riley (Craig Fairbrass), who conceals his face with a skull print balaclava serves as Soap's second in command.[25] For the United States Army Rangers, Sergeant Foley (Keith David), along with his subordinate, Corporal Dunn (Barry Pepper), is initially Joseph Allen's squad leader, and becomes James Ramirez's squad leader later in the story. Lieutenant General Shepherd (Lance Henriksen) is the commander of the United States Army Rangers and Task Force 141. Other supporting characters returning from Call of Duty 4 include Captain John Price (Billy Murray), MacTavish's former commanding officer in the British Special Air Service who was imprisoned in Russia, and Russian informant turned mercenary pilot \"Nikolai\" (Sven Holmberg).", "output": "1. Sergeant Gary \"Roach\" Sanderson\n2. Joseph Allen\n3. James Ramirez\n4. John \"Soap\" MacTavish\n5. An unnamed astronaut", "category": "IT"}, {"instruction": "Eminem's 8 Mile is named after a road in which city?", "input": "", "output": "Detroit.", "category": "IT"}, {"instruction": "Is it safe for dogs to eat avacado?", "input": "", "output": "No, avocado is considered dangerous for dogs to consume.", "category": "IT"}, {"instruction": "How to reverse Type 2 diabetes naturally?", "input": "", "output": "Intermittent fasting is recently been found to be very effective in reversing Type 2 diabetes \nEspecially healthy eating habits during in eating window and healthy lifestyle accelerates the time taken to reverse the Type 2 diabetes i.e blood sugar levels comes to normal range.\nThere\u2019s a lot of research going on in this space, lots of people are seeing the results. Doctors and dietician are finding this revolutionary and out of the standard medical procedure of treating Type 2 diabetes with drugs like Metformin.\u201d\nLow carb high protein and high fat diet, keto diet, right exercise routine have found to improve the results. \nThe effect of this approach depends on various factors like Age, current food habits and health lifestyle, severity of the condition, discipline, will power and lots more", "category": "IT"}, {"instruction": "Who is the founder of the Communist Party?", "input": "", "output": "Lenin", "category": "IT"}, {"instruction": "What is gardening?", "input": "Gardening is the practice of growing and cultivating plants as part of horticulture. In gardens, ornamental plants are often grown for their flowers, foliage, or overall appearance; useful plants, such as root vegetables, leaf vegetables, fruits, and herbs, are grown for consumption, for use as dyes, or for medicinal or cosmetic use.\n\nGardening ranges in scale from fruit orchards, to long boulevard plantings with one or more different types of shrubs, trees, and herbaceous plants, to residential back gardens including lawns and foundation plantings, all the way to container gardens grown inside or outside. Gardening may be very specialized, with only one type of plant grown, or involve a variety of plants in mixed plantings. It involves an active participation in the growing of plants, and tends to be labor-intensive, which differentiates it from farming or forestry.", "output": "Gardening is laying out and caring for a plot of ground devoted partially or wholly to growing plants such as flowers, herbs, or vegetables.", "category": "IT"}, {"instruction": "What are your thoughts of Michael Jackson as a singer and person", "input": "", "output": "Michael Jackson is acclaimed as the greatest pop star of all times. He invented the Moon Walk and created many chartbuster hits. He still continues to have a loyal fanbase across the world, shows on him are still running packed houses in Las Vegas.", "category": "IT"}, {"instruction": "What is the largest pollutant?", "input": "", "output": "Carbon dioxide (CO2) - a greenhouse gas emitted by burning fossil fuels, deforestation, and other human activities that contribute to climate change.\n\nParticulate matter - tiny particles of pollutants such as dust, smoke, and soot that can be inhaled and cause respiratory problems.\n\nNitrogen oxides (NOx) - gases emitted by vehicle exhausts and industrial processes that contribute to air pollution and can also react with other pollutants to form ozone.\n\nSulfur dioxide (SO2) - a gas emitted by burning fossil fuels and industrial processes that can cause respiratory problems and acid rain.\n\nMethane (CH4) - a potent greenhouse gas emitted by agriculture, waste management, and natural gas production.\n\nChlorofluorocarbons (CFCs) - chemicals used in refrigeration, air conditioning, and industrial processes that contribute to the depletion of the ozone layer.", "category": "IT"}, {"instruction": "Why do people drink coffee?", "input": "", "output": "Coffee contains caffeine which is a stimulant.  It increases wakefulness and alertness.  Too much coffee can cause hyperactivity.", "category": "IT"}, {"instruction": "Give this paragraph about the Alley Cats a capella group, what famous talk show hosts have they performed for?", "input": "The group originated in 1987, when a concert choir program was having a variety night occurring at Fullerton College. When John Tebay, the choir director, suggested that Andre Peek (1st tenor and lead vocalist at that time) and Armando Fonseca (2nd tenor) perform together, both of them decided to take Mr. Tebays advice and form a quartet, an a cappella group. Two additional members along the way, Royce Reynolds (bass) and Todd Dixon (baritone)got together and the foursome gained notice. Since then The Alley Cats have performed for many audiences, ranging from elementary school fun nights[1] to being Grand.prize.winners on the Gong Show. Performing on the Arsenio Hall show to The Tonight Show with Jay Leno, as well as opening for Leno at his Las Vegas shows.[2] The Alley Cats's sound has been heard as well at The White House. The Alley Cats appeared in the Richard Simmons workout video Dance Your Pants Off! performed the song Celebration.", "output": "Jay Leno and Arsenio Hall", "category": "IT"}, {"instruction": "Provide a bulleted list of ways to spend less money", "input": "", "output": "The following are ways to spend less money\n1. Make a budget and track spending\n2. Cook your own food\n3. Don't drink alcohol\n4. Delete the Amazon application\n5. Have get togethers at home\n6. Find a cheaper place to live\n7. Negotiate insurance rates", "category": "IT"}, {"instruction": "How should I deal with my kid's allergy?", "input": "", "output": "Find out what your kid is allergic to by conducting a series of tests. Also make sure the kid changes cloth after coming back from school to avoid spreading allergy agents, e.g. dust or pollens, into the bedroom and taking shower right after school is a good idea too. In some severe cases doctors may prescribe allergy shots, so do ask about that option if necessary.", "category": "IT"}, {"instruction": "What does Wittgenstein view as a problem with learning a language using \"ostensive defining\"?", "input": "Wittgenstein clarifies the problem of communicating using a human language when he discusses learning a language by \"ostensive defining.\" For example, if one wanted to teach someone that a pencil was called a \"pencil\" and pointed to a pencil and said, \"pencil,\" how does the listener know that what one is trying to convey is that the thing in front of me (e.g., the entire pencil) is called a \"pencil\"? Isn't it possible that the listener would associate \"pencil\" with \"wood\"? Maybe the listener would associate the word \"pencil\" with \"round\" instead (as pencils are, usually, in fact, round!). Wittgenstein writes regarding several possible \"interpretations\" which may arise after such a lesson. The student may interpret your pointing at a pencil and saying \"pencil\" to mean the following: (1) This is a pencil; (2) This is round; (3) This is wood; (4) This is one; (5) This is hard, etc., etc.", "output": "As example of \"Ostensive defining\" is pointing to an object and saying it's name. Wittgenstein sees \"ostensive defining\" as a problem of communication because simply linking a word to an object carries with it ambiguity. For instance, if someone pointed to a pencil and said, \"pencil\", the listener may not know exactly what the word refers to. It may refer to the pencil itself, the shape of the pencil, the material of the pencil, the quantity of the pencil, or any other quality of the pencil.", "category": "IT"}, {"instruction": "Identify the bird from the list: Queensbury, Kingfisher, Bishopsgate", "input": "", "output": "Kingfisher", "category": "IT"}, {"instruction": "What are fun things to do in New York City", "input": "", "output": "1. Plan a trip to Central Park \n2. Go shopping on Fifth Avenue \n3. Get a New York City Bagel \n4. Take the Subway to visit the Statue of Liberty", "category": "IT"}, {"instruction": "What is an string instrument that is similar to a Violin, but larger in size and with a lower and deeper sound?", "input": "The viola (/vi\u02c8o\u028al\u0259/ vee-OH-l\u0259,[1] also UK: /va\u026a\u02c8o\u028al\u0259/ vy-OH-l\u0259,[2][3][a] Italian: [\u02c8vj\u0254\u02d0la, vi\u02c8\u0254\u02d0la]) is a string instrument that is bowed, plucked, or played with varying techniques. Slightly larger than a violin, it has a lower and deeper sound. Since the 18th century, it has been the middle or alto voice of the violin family, between the violin (which is tuned a perfect fifth above) and the cello (which is tuned an octave below).[4] The strings from low to high are typically tuned to C3, G3, D4, and A4.", "output": "The instrument you are looking for is a Viola.", "category": "IT"}, {"instruction": "Classify each of the following as either typical indoor or outdoor sports: Chess, Carrom, Cricket, Billiards, Table Tennis, Field Hockey, Rugby, Snooker, Soccer and Boxing", "input": "", "output": "Chess - Indoor\nCarrom - Indoor \nCricket - Outdoor \nBilliards -  Indoor \nTable Tennis - Indoor \nField Hockey - Outdoor \nRugby - Outdoor \nSnooker - Indoor \nSoccer - Outdoor \nBoxing - Indoor", "category": "IT"}, {"instruction": "What conference does the Spokane Braves belong to?", "input": "The Spokane Braves are a Junior \"B\" Ice Hockey team based in Spokane, Washington, United States. They are members of the Neil Murdoch Division of the Kootenay Conference of the Kootenay International Junior Hockey League (KIJHL). They play their home games at Eagles Ice-A-Rena. The Braves are the only team in the KIJHL to play in the United States. They were forced to go on hiatus at the beginning of the 20/21 season due to the US/Canada border closure.", "output": "The Spokane Braves are members of the Kootenay Conference of the Kootenay International Junior Hockey League (KIJHL).", "category": "IT"}, {"instruction": "What are some sports that are played with a round ball?", "input": "", "output": "Cricket, Baseball, Basketball, Volleyball, Tennis, Pickleball, Table Tennis, Soccer, Racquetball, Hockey, Squash, handball", "category": "IT"}, {"instruction": "Given a reference text about coleus rotundifolius, what are they commonly known as?", "input": "Coleus rotundifolius, synonyms Plectranthus rotundifolius and Solenostemon rotundifolius,[1] commonly known as native or country potato in Africa and called Chinese potato in India, is a perennial herbaceous plant of the mint family (Lamiaceae) native to tropical Africa. It is cultivated for its edible tubers primarily in West Africa, as well as more recently in parts of Asia, especially India, Sri Lanka, Malaysia, and Indonesia.[2]\n\nC. rotundifolius is closely related to the coleus plants widely cultivated as ornamentals and is now again placed in the genus Coleus, after being placed in the defunct genus Solenostemon and in Plectranthus.[1]", "output": "Coleus rotundifolius are commonly known as country potato in Africa and Chinese potato in India.", "category": "IT"}, {"instruction": "How do you plan a trip?", "input": "", "output": "There are many different ways to plan a trip. In addition, there are many different factors to include in order to plan a trip. First of all, it is important to know the type of travel. Is this a business trip? Is this family trip?\n\nNext you need to decide on how many days you want to stay in your destination(s). Once the first two steps are completed, you need to find out the activities during your trip. Last but not least, you need to decide on your budget.\n\nOnce all of these factors are decided, you should work backward and spread your budget between accommodations, activities and means of transportation.", "category": "IT"}, {"instruction": "What are the disadvantages of Linux?", "input": "", "output": "The disadvantages of Linux include limited hardware support, a steep learning curve, lack of commercial support, and compatibility issues.", "category": "IT"}, {"instruction": "What are some fun ways to keep a toddler busy?", "input": "", "output": "1. If you have a spare box and some colored plastic balls, one idea is to cut holes in the box and color a ring around each hole to match a color of ball. Mount the box and show your little one how to drop each ball into its matching hole. \n\n2. If you have a spare toothbrush and a yellow dry erase marker, you can work teach some teeth brushing skills in a fun way! Draw a big toothy smile and color in the lips and gums leaving the teeth bright white. Cover it up with clear tape or hard plastic wrap and cut it out.  Color the teeth with the yellow marker and have your little one brush it clean.\n\n3. Teach some valuable life skills and keep your little one entertained by getting a kid-safe knife and having him or her cut fruits.", "category": "IT"}, {"instruction": "Which country has topped the swimming medals list in the summer olympics?", "input": "Summary\nGames\tYear\tEvents\tBest Nation\n1\t1896\t4\t Hungary\n2\t1900\t7\t Great Britain\n3\t1904\t9\t Germany\n4\t1908\t6\t Great Britain\n5\t1912\t9\t Germany\n6\t\n7\t1920\t10\t United States\n8\t1924\t11\t United States\n9\t1928\t11\t United States\n10\t1932\t11\t Japan\n11\t1936\t11\t Japan\n12\t\n13\t\n14\t1948\t11\t United States\n15\t1952\t11\t United States\n16\t1956\t13\t Australia\nGames\tYear\tEvents\tBest Nation\n17\t1960\t15\t United States\n18\t1964\t18\t United States\n19\t1968\t29\t United States\n20\t1972\t29\t United States\n21\t1976\t26\t United States\n22\t1980\t26\t East Germany\n23\t1984\t29\t United States\n24\t1988\t31\t East Germany\n25\t1992\t31\t United States\n26\t1996\t32\t United States\n27\t2000\t32\t United States\n28\t2004\t32\t United States\n29\t2008\t34\t United States\n30\t2012\t34\t United States\n31\t2016\t34\t United States\n32\t2020\t37\t United States", "output": "United States", "category": "IT"}, {"instruction": "What are the names of some of the cities in the Boston Metro West area?", "input": "", "output": "Boston Metro West cities include Newton, Natick, Framingham, Wellesley, Dedham, and Needham, among others.", "category": "IT"}, {"instruction": "Extract all words derived from Swahili language in the following paragraph:", "input": "Shingopana is known from a partial jaw, represented by the angular bone. Shingopana is also known from four cervical vertebrae; with two of these vertebrae having preserved cervical ribs and another isolated cervical rib. Shingopana instead had remnants of a bulbous expansion on the incompletely preserved cervical vertebrae, which probably helped to strengthen its neck.", "output": "The following are words extracted from Swahili language in the above paragraph: Shingopana (which means wide neck).", "category": "IT"}, {"instruction": "How many cents do I have if I have 3 quarters?", "input": "", "output": "If you have 3 quarters, you have 75 cents.", "category": "IT"}, {"instruction": "Give me a list of Greek foods that are absolutely amazing", "input": "", "output": "1. spanakopita\n2. tyropita\n3. gemista\n4. lamb souvlaki\n5. chicken souvlaki\n6. tzatziki\n7. taramasalata\n8. dolmathes\n9. calamari\n10. greek salad", "category": "IT"}, {"instruction": "Which Game of Thrones episode does Arya go blind?", "input": "", "output": "Arya goes temporarily blind in the last episode of season 5, entitled \"Mother's Mercy\"", "category": "IT"}, {"instruction": "What color is the Rainbow?", "input": "", "output": "The rainbow is the VIBGYOR that stands for Violet, Indigo, Blue, green, yellow, Orange and Red.", "category": "IT"}, {"instruction": "Name the Hindi novel that has become the 1st novel to win the International Booker Prize", "input": "", "output": "Tomb of Sand", "category": "IT"}, {"instruction": "If my car's fuel tank fits 18 gallon, how many times do I need to refuel on a 10-hour trip if the average speed is 60mph and the car's fuel efficiency is 30mpg?", "input": "", "output": "Assuming the tank is full when you start, you would have to refuel once. 10 hours at 60mph means the total distance is 600 miles. To drive 600 miles at a fuel efficiency of 30 mpg you would need 20 gallons of fuel. That's more than the 18 gallon capacity of the tank, but less than twice the capacity, so you would need to refuel once.", "category": "IT"}, {"instruction": "Which of the following Countries are on the African Continent: Nigeria, Ethiopia, Egypt, Tanzania, Kenya, United Kingdom, Belgium, France, Germany, Russia, Afghanistan, Iraq, Brazil, Columbia.", "input": "", "output": "Of the Countries you listed, Nigeria, Ethiopia, Egypt, Tanzania, and Kenya are on the African continent. \n\nFor reference: \n\nUnited Kingdom, Belgium, France, Germany, Russia are on the European continent\n\nAfghanistan and Iraq are on the Asian continent\n\nBrazil and Columbia are on the South American continent", "category": "IT"}, {"instruction": "What would be the pros and cons of replacing all civilian airplanes with dirigibles?", "input": "", "output": "Replacing all civilian airplanes with dirigibles would have positive and negative effects. The most notable positive effect would be reduced environmental impact: although dirigibles, like airplanes, need engines, dirigibles are filled with lighter-than-air gas and therefore no power is needed to counteract gravity, so they consume less fuel. However, there would be a significant negative economic impact because dirigibles fly much more slowly than airplanes, thus the items airplanes carry (e.g. people and freight) would take much longer to get to their destination. In addition, another problem with dirigibles is that they are less able to handle strong winds compared to airplanes, so it might be necessary for the dirigible to take a more circuitous route than an airplane, or simply delay the flight until the bad weather passes.", "category": "IT"}, {"instruction": "What is a bubble vest?", "input": "", "output": "A bubble vest is an outerwear piece of clothing worn by both men and women. Usually it is stuffed with down or some sort of insulation to make it nice and warm.  Also, the vest usually has seams in it to make the bubble like appearance. There are lots of different brands that make bubble vests, but some common ones are The North Face, L.L. Bean, Patagonia, and Lands\u2019 End.", "category": "IT"}, {"instruction": "Where does Nick work on the show the New Girl", "input": "", "output": "at the Bar", "category": "IT"}, {"instruction": "Who wrote the Great Gatsby?", "input": "", "output": "The Great Gatsby was written by F. Scott Fitzgerald", "category": "IT"}, {"instruction": "Give me a summary of 1812 war", "input": "The War of 1812 (18 June 1812 \u2013 17 February 1815) was fought by the United States of America and its indigenous allies against the United Kingdom and its allies in British North America, with limited participation by Spain in Florida. Tensions originated in long-standing differences over territorial expansion in North America and British support for Native American tribes who opposed U.S. colonial settlement in the Northwest Territory.", "output": "The War of 1812 (18 June 1812 \u2013 17 February 1815) was fought by the United States of America and its indigenous allies against the United Kingdom and its allies in British North America, with limited participation by Spain in Florida. It began when the United States declared war on 18 June 1812. Although peace terms were agreed upon in the December 1814 Treaty of Ghent, the war did not officially end until the peace treaty was ratified by Congress on 17 February 1815.[11][12]\n\nTensions originated in long-standing differences over territorial expansion in North America and British support for Native American tribes who opposed U.S. colonial settlement in the Northwest Territory. These escalated in 1807 after the Royal Navy began enforcing tighter restrictions on American trade with France and press-ganged men they claimed as British subjects, even those with American citizenship certificates.[13] Opinion in the U.S. was split on how to respond, and although majorities in both the House and Senate voted for war, they divided along strict party lines, with the Democratic-Republican Party in favour and the Federalist Party against.[d][14] News of British concessions made in an attempt to avoid war did not reach the U.S. until late July, by which time the conflict was already underway.\nAt sea, the far larger Royal Navy imposed an effective blockade on U.S. maritime trade, while between 1812 to 1814 British regulars and colonial militia defeated a series of American attacks on Upper Canada.[15] This was balanced by the US winning control of the Northwest Territory with victories at Lake Erie and the Thames in 1813. The abdication of Napoleon in early 1814 allowed the British to send additional troops to North America and the Royal Navy to reinforce their blockade, crippling the American economy.[16] In August 1814, negotiations began in Ghent, with both sides wanting peace; the British economy had been severely impacted by the trade embargo, while the Federalists convened the Hartford Convention in December to formalise their opposition to the war.\n\nIn August 1814, British troops burned Washington, before American victories at Baltimore and Plattsburgh in September ended fighting in the north. Fighting continued in the Southeastern United States, where in late 1813 a civil war had broken out between a Creek faction supported by Spanish and British traders and those backed by the U.S. Supported by U.S. militia under General Andrew Jackson, the U.S.-backed Creeks won a series of victories, culminating in the capture of Pensacola in November 1814.[17] In early 1815, Jackson defeated a British attack on New Orleans, catapulting him to national celebrity and later victory in the 1828 United States presidential election.[18] News of this success arrived in Washington at the same time as that of the signing of the Treaty of Ghent, which essentially restored the position to that prevailing before the war. While Britain insisted this included lands belonging to their Native American allies prior to 1811, as Congress did not recognize them as independent nations, the Americans did not comply with these provisions and the British made no effort to compel them to do so. The Native Americans were subsequently pushed west of the Mississippi River.", "category": "IT"}, {"instruction": "According to this paragraph, tell me what is referred to as the most exciting collegiate sporting event.", "input": "In 2019, Virginia men's basketball won the NCAA Championship in \"March Madness\", the single-elimination national college basketball tournament considered by YouGov polled American viewers (as of the same year) to be the most exciting collegiate sporting event.[200][201] In 2015, when Virginia first won its first Capital One Cup its teams won the 2014 College Cup, the 2015 College World Series, and the 2015 NCAA Tennis Championships. When it repeated the feat in 2019, the program won both March Madness and the 2019 Men's Lacrosse Championship.", "output": "What is referred to as the most exciting collegiate sporting event is when the Virginia men's basketball team won the NCAA Championship in 2019.", "category": "IT"}, {"instruction": "Categorize each of the following as being beneficial or not beneficial to making a home protected from burglars: alarm system, open doors, locks, cameras, open windows", "input": "", "output": "Alarm System: Beneficial\nOpen Doors: Not Beneficial\nLocks: Beneficial\nCameras: Beneficial\nOpen Windows: Not Beneficial", "category": "IT"}, {"instruction": "What is a bond in finance?", "input": "", "output": "In finance, a bond is a type of security under which the issuer (debtor) owes the holder (creditor) a debt, and is obliged \u2013 depending on the terms \u2013 to provide cash flow to the creditor (e.g. repay the principal (i.e. amount borrowed) of the bond at the maturity date as well as interest (called the coupon) over a specified amount of time).The timing and the amount of cash flow provided varies, depending on the economic value that is emphasized upon, thus giving rise to different types of bonds. The interest is usually payable at fixed intervals: semiannual, annual, and less often at other periods. Thus, a bond is a form of loan or IOU. Bonds provide the borrower with external funds to finance long-term investments or, in the case of government bonds, to finance current expenditure.\n\nBonds and stocks are both securities, but the major difference between the two is that (capital) stockholders have an equity stake in a company (i.e. they are owners), whereas bondholders have a creditor stake in a company (i.e. they are lenders). As creditors, bondholders have priority over stockholders. This means they will be repaid in advance of stockholders, but will rank behind secured creditors, in the event of bankruptcy. Another difference is that bonds usually have a defined term, or maturity, after which the bond is redeemed, whereas stocks typically remain outstanding indefinitely. An exception is an irredeemable bond, which is a perpetuity, that is, a bond with no maturity. Certificates of deposit (CDs) or short-term commercial paper are classified as money market instruments and not bonds: the main difference is the length of the term of the instrument.\n\nThe most common forms include municipal, corporate, and government bonds. Very often the bond is negotiable, that is, the ownership of the instrument can be transferred in the secondary market. This means that once the transfer agents at the bank medallion-stamp the bond, it is highly liquid on the secondary market. The price of a bond in the secondary market may differ substantially from the principal due to various factors in bond valuation.", "category": "IT"}, {"instruction": "Why did Kim Kardashian and Ye divorce?", "input": "", "output": "Kim Kardashian and Ye experienced marital stress from many causes. The initial commonly cited reason by social outlets for their separation and later divorce was tensions that arose from Ye's erratic behavior on social media and in public spheres.", "category": "IT"}, {"instruction": "Why do people like biking?", "input": "", "output": "Biking is fun for people of all ages. Many people enjoying biking because it is good exercise and they are able to spend time outdoors. There are different styles of biking including road biking, mountain biking, and cross country. E-bikes are a growing trend that allow the rider to go farther distances, or bike with less effort per a given distance.", "category": "IT"}, {"instruction": "What do you say to someone that is suicidal?", "input": "", "output": "First, acknowledge their feelings.  While they may be irrational, they are very real emotions. Tell them that you are worried about them and ask them to seek help. If they will not seek help, take steps to alert the appropriate people.  Do not ignore any verbal signs.  Do not keep it a secret.  Ask them to contact emergency services immediately.  The National Suicide Prevention Lifeline is 1-800-273-TALK", "category": "IT"}, {"instruction": "Which is a bird or fish: Black-necked grebe, Black tetra", "input": "", "output": "Black tetra is a fish, Black-necked grebe is a bird", "category": "IT"}, {"instruction": "Given this paragraph about the First Treaty that was signed after the Russo-Japanese War, was there a secret component?", "input": "After the Russo-Japanese War, the First Treaty was signed on 30 July 1907 by Motono Ichir\u014d, the Japanese Ambassador in Moscow, and Alexander Izvolsky, the Foreign Minister of Russian. The treaty was divided into two parts: one is open agreement, which respected the treaties concluded between the two countries and China, respected China's independence, promoted open doors, and achieved equal opportunities and another is secret agreement, which defined the scope of Japan's interests in Southern Manchuria and Russia's interests in Northern Manchuria and Japan recognized Russia's interests in Outer Mongolia, and Russia recognized Japan's interests in the Korean Peninsula.", "output": "Yes. The second part of the First Treaty contained a secret agreement which defined the political scope of each party's interest.", "category": "IT"}, {"instruction": "Why is my baby crying right now?", "input": "", "output": "The first thing to check is if your baby is hungry. It\u2019s by far the most common reason they cry. You can tell if they\u2019re hungry by lightly touching their cheek and seeing if they have a \u201crooting\u201d reflex. This is where they open their mouth and turn towards your touch, as if they were looking for the source of food.\n\nIf they\u2019re not hungry, they\u2019re possibly tired. Babies can become over tired and cry and fuss, even when you are just trying to get them to sleep. If this is the case you\u2019ll need to calm them down first, and then you can get them to sleep.\n\nFinally sometimes babies just cry for no reason. Isn\u2019t parenting fun?", "category": "IT"}, {"instruction": "Identify which car manufacturer is German or American: Artega, Brammo, Vaydor", "input": "", "output": "Brammo and Vaydor are American, Artega is German", "category": "IT"}, {"instruction": "tell me whether these are synonyms or antonyms of love: dislike, care, like, hate, affection, harsh", "input": "", "output": "Synonyms: care, like, affection\nAntonyms: dislike, hate, harsh", "category": "IT"}, {"instruction": "What is the American show The Office based on?", "input": "", "output": "The Office is based on the original version of the Office, which was produced in England and is known as the British Office", "category": "IT"}, {"instruction": "Which films contain Tom Cruise and which do not contain Tom Cruise: \"Trading Places\", \"Risky Business\", \"The Hunt for Red October\", \"Top Gun\", \"The Hangover\", \"Born on the 4th of July\", \"Saving Private Ryan\", and \"Reds\"", "input": "", "output": "The films which contain Tom Cruise are: \"Risky Business\", \"Top Gun\", and \"Born on the 4th of July.\" The films which do not contain Tom Cruise are: \"Trading Places\", \"The Hunt for Red October\",\"The Hangover\", \"Saving Private Ryan\", and \"Reds.\"", "category": "IT"}, {"instruction": "Who is Alexander McGuire?", "input": "Alexander McGuire (born 5 October 1932) is a New Zealand cricketer. He played in four first-class matches for Central Districts in 1957/58.", "output": "Alexander McGuire (born 5 October 1932) is a New Zealand cricketer. He played in four first-class matches for Central Districts in 1957/58.", "category": "IT"}, {"instruction": "Who were the children of Bill 101", "input": "The children of Bill 101 (les enfants de la loi 101) is the name given to the generation of children whose parents immigrated to Quebec, Canada after the adoption of the 1977 Charter of the French Language (Bill 101).\n\nOne of the Charter's articles stipulates that all children under 16 must receive their primary and secondary education in French schools, unless one of the child's parents has received most of their education in English, in Canada, or the child or the child's sibling has already received a substantial part of their education in English, in Canada. If a child qualifies for a certificate of eligibility for instruction in English under one of those criteria, then the certificate is permanent and can be passed on to future generations even if the child ends up attending French instead of English school. The permanent certificate can only be granted if one of the child's parents is a Canadian citizen. In addition, children of foreign temporary residents living in Quebec on study or work permits, as well as children of diplomats, can also obtain a temporary certificate of eligibility that is only valid for the duration of their permit.[1]", "output": "The children of Bill 101 (les enfants de la loi 101) is the name given to the generation of children whose parents immigrated to Quebec, Canada after the adoption of the 1977 Charter of the French Language (Bill 101).\n\nOne of the Charter's articles stipulates that all children under 16 must receive their primary and secondary education in French schools, unless one of the child's parents has received most of their education in English, in Canada, or the child or the child's sibling has already received a substantial part of their education in English, in Canada.", "category": "IT"}, {"instruction": "Is it a gas, liquid, or solid", "input": "", "output": "Stone, Cloud, oxygen, water, hydrogen, dirt, nitrogen, brick, concrete, lava", "category": "IT"}, {"instruction": "Best TV shows I've ever seen.", "input": "", "output": "Here is a list of the best TV shows I've ever seen: Succession, Yellowstone, The Last of Us, Emily in Paris, Grey's Anatomy, The OC, Outer Banks, You, Vanderpump Rules, How I Met your Mother, Peaky Blinders, Game of Thrones, Girls, The Marvelous Mrs. Maisel, Sex in the City, Gossip Girl, Gilmore Girls, and One Tree Hill,", "category": "IT"}, {"instruction": "Classify each of the following as a city or country: Bangkok, India, London, Mexico.", "input": "", "output": "Bangkok - City, India - Country, London- City, Mexico- Country", "category": "IT"}, {"instruction": "Which of these forms of Bay Area transit are AC Transit bus lines and which are trains: Caltrain, BART, 51B, 36, 51A, 79, VTA Light Rail.", "input": "", "output": "The trains are the Caltrain, BART, and VTA Light Rail, and the bus lines are the 51B, 36, 51A, and 79.", "category": "IT"}, {"instruction": "Which characters belong to DC or Marvel Universe? Captain America, Stargirl, Superman", "input": "", "output": "Superman and Stargirl is DC, Captain America is Marvel", "category": "IT"}, {"instruction": "Who is Santa Clause?", "input": "", "output": "Santa Clause is known as Father Christmas or Saint Nicholas in Christian culture.  According to the myth Santa Clause rides a slay and brings presents to all the children all over the world during Christmas every year.  Santa Clause lives at the North Pole with the elves.  When he is not busy delivering presents he and the elves are hard work at the North Pole making presents for the following year.  Christian families let their kids believe this myth until they are at a reasoning age and can figure out for themselves that Santa Clause is not real.", "category": "IT"}, {"instruction": "classify each of the following as a US state or US state capital: Atlanta, Washington, Boston, Iowa, Sacramento, Alaska", "input": "", "output": "US States: Washington, Iowa, Alaska\nUS State Capitals: Atlanta, Boston, Sacramento", "category": "IT"}, {"instruction": "List the vegetation found in Antarctica in a common separated manner.", "input": "Antarctica\u00a0(/\u00e6n\u02c8t\u0251\u02d0rkt\u026ak\u0259/) is\u00a0Earth's southernmost and least-populated\u00a0continent. Situated almost entirely south of the\u00a0Antarctic Circle\u00a0and surrounded by the\u00a0Southern Ocean\u00a0(also known as the Antarctic Ocean), it contains the geographic\u00a0South Pole. Antarctica is the fifth-largest continent, being about 40% larger than\u00a0Europe, and has an area of 14,200,000\u00a0km2\u00a0(5,500,000\u00a0sq\u00a0mi). Most of Antarctica is covered by the\u00a0Antarctic ice sheet, with an average thickness of 1.9\u00a0km (1.2\u00a0mi).\nAntarctica is, on average, the coldest, driest, and windiest of the continents, and it has the highest average\u00a0elevation. It is mainly a\u00a0polar desert, with annual\u00a0precipitation\u00a0of over 200\u00a0mm (8\u00a0in) along the coast and far less inland. About 70% of the world's\u00a0freshwater\u00a0reserves are frozen in Antarctica, which, if melted, would raise global\u00a0sea levels\u00a0by almost 60 metres (200\u00a0ft). Antarctica holds the record for the\u00a0lowest measured temperature on Earth, \u221289.2\u00a0\u00b0C (\u2212128.6\u00a0\u00b0F). The coastal regions can reach temperatures over 10\u00a0\u00b0C (50\u00a0\u00b0F) in summer. Native\u00a0species of animals\u00a0include\u00a0mites,\u00a0nematodes,\u00a0penguins,\u00a0seals\u00a0and\u00a0tardigrades. Where\u00a0vegetation\u00a0occurs, it is mostly in the form of\u00a0lichen\u00a0or\u00a0moss.\nThe\u00a0ice shelves of Antarctica\u00a0were probably first seen in 1820, during\u00a0a Russian expedition\u00a0led by\u00a0Fabian Gottlieb von Bellingshausen\u00a0and\u00a0Mikhail Lazarev. The decades that followed saw further\u00a0exploration\u00a0in French, American, and British expeditions. The first confirmed landing was by a Norwegian team in 1895. In the early 20th century, there were a few expeditions into the interior of the continent.\u00a0British explorers\u00a0were the first to reach the\u00a0magnetic South Pole\u00a0in 1909, and the geographic South Pole was first reached in 1911 by\u00a0Norwegian explorers.", "output": "Lichen, moss.", "category": "IT"}, {"instruction": "How many U.S. presidents were born in Virginia.", "input": "", "output": "Eight presidents, including the first four of five, were born in Virginia - which is known as the \"Mother of Presidents.\" They include: George Washington, Thomas Jefferson, James Madison, James Monroe, William Henry Harrison, John Tyler, Zachary Taylor and Woodrow Wilson.", "category": "IT"}, {"instruction": "Why do humans like golf?", "input": "", "output": "Humans like golf because of the games ability to keep a person humble. Golf is by nature, an individual sport, so the human is essentially playing against themselves. This nature gives humans the ability to become at peace as they accept defeat in a game that truly cannot be won. Success is only measured against ones self.", "category": "IT"}, {"instruction": "What is Adderall?", "input": "", "output": "Adderall is a brand name for a combination drug called mixed amphetamine salts. The mixture contains four salts of amphetamines including equal parts racemic amphetamine and dextroamphetamine, which produces a 3 to 1 ratio between dextroamphetamine and levoamphetamine, the two enantiomers of amphetamine. Adderall increases activity in the central nervous system and stimulates the release of dopamine and other neurotransmitters, such as serotonin\n\n Adderall is generally considered effective in treating symptoms of ADHD and narcolepsy. At normal recommended doses, Adderall improves focus, increases energy levels and decreases fidgeting, impulsivity, restlessness and aggression.", "category": "IT"}, {"instruction": "How long after the release of the album \u201cAbbey Road\u201d did The Beatles break up?", "input": "By early 1964, the Beatles were international stars and had achieved unprecedented levels of critical and commercial success. They became a leading force in Britain's cultural resurgence, ushering in the British Invasion of the United States pop market, and soon made their film debut with A Hard Day's Night (1964). A growing desire to refine their studio efforts, coupled with the untenable nature of their concert tours, led to the band's retirement from live performances in 1966. At this time, they produced records of greater sophistication, including the albums Rubber Soul (1965), Revolver (1966) and Sgt. Pepper's Lonely Hearts Club Band (1967), and enjoyed further commercial success with The Beatles (also known as \"the White Album\", 1968) and Abbey Road (1969). The success of these records heralded the album era, as albums became the dominant form of record consumption over singles; they also increased public interest in psychedelic drugs and Eastern spirituality, and furthered advancements in electronic music, album art and music videos. In 1968, they founded Apple Corps, a multi-armed multimedia corporation that continues to oversee projects related to the band's legacy. After the group's break-up in 1970, all principal former members enjoyed success as solo artists and some partial reunions have occurred. Lennon was murdered in 1980 and Harrison died of lung cancer in 2001. McCartney and Starr remain musically active.", "output": "One year after releasing Abbey Road (1969), the Beatles broke up (1970)", "category": "IT"}, {"instruction": "Given a reference text about Richard Brandon Morris, tell me what when and where he was born as well as the different colleges and universities he attended.", "input": "Richard Brandon Morris (July 24, 1904 \u2013 March 3, 1989) was an American historian best known for his pioneering work in colonial American legal history and the early history of American labor. In later years, he shifted his research interests to the constitutional, diplomatic, and political history of the American Revolution and the making of the United States Constitution.[1]\n\nBackground\nRichard Brandon Morris was born on July 24, 1904, in New York City.[1] He attended high school at Towsend Harris Hall in New York City. In 1924, he received a BA degree from City College.[2] In 1925, he received an MA from Columbia University, and in 1930 he received a PhD in history at the university[1] with Evarts Boutell Greene as his dissertation advisor. Morris' dissertation, published by Columbia University Press as Studies in the History of American Law, with Special Reference to the Seventeenth and Eighteenth Centuries (1930), still defines the research agenda for historians working on early American law, though at the time it attracted bitter denunciations from law school practitioners of legal historym, including Julius Goebel, Jr. and Karl Llewellyn, both then Columbia Law School faculty members.", "output": "Richard Brandon Morris was born on July 24, 1904. He attended City College and Columbia University.", "category": "IT"}, {"instruction": "What is a Ferocactus", "input": "Ferocactus is a genus of large barrel-shaped cacti, mostly with large spines and small flowers. There are about 30 species included in the genus. They are found in the southwestern United States and northwestern Mexico.", "output": "Ferocactus is a genus of large barrel-shaped cacti, mostly with large spines and small flowers. There are about 30 species included in the genus. They are found in the southwestern United States and northwestern Mexico.", "category": "IT"}, {"instruction": "What is Holi?", "input": "Holi ( /\u02c8ho\u028ali\u02d0/) is a popular and significant Hindu festival celebrated as the Festival of Colours, Love and Spring. It celebrates the eternal and divine love of the god Radha and Krishna. Additionally, the day also signifies the triumph of good over evil, as it commemorates the victory of Vishnu as Narasimha Narayana over Hiranyakashipu.Holi is originated and is predominantly celebrated in the Indian subcontinent but has also spread to other regions of Asia and parts of the Western world through the Indian diaspora.\n\nHoli also celebrates the arrival of Spring in India, the end of winter, and the blossoming of love. It is also an invocation for a good spring harvest season. It lasts for a night and a day, starting on the evening of the Purnima (Full Moon Day) falling in the Hindu calendar month of Phalguna, which falls around the middle of March in the Gregorian calendar.", "output": "Holi is an Indian festival to celebrate the start of Spring. Its celebrated by people putting bright colors on each other [powdered color]. Celebrations include praying, food, colors and dancing. The specific day changes based on the calendar every year. It is celebrated by Indian Diaspora across the world.", "category": "IT"}, {"instruction": "Which is a species of fish? Toadfish or Toad", "input": "", "output": "Toadfish", "category": "IT"}, {"instruction": "Identify which car manufacturer is French or American: Alpine, Cadillac", "input": "", "output": "Cadillac is American, Alpine is French", "category": "IT"}, {"instruction": "What is the political philosophy of isolationists?", "input": "", "output": "Isolationists philosophy is to focus within and not spend time/energy in the affairs of other nations. It was a popular philosophy during the US rebuild after the depression.", "category": "IT"}, {"instruction": "Classify the cities based on whether they are located in Namibia or Lithuania.\nKlaip\u0117da, Oshakati, Kaunas, Windhoek, Vilnius, Rundu", "input": "", "output": "Namibia - Windhoek, Rundu, Oshakati\nLithuania - Vilnius, Kaunas, Klaip\u0117da", "category": "IT"}, {"instruction": "In what year did Apple debut the 'Mac Operating System'?", "input": "In 1984, Apple debuted the operating system that is now known as the \"\"Classic\"\" Mac OS with its release of the original Macintosh System Software. The system, rebranded \"\"Mac OS\"\" in 1997, was pre-installed on every Macintosh until 2002 and offered on Macintosh clones for a short time in the 1990s. Noted for its ease of use, it was also criticized for its lack of modern technologies compared to its competitors.[1][2]\n\nThe current Mac operating system is macOS, originally named \"\"Mac OS X\"\" until 2012 and then \"\"OS X\" until 2016.[3] Developed between 1997 and 2001 after Apple's purchase of NeXT, Mac OS X brought an entirely new architecture based on NeXTSTEP, a Unix system, that eliminated many of the technical challenges that the classic Mac OS faced. The current macOS is pre-installed with every Mac and receives a major update annually.[4] It is the basis of Apple's current system software for its other devices \u2013 iOS, iPadOS, watchOS, and tvOS.[5]", "output": "In 1984, Apple debuted the operating system that is now known as the \"Classic\" Mac OS", "category": "IT"}, {"instruction": "write short essay on Neil Armstrong experience on moon", "input": "", "output": "On July 20th, 1969, Neil Armstrong, an American astronaut, made history by becoming the first human to set foot on the Moon. As he stepped onto the lunar surface, he famously uttered the words, \"That's one small step for man, one giant leap for mankind.\"\n\nArmstrong's experience on the Moon was a momentous occasion that captured the world's attention. He spent just over two hours outside the spacecraft, collecting samples, conducting experiments, and taking photographs. He was joined by fellow astronaut Buzz Aldrin, who followed him out of the lunar module a short while later.\n\nDespite the excitement of the moment, Armstrong later described his time on the Moon as a serene and otherworldly experience. The Moon's surface was eerily quiet, with no atmosphere to carry sound. Armstrong described the sky as \"completely black,\" and the Earth as a \"magnificent, lonely\" sight in the distance.\n\nArmstrong's mission to the Moon was a triumph of human ingenuity and perseverance. It marked a new era in space exploration and cemented America's position as a leader in the field. His bravery and dedication to science continue to inspire generations of scientists and explorers to this day.", "category": "IT"}, {"instruction": "Where does Kieran Liam McAnespie come from?", "input": "Kieran Liam McAnespie (born 11 September 1979) is a football manager and former player. Capable of playing as a full-back or winger, he appeared in the Scottish Premier League for St Johnstone and Hearts. Born in England, he represented the Scotland U21 national team internationally", "output": "Kieran Liam McAnespie was born in England.", "category": "IT"}, {"instruction": "what happens when you blow air into alkaline water?", "input": "", "output": "When you blow air into alkaline water the C02 from your breath creates carbonic acid which lowers the potential hydrogen of the alkaline water.  If you blow air into the alkaline water long enough the alkaline water will eventually turn acidic.  Potential hydrogen drops can be used to measure the PH to show the effect of blowing air into alkaline water.  PH drops will show alkaline water as blue and purple, and they will show acidic water as yellow.", "category": "IT"}, {"instruction": "What is the name of the country that still has an emperor?", "input": "", "output": "Japan is not the only country that has a monarch, but it is the only country that has an emperor.", "category": "IT"}, {"instruction": "Give me a list of five surf spots in Southern California", "input": "", "output": "Rincon, Malibu, Salt Creek, Trestles, Blacks Beach", "category": "IT"}, {"instruction": "Name the Khals known to currently be alive in A Song of Ice and Fire.", "input": "", "output": "Jhaqo, Pono, Moro, Jommo, Zekko, and Motho.", "category": "IT"}, {"instruction": "What are different ways to make eggs?", "input": "", "output": "You can fry and egg on a stovetop. Its recommended to preheat the pan on medium heat, once warm spray the pan with cooking spray or use butter before cracking an egg into the pan. Cook for a few minutes before flipping to fully cook the egg.  This method is most common when preparing an egg sandwich such as a bacon egg and cheese, or a sausage egg and cheese. You can also scramble eggs in a pot or pan. To do this you whisk a few eggs in a bowl with some milk, could be any kind of milk like skim milk or a dairy free milk like almond milk. Preheat the stove to medium heat and warm the pot or pan while you do this. Then pour the eggs into the pan and continually stir the eggs, scraping the bottom of the pan to ensure the eggs are fluffy. You can also poach an egg by cracking an egg into boiling water. Lastly, you can make a hardboiled egg by putting a desired number of eggs in a pot of water before placing on the stove. Once on the stove bring to a boil for 7-8 minutes.", "category": "IT"}, {"instruction": "Can you tell me something interesting about Bald Head Island?", "input": "", "output": "Bald Head Island is a small island located at the mouth of the cape fear river just south of Wilmington, North Carolina. The island is a popular vacation destination. Two unique aspects of the island are that the island is only accessible via ferry from Southport, North Carolina, and that all visitors and residents use electric golf carts to move throughout the island. While the island is a popular tourist destination, there are no resorts on the island.  If you wish to spend your vacation here you can rent one of the many island vacation homes. While on Bald Head Island, make use of the many walking and bike trails and visit one of the quaint restaurants and shops.", "category": "IT"}, {"instruction": "Are iodized salt and kosher salt the same?", "input": "", "output": "No, they are two different types of salt.  Iodized salt has additives and is processed into smaller uniform grains meant to be free-flowing, typically for use in salt shakers, it\u2019s also commonly referred to as table salt.  Kosher salt is generally used during cooking or for brining and curing food, and has a larger grain size then iodized salt.", "category": "IT"}, {"instruction": "I need to write a deck summarising the benefits of delta in the lakehouse, can you give me some good slide suggestions?", "input": "", "output": "Sure, here you go -\n\n1 - Challenges of data warehousing and analytics\n2 - Why Delta, what problem does it solve\n3 - What is Delta - key values points\n4 - References and customer stories\n5 - Enablement and Training\n6 - Next Steps and QA", "category": "IT"}, {"instruction": "How many letters there are in the China language?", "input": "", "output": "However, since there is no Chinese alphabet, there is no definite answer. But there are some statistics that will probably give you an idea. A modern Chinese dictionary has around 20,000 characters.", "category": "IT"}, {"instruction": "Which US city is known to be the bachelorette party center of the country, besides Las Vegas?", "input": "", "output": "Nashville, TN", "category": "IT"}, {"instruction": "What are the words of House Tyrell?", "input": "", "output": "\"Growing Strong\"", "category": "IT"}, {"instruction": "Tell me about the new premier of New South Wales", "input": "Christopher John Minns (born 17 September 1979) is an Australian politician serving as the 47th and current premier of New South Wales since March 2023. He has been the leader of the New South Wales branch of the Australian Labor Party (ALP) since June 2021 and a member of the New South Wales Legislative Assembly (MLA) for the division of Kogarah since 2015. He was previously the deputy mayor of Hurstville from 2007 to 2008.\nMinns was first elected at the 2015 New South Wales state election, and was elected unopposed as leader of the Labor Party in leadership election in June 2021, following the resignation of Jodi McKay. He led the party to victory at the 2023 state election.\nThe son of a school principal, Minns was raised in the St George region of Sydney in the suburb of Penshurst. He studied at Marist College Kogarah. He holds a bachelors degree from the University of New England in Armidale and attended Princeton University in the United States where he was awarded a Masters in Public Policy (2012\u201313).\nMinns is married and has three sons with his wife Anna. Upon his return from Princeton, while his wife pursued her own business opportunities, Minns became the carer of his sons before nominating for parliament.\nHe joined the Australian Labor Party in 1998 when he was 18 years old and was elected as the member for Kogarah in 2015.\nMinns is a supporter of NRL club the St George Illawarra Dragons.", "output": "Chris Minns led the Labor party to victory at the 2023 NSW state election and becomes the 47th premier of New South Wales.  Minns is married with three sons and is a supporter of the NRL club, St George Illawarra Dragons.", "category": "IT"}, {"instruction": "Write a short story about a little girl who befriends a dragon, the dragons magical powers can bring her to a different universe.", "input": "", "output": "Once upon a time there was a little girl who dreamed every day of finding a dragon. This particular Tuesday morning when she was waiting for the bus, she spotted a shiny object on the sidewalk. She leaned down to pick it up and it glimmered in the sunshine. She had never seen such a brilliant treasure, it was the color of the rainbow, and when she looked closer it looked eerily similar to a dragon scale, but she couldn't believe that it was truly a dragon scale because they only existed in the stories she read. She looked around and spotted another shiny scale, like a trail of breadcrumbs leading her to the forest behind her house. She knew that her parents would want her to go to school but her curiosity got the better of her and she started to follow the trail of shiny scales to the forest. She fought her way through the forest until she came upon what looked like a cave that she was sure was not there before. She cautiously entered the cave and and instead of the cave getting darker, it was getting brighter, like a brilliant light was inside the cave. When she turned the corner in the cave, she saw the most beautiful sparkling dragon and could not believe her eyes! She slowly crept toward the dragon, who was watching her closely as she approached. She held out her hand as if to pet the dragon and the dragon sniffed her hand, then rubbed it's head on the bottom of her hand to signal that it wanted to befriend her. She giggled as the dragon purred and rubbed it's shiny body circling around her. The dragon then spoke and asked her if she had ever been to the beyond worlds. The girl shook her head, the dragon blinked her eyes and projected an image onto the cave wall to show one of the beautiful beyond worlds that was filled with dragons. The girl asked if the dragon would take her there, the dragon laughed and nodded, signaling for the girl to jump on it's back. The rush of excitement came over the girl, and she hopped on the dragons back. She held on tight as the dragon started running out of the cave, as the dragon exited the cave a portal opened and it leaped into the portal. The girl closed her eyes, not knowing what would happen next, she finally opened her eyes and gawked with amazement when they arrived in the beyond world, she could not believe what she was seeing, DRAGONS! DRAGONS EVERYWHERE! They were riding over the rainbow, playing in the waterfalls, and the universe was full of beautiful flowers towering as tall as redwood trees. The sky was purple and the world had 10 moons as she glanced up in the sky.......this was going to be a great adventure!", "category": "IT"}, {"instruction": "What are some good body weight exercises for core and abs?", "input": "", "output": "Good body weight exercises that strengthen the core and abs are crunches, bicycle crunches, side v-ups, sit ups, planks, dead bugs, and wheel pose.", "category": "IT"}, {"instruction": "What is Assassin's Creed?", "input": "Assassin's Creed is an open-world, action-adventure, and stealth game franchise published by Ubisoft and developed mainly by its studio Ubisoft Montreal using the game engine Anvil and its more advanced derivatives. Created by Patrice D\u00e9silets, Jade Raymond, and Corey May, the Assassin's Creed video game series depicts a fictional millennia-old struggle between the Order of Assassins, who fight for peace and free will, and the Knights Templar, who desire peace through order and control. The series features historical fiction, science fiction, and fictional characters intertwined with real-world historical events and historical figures. In most games, players control a historical Assassin while also playing as an Assassin Initiate or someone caught in the Assassin\u2013Templar conflict in the present-day framing story. Considered a spiritual successor to the Prince of Persia series, Assassin's Creed took inspiration from the novel Alamut by the Slovenian writer Vladimir Bartol, based on the historical Hashashin sect of the medieval Middle East.", "output": "Assassin's Creed is a game franchise about a mythical group of assassin's fighting against the antagonists, the Templars. While the Assassin's fight for Freedom, the Templars fight for control and World domination. The game is hugely popular amongst the people who play video games. The series has historical characters which makes it even more popular amongst people who play video games. It was created by Ubisoft and is considered built off of Prince of Persia.", "category": "IT"}, {"instruction": "Which positions did Kamerion Wimbley play in High school?", "input": "Kamerion Wimbley (born October 13, 1983) is a former American football outside linebacker and defensive end in the National Football League (NFL). He was drafted by the Cleveland Browns in the first round of the 2006 NFL Draft with the 13th overall pick. He also played for the Oakland Raiders and Tennessee Titans before retiring in 2015. He played college football at Florida State University.\n\nEarly years\nAttending Wichita Northwest High School in Kansas, Wimbley played defensive end, linebacker, quarterback, receiver and punter. He earned Parade and SuperPrep All-America honors during his senior season and was considered to be one of the top high school athletes in the nation. He played in the 2002 U.S. Army All-American Bowl.\n\nConsidered a four-star recruit by Rivals.com, Wimbley was ranked 58th overall among football prospects of the class of 2002.[1] He selected Florida State over Notre Dame, Nebraska, Oklahoma and Tennessee. Wimbley graduated from Northwest High School in December 2001 (a semester early) and enrolled at Florida State in the spring of 2002.", "output": "Kamerion Wimbley played Football in multiple positions in Wichita Northwest High School in Kansas, including: defensive end, linebacker, quarterback, receiver and punter.", "category": "IT"}, {"instruction": "Tell me whether these are names of movie directors or authors: Quentin Tarantino, Martin Scorsese, Christopher Nolan, Ernest Hemingway, Stephen King, J.K. Rowling", "input": "", "output": "Quentin Tarantino is an American film director known for directing Pulp Fiction, Inglorious Basterds and Kill Bill.\nMartin Scorsese is an American film director known for directing Goodfellas, Taxi Driver and The Wolf of Wall Street.\nChristopher Nolan is a British-American film director known for directing The Dark Knight, Inception and Interstellar.\nErnest Hemingway is an American author known best known for writing For Whom the Bell Tolls and The Old Man and the Sea.\nStephen King is an American author known for writing It, The Shining and Misery.\nJ.K. Rowling is a British author known for writing the Harry Potter fantasy series.", "category": "IT"}, {"instruction": "Why do people like the game Diplomacy?", "input": "", "output": "Diplomacy is a strategic board game that does not rely on dice or other game elements to introduce randomness into results of gameplay. In the game Diplomacy, players negotiate, form alliances, and betray each other in an effort to occupy geographic provinces and control of \"supply centers\" to win the game. \n\nPeople like playing the game Diplomacy because it is unique compared to other strategic board games. In Diplomacy, all players submit their \"orders\" to move their pieces around the board into a box and those orders are adjudicated at the same time, making it difficult to gain an advantage over another player without communicating and planning out moves with other players. The only variable in the game is each player's ability to convince the other players to do what they want. Some people find this aspect of negotiation-based game play compelling, while others find the \"anything goes\" nature of these negotiations repelling. Therefore, Diplomacy is sometimes referred to as the \"game that ruins friendships.\"", "category": "IT"}, {"instruction": "Identify which animal species is alive or extinct: Spinosaurus, Common Bottlenose Dolphin", "input": "", "output": "Common Bottlenose Dolphin is alive, Spinosaurus is extinct.", "category": "IT"}, {"instruction": "How often is The Australian Chess Championship held?", "input": "The Australian Chess Championship is a tournament organised by the Australian Chess Federation and held every two years. The tournament is largely restricted to Australian chess players, although it is common to allow a small number of strong overseas players to compete. The highest-scoring eligible player (frequently the tournament winner) holds the title of Australian Chess Champion until the next tournament is held. The tournament format is normally a restricted Swiss system, and in case of a tie for first place, a playoff match or tournament is conducted.", "output": "Every two years", "category": "IT"}, {"instruction": "What are some types of physical exercise?", "input": "", "output": "Exercise can encompass: cardiovascular (aka, cardio), to improve blood flow/circulation and overall heart and lung health\nlifting, to build or tone muscles (arms, legs, shoulders benefit from lifting)\ncore, to improve balance, coordination, and stability\nstretching, to improve flexibility and tone (yoga, martial arts, barre, pilates)\nendurance (swimming, cycling, running distances)", "category": "IT"}, {"instruction": "What is Kraft Dinner?", "input": "", "output": "Kraft Dinner, also referred to as KD, is a macaroni-and-cheese product by Kraft. It is essentially the same boxed macaroni-and-cheese sold in the United States, but referred to by a different name.", "category": "IT"}, {"instruction": "What is William Shakespeare's greatest play?", "input": "", "output": "There is no common agreement on which play written by William Shakespeare is the greatest. In total, William Shakespeare wrote approximately 39 plays, each of which can be broadly categorized into three main groups: histories, comedies and tragedies. Henry V and Richard III are regarded amongst his finest histories, both featuring an English king as their eponymous character. The Tempest and A Midsummer Night's Dream are considered to be amongst his best comedies; whilst tragedies were arguably Shakespeare's greatest genre - Hamlet, Romeo and Juliet, Macbeth, Julius Caesar and King Lear are all amongst his finest contributions to this field. Of these, Romeo and Juliet is often considered to be the greatest love story ever written, and Hamlet is widely regarded as one of the most important analyses of the human condition. William Shakespeare's plays are widely believed to be amongst the greatest ever written, and to this day are regularly performed around the world.", "category": "IT"}, {"instruction": "Why are people scared of snakes?", "input": "", "output": "Snakes tend to scare people for a number of reasons. For starters, many of them have poisonous venom. Snakes are also very stealthy and oftentimes you may not even be aware of their presence. Some people are also frightened by the fact that snakes slither, and do not have any legs. Encountering a snake in the wild can send chills down your spine.", "category": "IT"}, {"instruction": "List some of the great houses that appear in the series \"A Song of Ice and Fire.\"", "input": "", "output": "Stark, Lannister, Baratheon, Tyrell, Arryn, Martell, Karstark, Mormont.", "category": "IT"}, {"instruction": "Who is the Denver Broncos best player in franchise history?", "input": "", "output": "John Elway is widely considered the best player for the Denver Broncos.  In addition to leading the team to five Super Bowls, and winning three, he is also a holder of numerous franchise and NFL records.  He became a fan favorite for his toughness.  His most memorable moment was the \"helicopter play\" in Super Bowl XXXII, a key moment in the game. Other notable players include Steve Atwater, Shannon Sharpe, Randy Gradishar, Terrell Davis, Rod Smith, Peyton Manning, Jake Plummer, and Tom Jackson.", "category": "IT"}, {"instruction": "Please write some key points on Booker prize from the given passage.", "input": "The 2022 Booker Prize was a literary award given for the best English novel of the year. It was announced on 17 October 2022, during a ceremony hosted by Sophie Duker at the Roundhouse in London. The longlist was announced on 26 July 2022. The shortlist was announced on 6 September. Leila Mottley, at 20, was the youngest longlisted writer to date, and Alan Garner, at 87, the oldest. The majority of the 13 titles were from independent publishers. The prize was awarded to Shehan Karunatilaka for his novel, The Seven Moons of Maali Almeida, receiving \u00a350,000. He is the second Sri Lankan to win the prize, after Michael Ondaatje", "output": "1. The 2022 Booker Prize was a literary honour presented to the year's top English novel.\n2. It was revealed on October 17, 2022, at a ceremony Sophie Duker presided over at London's Roundhouse.\n3. On July 26, 2022, the longlist was announced.\n4. On September 6th, the shortlist was announced.\n5. Alan Garner, aged 87, was the oldest longlisted author to date, and Leila Mottley, at 20 years old, was the youngest.\n6. Independent publ ishers produced the majority of the 13 books.\n7. Shehan Karunatilaka received the award and \u00a350,000 for his book The Seven Moons of Maali Almeida.\n8. After Michael Ondaatje, he is the second Sri Lankan to win the award.", "category": "IT"}, {"instruction": "Given this reference paragraph about the history of the 'five whys' technique, what was the original intention of asking the 'five whys'?", "input": "The technique was originally developed by Sakichi Toyoda and was used within the Toyota Motor Corporation during the evolution of its manufacturing methodologies. It is a critical component of problem-solving training, delivered as part of the induction into the Toyota Production System. The architect of the Toyota Production System, Taiichi Ohno, described the five whys method as \"the basis of Toyota's scientific approach by repeating why five times[6] the nature of the problem as well as its solution becomes clear.\"[2] The tool has seen widespread use beyond Toyota, and is now used within Kaizen, lean manufacturing, lean construction and Six Sigma. The five whys were initially developed to understand why new product features or manufacturing techniques were needed, and was not developed for root cause analysis.", "output": "The original intention of asking the 'five whys' was to understand why new product features or manufacturing techniques were needed in Toyota's manufacturing practices.", "category": "IT"}, {"instruction": "classify the following spending items as either grocery, entertainment, food & drink, travel, bills: caltrain, train, nijiya market, dinner, internet bill, plane, boba, bar", "input": "", "output": "bar should be food & drink, boba should be food & drink, plane should be travel, dinner should be food & drink, nijiya market should be grocery, caltrain should be travel", "category": "IT"}, {"instruction": "What are some languages that feature hygienic macros?", "input": "Hygienic macros are macros whose expansion is guaranteed not to cause the accidental capture of identifiers. They are a feature of programming languages such as Scheme,[1] Dylan,[2] Rust, Nim, and Julia. The general problem of accidental capture was well known within the Lisp community prior to the introduction of hygienic macros. Macro writers would use language features that would generate unique identifiers (e.g., gensym) or use obfuscated identifiers in order to avoid the problem. Hygienic macros are a programmatic solution to the capture problem that is integrated into the macro expander itself. The term \"hygiene\" was coined in Kohlbecker et al.'s 1986 paper that introduced hygienic macro expansion, inspired by the terminology used in mathematics.[3]", "output": "Some languages that feature hygienic macros include Scheme, Dylan, Rust, Nim, and Julia.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Ikembe, Cimbalom", "input": "", "output": "Cimbalom is string, Ikembe is percussion.", "category": "IT"}, {"instruction": "What are the primary uses of horses according to the text?", "input": "Horses and humans interact in a wide variety of sport competitions and non-competitive recreational pursuits as well as in working activities such as police work, agriculture, entertainment, and therapy. Horses were historically used in warfare, from which a wide variety of riding and driving techniques developed, using many different styles of equipment and methods of control. Many products are derived from horses, including meat, milk, hide, hair, bone, and pharmaceuticals extracted from the urine of pregnant mares. Humans provide domesticated horses with food, water, and shelter as well as attention from specialists such as veterinarians and farriers.", "output": "Horses can be used for recreational activities and therapy as well as working activities like police work or agriculture. Historically horses were also used in warfare. Horses can also provide products like meat, milk, hide, hair, bone or pharmaceuticals.", "category": "IT"}, {"instruction": "What was the former name of The Washington Commanders football team?", "input": "The Washington Commanders are a professional American football team based in the Washington metropolitan area. Formerly known as the Washington Redskins, the team competes in the National Football League (NFL) as a member of the National Football Conference (NFC) East division. The team plays its home games at FedExField in Landover, Maryland; its headquarters and training facility are in Ashburn, Virginia. The team has played more than 1,000 games and is one of only five in the NFL with more than 600 total wins. Washington was among the first NFL franchises with a fight song, \"Hail to the Commanders\",[a] which is played by their marching band after every touchdown scored by the team at home. The franchise is valued by Forbes at US$5.6 billion, making them the league's sixth-most valuable team as of 2022.[1]", "output": "The Washington Commanders was formally known as The Washington Redskins, the team competes in the National Football League (NFL) as a member of the National Football Conference (NFC) East division.", "category": "IT"}, {"instruction": "Why do people chose to homeschool their children?", "input": "", "output": "Choosing how and where to educate your child is a very important family decision.  Parents have different values and make different decisions accordingly.  Homeschooling is on the rise due to the pandemic, safety, quality of the curriculum and ideological factors.  This trend is documented in the United States and many other countries such as Canada, Australia, Mexico, France, South Korea, and the United Kingdom. According to the National Home Education Research Institute, homeschooled children usually score 15 to 30 percentile points above public school students on standardized tests.  Some research has found that overall, 78% of the compared and reviewed studies confirm that homeschooled children performed significantly better than their public schooled peers in terms of academic performance.  Social and Emotional Skills are an area where homeschools have perceived weakness, but that is not true.  Infact,  87% of peer-reviewed studies on the subject indicate that they perform statistically significantly better than those in conventional schools.", "category": "IT"}, {"instruction": "What is the gun culture in the United States?", "input": "In the United States, gun culture encompasses the behaviors, attitudes, and beliefs about firearms and their usage by civilians. Gun ownership in the United States is the highest in the world, and constitutionally protected by the Second Amendment to the United States Constitution. Firearms are widely used in the United States for self-defense, hunting, and recreational uses, such as target shooting.", "output": "The United States has become a victim of its past as it relates to its gun culture. The 2nd Amendment was ratified in 1791, which at the time seemed appropriate given that the United States had just waged a war against England for its freedom. However, more than 200 years later, the 2nd Amendment no longer solely ties itself to its original intent: to protect itself and its people. The prevalence of guns in the United States has led to the United States having the highest gun ownership rates in the world. This in turn has resulted in many inexplicable acts of gun violence that have cost innocent lives and traumatized many.", "category": "IT"}, {"instruction": "From the passage provided, extract the awards received by Jensen Huang from 1999-2021.", "input": "In 1999, Jensen Huang was named Entrepreneur of the Year in High Technology by Ernst & Young.[citation needed] In 2003, Huang received the Dr. Morris Chang Exemplary Leadership Award, which recognizes a leader who has made exceptional contributions to driving the development, innovation, growth, and long-term opportunities of the fabless semiconductor industry, from the Fabless Semiconductor Association. He was also a National Finalist for the EY Entrepreneur of the Year Award in 2003 and was an Award Recipient for the Northern California region in 1999.[citation needed]\n\nAdditionally, Huang is a recipient of the Daniel J. Epstein Engineering Management Award from the University of Southern California and was named an Alumni Fellow by Oregon State University. Huang was awarded an honorary doctorate from Oregon State University at the June 13, 2009, commencement ceremony.[13]\n\nIn 2018, Huang was listed in the inaugural Edge 50, naming the world's top 50 influencers in edge computing.[14] In October 2019, Harvard Business Review named Jensen Huang best-performing CEO in the world.[15] In November 2020, Jensen Huang was named \"Supplier CEO of the year\" by Eurostars AutomotiveNewsEurope.[16] Huang was awarded an honorary doctorate from National Taiwan University at the school anniversary in November, 2020.[17][better source needed] In August 2021, the Semiconductor Industry Association (SIA) announced that Jensen Huang is the 2021 recipient of the industry\u2019s highest honor, the Robert N. Noyce Award.[18] In September 2021, he was included in the Time 100, Time's annual list of the 100 most influential people in the world.[19]", "output": "Jensen Huang's awards include: 1) Entrepreneur of the Year in High Technology by Ernst & Young, 2) Dr. Morris Chang Exemplary Leadership Award, 3) National Finalist for the EY Entrepreneur of the Year Award, 4) Award Recipient for the Northern California region, 5) Daniel J. Epstein Engineering Management Award, 6) Alumni Fellow of Oregon State University, 7) honorary doctorate from Oregon State University, 8) Edge 50 member 9) best-performing CEO in the world 10) Supplier CEO of the year, 11) honorary doctorate from National Taiwan University, 12) Robert N. Noyce Award, 13) Time 100 member.", "category": "IT"}, {"instruction": "Classify each of the following as either a single digit or a double digit number: 8, 4, 1, 12, 87, 65, 3, 5, 45, 97, 6, 2, 34, 71, 9, 48, 0, 7, 31, 50.", "input": "", "output": "Single digits include: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.\nDouble digits include: 12, 31, 34, 45, 48, 50, 65, 71, 87, 97.", "category": "IT"}, {"instruction": "Extract the basic universal competition sections of the triathlon in order, and explain each section.", "input": "While specific rules for triathlon can vary depending on the governing body (e.g. World Triathlon, USA Triathlon), as well as for an individual race venue, there are some basic universal rules. Traditionally, triathlon is an individual sport and each athlete is competing against the course and the clock for the best time. As such, athletes are not allowed to receive assistance from anyone else outside the race, with the exception of race-sanctioned aid volunteers who distribute food and water on the course.[59][60]\n\n\nTransition area (bicycles) of Hamburg Triathlon, 2002\nTriathlons are timed in five sequential sections:\n\nfrom the start of the swim to the beginning of the first transition (swim time);\nfrom the beginning of the first transition to the end of the first transition (T1 time);\nfrom the start of the cycling to the end of the cycling leg (cycling time);\nfrom the beginning of the second transition to the end of the second transition (T2 time);\nfinally from the start of the run to the end of the run, at which time the triathlon is completed.[60]\nResults are usually posted on official websites and will show for each triathlete his/her swim time; cycle time (with transitions included); run time; and total time. Some races also post transition times separately.\n\nOther rules of triathlon vary from race to race and generally involve descriptions of allowable equipment (for example, wetsuits are allowed in USAT events in the swimming stage of some races when the water temperature is below 25.6 \u00b0C (78.1 \u00b0F)),[56] and prohibitions against interference between athletes.[60] Additionally, the use of flippers or other swim propulsion and flotation aids are illegal in triathlon and can result in disqualification.[56]\n\nOne rule involving the cycle leg is that the competitor's helmet must be donned before the competitor mounts (or even takes possession of, in certain jurisdictions[61]) the bike, and it must remain on until the competitor has dismounted; the competitor may not be required to wear the helmet when not on the bicycle (e.g. while repairing a mechanical problem). Failure to comply with this rule will result in disqualification.[56][60] Additionally, while on the bike course, all bicycles shall be propelled only by human force and human power. Other than pushing a bicycle, any propulsive action brought on by use of the hands is prohibited. Should a competitor's bike malfunction they can proceed with the race as long as they are doing so with their bicycle in tow.[56] There are also strict rules regarding the 'bike mount' line. Competitors may not begin riding their bicycle out of transition until they are over a clearly marked line. Mounting the bike prior to this may incur a penalty (example: a 15-second time penalty at the London 2012 Olympics was imposed on Jonathan Brownlee, a competitor from Great Britain, for mounting his bike too early.)[60][62]\n\nOther time penalties can be incurred during the race for, among other things, drafting on the bike in a non-drafting race, improper passing, littering on course, and unsportsmanlike conduct.[56][63]", "output": "Triathlons are timed in five sequential sections.\nFrom the start of the swim to the beginning of the first transition (swim time). The use of flippers or other swim propulsion and flotation aids are illegal.\nFrom the beginning of the first transition to the end of the first transition (T1 time).\nFrom the start of the cycling to the end of the cycling leg (cycling time). The competitor's helmet must be donned before the competitor mounts the bike, and it must remain on until the competitor has dismounted.\nFrom the beginning of the second transition to the end of the second transition (T2 time)\nFinally from the start of the run to the end of the run, at which time the triathlon is completed.", "category": "IT"}, {"instruction": "Given a reference text about Larissa Ilinichna Volpert, tell me what game she played, when she was champion, and what titles she earned.", "input": "Larissa Ilinichna Volpert (Russian: \u041b\u0430\u0440\u0438\u0441\u0430 \u0418\u043b\u044c\u0438\u043d\u0438\u0447\u043d\u0430 \u0412\u043e\u043b\u044c\u043f\u0435\u0440\u0442; 30 March 1926[1] \u2013 1 October 2017) was a Soviet chess Woman Grandmaster and Russian and Estonian philologist. She was a three time Soviet women's chess champion (1954, 1958, and 1959).\n\nLife\nBorn in Leningrad, she learned chess from her older brother and received chess instruction at the Leningrad Pioneers Palace. In 1947, she tied for first at the Leningrad Women's Championship. She played her first USSR Women's Championship in 1949 and finished equal fifth. In 1954, she won her first USSR Women's Championship. She scored 2\u20130 against Nina Hru\u0161kov\u00e1-B\u011blsk\u00e1 in the 1954 USSR v. Czechoslovakia match. In 1958 she shared the USSR Women's Championship title, and in 1959 she won for the third time, her second outright victory.[2]\n\nVolpert earned the Woman International Master title in 1954 and the Woman Grandmaster title in 1978.[1] She had a degree in philology from Leningrad University[2] and since 1977 taught Russian philology at the University of Tartu, Estonia. Her major works are about Pushkin's and Lermontov's poetry, especially in their connections to French literature. She died at the age of 91 on 1 October 2017.[3", "output": "Larissa Ilinichna Volpert played chess and was the Soviet women's chess champion in 1954, 1958 and 1959. She earned the titles of Woman International Master and Woman Grandmaster for her accomplishments in the game of chess.", "category": "IT"}, {"instruction": "How are the teams which qualify for the National Football League Playoffs determined?", "input": "", "output": "The 32 teams that comprise the National Football League are organized by two conferences, the American and National, with four divisions of four teams in each conference.  Each year the team with the best record in their division automatically qualifies for the playoffs.  In addition, the three remaining teams with the best records in each conference also qualify and are designated as \"wildcards\".  Tiebreakers are used to determine who makes the playoffs in scenarios where two or more teams finish with the same number of wins.  Tiebreakers can include head-to-head competition, record in conference, and record against common opponents.", "category": "IT"}, {"instruction": "Categorize the following list into common greetings and common parting words: goodbye, hi, hiya, howdy, see ya, what's up, i'm out, how are you, how are you doing, peace, sup, talk to you later, see you soon, have a good one", "input": "", "output": "Common greetings: hi, hiya, howdy, what's up, how are you, how are you doing, sup\nCommon parting words: goodbye, see ya, i'm out, peace, talk to you later, see you soon, have a good one", "category": "IT"}, {"instruction": "What are the ten best restaurants in London?", "input": "", "output": "- Behind; Dalston\n- Manteca; Shoreditch\n- Restaurant St. Barts; Smithfield\n- St. John; Farringdon\n- F.K.A.B.A.M; Highbury\n- Sabor; Mayfair\n- Blacklock; Soho\n- Planque; Haggerston\n- Cycene; Shoreditch\n- Brat; Shoreditch", "category": "IT"}, {"instruction": "What is the Baur au Lac", "input": "Baur au Lac is a luxury hotel at Talstrasse, Z\u00fcrich, Switzerland.\n\nThe hotel was founded in 1844 by Johannes Baur, and is still owned by the Baur family. It was completely renovated between 2008 and 2010.[1] It is a member of the Leading Hotels of the World marketing organisation.[2]", "output": "The Baur au Lac is a luxury hotel at Talstrasse, Zurich, Switzerland.\n\nThe hotel was founded in 1844 by Johannes Baur, and is still owned by the Baur family. It was completely renovated between 2008 and 2010. It is a member of the Leading Hotels of the World marketing organisation.\n\nIt is beautifully located, directly at the wonderful lake of Zurich in Switzerland", "category": "IT"}, {"instruction": "What is the current reigning dynasty of Thailand?", "input": "", "output": "The current reigning dynasty of Thailand is Chakri dynasty and the current King of the dynasty is Maha Vajiralongkorn.", "category": "IT"}, {"instruction": "Name 10 colors", "input": "", "output": "Fuschia, magenta, orange, green, blue, red, yellow, chartreuse, aquamarine, sienna", "category": "IT"}, {"instruction": "What is game of Cricket?", "input": "Cricket is a bat-and-ball game played between two teams of eleven players on a field at the centre of which is a 22-yard (20-metre) pitch with a wicket at each end, each comprising two bails balanced on three stumps. The batting side scores runs by striking the ball bowled at one of the wickets with the bat and then running between the wickets, while the bowling and fielding side tries to prevent this (by preventing the ball from leaving the field, and getting the ball to either wicket) and dismiss each batter (so they are \"out\"). Means of dismissal include being bowled, when the ball hits the stumps and dislodges the bails, and by the fielding side either catching the ball after it is hit by the bat, but before it hits the ground, or hitting a wicket with the ball before a batter can cross the crease in front of the wicket. When ten batters have been dismissed, the innings ends and the teams swap roles. The game is adjudicated by two umpires, aided by a third umpire and match referee in international matches. They communicate with two off-field scorers who record the match's statistical information.", "output": "Cricket is a game played using a bat and a ball, with 11 players in each team. The surface in the centre of cricket filed is called Pitch which is 22 yards long. The batting starts with 2 player on the pitch, a batter and runner. Bowling side chooses a baller and rest of the 10 players are spread across the filed to catch the ball. Once ten batters from batting side are dismissed, the other sides gets opportunity to bat. The runs are scored by running between each end of the wicket and hitting the ball outside the boundary lines of the filed.", "category": "IT"}, {"instruction": "How much of American wine is produced in California?", "input": "", "output": "California is responsibly for roughly 90% of American wine production", "category": "IT"}, {"instruction": "As a golfer, how can I fix my slice?", "input": "", "output": "A common swing fault in golfers is a slice which is caused when the face of the club isn't aligned properly to the swing path of the club.  What will typically happen is at the time of impact, the face is open in relation to the target (ie aimed to the right if you are a right handed golfer) and the swing path is closed in relation to the target (ie aimed to the left if you are a left handed golfer).  When there is a large difference between the path of the swing and the face of the club, the impact will generate a high degree of lateral spin on the ball causing the flight of the ball to curve away from the target.  Here are some ways to fix this swing fault:\n\n1. Grip the club with a stronger grip.  This means the v formed between your thumb and pointer finger on back hand is pointed to your rear shoulder and your opposite hand it also gripping the club more from the back.  This will help you close the face of the club at impact.\n2. Focus on keeping the face closed in the backswing.  One fault many amateurs have is the club face opens toward the sky on the backswing too far meaning that the face will need to turn more on the downswing to get to square at impact.  Creating less rotation on the backswing can help with this.  \n3. Keeping hips down and back in the downswing.  One fault that can cause inconsistent contact as well as a slice is when the hips thrust forward during the downswing causing the golfer to lift up to counter being too close to the ball which can often cause an over the top, out-to-in swing path.  Try to keep the hips back through the swing and focus on rotating the body to keep forward or lateral movement to a minimum.  \n\nA slice is a very common issue among golfers but knowing the causes and swing faults that lead to a slice can help you think about how you can improve your swing to fix it.", "category": "IT"}, {"instruction": "Who tends to participates in hackathons?", "input": "A hackathon (also known as a hack day, hackfest, datathon or codefest; a portmanteau of hacking and marathon) is an event where people engage in rapid and collaborative engineering over a relatively short period of time such as 24 or 48 hours. They are often run using agile software development practices, such as sprint-like design wherein computer programmers and others involved in software development, including graphic designers, interface designers, product managers, project managers, domain experts, and others collaborate intensively on engineering projects, such as software engineering.\n\nThe goal of a hackathon is to create functioning software or hardware by the end of the event.[1] Hackathons tend to have a specific focus, which can include the programming language used, the operating system, an application, an API, or the subject and the demographic group of the programmers. In other cases, there is no restriction on the type of software being created or the design of the new system.", "output": "Computer programmers and others involved in software development, including graphic designers, interface designers, product managers, project managers, domain experts, and others tend to participate in hackathons.\n\nThey collaborate intensively on engineering projects, such as software engineering with the goal of creating functioning software or hardware by the end of the event.", "category": "IT"}, {"instruction": "Which community of users on Twitter has the most 8-dollar-a-month verification?", "input": "", "output": "From my limited experience, it's the bitcoin bros who are the most willing to pay Elon Musk 8 dollars a month for the useless verification blue check mark. What a double whammy!", "category": "IT"}, {"instruction": "Tell me whether these people are DJs or singers: David Guetta, Avicii, Rihanna, Beyonce, Martin Garrix, Calvin Harris, Taylor Swift", "input": "", "output": "David Guetta: DJ\nAvicii: DJ\nRihanna: Singer\nBeyonce: Singer\nMartin Garrix: DJ\nCalvin Harris: DJ\nTaylor Swift: Singer", "category": "IT"}, {"instruction": "What\u2019s a typical dish in Brazil?", "input": "", "output": "Brazil has a wide variety of culinary options heavily based on meats, local fruits and fresh vegetables. One traditional dish is the \u201cfeijoada\u201d, a black bean and sausage stew that is generally served with rice, yucca flower and oranges. Another popular dish is the so called \u201cPicanha\u201d, essentially the cap of the top sirloin.", "category": "IT"}, {"instruction": "How should I invest my money?", "input": "", "output": "There are many different ways to invest your money. You can leave it in a Saving account, high yield saving account, stock market, real estate, bonds, notes, Gold, Silver, Cryptocurrency and many other assets. Each of the asset classes comes with different levels of risk. A diverse portfolio has advantageous to a non-diverse portfolio.", "category": "IT"}, {"instruction": "Where is the village of Congosto", "input": "Congosto (Spanish pronunciation: [ko\u014b\u02c8\u0261osto]) is a village and municipality located in the region of El Bierzo (province of Le\u00f3n, Castile and Le\u00f3n, Spain) . It is located near to Ponferrada, the capital of the region. The village of Congosto has about 350 inhabitants.\n\nIts economy was traditionally based on agriculture, wine and coal mining. Nowadays, most of the inhabitants work on the surrounding area on activities such as wind turbine manufacturing or coal mining.\n\nCongosto also a large reservoir in its vicinity, the Barcena reservoir, to which many tourists visit during the summer.", "output": "Congosto is a village and municipality located in the region of El Bierzo (province of Leon, Castile and Leon, Spain). It is located near to Ponferrada, the capital of the region. The village of Congosto has about 350 inhabitants.\n\nIts economy was traditionally based on agriculture, wine and coal mining. Nowadays, most of the inhabitants work on the surrounding area on activities such as wind turbine manufacturing or coal mining.\n\nCongosto also a large reservoir in its vicinity, the Barcena reservoir, to which many tourists visit during the summer.", "category": "IT"}, {"instruction": "Name the three best professional sports teams based in California.", "input": "", "output": "The best professional sports teams based in California are the Los Angeles Dodgers, the Golden State Warriors, and the San Francisco 49ers.", "category": "IT"}, {"instruction": "What is Marketing Automation?", "input": "Marketing Automation is a subset of customer relationship management (CRM) or customer experience management (CXM) that focuses on the definition, segmentation, scheduling and tracking of marketing campaigns. The use of marketing automation makes processes that would otherwise have been performed manually much more efficient and makes new processes possible. Marketing Automation can be defined as a process where technology is used to automate several repetitive tasks that are undertaken on a regular basis in a marketing campaign.\n\nMarketing Automation platforms allow marketers to automate and simplify client communication by managing complex omnichannel marketing strategies from a single tool. Marketing Automation assists greatly in areas like Lead Generation, Segmentation, Lead nurturing and lead scoring, Relationship marketing, Cross-sell and upsell, Retention, Marketing ROI measurement. Effective marketing automation tools leverage data from a separate or integrated CRM to understand customer impact and preferences.", "output": "Marketing Automation is software that helps marketers to do create efficient online and offline campaigns. It's part of CRM suite and people usually integrate it with their salesforce application and marketing website. The Marketing Automation platform allows marketers to automate and simplify customer communication by managing multi communication channels. This includes personalized email, dynamic web pages, digital banners, social media and more. People use it for lead generation, segmentation and nurturing and lead scoring. Post-sales marketers also use Marketing Automation for cross-sell, upsell and retention marketing. In", "category": "IT"}, {"instruction": "What are some ways to improve the value of your home?", "input": "", "output": "There are several things you do can to increase the value of your home. First, you can focus on what is known as \"curb appeal\", essentially making the outside and surrounding of your house attractive. Ensure that the landscaping is well maintained, fix any broken doors or windows, and painting the outside so that the house does not look dull. In the interior of your house, the best places to focus will be in your bathrooms and kitchen. Further, you can replace major appliances and components such as water heaters, furnaces, or the roof to increase the value. Another way to increase the value of your home is by making it bigger. Often, pricing for homes is done by looking at the area of the house, so by adding on new rooms or extra space, you can also increase the overall value of the house.", "category": "IT"}, {"instruction": "Tell me an idea for a film based off of the cartoon movie Cars but incorporate self-driving cars.", "input": "", "output": "A self-driving car named Walter (voiced by Will Arnett) is stuck driving drunk passengers around San Francisco at all hours of the night trying to make ends meet. He frequently has pedestrians staring at him because he doesn't have a driver, kids drawing graffiti on him, and passengers giving him a bad review for being too cautious while driving.\n\nWalter dreams of being a race car like the rich cars he sees on Tik Tok. They get to drive fast as Sonoma Raceway and race each other in front of stadiums full of people while Walter has to follow the 30mph speed limit on SF streets.\n\nWalter finds out that the race car life isn't all it's cracked up to be, and realizes over time to be happy with what he has and that at least he isn't one of those ride-share vehicles that can't drive themselves around town.", "category": "IT"}, {"instruction": "Which American president spoke Dutch as their first language?", "input": "Van Buren received a basic education at the village schoolhouse, and briefly studied Latin at the Kinderhook Academy and at Washington Seminary in Claverack. Van Buren was raised speaking primarily Dutch and learned English while attending school; he is the only president of the United States whose first language was not English. Also during his childhood, Van Buren learned at his father's inn how to interact with people from varied ethnic, income, and societal groups, which he used to his advantage as a political organizer. His formal education ended in 1796, when he began reading law at the office of Peter Silvester and his son Francis.", "output": "President Van Buren spoke Dutch as his first language. He is the only president of the United States of America who spoke English as a second language.", "category": "IT"}, {"instruction": "How many planets are there?", "input": "", "output": "There are eight planets in our native solar system. We used to consider there to be nine, but then scientists decided that Pluto doesn't fit the requirements to be a planet. I don't really know what that is, but that's what they decided. Mercury is the closest planet to the sun, and doesn't really have an atmosphere. Venus is subject to a runaway greenhouse effect. Earth is where we live. Mars is red, and slightly smaller than Earth. We've recently found evidence of water there. The asteroid belt comes next, which isn't really a planet. Following the asteroid belt are the gas giants Jupiter, Saturn, and Uranus. They have rings. Neptune comes last. Other solar systems seem to have planets too - in fact this appears to be far more common than we would have thought.", "category": "IT"}, {"instruction": "Help me come up with 3 ideas for a new business and how I can start it", "input": "", "output": "There are many businesses you could think about creating. Here are a few examples:\n- Services: you can create a firm that provides services such as marketing, technical consulting, or strategic advising. You can start this business by examining your professional expertise, building marketing materials, and networking to find your first customers.\n- Product: you can create a product in a domain you're passionate about is a great way of starting a business. This could be small scale boutique items such as candles or soaps made at home and sold at local markets or on a website like Etsy. This could also include something mass manufactured, either contracted out or involving significant capital expenditure in order to start development.\n- Training: you can start a training or education program in an industry where you have expertise. There are online platforms for hosting content and managing payments. You can also leverage social media in order to build a funnel of customers.\nThere are many different potential businesses you might create but services, product, and training businesses are good domains to examine as you look to start your business.", "category": "IT"}, {"instruction": "Tomb of Sand  was translated from Hindi to English by", "input": "", "output": "Daisy Rockwell", "category": "IT"}, {"instruction": "What is more important in society, freedom or safety?", "input": "", "output": "In our society, freedom and safety are both valued. While many other countries may put safety first, the harsh reality for Americans is that freedom always comes before safety. Despite being equally important, Americans foolishly put their trust in freedom over safety, without realizing the dangers of those freedoms.\nThe 2nd Amendment is a commonly danger to freedom. Americans are allowed to own guns for self protection. However, since the 18th century, guns have changed. Instead of a rifle or shotgun, Americans own ARI5s and other guns that can fire hundreds of bullets per round. Security in America has also increased leaving people to question the need for a personal weapon.\nOften a result of having the freedom to easily buy and keep guns is school shootings. Teens who are depressed, lonely, suicidal, or crazy can easily buy or ise their parents guns to shoot and will other students, teachers, or themselves. In late 2022, a six year old brought his father's hand gun to school and shot his teacher. Yes, the gun was licensed and own by the father but why should any US citizen or even person feel safe in this country when the 2nd Amendment exsits? Should anyone trust their freedoms when it is easier to buy a gun than a car?\nOn the flip side, America's freedom is a gift that many other countries don't give. In 2019 when covid-19 first immerged in China, the country. went on lockdown, and in some cities, still remains so. By the third year of the pandemic, Americans learned of the extreme measures the Chinese government had taken upon its citizens, arresting those who left their homes for any reason, in the worst case. While China's laid protocols were way too extreme, Americans over the pandemic chose their freedom to not wear a mask over the safety of themselves and others, again.\nTo be clear, freedom and safety are not opposites, and countries who manage both well are impressive to be sure. But Americans are unwilling, to a dangerous level, to let go of some or any of their freedoms, even if it will benefit the overall safety of America. Freedom, in America, is valued above all, and could arguably be our most identifiable trait.", "category": "IT"}, {"instruction": "Given this reference text about the consumption of peanut butter, when is national peanut butter day?", "input": "The United States is a leading exporter of peanut butter, and one of the largest consumers of peanut butter annually per capita.[30] January 24 is National Peanut Butter Day in the United States.[31] In March 2020 during the COVID-19 pandemic, retail sales of peanut butter in the United States increased by 75% over the level in March 2019.[32]\n\nAccording to Jon Krampner's 2013 book on peanut butter, per capita consumption of peanut butter in Canada and the Netherlands \u2013 the largest consumer per capita in Europe \u2013 exceed that in the United States.[33]\n\nIn Israel, the peanut-butter-flavored puffcorn snack Bamba accounts for 25% of the snack market;[34] its consumption by infants has been linked to a low incidence of peanut allergies among Israelis.[35]", "output": "National Peanut Butter Day takes place on January 24th in the United States.", "category": "IT"}, {"instruction": "What are good activities for two year old boys?", "input": "", "output": "Two year old boys tend to be active, curious and social. Enjoyable activities for this age include going to the park, dancing to music, reading a book, and taking a walk around the neighborhood. Local community organizations also commonly plan activities for toddlers at places like libraries, schools and parks.", "category": "IT"}, {"instruction": "How many compute services does Azure Synapse have?", "input": "", "output": "Azure Synapse provides five different compute services:\n1. Dedicated SQL Pools (previously known as \"Synapse Data Warehouse\"), \n2. Serverless SQL Pools (i.e. a query service over the data lake), \n3. Data Explorer Pools (for real-time & time series processing),\n4. Spark Pools (Microsoft's version of Spark), and\n5. Pipelines (a variant of ADF)", "category": "IT"}, {"instruction": "What does fasting mean?", "input": "Fasting is the abstention from eating and sometimes drinking. From a purely physiological context, \"fasting\" may refer to the metabolic status of a person who has not eaten overnight (see \"Breakfast\"), or to the metabolic state achieved after complete digestion and absorption of a meal.[1] Metabolic changes in the fasting state begin after absorption of a meal (typically 3\u20135 hours after eating).", "output": "Fasting is the abstention from eating and sometimes drinking.", "category": "IT"}, {"instruction": "How many times Lewis Hamilton won the F1 Championship ?", "input": "", "output": "7 times", "category": "IT"}, {"instruction": "What happens when you bring flammable objects closer to a fire source or extreme heat?", "input": "", "output": "Flammable objects can become inflamed when placed on or near a fire source or extreme heat.  Its recommended to keep flammable objects far away from heat sources.", "category": "IT"}, {"instruction": "Give me a list of the last five european golden boots winner And tell me how many goals they scored.", "input": "", "output": "1. Robert Lewandowski, 2022-2021, 35 goals\n2. Robert Lewandowski, 2021-2020, 41 goals\n3. Ciro Immobile, 2020-2019, 36 goals\n4. Lionel Messi, 2019-2018, 36 goals\n5. Lionel Messi, 2018-2017, 34 goals", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Den-den daiko, Luc huyen cam", "input": "", "output": "Luc huyen cam is string, Den-den daiko is percussion.", "category": "IT"}, {"instruction": "Given a reference text about Run Towards the Danger, tell me how many essays are part of the collection.", "input": "Run Towards the Danger is a 2022 Canadian essay collection by Sarah Polley, a former child star, director, and screenwriter.\n\nThe six essays in the collection examine aspects of Polley's career on stage, screen, and on film detailing her roles in a Stratford Festival production of Alice Through the Looking Glass, as well as her breakout roles in The Adventures of Baron Munchausen and the TV series Road to Avonlea. The book also revealed for the first time that Polley had been a victim of Jian Ghomeshi who sexually and physically assaulted her when she was 16 and he was 28.[1]", "output": "Six essays are part of the Run Towards the Danger essay collection.", "category": "IT"}, {"instruction": "Pick if these would be useful or not useful for a high school student to put in their backpack. Notebooks, textbook, desk lamp, pencil pouch, beach ball, pillow, laptop.", "input": "", "output": "Notebooks: useful, textbook: useful, desk lamp: not useful, pencil pouch: useful, beach ball: not useful, pillow: not useful, laptop: useful.", "category": "IT"}, {"instruction": "What is an EV?", "input": "", "output": "EV stands for Electric Vehicle.  An electric vehicle is powered by a battery whereas the traditional vehicle or car is powered by gas.  The EV uses a type of electric motor as opposed to an internal combustion engine.  The EV battery can be charged by plugging into an electrical outlet.  EVs do not pollute the atmosphere.  They are eco-friendly.  Tesla Motors pioneered the EV industry.", "category": "IT"}, {"instruction": "Choose the word which is different from the rest: hangar, platform, dock, park, bus stand", "input": "", "output": "All except park are places to await for transportation", "category": "IT"}, {"instruction": "Classify each of the following as either a bird, animal, reptile or insect: tiger, heron, eagle, alligator, snake, spider, ant, dog, cat, rhinoceros, kingfisher, chameleon, hornet, butterfly", "input": "", "output": "mammal- tiger, rhinoceros, dog, cat\nbird- heron, kingfisher, eagle\nreptile- snake, alligator, chameleon\ninset- spider, ant, hornet, butterfly", "category": "IT"}, {"instruction": "What are some different things you should bring with you on a day hiking trip?", "input": "", "output": "You should bring water, a snack, sunscreen, hiking boots, a first aid kit and a cellphone", "category": "IT"}, {"instruction": "How long does it take for a mustard seed to germinate?", "input": "Mustard seeds are the small round seeds of various mustard plants. The seeds are usually about 1 to 2 millimetres (0.039 to 0.079 in) in diameter and may be colored from yellowish white to black. They are an important spice in many regional foods and may come from one of three different plants: black mustard (Brassica nigra), brown mustard (B. juncea), or white mustard (Sinapis alba).\n\nGrinding and mixing the seeds with water, vinegar or other liquids creates the yellow condiment known as prepared mustard.\n\nMustard seeds generally take eight to ten days to germinate if placed under the proper conditions, which include a cold atmosphere and relatively moist soil.", "output": "Mustard seeds generally take eight to ten days to germinate if placed under the proper conditions, which include a cold atmosphere and relatively moist soil.", "category": "IT"}, {"instruction": "Which is a species of fish? Sea dragon or Red bearded", "input": "", "output": "Sea dragon", "category": "IT"}, {"instruction": "Categorize where each of these household items belong: bed, couch, desk", "input": "", "output": "A bed belongs in a bedroom, a couch belongs in a living area, a desk belongs in an office", "category": "IT"}, {"instruction": "Separate the following suburbs into those that border, and do not border, the Brisbane River: Indooroopilly, Bulimba, St Lucia, Newstead, Wilston, West End, Toowong, Bowen Hills and, Wooloongabba.", "input": "", "output": "St Lucia, West End, Toowong, Bulimba and Newstead border the Brisbane River. Wilston, Wooloongabba, Indooroopilly and Bowen Hills are inland and do not border the Brisbane River.", "category": "IT"}, {"instruction": "What are AirPods?", "input": "", "output": "Air Pods are an in ear headphone product made and sold by Apple. Their unique market differentiators are a software simulated spatial audio system and noise canceling features.", "category": "IT"}, {"instruction": "What is the difference between pets and cattle?", "input": "", "output": "Although both are animals at the end of the day, however, the main difference comes partially in the form of perception and, historically, the relationship of humans with certain animals. Pets, e.g. dogs, cats, etc., are used more for companionship and not for food. On the contrary, cattle, e.g. cows, pigs, chickens, etc., are primarily raised for food, i.e. meat, milk, eggs, etc.", "category": "IT"}, {"instruction": "How do I put a bouquet of fresh flowers in a vase?", "input": "", "output": "In order to put fresh flowers in a vase, follow these steps:\n\n1. Find a vase that it is the right size for the flowers. You can use water glasses here in a pinch. \n2. Fill the vase to about two-thirds full with water. You can add a dash of bleach in the water as well, but it is not necessary. \n3. Now, trim your flowers to the size of the vase. Cut the end of each flower in a diagonal cut. \n4. Remove the leaves from the flowers. This will help to grow the flower without putting resources towards the leaves. Be sure to remove any leaves under the water line, since they can cause infections. \n5. Arrange the flowers in the vase. You can adjust the positions until you are happy with the arrangement.\n6. Place your vase in a shady spot and you're done!", "category": "IT"}, {"instruction": "What should I do on a free afternoon in San Francisco?", "input": "", "output": "You can visit and take photos at San Francisco's landmarks such as Pier 39 or Golden Gate Bridge. If you enjoy walking outdoors, there are several large parks in the city. You can visit Golden Gate Park and the various attractions and museums located in the park. The Presidio is also a popular park where you can get some of the best views of Golden Gate Bridge.", "category": "IT"}, {"instruction": "Identify which instrument is string or woodwind: Janzi, Gemshorn", "input": "", "output": "Gemshorn is woodwind, Janzi is string.", "category": "IT"}, {"instruction": "Identify which animal species is alive or extinct: Pliosaur, Marine Iguana", "input": "", "output": "Pliosaur is extinct, Marine Iguana is alive.", "category": "IT"}, {"instruction": "What is the origin of the name of the herb Rosemary?", "input": "alvia rosmarinus (/\u02c8s\u00e6lvi\u0259 \u02ccr\u0252sm\u0259\u02c8ra\u026an\u0259s/[3][4]), commonly known as rosemary, is a shrub with fragrant, evergreen, needle-like leaves and white, pink, purple, or blue flowers, native to the Mediterranean region. Until 2017, it was known by the scientific name Rosmarinus officinalis (/\u02ccr\u0252sm\u0259\u02c8ra\u026an\u0259s \u0259\u02ccf\u026as\u026a\u02c8ne\u026al\u026as/[4]), now a synonym.[5]\n\nIt is a member of the sage family Lamiaceae, which includes many other medicinal and culinary herbs. The name \"\"rosemary\"\" derives from Latin ros marinus (lit.\u2009'dew of the sea').[6][7] Rosemary has a fibrous root system", "output": "The name \"rosemary\" derives from Latin ros marinus.", "category": "IT"}, {"instruction": "Classify each of the following as either a title by Isaac Asimov or Jules Verne: Pebble in the Sky, The Stars, Like Dust, Foundation, The Robots of Dawn, The Naked Sun, Around the World in Eighty Days, From the Earth to the Moon, Martin Paz, Journey to the Centre of the Earth, A Drama in the Air", "input": "", "output": "Isaac Asimov: Pebble in the Sky, The Stars, Like Dust, Foundation, The Robots of Dawn, The Naked Sun\nJules Verne: Around the World in Eighty Days, From the Earth to the Moon, Martin Paz, Journey to the Centre of the Earth, A Drama in the Air", "category": "IT"}, {"instruction": "Wat id DNA annotation?", "input": "", "output": "DNA annotation or genome annotation is the process of identifying the locations of genes and all of the coding regions in a genome and determining what those genes do. An annotation (irrespective of the context) is a note added by way of explanation or commentary. Once a genome is sequenced, it needs to be annotated to make sense of it. Genes in a eukaryotic genome can be annotated using various annotation tools such as FINDER. A modern annotation pipeline can support a user-friendly web interface and software containerization such as MOSGA. Modern annotation pipelines for prokaryotic genomes are Bakta, Prokka and PGAP.\n\nFor DNA annotation, a previously unknown sequence representation of genetic material is enriched with information relating genomic position to intron-exon boundaries, regulatory sequences, repeats, gene names and protein products. This annotation is stored in genomic databases such as Mouse Genome Informatics, FlyBase, and WormBase. Educational materials on some aspects of biological annotation from the 2006 Gene Ontology annotation camp and similar events are available at the Gene Ontology website.\n\nThe National Center for Biomedical Ontology develops tools for automated annotation of database records based on the textual descriptions of those records.\n\nAs a general method, dcGO has an automated procedure for statistically inferring associations between ontology terms and protein domains or combinations of domains from the existing gene/protein-level annotations.", "category": "IT"}, {"instruction": "Who were Jaehaerys I Targaryen's children?", "input": "", "output": "Prince Aegon, Princess Daenerys, Prince Aemon, Prince Baelon, Princess Alyssa, Septa Maegelle, Archmaester Vaegon, Princess Daella, Princess Saera, Princess Viserra, Prince Gaemon, Prince Valerion, Princess Gael", "category": "IT"}, {"instruction": "In SQL, how can I filter table rows based on a column condition?", "input": "", "output": "SELECT <columns> FROM <table> WHERE <column> == <condition>", "category": "IT"}, {"instruction": "Who were the ten best baseball players in the history of the Boston Red Sox?", "input": "", "output": "1. David Ortiz\n2. Ted Williams\n3. Babe Ruth\n4. Cy Young\n5. Pedro Martinez\n6. Johnny Pesky\n7. Carl Yazstrzemski \n8. Carlton Fisk\n9. Joe Cronin\n10. Mookie Betts", "category": "IT"}, {"instruction": "What makes the world go around?", "input": "", "output": "Some say money makes the world go around, others say it is love. It has even been suggested that music is the fuel that makes the world go around. These explanations are however based on human spirituality and needs. As far as other living creatures are concerned, the drive to survive is what makes the world go around. In reality the world physically started going around itself, rotating around its axis, because of the way it was formed.", "category": "IT"}, {"instruction": "Who coined the phrase \"Bike-shedding\" and when?", "input": "The law of triviality is C. Northcote Parkinson's 1957 argument that people within an organization commonly or typically give disproportionate weight to trivial issues.[1] Parkinson provides the example of a fictional committee whose job was to approve the plans for a nuclear power plant spending the majority of its time on discussions about relatively minor but easy-to-grasp issues, such as what materials to use for the staff bicycle shed, while neglecting the proposed design of the plant itself, which is far more important and a far more difficult and complex task.\n\nThe law has been applied to software development and other activities.[2] The terms bicycle-shed effect, bike-shed effect, and bike-shedding were coined based on Parkinson's example; it was popularised in the Berkeley Software Distribution community by the Danish software developer Poul-Henning Kamp in 1999[3] and, due to that, has since become popular within the field of software development generally.\n\nArgument\n\nA bicycle shed\nThe concept was first presented as a corollary of his broader \"Parkinson's law\" spoof of management. He dramatizes this \"law of triviality\" with the example of a committee's deliberations on an atomic reactor, contrasting it to deliberations on a bicycle shed. As he put it: \"The time spent on any item of the agenda will be in inverse proportion to the sum [of money] involved.\" A reactor is so vastly expensive and complicated that an average person cannot understand it (see ambiguity aversion), so one assumes that those who work on it understand it. However, everyone can visualize a cheap, simple bicycle shed, so planning one can result in endless discussions because everyone involved wants to implement their own proposal and demonstrate personal contribution.[4]\n\nAfter a suggestion of building something new for the community, like a bike shed, problems arise when everyone involved argues about the details. This is a metaphor indicating that it is not necessary to argue about every little feature based simply on having the knowledge to do so. Some people have commented that the amount of noise generated by a change is inversely proportional to the complexity of the change.[3]\n\nThe law of triviality is supported by behavioural research. People tend to spend more time on small decisions than they should, and less time on big decisions than they should. A simple explanation is that during the process of making a decision, one has to assess whether enough information has been collected to make the decision. If people make mistakes about whether they have enough information, they will tend to stop too early for big decisions. The reason is that big decisions require collecting information for a long time. It leaves more time to make a mistake (and stop) before getting enough information. Conversely, for small decisions, where people should stop early, they may continue to ponder for too long by mistake.[5]\n\nRelated principles and formulations \nThere are several other principles, well-known in specific problem domains, which express a similar sentiment.\n\nWadler's law, named for computer scientist Philip Wadler,[6] is a principle which asserts that the bulk of discussion on programming-language design centers on syntax (which, for purposes of the argument, is considered a solved problem), as opposed to semantics.\n\nSayre's law is a more general principle, which holds (among other formulations) that \"In any dispute, the intensity of feeling is inversely proportional to the value of the issues at stake\"; many formulations of the principle focus on academia.", "output": "The phrase \"bike-shedding\" was introduced in 1957 by C. Northcote Parkinson.", "category": "IT"}, {"instruction": "Who is the best Formula 1 driver", "input": "", "output": "Who is the best Formula 1 driver has been a hotly debated topic for decades with no decisive winner.  Over the years there have been many dominant drivers such as Michael Schumacher, Ayrton Senna and Lewis Hamilton, however who is ultimately the best is difficult to determine.  Formula 1 cars are such a critical part of who wins or loses a race that distorts who is truly the strongest driver. The question of who is the best Formula 1 driver will undoubtedly continue on with each new generation of drivers that enter the sport, however clearly Ayrton Senna is the best.", "category": "IT"}, {"instruction": "What is Share capital in finance?", "input": "", "output": "Share capital is the money invested directly in a company by its members (shareholders).", "category": "IT"}, {"instruction": "Give me some Mother's Day gift ideas.", "input": "", "output": "The choice of Mother's Day gift depends on who the gift-giver is. An adult child or spouse might opt flowers or jewelry. A young child may opt for a hand-made card or a coupon to do a household chore (e.g. clean the dishes). A collective gift from multiple family members could be breakfast in bed or a gift certificate for a spa treatment.", "category": "IT"}, {"instruction": "Give me a list of ways that a runner can advance a base in baseball without there being a hit.", "input": "", "output": "- The batter walks, forcing the runner to advance to the next base\n- The runner steals a base\n- The pitcher balks\n- There is a wild pitch that goes past the catcher", "category": "IT"}, {"instruction": "What are the types of RVs?", "input": "", "output": "RV is an abbreviation for Recreational Vehicle. An RV is a motor vehicle or trailer that includes sleeping quarters, kitchen facilities and usually a bathroom. RVs are a popular way to travel since they provide many of the comforts of home while vacationing. There are many types of RVs, including class A, class B, class C,travel trailers, and truck campers..\n\nClass A RVs are large vehicles built on heavy-duty truck or bus chassis and look like large Busses. Class B RVs smaller are built within van chassis (often called camper vans). Class C RVs are built on van or pickup chassis but the back is cutaway and a larger structure is added. Travel trailers are campers that are towed behind a truck or car and can range in size from very small to very large. Truck campers are carried in the bed of a pickup truck and provide a small, enclosed sleeping space.\n\nRVs are very popular in the United States, with an estimated 11M households owning an RV.", "category": "IT"}, {"instruction": "List the weapons of Goddess Durga in a comma separated manner.", "input": "Durga is a warrior goddess, and she is depicted to express her martial skills. Her iconography typically resonates with these attributes, where she rides a lion or a tiger,[2] has between eight and eighteen hands, each holding a weapon to destroy and create.[60][61] She is often shown in the midst of her war with Mahishasura, the buffalo demon, at the time she victoriously kills the demonic force. Her icon shows her in action, yet her face is calm and serene.[62][63] In Hindu arts, this tranquil attribute of Durga's face is traditionally derived from the belief that she is protective and violent not because of her hatred, egotism or getting pleasure in violence, but because she acts out of necessity, for the love of the good, for liberation of those who depend on her, and a mark of the beginning of soul's journey to creative freedom.[63][64][65]\n\nDurga traditionally holds the weapons of various male gods of Hindu mythology, which they give her to fight the evil forces because they feel that she is shakti (energy, power).[66] These include the chakra, conch, bow, arrow, sword, javelin, trishula, shield, and a noose.[67] These weapons are considered symbolic by Shakta Hindus, representing self-discipline, selfless service to others, self-examination, prayer, devotion, remembering her mantras, cheerfulness and meditation. Durga herself is viewed as the \"Self\" within and the divine mother of all creation.[68] She has been revered by warriors, blessing their new weapons.[69] Durga iconography has been flexible in the Hindu traditions, where for example some intellectuals place a pen or other writing implements in her hand since they consider their stylus as their weapon.[69]", "output": "Chakra, conch, bow, arrow, sword, javelin, trishula, shield, a noose", "category": "IT"}, {"instruction": "What shapes are made up of straight lines?", "input": "", "output": "Square, pentagon, rectangle, rhombus and triangle are examples of shapes made up only of straight lines.", "category": "IT"}, {"instruction": "Are The Smiths a good band?", "input": "", "output": "The Smiths were one of the most critically acclaimed bands to come from England in the 1980s. Typically classified as an \"indie rock\" band, the band released 4 albums from 1984 until their breakup in 1987. The band members, notably Morrissey and Johnny Marr, would go on to accomplish successful solo careers.", "category": "IT"}, {"instruction": "What is the largest city on the Mississippi River?", "input": "Memphis is the fifth-most populous city in the Southeast, the nation's 28th-largest overall, as well as the largest city bordering the Mississippi River and third largest Metropolitan statistical area behind Saint Louis, MO and the Twin Cities on the Mississippi River.[7] The Memphis metropolitan area includes West Tennessee and the greater Mid-South region, which includes portions of neighboring Arkansas, Mississippi and the Missouri Bootheel. One of the more historic and culturally significant cities of the Southern United States, Memphis has a wide variety of landscapes and distinct neighborhoods.", "output": "Saint Louis, Missouri is the largest city on the Mississippi River. Twin Cities is the second largest city on the Mississippi River and Memphis is the third largest city on the Mississippi River.", "category": "IT"}, {"instruction": "What is the city of Denver like?", "input": "", "output": "Denver is a big city, nestled directly to the east of the Rocky Mountains. Many people that live in Denver are educated and have a friendly attitude. It is a family friendly and dog friendly city, with many parks, recreational activities and a lot of green space/trails. With the abundance of green space, and 300 days of sunshine, Denver provides many opportunities to have an active lifestyle. Some of the most popular activities include hiking, biking, rock climbing and skiing.", "category": "IT"}, {"instruction": "Provide a list of all numbers mentioned in the provided text and what they represent", "input": "The ancestors of llamas are thought to have originated from the Great Plains of North America about 40 million years ago, and subsequently migrated to South America about three million years ago during the Great American Interchange. By the end of the last ice age (10,000\u201312,000 years ago), camelids were extinct in North America.[3] As of 2007, there were over seven million llamas and alpacas in South America and over 158,000 llamas and 100,000 alpacas, descended from progenitors imported late in the 20th century, in the United States and Canada.[5]\n\nIn Aymara mythology, llamas are important beings. The Heavenly Llama is said to drink water from the ocean and urinates as it rains.[6] According to Aymara eschatology, llamas will return to the water springs and lagoons where they come from at the end of time.[6]", "output": "40 million: The number of years ago when the ancestors of llamas are thought to have originated from the Great Plains of North America\nthree million: The number of years ago the ancestors of llamas are thought to have migrated to South America during the Great American Interchange\n10,000\u201312,000: The number of years ago camelids were extinct in North America\n2007: As of this year, there were over seven million llamas and alpacas in South America and over 158,000 llamas and 100,000 alpacas, descended from progenitors imported late in the 20th century, in the United States and Canada\nseven million: The number of llamas and alpacas in South America as of 2007\n158,000: The number of llamas in the United States and Canada, that descended from progenitors imported late in the 20th century, as of 2007\n100,000: The number of alpacas in the United States and Canada, that descended from progenitors imported late in the 20th century, as of 2007\n20: The century where progenitors were imported to United States and Canada", "category": "IT"}, {"instruction": "What is the last festival celebrated in Tihar and how long does the festival last?", "input": "Lakshmi Puja is celebrated as a part of Tihar, a second national festival of Nepal after Dashain. In Nepal, it is celebrated for five days, which include Kag (crow) Tihar; Kukur (dog) Tihar; Gai (cow) Tihar in the morning and Lakshmi Puja at night; Maha puja (self puja); Goru (Ox and Bull) Tihar and Gobardhan puja; and finally, Bhai Tika (Bhai dhooj)\u2014respectively the first, second, third, fourth and fifth days.", "output": "The festival lasts for 5 days and Bhai Tika is the last festival.", "category": "IT"}, {"instruction": "What event John Johnstone won as a rider?", "input": "John Johnstone (1881-1935) was a British businessman and rider. He was the tai-pan of the Jardine, Matheson & Co., member of the Shanghai Municipal Council and Legislative Council of Hong Kong.\n\nHe was the head of the Jardine, Matheson & Co. as well as director of numerous companies. He was member of the Shanghai Municipal Council and the Legislative Council of Hong Kong.[1][2]\n\nHe was a keen rider and bore the reputation of being the best rider East of the Suez.[1] He succeeded in winning the Jockey Cup on a pony named Ben-y-Gloe belonging to C. H. Ross, the former tai-pan of Jardines when he first went to Hong Kong in 1903. In 1904, he won the Professional Cup on a pony named Runaway Girl, purchased from W. A. Cruickshank. From 1903 to 1919, he rode in 1,178 races, winning 334, securing 192 seconds and 186 thirds, being unplaced 466 times, excluding the record of minor events such as Off Days or Gymkhanas. He won 14 Grand Nationals in China, and at one meeting in Hong Kong rode in 30 races winning 16 of them. He was also the President of the St. Andrew's Society.[2]\n\nHe left Hong Kong on 31 March 1921 for home[1] by the Empress of Asia.[2]\n\nIn 1928 he won The Foxhunters Cup at Cheltenham riding Rathpatrick and officiated as steward at several of the northern meetings. He died at the Cheltenham meeting in 1935 where he was officiating.", "output": "John Johnstone won the Jockey Cup on a horse named Ben-y-Gloe.", "category": "IT"}, {"instruction": "What are the careers of your dream?", "input": "", "output": "Professional Baseball Player, astronaut, president of the United States, actor, singer, CEO of major tech company, fighter pilot, nascar driver, artist", "category": "IT"}, {"instruction": "Let's imagine I create a fake currency called Yarns with two types of coins: a super-yarn (worth 10 yarns) and a mini-yarn (worth 0.5 yarn). How much money do I have in total if I have 2 super-yarns and three mini-yarns?", "input": "", "output": "Given that a super-yarn is worth 10 yarns and a mini-yarn is worth 0.5 yarn, if you have 2 super-yarns and 3 mini-yarns you have 21.5 yarns in total.", "category": "IT"}, {"instruction": "What is a Mormon?", "input": "", "output": "A Mormon typically refers to a member of the Church of Jesus Christ of Latter-day Saints. The word Mormon comes from a prophet in the Book of Mormon who lived in the Americas around 300 A.D. The Book of Mormon is part of the canon of scripture that members of the Church of Jesus Christ of Latter-day Saints use, in conjunction with the Bible and the Doctrine and Covenants. It is often viewed as a distinguishing difference between the Church of Jesus Christ of Latter-day Saints and other Christian denominations. Historically, this is why members of the Church of Jesus Christ of Latter-day Saints have been called Mormons.", "category": "IT"}, {"instruction": "What is the difference between a red delicious and a Granny Smith apple?", "input": "", "output": "A red delicious apple is red and sweet whereas a Granny Smith apple is green and tart.", "category": "IT"}, {"instruction": "List the Pokemon Go regions.", "input": "", "output": "There are ten regions in Pok\u00e9mon GO Kanto, Johto, Hoenn, Sinnoh, Unova, Kalos, Alola, Galar, Hisui and Paldea. Certain Pokemon originate from each region and can only be captured within that region.", "category": "IT"}, {"instruction": "Who do you think is the most powerful Mandalorian in Star Wars history?", "input": "", "output": "It would have be Te Ani'la Mand'alor, or also called Mandalore the Ultimate.", "category": "IT"}, {"instruction": "Based on the following passage summarise how sunsets are viewed from the northern hemisphere across seasons.", "input": "Sunset, also known as sundown, is the daily disappearance of the Sun below the horizon due to Earth's rotation. As viewed from everywhere on Earth (except the North and South poles), the equinox Sun sets due west at the moment of both the spring and autumn equinoxes. As viewed from the Northern Hemisphere, the Sun sets to the northwest (or not at all) in the spring and summer, and to the southwest in the autumn and winter; these seasons are reversed for the Southern Hemisphere.\nThe time of sunset is defined in astronomy as the moment when the upper limb of the Sun disappears below the horizon. Near the horizon, atmospheric refraction causes sunlight rays to be distorted to such an extent that geometrically the solar disk is already about one diameter below the horizon when a sunset is observed.\nSunset is distinct from twilight, which is divided into three stages. The first one is civil twilight, which begins once the Sun has disappeared below the horizon, and continues until it descends to 6 degrees below the horizon. The second phase is nautical twilight, between 6 and 12 degrees below the horizon. The third phase is astronomical twilight, which is the period when the Sun is between 12 and 18 degrees below the horizon. Dusk is at the very end of astronomical twilight, and is the darkest moment of twilight just before night. Finally, night occurs when the Sun reaches 18 degrees below the horizon and no longer illuminates the sky.\nLocations further north than the Arctic Circle and further south than the Antarctic Circle experience no full sunset or sunrise on at least one day of the year, when the polar day or the polar night persists continuously for 24 hours.", "output": "When viewed from the Northern Hemisphere, the Sun sets to the northwest (or not at all) in the spring and summer, and to the southwest in the autumn and winter; these seasons are reversed for the Southern Hemisphere.", "category": "IT"}, {"instruction": "What cities should someone visit during a trip to Morocco?", "input": "", "output": "There are many wonderful cities to visit during a trip to Morocco.  The decision of which cities to visit depends on the traveller's goals and interests because Morocco has something for everyone.  The largest airports are in the cities of Casablanca and Marrakech, so if traveling by air, those are good cities to fly into and out of.  Other cities that are popular among visitors include Fez and Tangier.  Cities along the Atlantic Coast of Morocco are popular for their beaches including Agadir and Essaouira.  The city of Chefchaouen is also very popular among visitors for its blue buildings.", "category": "IT"}, {"instruction": "Which classical composer was deaf?", "input": "", "output": "Ludwig van Beethoven", "category": "IT"}, {"instruction": "Who discovered the double-helix DNA structure?", "input": "", "output": "James Watson and Francis Crick identified the double-helix structure of deoxyribonucleic acid in 1953.", "category": "IT"}, {"instruction": "Please provide a brief summary describing Canada", "input": "Canada is a country in North America. Its ten provinces and three territories extend from the Atlantic Ocean to the Pacific Ocean and northward into the Arctic Ocean, making it the world's second-largest country by total area, with the world's longest coastline. It is characterized by a wide range of both meteorologic and geological regions. The country is sparsely inhabited, with the vast majority residing south of the 55th parallel in urban areas. Canada's capital is Ottawa and its three largest metropolitan areas are Toronto, Montreal, and Vancouver.", "output": "Canada is a country in North America. Its ten provinces and three territories extend from the Atlantic Ocean to the Pacific Ocean and northward into the Arctic Ocean, making it the world's second-largest country by total area, with the world's longest coastline. It is characterized by a wide range of both meteorologic and geological regions. The country is sparsely inhabited, with the vast majority residing south of the 55th parallel in urban areas. Canada's capital is Ottawa and its three largest metropolitan areas are Toronto, Montreal, and Vancouver.\n\nIndigenous peoples have continuously inhabited what is now Canada for thousands of years. Beginning in the 16th century, British and French expeditions explored and later settled along the Atlantic coast. As a consequence of various armed conflicts, France ceded nearly all of its colonies in North America in 1763. In 1867, with the union of three British North American colonies through Confederation, Canada was formed as a federal dominion of four provinces. This began an accretion of provinces and territories and a process of increasing autonomy from the United Kingdom, highlighted by the Statute of Westminster, 1931, and culminating in the Canada Act 1982, which severed the vestiges of legal dependence on the Parliament of the United Kingdom.\n\nCanada is a parliamentary liberal democracy and a constitutional monarchy in the Westminster tradition. The country's head of government is the prime minister, who holds office by virtue of their ability to command the confidence of the elected House of Commons and is \"called upon\" by the governor general, representing the monarch of Canada, the head of state. The country is a Commonwealth realm and is officially bilingual (English and French) in the federal jurisdiction. It is very highly ranked in international measurements of government transparency, quality of life, economic competitiveness, innovation, and education. It is one of the world's most ethnically diverse and multicultural nations, the product of large-scale immigration. Canada's long and complex relationship with the United States has had a significant impact on its history, economy, and culture.\n\nA highly developed country, Canada has one of the highest nominal per capita income globally and its advanced economy ranks among the largest in the world, relying chiefly upon its abundant natural resources and well-developed international trade networks. Canada is part of several major international and intergovernmental institutions or groupings including the United Nations, NATO, G7, Group of Ten, G20, Organisation for Economic Co-operation and Development (OECD), World Trade Organization (WTO), Commonwealth of Nations, Arctic Council, Organisation internationale de la Francophonie, Asia-Pacific Economic Cooperation forum, and Organization of American States.", "category": "IT"}, {"instruction": "Why age 27 is given so much importance specially in Music industry?", "input": "", "output": "Several renowned music artists died at age 27 which is also sometimes referred as the \"27 Club\". Often times, the cause of the death is attributed to drug and alcohol abuse or some form of violence like homicide, self harm or accidents. Jimi Hendrix, Janis Joplin, Jim Morrison, Kurt Cobain and Amy Winehouse are some of the few notable personalities in music industry who died at this age.", "category": "IT"}, {"instruction": "What is Bollywood", "input": "", "output": "Bollywood is a movie industry based in Mumbai, India. It primarily makes movies in Hindi language. Since it was based in a city previously known as Bombay, a convenient moniker Bollywood resembling Hollywood is used to describe Hindi language film industry.", "category": "IT"}, {"instruction": "What are Nanotube?", "input": "", "output": "Nanotubes, often known as Carbon Nanotubes, are light, strong shapes made of Carbon atoms.  Nanotubes are shaped like tiny straws with walls as thin as one carbon atom.  They are considered as the strongest of any material known to man.  Nanotubes have many practical uses, one of which is to make the darkest black paint.", "category": "IT"}, {"instruction": "Write the first paragraph of a blog post describing the appeal of Boston as a tourist destination", "input": "", "output": "Boston is a vibrant city with a rich history, incredible architecture, and diverse culture. Its cobblestone streets, charming neighborhoods, and vibrant nightlife make it an ideal destination for visitors. From the Freedom Trail to the Boston Common, Boston offers visitors a unique experience unlike any other. From historic sites to vibrant nightlife, Boston is a great place to visit and explore. The suburbs are great too.", "category": "IT"}, {"instruction": "What is a secured loan?", "input": "", "output": "A secured loan is a form of debt in which the borrower pledges some asset (i.e., a car, a house) as collateral.", "category": "IT"}, {"instruction": "Should I have Kids?", "input": "", "output": "That is a personal question and one should think about this very carefully. Things to consider:\n\n1. How old are you?\n2. Can you afford to raise the child \n3. Do you have proper healthcare\n4. Do you have anyone to help you\n5. Do you like kids\n6. Why do you want kids", "category": "IT"}, {"instruction": "Give me 3 ideas for hobbies that I can recommend to somebody who is retiring. These should all be activities that require gentle movement and are not overly demanding on the body.", "input": "", "output": "Retirement is an exciting opportunity for people to develop and cultivate their passions. Here are a few ideas you could recommend that are both gentle on the body but require some movement:\n- Gardening: while this is a seasonal pursuit, deciding on which seeds to plant, nursing them through a growing season, and learning the ins and outs of the hobby can become a lifelong passion for those with a \"green thumb\"\n- Walking and picking up trash: carry a bag and \"grabber\" pinchers to collect trash in your community while staying active on a walk. Rubber-tipped pinchers means you will not need to bend or stretch too far to reach, and you will be surprised how much of a difference this makes to your community members!\n- Fishing: most fishing can be done from the banks of a river or lake, and is a great way to experience the calming effects of a body of water while still being physically active. Whether fly fishing or reel fishing, many people who have entered retirement find this an engaging way to engage with nature either solo or as part of a community of fisher-people.", "category": "IT"}, {"instruction": "Name some reasons it's great to live in Marin County, California.", "input": "", "output": "Marin County is a great place to live for many reasons, including the beautiful scenery, the mild, pleasant weather, and the abundance of outdoor activities, while at the same time being close to San Francisco. Mountain biking on the fire trails in the hills of Marin, and climbing various hilltops is very enjoyable. There are fantastic views of the city of San Francisco, and of San Francisco Bay from many points in the county. Walking or biking the Tiburon Bike Path is also great fun. From Marin it's easy to take great day trips to nearby Napa and Sonoma counties, to enjoy their beautiful natural settings and to visit the wineries and nice restaurants.", "category": "IT"}, {"instruction": "Who was the first American to win a Nobel Peace?", "input": "", "output": "Theodore Roosevelt", "category": "IT"}, {"instruction": "What is the FA Cup?", "input": "", "output": "The Football Association Challenge Cup, more commonly known as the FA Cup, is an annual knockout football competition in men's domestic English football. First played during the 1871\u201372 season, it is the oldest national football competition in the world. It is organised by and named after The Football Association (The FA). Since 2015, it has been known as The Emirates FA Cup after its headline sponsor. A concurrent Women's FA Cup has been held since 1970.\n\nThe competition is open to all eligible clubs down to Level 9 of the English football league system with Level 10 clubs acting as stand-ins in the event of non-entries from above. Included in the competition are 20 professional clubs in the Premier League (level 1), 72 professional clubs in the English Football League (levels 2 to 4), and all clubs in steps 1\u20135 of the National League System (levels 5 to 9) as well as a tiny number of step 6 clubs acting as stand-ins for non-entries above. A record 763 clubs competed in 2011\u201312. The tournament consists of 12 randomly drawn rounds followed by the semi-finals and the final. Entrants are not seeded, although a system of byes based on league level ensures higher ranked teams enter in later rounds \u2013 the minimum number of games needed to win, depending on which round a team enters the competition, ranges from six to fourteen.\n\nThe first six rounds are the Qualifying Competition, from which 32 teams progress to the first round of the Competition Proper, meeting the first of the 48 professional teams from Leagues One and Two. The last entrants are the Premier League and Championship clubs, into the draw for the Third Round Proper. In the modern era, only one non-League team has ever reached the quarter-finals, and teams below Level 2 have never reached the final. As a result, significant focus is given to the smaller teams who progress furthest, especially if they achieve an unlikely \"giant-killing\" victory.\n\nWinners receive the FA Cup trophy, of which there have been two designs and five actual cups; the latest is a 2014 replica of the second design, introduced in 1911. Winners also qualify for the UEFA Europa League and a place in the upcoming FA Community Shield. Arsenal are the most successful club with fourteen titles and Ars\u00e8ne Wenger is the most successful manager in the history of the competition, having won seven finals as Arsenal's manager.\n\nLiverpool are the current holders, having beaten Chelsea 6\u20135 on penalties following a 0\u20130 draw in the 2022 final.", "category": "IT"}, {"instruction": "Are Schindler elevators safe", "input": "Schindler Holding Ltd. is a Swiss multinational company which manufactures escalators, moving walkways, and elevators worldwide, founded in Switzerland in 1874. Schindler produces, installs, maintains and modernizes lifts and escalators in many types of buildings including residential, commercial and high-rise buildings.\n\nThe company is present in over 140 countries and employs more than 66,000 people worldwide.[3] The production facilities are located in Brazil, China, Slovakia, Spain, Switzerland, India and the United States.[4] All operations and subsidiaries of Schindler Group are organised into Schindler Holding Ltd. (German: Schindler Holding AG, French: Schindler Holding S.A.), which is publicly traded on SIX Swiss Exchange.", "output": "Schindler Holding Ltd. is a Swiss multinational company which manufactures escalators, moving walkways, and elevators worldwide, founded in Switzerland in 1874. Schindler produces, installs, maintains and modernizes lifts and escalators in many types of buildings including residential, commercial and high-rise buildings.\n\nThe company is present in over 140 countries and employs more than 66,000 people worldwide. The production facilities are located in Brazil, China, Slovakia, Spain, Switzerland, India and the United States. All operations and subsidiaries of Schindler Group are organised into Schindler Holding Ltd., which is publicly traded on SIX Swiss Exchange.", "category": "IT"}, {"instruction": "What are the 4 oceans on earth", "input": "", "output": "Atlantic Ocean\nArctic Ocean\nPacific Ocean\nIndian Ocean", "category": "IT"}, {"instruction": "Did Harry Potter put his own name in the goblet of fire?", "input": "", "output": "Harry did not put his own name in the goblet of fire. Barty Crouch Junior, using polyjuice potion to disguise himself as Alistair Moody, put Harry's name in the goblet of fire as part of his plan to deliver Harry into Lord Voldemort's hands.", "category": "IT"}, {"instruction": "Why does it help to focus on the breath when practicing mindfulness?", "input": "", "output": "The art of meditation, which is another name for the practice of mindfulness, is all about being in the present.  In other words, cultivating an awareness of what is happening in the present moment.  This is done by quietening the mind of all the random thoughts that are being continuously generated, and having the senses alerted to the signals that are being passed in the moment.  The signals are the sensations or emotions or sounds that one is feeling and hearing in the present moment.  To accomplish this, the breath serves as an anchor to the present moment.  Being aware of one's breath keeps us in the present moment.  When the mind eventually wanders, the breath is a signal to tune back into the present moment.  The breath is always with us and can be found in an instant.", "category": "IT"}, {"instruction": "What is a Gross domestic product (GDP)?", "input": "", "output": "Gross domestic product (GDP) is a monetary measure of the market value of all the final goods and services produced and sold in a specific time period by a country or countries, generally \"without double counting the intermediate goods and services used up to produce them\". GDP is most often used by the government of a single country to measure its economic health. Due to its complex and subjective nature, this measure is often revised before being considered a reliable indicator. GDP (nominal) per capita does not, however, reflect differences in the cost of living and the inflation rates of the countries; therefore, using a basis of GDP per capita at purchasing power parity (PPP) may be more useful when comparing living standards between nations, while nominal GDP is more useful comparing national economies on the international market. Total GDP can also be broken down into the contribution of each industry or sector of the economy. The ratio of GDP to the total population of the region is the per capita GDP (also called the Mean Standard of Living).", "category": "IT"}, {"instruction": "Whats the difference between a bass guitar and a regular guitar?", "input": "", "output": "There are a few significant differences between a bass guitar and a regular guitar.  A bass guitar typically has 4 strings (though it can have more), is larger in body & neck, and has higher string gauges (string thickness).  A bass guitar is used for keeping the band on track by keeping the rhythm and hitting the root notes of the chords.  \n\nA regular guitar typically has 6 strings, and can be used for a wider variety of purposes.  These include keeping the rhythm with chords, playing foundational riffs, or improvisational solos for instrumental layering.  The regular guitarists are almost always the more well-known of the two.", "category": "IT"}, {"instruction": "What is the winter weather like in Salt Lake City, Utah?", "input": "", "output": "Some years, Utah has massive amounts of snow, up to 700 inches at some ski resorts. Other years, Utah has little precipitation. Often temperatures are just below or just above freezing during winter months.", "category": "IT"}, {"instruction": "Who is the best men's test cricket player to have come from New Zealand?", "input": "", "output": "Despite a rich cricket tradition in New Zealand, the country only became a test playing nation during the season of 1929/30, when the MCC toured the country playing 4 tests. Australia, the nearest test playing country to New Zealand, refused to grant Test status to any games played between the two nations until well after World War 2. This lack of test opportunities led to a now common path of talented New Zealanders moving off shore for the chance to play test cricket- most notably in the pre WWII period of Clarrie Grimmet, who took over 200 test wickets playing for Australia. Since then, Andrew Caddick (234 test wickets at an average of 29.91) and Ben Stokes (5000+ test runs and 196 test wickets) have played leading roles for England in tests.\n\nIf however we define the question as \"the best test cricket player to have played for New Zealand\", then there are perhaps only 3 or 4 candidates that feature. Of the current generation, there is no doubt that Kane Williamson will one day be regarded as the greatest player to have come from New Zealand- with over 8000 test runs at an average north of 50. With many years in front of him, Williamson will no doubt hold the crown of best test cricketer in years to come. \n\nMartin Crowe must likewise be regarded in the pantheon of test greats to have played for New Zealand- despite a slow start to his career, and injuries curtailing his time in the team, he amassed over 5000 runs at an average of over 45.\n\nHowever, most will agree that the most influential cricketer ever to play test cricket for New Zealand was Sir Richard Hadlee- the first cricketer to be knighted whilst still playing cricket for his country. Hadlee's bowling average of 22.29 is one of best in test cricket history, and at the time of his retirement he held the record for test wickets, at 431. Gaining 5 wickets in an innings 36 times was also a record, and led New Zealand to some of it's most famous test victories, notably victory in a series in Australia for the first time in 1985/86, with his best test figures of 15 for 123 coming in the first test at the Gabba. Added to his bowling, his destructive lower order batting made his one of the preeminent all rounders of the game., and truly NZ's best test cricketer.", "category": "IT"}, {"instruction": "What are the differences between the New York Giants and New York Jets?", "input": "", "output": "The New York Giants and New York Jets are both professional football teams in the NFL who play in the New York Metropolitan area. Both teams play in MetLife stadium which used to be called Giants stadium in East Rutherford, NJ. Their fan bases live in New Jersey and New York primarily. The Jets primary color is Green, while the Giants are blue.", "category": "IT"}, {"instruction": "Was Furze Hill an established community in the 19th century?", "input": "Furze Hill (or Furzehill) is a hamlet situated in the New Forest National Park of Hampshire, England. It is in the civil parish of Ellingham, Harbridge and Ibsley. Its nearest town is Fordingbridge, which lies approximately 3.1 miles (5.2 km) north-west from the hamlet.\n\nFurze Hill is a hamlet in the civil parish of Hyde. It is situated on low ground on either side of Huckles Brook on the South Gorley to Ogdens road. The houses are surrounded by fields and paddocks. Additional houses can be found at the southern edge of Gorley Common lining a narrow track to North Gorley.\n\nFurze Hill is the most recent settlement in the parish of Hyde, becoming an established community only in the 20th century.", "output": "No, it was not an established community until the 20th century.", "category": "IT"}, {"instruction": "Should you buy new golf clubs when you are a beginner?", "input": "", "output": "It is recommended that you get custom fitted for your golf clubs.  However, there are many used golf clubs available to purchase and it can be a great option if you are just exploring the sport.  You can also consider renting golf clubs from your local golf course if you are not ready for the expense of buying new or used golf clubs.", "category": "IT"}, {"instruction": "Why should I use fabric softener?", "input": "Machine washing puts great mechanical stress on textiles, particularly natural fibers such as cotton and wool. The fibers at the fabric surface are squashed and frayed, and this condition hardens while drying the laundry in air, giving the laundry a harsh feel. Adding a liquid fabric softener to the final rinse (rinse-cycle softener) results in laundry that feels softer.[2][1]", "output": "Machine washing puts great mechanical stress on textiles, so adding a liquid fabric softener to the final rinse results in laundry that feels softer.", "category": "IT"}, {"instruction": "The former Chairman of Tata Sons died in road accident  en route  from where?", "input": "", "output": "Ahmedabad to Mumbai", "category": "IT"}, {"instruction": "Please classify each of the following animals as mammal, amphibian, or fish: elk, frog, dog, cat, newt, and human.", "input": "", "output": "Newt and frog are amphibians. The rest of the animals are mammals. You did not provide any fish in your question.", "category": "IT"}, {"instruction": "Classify the following numbers as 'prime' or 'composite' - 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16.", "input": "", "output": "'prime', 'prime', 'composite', 'prime', 'composite', 'prime', 'composite', 'composite', 'composite', 'prime', 'composite', 'prime', 'composite', 'composite', 'composite'.", "category": "IT"}, {"instruction": "Summarize the rulers of the territory of Albania in this time period.", "input": "The Illyrian Ardiaei tribe, centred in Montenegro, ruled over most of the territory of Albania. Their Ardiaean Kingdom reached its greatest extent under King Agron, the son of Pleuratus II. Agron extended his rule over other neighbouring tribes as well.[38] Following Agron's death in 230 BC, his wife, Teuta, inherited the Ardiaean kingdom. Teuta's forces extended their operations further southwards to the Ionian Sea.[39] In 229 BC, Rome declared war[40] on the kingdom for extensively plundering Roman ships. The war ended in Illyrian defeat in 227 BC. Teuta was eventually succeeded by Gentius in 181 BC.[41] Gentius clashed with the Romans in 168 BC, initiating the Third Illyrian War. The conflict resulted in Roman conquest of the region by 167 BC. The Romans split the region into three administrative divisions.[42]", "output": "King Agron ruled the territory of Albania, followed by his wife Teuta from 230 BC, and then Gentius from 181 BC. The Romans conquered the region in 167 BC.", "category": "IT"}, {"instruction": "What is cloud computing in simple terms?", "input": "", "output": "In simple terms cloud computing allows you to use preconfigured hardware devices and software services managed by somebody else on internet. Most cases you pay only for the resources you use and it is very easy to procure more as you need more services. \nCloud computing makes it easy to setup the technology infrastructure at a low cost and scale as you grow.", "category": "IT"}, {"instruction": "What is one year?", "input": "", "output": "One Earth Year is the time it takes for one revolution of the Earth around the sun.", "category": "IT"}, {"instruction": "What types of sport fish do most anglers target in New England?", "input": "", "output": "There are many types of game fish that anglers target in New England. Fresh water anglers generally fish for large mouth bass, small mouth bass and various types of trout.  Children often learn to fish by catching sunfish.  Fishing in the ocean in New England offers many additional options to target including Striped Bass, Black Sea Bass, Bluefish, as well as much larger game fish like Bluefin Tuna, Albacore, False Albacore, Bonito, and many species of shark. Each season produces different fish, be sure to check with your local fish and game authority to ensure you have the proper license and which species are able to be targeted.", "category": "IT"}, {"instruction": "Give me a bunch of ways I can keep my house cool in the summer", "input": "", "output": "- Install whole house AC that's integrated with your heating system\n- Buy an in-window unit to keep an individual room cool\n- Install a whole house fan that pulls in cool air from open windows at night into living area and exhausts the hot air into the attic\n- Place fans throughout the house but place them in front of open windows at night to pull in cool air\n- Install a swamp cooler, it's sometimes cheaper than installing a full AC system\n- Make sure to close windows and curtains in the morning hours after the house cools down over night\n- Get a cooler filled with ice and place a fan into it forcing cold air into the room.  The ice will melt fast so be ready to refill often.  Not the most efficient but in a pinch it can help", "category": "IT"}, {"instruction": "What is wine?", "input": "Wine is an alcoholic drink typically made from fermented grapes. Yeast consumes the sugar in the grapes and converts it to ethanol and carbon dioxide, releasing heat in the process. Different varieties of grapes and strains of yeasts are major factors in different styles of wine. These differences result from the complex interactions between the biochemical development of the grape, the reactions involved in fermentation, the grape's growing environment (terroir), and the wine production process. Many countries enact legal appellations intended to define styles and qualities of wine. These typically restrict the geographical origin and permitted varieties of grapes, as well as other aspects of wine production. Wines can be made by fermentation of other fruit crops such as plum, cherry, pomegranate, blueberry, currant and elderberry.", "output": "Wine is an alcoholic drink typically made from fermented grapes.", "category": "IT"}, {"instruction": "Tell me about the 2017 Southeastern Conference football season", "input": "The 2017 Southeastern Conference football season was the 85th season of SEC football and took place during the 2017 NCAA Division I FBS football season. The season began on August 31 and will end with the 2017 SEC Championship Game on December 2.[1] The SEC is a Power Five conference under the College Football Playoff format along with the Atlantic Coast Conference, the Big 12 Conference, the Big Ten Conference, and the Pac\u201312 Conference. For the 2017 season, the SEC has 14 teams divided into two divisions of seven each, named East and West.", "output": "The 2017 Southeastern Conference football season was the 85th season of SEC football and took place during the 2017 NCAA Division I FBS football season. The season began on August 31 and will end with the 2017 SEC Championship Game on December 2.", "category": "IT"}, {"instruction": "Are the following items candy bars or gum: trident, Twix, hubba bubba, snickers, three musketeers, and wrigleys.", "input": "", "output": "Three musketeers, Twix, and snickers are candy bars, and trident, hubba bubba, and wrigleys are gum.", "category": "IT"}, {"instruction": "Give me a list of things that pose a challenge to cryptos", "input": "", "output": "1) Crypto is an invention that has yet to find a real life purpose. Bitcoin narrative has changed from a peer to peer payment processor to now being store of value.\n2) Crypto also is banned in several countries. That is a challenge with wider adoption\n3) Crypto is also bound to a regulatory event that could bring it to grinding halt\n4) There's also a growing concern around energy consumption of them mining rigs.\n5) In recent events, the demise of major crypto exchange like FTX has also lead to poor optics", "category": "IT"}, {"instruction": "What is the meaning of life?", "input": "", "output": "Although it is a deep question that has challenged philosophers for all time, Douglas Adams in his book \"The Hitchhicker's Guide to the Universe\" humorously states that the answer is \"42\".", "category": "IT"}, {"instruction": "Classify the below characters based on whether they are created by Marvel comics or D.C. comics\n Spider-Man, Iron Man, Captain America, Thor, Doctor Strange, Superman, Batman, Wonder Woman, Flash, Aquaman", "input": "", "output": "DC- Superman, Batman, Wonder Woman, Flash, Aquaman\nMarvel- Spider-Man, Iron Man, Captain America, Thor, Doctor Strange", "category": "IT"}, {"instruction": "Why are we like aquariums?", "input": "", "output": "Aquariums, like zoos, provide fun-filled leisure and entertainment activities that double-up as centres for animal rescue, care and rehabilitation, scientific research, education and conservation.", "category": "IT"}, {"instruction": "Give me a bulleted list of countries that start with the letter B.", "input": "", "output": "- Botswana\n- Bulgaria\n- Brazil\n- Bolivia\n- Belgium\n- Bahrain\n- Bahamas", "category": "IT"}, {"instruction": "Explain how new technologies, like LLMs and ChatGPT, may revolutionize Application Programming Interfaces (APIs) in the future. Provide an example of how these APIs might work.", "input": "", "output": "As a kid, I loved watching the Jetsons. As I grew older and ended up writing software and creating & implementing architectures for systems, I thought I would never see the day when a Jetsons-like kitchen would be feasible.\nGPT (ChatGPT, etc.) has changed my mind.\n\nContractual Obligations\nAs an architect, you kind of need to think like a lawyer. You define contracts (APIs) between systems or components. You monitor those APIs for abuse or misuse.\n\nI would use Swagger editor to define those contracts, and I would write the APIs to match interactions implied in mock-ups. I would vet the design with the team, I would walk through scenarios to see if the API would fit the use case and would not introduce performance bottlenecks, and I would simulate and automate as much as I could along the journey.\n\nI was very careful to get it right the first time. It was never perfect the first time, of course. So, I also had to consider how the API could evolve while minimizing costs/impact to the rest of the system. The API, once deployed, would become something I would guard, like an honest politician guards the #usconstitution. The team had to be careful with any change that impacted the API.\n\nAPI Mesh... More like API mess!\nAPIs rely on APIs which rely on more APIs and libraries. Once a system gets large enough, that complexity becomes a bottleneck. Small changes can have a huge ripple effect. Some approaches (like federated #GraphQL) help manage this complexity nicely. But it still involves an API under which there can exist a lot of fragility. #Agile or not, developing a complicated web of APIs is complex, requires specialized skills, and is full of unforeseen challenges.\n\nThe Kitchen Conversation, ChatGPT-style\nThe Jetsons' kitchen involves a number of systems, each composed of various parts, sensors, hardware, inputs and outputs. Considering the complexity of interactions between independent systems in a kitchen, the fact that the Jetsons' kitchen components would come from various vendors or manufacturers, traditional API design would not be able to fulfill the vision. Not practical, at all.\n\nNow, let's think about APIs and the Jetsons' kitchen, #chatgpt -style.\n\nLet's keep it simple: pizza. You (or your robot) make a pizza from scratch.\n\nThe oven asks the refrigerator: \"I see we have a pizza. Can you tell me if this is low-moisture mozzarella?\"\n\nRefrigerator: \"That's not even mozzarella. This pizza must have Muenster cheese as that is all I had in me. And the human removed some of the contents 30 minutes ago, so the probability of Muenster cheese on that pizza is quite high.\"\n\nA sensor from the kitchen who has eyes across the room chimes in at this point. Sensor: \"Beware that the crust of this pizza is made of cauliflower. I agree with the video sensor's assessment regarding the type of cheese. No new cheese entered the kitchen recently.\"\n\nOven: \"Anything else I should know?\"\n\nSensor: \"The temperature of the dough is 47F. This is cooler than the expert chef consensus of using room-temperature dough.\"\n\nOven: \"Great. I know what to do. Since the dough is cool, I will start cooking with a temperature a little lower than the recipe specifies. Then I will increase the temp of bottom element so as to provide a nice crisp crust. I will keep a close eye on moisture and may use convection to mitigate any undesirable levels of moisture.\"\n\nWhere is the API that contractually binds the independent systems? APIs are not gone. For instance, the brain of the Oven will have myriad APIs (e.g. for interacting with temperature controllers and sensors, etc.). The key here is that the interface between systems is no longer a fixed, rigid API. No method signatures, no paths, no payload specifications. Instead, a conversation relating to senses and capabilities.\n\nWhat \"brain\"?\nKence Anderson's book Designing Autonomous AI describes nicely how a complex system can be decomposed into a number of independent \"brains.\" Each brain, in his book, can be independently developed and refined, with human guidance married with #datascience, #machinelearning and #dataengineering.\n\nWhat's Cookin'?\nI am excited for what the future holds. How architects rethink complex system design with regards to APIs is, in my opinion, something that is inevitable. And, as an amateur pizza maker, my taste buds are watering for the day I get some GPT help to make an even better #detroitpizza.", "category": "IT"}, {"instruction": "Who are some of the most successful golfers in history?", "input": "", "output": "Sam Snead, Tiger Woods, and Jack Nicklaus are the most successful golfers of all time with the top three most major championship wins.", "category": "IT"}, {"instruction": "Which is a bird or fish: Red-throated diver, Redlip blenny", "input": "", "output": "Redlip blenny is a fish, Red-throated diver is a bird", "category": "IT"}, {"instruction": "Which types of fish contain the lowest levels of mercury?", "input": "", "output": "The following types of fish contain low levels of mercury: salmon, flounder, Atlantic mackerel, anchovies, pollock, catfish, and shellfish (e.g., clams, scallops, mussels).", "category": "IT"}, {"instruction": "How do you make an iced matcha latter?", "input": "", "output": "You will need 1-2 teaspoons of matcha powder, milk of your choice, 1 cup of hot water, and ice. In a cup or bowl, you will add your match powder and pour your hot water into it and use a whisk until the matcha powder is well incorporated, which should create a paste like consistency. Then you will take a glass and pour in your ice and milk and your matcha paste on top and stir.", "category": "IT"}, {"instruction": "What is world of warcraft", "input": "", "output": "World of warcraft is a massive online multi player role playing game. It was released in 2004 by bizarre entertainment", "category": "IT"}, {"instruction": "What is the best swimming form?", "input": "", "output": "It is hard to say what is the best swimming form as everyone's body may be more acclimated to a certain form. One of the most standard forms of swimming that works for most people is the breast stroke.", "category": "IT"}, {"instruction": "Which is the best place to Kayak in Austin?", "input": "", "output": "Lady Bird Lake in Austin downtown is revered to be the best place to go Kayaking. Paddlers can choose to head west from the Rowing Dock to take in nature views. But a small paddle down the river to the east will greet paddlers to magnificent downtown skyline views.", "category": "IT"}, {"instruction": "What's the relation between the Kushan Empire and the Sassanid Empire in Iran?", "input": "The Kushan Empire  was a syncretic empire, formed by the Yuezhi, in the Bactrian territories in the early 1st century. It spread to encompass much of modern-day territory of Uzbekistan, Afghanistan, Pakistan and Northern India. The Sasanian or Sassanid Empire officially known as Eranshahr  was the last Iranian empire before the early Muslim conquests of the 7th\u20138th centuries AD. Named after the House of Sasan, it endured for over four centuries, from 224 to 651 AD, making it the longest-lived Persian imperial dynasty.[", "output": "Kushano-Sasanian Kingdom (also called Kushanshahs,  or Koshano Shao in Bactrian, or Indo-Sasanians) is a historiographic term used by modern scholars to refer to a branch of the Sasanian Persians who established their rule in Bactria during the 3rd and 4th centuries CE at the expense of the declining Kushans. They captured the provinces of Sogdiana, Bactria and Gandhara from the Kushans in 225 CE. The Sasanians established governors for the Sasanian Empire, who minted their own coinage and took the title of Kushanshas, i.e. \"Kings of the Kushans\". They are sometimes considered as forming a \"sub-kingdom\" inside the Sassanid Empire.", "category": "IT"}, {"instruction": "What's the best way to learn how to snowboard?", "input": "", "output": "There are many options available to learn how to snowboard. You can seek out professional lessons from an instructor, often available at your local ski resort.  You can also read articles online, or watch online videos from professional instructors.  Another option would be to get lessons from a friend who's snowboarded for a long time.  While this can be an easy and inexpensive option, it may not be as effective as learning from a professional.  Friends who snowboard may know how to snowboard well, but, they may not be great instructors.  Plus, it's often easy to get frustrated with people you know really well.  You can avoid those headaches by getting a professional lesson.  It will reduce your stress level and likely make you a better snowboarder in a shorter period of time.  Have fun on the slopes and stay safe!", "category": "IT"}, {"instruction": "write a short essay on California wild fire", "input": "", "output": "California is known for its hot, dry summers, which increase the risk of wildfires. Every year, the state experiences dozens of fires, which can be devastating to both the environment and people's homes and businesses.\n\nIn recent years, California has seen some of the worst wildfires in its history, with tens of thousands of acres of land destroyed and hundreds of homes lost. These fires are often started by a combination of high temperatures, dry conditions, and strong winds, which can quickly spread flames and make them difficult to control.\n\nThe effects of these fires are felt not just by those directly impacted, but by everyone in the state. Smoke and ash from the fires can cause respiratory problems and other health issues, and the destruction of habitats can harm wildlife populations and disrupt entire ecosystems.\n\nDespite the challenges, California has made significant progress in fighting wildfires in recent years. The state has invested in new technologies and equipment to help firefighters respond more quickly and effectively to fires, and has increased efforts to prevent fires from starting in the first place.\n\nWhile wildfires will likely always be a risk in California, the state's proactive approach to managing them gives hope that we can continue to protect people, wildlife, and the environment from their devastating effects.", "category": "IT"}, {"instruction": "What are some tools that every homeowner should have?", "input": "", "output": "There is a tool designed for almost every challenge a homeowner will face, but purchasing every tool could prove to be cost prohibitive, especially if they are highly specialized for tasks that may occur infrequently.  It's best to have a general set of tools that have a wide variety of uses, including a hammer, a set of screwdrivers both flat and philips, a tape measure, a level, a stud finder, and a utility knife. A battery powered drill and impact driver can also save time, and make mounting projects easier.", "category": "IT"}, {"instruction": "Who played Billy the Kid in The Left Handed Gun", "input": "", "output": "Paul Newman", "category": "IT"}, {"instruction": "why did Syd Barrett left the Pink Floyd?", "input": "", "output": "Syd Barrett was one of the main members of the Pink Floyd. He has used drugs a lot and after a while he was not able to perform with the team. Even though the band gave him multiple chances, he could not keep up with the band. In the end, they had to ask him to leave the band. The main reason that he has left the team is his health problems and addiction to drugs.", "category": "IT"}, {"instruction": "what is REST API", "input": "", "output": "REST API is an architectural style for building network APIs. In practice, most REST APIs are using JSON over HTTP. REST APIs have several properties that make them very popular.\n\nHTTP is the foundational and the most popular network protocol across the internet. By using HTTP, REST APIs can fully utilize the internet infrastructure, which greatly reduce the complexity and operational costs. For example, using HTTPS for transport security, and using URL for request routing.\n\nJSON is a simple, stable, and intuitive data format , which is not expected to change ever. This offers great ease of use and stability to REST APIs. For high performance applications, binary formats can be used instead, such as protobuf or thrift.\n\nREST APIs are often designed as CRUD APIs, where API operations are commonly expressed as Create, Retrieve, Update, and Delete operations on resources. CRUD operations are naturally mapped to HTTP methods (POST, GET, PUT/PATCH, and DELETE), and API resources can be naturally identified using URLs.", "category": "IT"}, {"instruction": "What is underwriting?", "input": "", "output": "Underwriting (UW) services are provided by some large financial institutions, such as banks, insurance companies and investment houses, whereby they guarantee payment in case of damage or financial loss and accept the financial risk for liability arising from such guarantee. An underwriting arrangement may be created in a number of situations including insurance, issues of security in a public offering, and bank lending, among others. The person or institution that agrees to sell a minimum number of securities of the company for commission is called the underwriter.\n\nThe term \"underwriting\" derives from the Lloyd's of London insurance market. Financial backers (or risk takers), who would accept some of the risk on a given venture (historically a sea voyage with associated risks of shipwreck) in exchange for a premium, would literally write their names under the risk information that was written on a Lloyd's slip created for this purpose.", "category": "IT"}, {"instruction": "Give me a list of some characteristics of a good coffee shop?", "input": "", "output": "Some characteristics of good coffee shops include:\n- Very good coffee, either freshly roasted locally or acquired from a quality roaster\n- High end coffee grinders, brewing machines, and a high quality espresso machine and well-trained baristas\n- Different coffee roast options (i.e. medium roast, dark roast) and brewing methods (i.e. drip coffee and pour-over) available\n- A variety of cafe fare, such as pastries and croissants, available for purchase to accompany coffee\n- Ample seating, with power outlets available by most seats.", "category": "IT"}, {"instruction": "Please summarize what Linkedin does.", "input": "LinkedIn (/l\u026a\u014bkt\u02c8\u026an/) is a business and employment-focused social media platform that works through websites and mobile apps. It launched on May 5, 2003.[5] It is now owned by Microsoft. The platform is primarily used for professional networking and career development, and allows jobseekers to post their CVs and employers to post jobs. From 2015 most of the company's revenue came from selling access to information about its members to recruiters and sales professionals.[6] Since December 2016, it has been a wholly owned subsidiary of Microsoft. As of March 2023, LinkedIn has more than 900 million registered members from over 200 countries and territories.[5]\n\nLinkedIn allows members (both workers and employers) to create profiles and connect with each other in an online social network which may represent real-world professional relationships. Members can invite anyone (whether an existing member or not) to become a connection. LinkedIn can also be used to organize offline events, join groups, write articles, publish job postings, post photos and videos, and more.[7]", "output": "Linkedin is a social platform that business professionals create profiles on and network with other business professionals. It is used to network, career development, and for jobseekers to find jobs. Linkedin has over 900 million users from over 200 countries. Linkedin can be used to post resumes/CVs, organizing events, joining groups, writing articles, publishing job postings, posting picture, posting videos, and more!", "category": "IT"}, {"instruction": "Who saved Andromeda from the sea monster", "input": "", "output": "Perseus", "category": "IT"}, {"instruction": "How can I contribute to Spark?", "input": "", "output": "Yes, Spark is an open source project and anyone can contribute to it.", "category": "IT"}, {"instruction": "Who are ''The Lumi\u00e8res\" ?", "input": "", "output": "The Lumi\u00e8res (literally in English: The Lights) was a cultural, philosophical, literary and intellectual movement beginning in the second half of the 17th century, originating in western Europe and spreading throughout the rest of Europe. It included philosophers such as Baruch Spinoza, David Hume, John Locke, Edward Gibbon, Voltaire, Jean-Jacques Rousseau, Denis Diderot, Pierre Bayle and Isaac Newton. This movement is influenced by the scientific revolution in southern Europe arising directly from the Italian renaissance with people like Galileo Galilei. Over time it came to mean the Si\u00e8cle des Lumi\u00e8res, in English the Age of Enlightenment.[Note 1]\n\nMembers of the movement saw themselves as a progressive \u00e9lite, and battled against religious and political persecution, fighting against what they saw as the irrationality, arbitrariness, obscurantism and superstition of the previous centuries. They redefined the study of knowledge to fit the ethics and aesthetics of their time. Their works had great influence at the end of the 18th century, in the American Declaration of Independence and the French Revolution.[1]\n\nThis intellectual and cultural renewal by the Lumi\u00e8res movement was, in its strictest sense, limited to Europe. These ideas were well understood in Europe, but beyond France the idea of \"enlightenment\" had generally meant a light from outside, whereas in France it meant a light coming from within oneself.\n\nIn the most general terms, in science and philosophy, the Enlightenment aimed for the triumph of reason over faith and belief; in politics and economics, the triumph of the bourgeois over nobility and clergy.", "category": "IT"}, {"instruction": "Using examples taken from the text give me a summary of the main arguments in favour of slavery reparations in the United States and the anticipated cost of enacting such reparations", "input": "Slavery ended in the United States in 1865 with the end of the American Civil War and the ratification of the Thirteenth Amendment to the United States Constitution, which declared that \"Neither slavery nor involuntary servitude, except as a punishment for crime whereof the party shall have been duly convicted, shall exist within the United States, or any place subject to their jurisdiction\".[49] At that time, an estimated four million African Americans were set free.[50]\n\nSupport for reparations\nWithin the political sphere, a bill demanding slavery reparations has been proposed at the national level, the \"Commission to Study and Develop Reparation Proposals for African-Americans Act,\" which former Rep. John Conyers Jr. (D-MI) reintroduced to the United States Congress every year from 1989 until his resignation in 2017.[51] As its name suggests, the bill recommended the creation of a commission to study the \"impact of slavery on the social, political and economic life of our nation\".,[52] however there are cities and institutions which have initiated reparations in the US (see \u00a7 Legislation and other actions for a list).\n\nIn 1999, African-American lawyer and activist Randall Robinson, founder of the TransAfrica advocacy organization, wrote that America's history of race riots, lynching, and institutional discrimination have \"resulted in $1.4 trillion in losses for African Americans\".[53] Economist Robert Browne stated the ultimate goal of reparations should be to \"restore the black community to the economic position it would have if it had not been subjected to slavery and discrimination\".[54] He estimates a fair reparation value anywhere between $1.4 to $4.7 trillion, or roughly $142,000 (equivalent to $162,000 in 2021) for every black American living today.[54] Other estimates range from $5.7 to $14.2[55] and $17.1 trillion.[56]\n\nIn 2014, American journalist Ta-Nehisi Coates published an article titled \"The Case for Reparations\", which discussed the continued effects of slavery and Jim Crow laws and made renewed demands for reparations. Coates refers to Rep. John Conyers Jr.'s H.R.40 Bill, pointing out that Congress's failure to pass this bill expresses a lack of willingness to right their past wrongs.[57]\n\nIn September 2016, the United Nations' Working Group of Experts on People of African Descent encouraged Congress to pass H.R.40 to study reparations proposals. Still, the Working Group did not directly endorse any specific reparations proposal. The report noted that there exists a legacy of racial inequality in the United States, explaining that \"Despite substantial changes since the end of the enforcement of Jim Crow and the fight for civil rights, ideology ensuring the domination of one group over another, continues to negatively impact the civil, political, economic, social and cultural rights of African Americans today.\" The report notes that a \"dangerous ideology of white supremacy inhibits social cohesion among the US population\".[58]\n\nThe topic of reparations gained renewed attention in 2020[59] as the Black Lives Matter movement named reparations as one of their policy goals in the United States.\n\nIn 2020, rapper T.I. supported reparations that would give every African American US$1 million and asserted that slavery caused mass incarcerations, poverty, and other ills.[60]", "output": "In spite of progressive changes since the end of enforcement of Jim Crow and the successes of the fight for civil rights there are still inherent racial inequalities in the USA which negatively affect the civil, political, economic, social and cultural rights of African Americans today.  A United Nations report of 2016 did not endorse a specific reparations proposal, but did call out that there is an ideology of white supremacy present in the population of the United States that inhibits social cohesion.  Further arguments have been made identifying slavery as a cause of mass incarcerations, poverty and other ills that affect today\u2019s African Americans.\nIt could be argued that there is an inherent acknowledgement that the case exists to examine the impact of slavery on the social, political and economic life of the United States in the annual submission to Congress of the \"Commission to Study and Develop Reparation Proposals for African-Americans Act\u201d.  There are also individual cities within the USA which have instituted reparations.  Estimates of the cost to African Americans of the United States\u2019 history of discrimination have been estimated variously at $1.4 trillion, $4.7 trillion, $5.7 trillion, $14.2 trillion and $17.1 trillion.  These estimates express the projected cost in $ to restore the black community to the economic position it would have if it had not been subjected to slavery and discrimination.", "category": "IT"}, {"instruction": "When was the wheel invented?", "input": "", "output": "No one knows when the wheel was first made. Archaeological evidence seems to show that the wheel was first used to make pottery in Mesopotamia about 7,000 years ago, during the Neolithic period. Later, it was used to make chariots. Chariot wheels have been found in Sumer as early as 3000 BC. The wheel is one of the most important inventions in human history. It was very useful for making pottery and getting around on land. It is also a key part of machines.", "category": "IT"}, {"instruction": "write a scene between two actors discussing movie Inception", "input": "", "output": "Actress 1: \"Oh my god, have you seen Inception?\"\n\nActor 2: \"Yes! That movie blew my mind. What did you think of it?\"\n\nActress 1: \"Honestly, I was so confused for most of it. But it was so interesting, I couldn't look away. I had to know what was going on.\"\n\nActor 2: \"That's exactly how I felt. It's one of those movies that you have to pay attention to every detail, or you'll get lost.\"\n\nActress 1: \"Absolutely. And the way they played with time and reality was so cool. I don't think I've ever seen a movie like that before.\"\n\nActor 2: \"Yeah, the concept of entering someone's dreams to implant an idea was mind-boggling. And the way they executed it was so well done.\"\n\nActress 1: \"It was. And the cast was amazing too. Leonardo DiCaprio was incredible as usual, and I loved seeing Ellen Page in a different type of role.\"\n\nActor 2: \"Definitely. And the action scenes were so intense. The zero-gravity hallway fight was insane.\"\n\nActress 1: \"Oh my god, yes. I was on the edge of my seat for that one. And the ending...I still can't decide what it means.\"\n\nActor 2: \"I know, right? It's one of those movies that leaves you with so many questions. But that's part of what makes it so great.\"\n\nActress 1: \"Exactly. I love when movies challenge me to think and leave me wanting more. Inception definitely did that.\"\n\nActor 2: \"Agreed. It's definitely one of my all-time favorites. I could watch it a hundred times and still discover something new.\"\n\nActress 1: \"Same here. It's just one of those movies that sticks with you long after it's over.\"", "category": "IT"}, {"instruction": "Did dinosaurs have lips?", "input": "", "output": "Recent research suggests that the popular perception that dinosaurs had exposed teeth may be incorrect, and the current hypothesis is that the Tyrannosaurus rex did indeed have lips. A 2023 study by Dr Mark Witton of the University of Portsmouth said popular depictions of dinosaurs in movies like Jurassic Park are out of date. The study examined a large tooth that had spent over 500 days in the mouth of a Tyrannosaurus rex with no evidence of substantial wear, which is consistent with all findings of teeth found in the theropod family of dinosaurs. When contrasted with alligators and crocodiles, who have no lips and have more easily damaged teeth the theory says the evidence points to theropods, including Tyrannosaurus rex did indeed have lips. There would have been expected to be wear on the thin enamel on the teeth far more consistent with modern animals like crocodiles if dinosaurs had no lips.", "category": "IT"}, {"instruction": "Are lilies safe for cats?", "input": "", "output": "No, lilies are toxic to cats if consumed and should not be kept in a household with cats", "category": "IT"}, {"instruction": "What is Sunshine Recession?", "input": "", "output": "It is known as the deepest period in which sunspots are not virtually visible. Deepest period is related to sun cycle's process called solar minimum", "category": "IT"}, {"instruction": "What is the currency in use in the Netherlands?", "input": "", "output": "The currency in use in the Netherlands is the euro.", "category": "IT"}, {"instruction": "What is the best tv series in the world", "input": "", "output": "Dexter- The Dexter is so exciting to watch that it should be the best TV series in the world", "category": "IT"}, {"instruction": "Who was the first to record the Needles and Pins song?", "input": "\"Needles and Pins\" is a rock song credited to American writers Jack Nitzsche and Sonny Bono. Jackie DeShannon recorded it in 1963 and other versions followed. The most successful ones were by the Searchers, whose version reached No. 1 on the UK singles chart in 1964, and Smokie, who had a worldwide hit in 1977. Others who recorded the song include the Ramones, Gene Clark, and Tom Petty and the Heartbreakers with Stevie Nicks.\n\nJackie DeShannon version (1963)\nIn his autobiography, Bono states that he sang along with Nitzsche's guitar-playing, thus creating both the tune and the lyrics, being guided by the chord progressions.[1] However, Jackie DeShannon claims that the song was written at the piano, and that she was a full participant in the song's creation, along with Nitzsche and Bono, although she did not get formal credit.[2][3]\n\nDeShannon was the first to record the song; in the US it peaked at number 84 on the Billboard Hot 100 singles chart in May 1963.[4] Though it was only a minor US hit, DeShannon's recording of the song topped the charts in Canada, hitting number one on the CHUM Chart in July 1963", "output": "The first artist to record Needles and Pins song was DeShannon.", "category": "IT"}, {"instruction": "Provide me a list of the different types of harnesses used in rock climbing", "input": "Different types of climbing warrant particular features for harnesses. Sport climbers typically use minimalistic harnesses, some with sewn-on gear loops. Alpine climbers often choose lightweight harnesses, perhaps with detachable leg loops. Big Wall climbers generally prefer padded waist belts and leg loops. There are also full body harnesses for children, whose pelvises may be too narrow to support a standard harness safely. These harnesses prevent children from falling even when inverted, and are either manufactured for children or constructed out of webbing. Some climbers use full body harnesses when there is a chance of inverting, or when carrying a heavy bag. There are also chest harnesses, which are used only in combination with a sit harness. Test results from UIAA show that chest harnesses do not put more impact on the neck than sit harnesses, giving them the same advantages as full body harness.[6]\n\nApart from these harnesses, there are also caving and canyoning harnesses, which all serve different purposes. For example, a caving harness is made of tough waterproof and unpadded material, with dual attachment points. Releasing the maillon from these attachment points loosens the harness quickly.\n\nCanyoning harnesses are somewhat like climbing harnesses, often without the padding, but with a seat protector, making it more comfortable to rappel. These usually have a single attachment point of Dyneema.", "output": "Minimalistic Harness: has gear loops that are sewn on\nLightweight Harness: has leg loops that are removable\nBig Wall Harness: uses padded waist belts and leg loops\nFull Body Harness: mostly for children with small pelvises, or for scenarios that risk inversion\nChest Harness: to be used with a sit harness\nCaving Harness: made of ultra durable material and multiple attachment points\nCanyon Harness: has a built-in seat protector for rappeling.", "category": "IT"}, {"instruction": "Think of some family rules to promote a healthy family relationship", "input": "", "output": "Use Kind words\nBe grateful\nThink of others before yourself\nWork hard\nBe Honest\nBe thankful\nKeep your promises\nChoose to be happy\nAlways say 'I Love You'\nBe kind\nEncourage each other", "category": "IT"}, {"instruction": "In the series A Song of Ice and Fire, who is the founder of House Karstark?", "input": "", "output": "Karlon Stark", "category": "IT"}, {"instruction": "What is enriched air and why would divers dive with enriched air?", "input": "", "output": "Enriched air, also known as nitrox, is one kind of air with more than 21% oxygen. 21% oxygen is the normal air we breathe on the earth. The primary benefit of using enriched air is to extend the diver's bottom time, and reduce the need to push to no decompression limit. This advantage is really beneficial in deeper diving. \nFor example, at 80 feet of depth, normal air can last around 30 min, while enriched air of 32% oxygen can last for 45 min and 36% can last for 55 min. \nWhile enriched air is really beneficial in extending bottom time, it is important that divers get trained to use it before diving with enriched air.", "category": "IT"}, {"instruction": "What film won the 1943 Oscar as best film", "input": "", "output": "Casablanca", "category": "IT"}, {"instruction": "which weighs more, cold or hot water?", "input": "", "output": "Cold water weighs more than hot water", "category": "IT"}, {"instruction": "Given this paragraph, what is the top speed of a Kia Stinger?", "input": "Kia claims that the Stinger accelerates from zero to 100 km/h (62 mph) in 7.7, 6 and 4.9 seconds for the 2.2-liter diesel, 2.0-liter petrol and 3.3-liter petrol respectively. Schreyer reportedly drove a pre-production Stinger GT at a top speed of 269 km/h (167 mph) on the Autobahn.[9]\n\nDuring a test by Car and Driver, an all-wheel-drive U.S. spec GT 3.3T with Michelin Pilot Sport 4 tires achieved 0\u201360 mph (0\u201397 km/h) in 4.6 seconds on the track, reached 0.91 g on the skidpad and was able to stop from 70 mph (113 km/h) in 164 feet (50 m). According to this publication, the U.S. model's top speed is governed at 167 mph (269 km/h) per Kia specs.[11] In tests conducted by Motor Trend, the four-cylinder U.S. spec Stinger 2.0 RWD on Bridgestone Potenza tires reached 60 mph (97 km/h) in 6.6 seconds, completed the 1\u20444-mile (0.4 km) run in 15 seconds and stopped from 60 mph (97 km/h) in 126 feet (38 m). The average lateral acceleration recorded in track testing was 0.85 g.", "output": "The top speed of a Kia Stinger is 269km/h (167mph) according to this text.", "category": "IT"}, {"instruction": "Write a short paragraph about why you should not have both a pet cat and a pet bird.", "input": "", "output": "Having both a pet bird and a pet cat is not a good idea because cats will try to hunt birds, which are naturally the prey of cats. This hunting instinct is completely normal, and it isn't fair to the cat to try to train it not to attack birds, as it is simply in its nature to do so. However, letting a cat hunt your pet bird is similarly not humane, as it will be very stressful to the bird and could lead to the bird being injured. Larger birds are also not a good idea, as the bird could cause injury to the cat if the cat tries to attack it. Overall, it just isn't a good idea to have both cats and birds, since they tend not to coexist well, and pet owners should just pick one species to have.", "category": "IT"}, {"instruction": "What is your favorite strip from the comic Calvin and Hobbes?", "input": "", "output": "Calvin and Hobbes is an iconic strip that is regarded as one of the best comic strips in history. Individual preferences may vary and it's difficult to find the publishing rate of individual strips throughout its ten year syndication.", "category": "IT"}, {"instruction": "What is best Playstation or Xbox", "input": "", "output": "Playstation and Xbox are two competing game consoles, where which is \"best\" will depend on the preferences of the gamer.  From a graphics and performance perspective they are comparable, with Sony's Playstation technically leading, though most gamers would be unlikely to notice a significant difference.  From a game library perspective, both consoles have their respective first-party titles that appeal to different demographics.  For example, Microsoft has seen great popularity due to popular title Halo being exclusively available on the console.  On the other hand, Playstation has popular exclusive titles such as God of War and Gran Turismo.  Ultimately the decision of which console is best will likely come down to which games titles the purchaser prefers.", "category": "IT"}, {"instruction": "What makes a formula one car so fast?", "input": "", "output": "Formula One cars are one of the fastest racing cars in the world reaching speeds as high as 240 mph.\n\nThere are many aspects that make formula one cars fast, below are the top few\n\n1. Engine:  F1 cars have extremely powerful engines that can generate around 1000 bhp at up to 20,000 rpm\n2. Power-to-Weight ratio: F1 cars are also extremely light at around 800 kgs giving them a power-to-weight ratio of 12000-1400 hp/ton. For comparison, the best Porsche cars have a power-to-weight ratio of only 300-400 hp/ton.\n2. Aerodynamics: F1 cars are fitted with extremely sophisticated aerodynamics including a rear wing, front wing and body parts that help reduce aerodynamic drag for straight-line speeds while adding downforce to help around corners\n3. Tires: F1 tires are extremely large and sticky. This help the cars stick to the road as the car goes through turns very fast.\n4. Brakes: Lastly F1 brakes are very powerful and can slow down a car extremely quickly. This allows F1 cars to be at top speed for much longer before needing to slow down for taking a turn.", "category": "IT"}, {"instruction": "Who became king of Holland in 1806?", "input": "", "output": "William I of the Netherlands became king of Holland in 1806.", "category": "IT"}, {"instruction": "Identify which instrument is string or woodwind: Panduri, Zurna", "input": "", "output": "Zurna is woodwind, Panduri is string.", "category": "IT"}, {"instruction": "What criteria should I be looking at when buying a new motorcycle?", "input": "", "output": "There are a number of criteria you should be looking at:\n- Price: How does it fit in your budget?\n- Engine type: Do you want a traditional combustion engine, or go for an electric one?\n- Number of cylinders: If you go for combustion engine, how many cylinders do you choose? Less cylinders are usually cheaper, make the motorcycle more lightweight and thus easier to maneuver. More cylinders make the engine feel smoother, also have more power, but are heavier and more expensive.\n- Usage: What do you use it for? Just for fun, commuting to work, general transportation? Travel? Offroad? Racing?\n- Assistance systems: Modern motorcycles have a range of assistance systems like ABS, Cruise Control, Distance sensors, electronic driving modes for different weather conditions etc. They can make driving safer , but also add weight and make the bike more expensive. Which ones do you need?  \n- Style: There are different styles like naked bike, cruiser, chopper, dual sport, race bike , scrambler etc. Different styles can be more or less adequate depending on your usage, or you can simply pick the one that appeals to you.\n- Size: The two most important aspects in terms of size are seat height and weight. Both have a huge impact on how well you are in control when not driving, for example when you need to stop at a traffic light or going slowly in stop & go traffic.\nSeat height is important , so your feet can reach the ground when stopping. However the width of the seat and general width dimensions of the bike also play a role here. So two bikes with same seat height might feel very differently. Best is to try it out", "category": "IT"}, {"instruction": "Which is a species of fish? Tope or Rope", "input": "", "output": "Tope", "category": "IT"}, {"instruction": "Why can camels survive for long without water?", "input": "", "output": "Camels use the fat in their humps to keep them filled with energy and hydration for long periods of time.", "category": "IT"}, {"instruction": "Alice's parents have three daughters: Amy, Jessy, and what\u2019s the name of the third daughter?", "input": "", "output": "The name of the third daughter is Alice", "category": "IT"}, {"instruction": "When was Tomoaki Komorida born?", "input": "Komorida was born in Kumamoto Prefecture on July 10, 1981. After graduating from high school, he joined the J1 League club Avispa Fukuoka in 2000. Although he debuted as a midfielder in 2001, he did not play much and the club was relegated to the J2 League at the end of the 2001 season. In 2002, he moved to the J2 club Oita Trinita. He became a regular player as a defensive midfielder and the club won the championship in 2002 and was promoted in 2003. He played many matches until 2005. In September 2005, he moved to the J2 club Montedio Yamagata. In 2006, he moved to the J2 club Vissel Kobe. Although he became a regular player as a defensive midfielder, his gradually was played less during the summer. In 2007, he moved to the Japan Football League club Rosso Kumamoto (later Roasso Kumamoto) based in his local region. He played as a regular player and the club was promoted to J2 in 2008. Although he did not play as much, he still played in many matches. In 2010, he moved to Indonesia and joined Persela Lamongan. In July 2010, he returned to Japan and joined the J2 club Giravanz Kitakyushu. He played often as a defensive midfielder and center back until 2012 when he retired.[1]", "output": "Tomoaki Komorida was born on July 10,1981.", "category": "IT"}, {"instruction": "If I have more pieces at the time of stalemate, have I won?", "input": "Stalemate is a situation in chess where the player whose turn it is to move is not in check and has no legal move. Stalemate results in a draw. During the endgame, stalemate is a resource that can enable the player with the inferior position to draw the game rather than lose.[2] In more complex positions, stalemate is much rarer, usually taking the form of a swindle that succeeds only if the superior side is inattentive.[citation needed] Stalemate is also a common theme in endgame studies and other chess problems.\n\nThe outcome of a stalemate was standardized as a draw in the 19th century. Before this standardization, its treatment varied widely, including being deemed a win for the stalemating player, a half-win for that player, or a loss for that player; not being permitted; and resulting in the stalemated player missing a turn. Stalemate rules vary in other games of the chess family.", "output": "No. \nStalemate is a drawn position. It doesn't matter who has captured more pieces or is in a winning position", "category": "IT"}, {"instruction": "Given a reference text about Lollapalooza, where does it take place, who started it and what is it?", "input": "Lollapalooza /\u02ccl\u0252l\u0259p\u0259\u02c8lu\u02d0z\u0259/ (Lolla) is an annual American four-day music festival held in Grant Park in Chicago. It originally started as a touring event in 1991, but several years later, Chicago became its permanent location. Music genres include but are not limited to alternative rock, heavy metal, punk rock, hip hop, and electronic dance music. Lollapalooza has also featured visual arts, nonprofit organizations, and political organizations. The festival, held in Grant Park, hosts an estimated 400,000 people each July and sells out annually.[4] Lollapalooza is one of the largest and most iconic music festivals in the world and one of the longest-running in the United States.[5][6]\n\nLollapalooza was conceived and created in 1991 as a farewell tour by Perry Farrell, singer of the group Jane's Addiction.", "output": "Lollapalooze is an annual musical festival held in Grant Park in Chicago, Illinois. It was started in 1991 as a farewell tour by Perry Farrell, singe of the group Jane's Addiction. The festival includes an array of musical genres including alternative rock, heavy metal, punk rock, hip hop, and electronic dance music. The festivals welcomes an estimated 400,000 people each year and sells out annually. Some notable headliners include: the Red Hot Chili Peppers, Chance the Rapper, Metallica, and Lady Gage. Lollapalooza is one of the largest and most iconic festivals in the world and a staple of Chicago.", "category": "IT"}, {"instruction": "Who gave the UN the land in NY to build their HQ", "input": "", "output": "John D Rockerfeller", "category": "IT"}, {"instruction": "Why mobile is bad for human", "input": "", "output": "We are always engaged one phone which is not good.", "category": "IT"}, {"instruction": "Who was John Moses Browning?", "input": "John Moses Browning (January 23, 1855 \u2013 November 26, 1926) was an American firearm designer who developed many varieties of military and civilian firearms, cartridges, and gun mechanisms \u2013 many of which are still in use around the world. He made his first firearm at age 13 in his father's gun shop and was awarded the first of his 128 firearm patents on October 7, 1879, at the age of 24. He is regarded as one of the most successful firearms designers of the 19th and 20th centuries and pioneered the development of modern repeating, semi-automatic, and automatic firearms.\n\nBrowning influenced nearly all categories of firearms design, especially the autoloading of ammunition. He invented, or made significant improvements to, single-shot, lever-action, and pump-action rifles and shotguns. He developed the first reliable and compact autoloading pistols by inventing the telescoping bolt, then integrating the bolt and barrel shroud into what is known as the pistol slide. Browning's telescoping bolt design is now found on nearly every modern semi-automatic pistol, as well as several modern fully automatic weapons. He also developed the first gas-operated firearm, the Colt\u2013Browning Model 1895 machine gun \u2013 a system that surpassed mechanical recoil operation to become the standard for most high-power self-loading firearm designs worldwide. He also made significant contributions to automatic cannon development.\n\nBrowning's most successful designs include the M1911 pistol, the water-cooled M1917, the air-cooled M1919, and heavy M2 machine guns, the M1918 Browning Automatic Rifle, and the Browning Auto-5 \u2013 the first semi-automatic shotgun. Some of these arms are still manufactured, often with only minor changes in detail and cosmetics to those assembled by Browning or his licensees. The Browning-designed M1911 and Hi-Power are some of the most copied firearms in the world.", "output": "John Moses Browning is one of the most well-known designer of modern firearms.  He started building firearms in his father's shop at the age of 13, and was awarded his first patent when he was 24.\n\nHe  designed the first reliable automatic pistol, and the first gas-operated firearm, as well inventing or improving single-shot, lever-action, and pump-action rifles and shotguns.\n\nToday, he is most well-known for the M1911 pistol, the Browning Automatic Rifle, and the Auto-5 shotgun, all of which are in still in current production in either their original design, or with minor changes.  His M1911 and Hi-Power pistols designs are some of the most reproduced firearms in the world today.", "category": "IT"}, {"instruction": "Who is Thomas Jefferson?", "input": "Thomas Jefferson (April 13, 1743[a] \u2013 July 4, 1826) was an American statesman, diplomat, lawyer, architect, philosopher, and Founding Father who served as the third president of the United States from 1801 to 1809.[13] Among the Committee of Five charged by the Second Continental Congress with authoring the Declaration of Independence, Jefferson was the Declaration's primary author. Following the American Revolutionary War and prior to becoming the nation's third president in 1801, Jefferson was the first United States secretary of state under George Washington and then the nation's second vice president under John Adams.", "output": "Thomas Jefferson (April 13, 1743[a] \u2013 July 4, 1826) was an American statesman, diplomat, lawyer, architect, philosopher, and Founding Father who served as the third president of the United States from 1801 to 1809.[13] Among the Committee of Five charged by the Second Continental Congress with authoring the Declaration of Independence, Jefferson was the Declaration's primary author. Following the American Revolutionary War and prior to becoming the nation's third president in 1801, Jefferson was the first United States secretary of state under George Washington and then the nation's second vice president under John Adams.\n\nAmong the nation's Founding Fathers, Jefferson is considered unmatched in his intellectual depth and breadth.[14] His passionate writings and advocacy for human rights, including freedom of thought, speech, and religion, were a leading inspiration behind the American Revolution, which ultimately gave rise to the American Revolutionary War, American independence, and the United States Constitution. Jefferson's ideas were globally influential in shaping and inspiring the Age of Enlightenment, which proved transformational in the late 17th and 18th centuries.[15] He was a leading proponent of democracy, republicanism, and individual rights, and produced formative documents and decisions at the state, national, and international levels.\n\nDuring the American Revolution, Jefferson represented Virginia in the Second Continental Congress in Philadelphia, which adopted the Declaration of Independence on July 4, 1776. As a Virginia legislator, he drafted a state law for religious freedom. He served as the second Governor of Virginia from 1779 to 1781, during the Revolutionary War. In 1785, Jefferson was appointed the United States Minister to France, and subsequently, the nation's first secretary of state under President George Washington from 1790 to 1793. Jefferson and James Madison organized the Democratic-Republican Party to oppose the Federalist Party during the formation of the First Party System. With Madison, he anonymously wrote the Kentucky and Virginia Resolutions in 1798 and 1799, which sought to strengthen states' rights by nullifying the federal Alien and Sedition Acts.\n\nJefferson and Federalist John Adams became friends as well as political rivals, serving in the Continental Congress and drafting the Declaration of Independence together. In the 1796 presidential election between the two, Jefferson came in second, which according to electoral procedure at the time, made him vice president to Adams. Jefferson challenged Adams again in 1800 and won the presidency. After his term in office, Jefferson eventually reconciled with Adams and they shared a correspondence that lasted 14 years. He and Adams both died on the same day, July 4, 1826, which was also the 50th anniversary of Declaration of Independence.\n\nAs president, Jefferson pursued the nation's shipping and trade interests against Barbary pirates and aggressive British trade policies. Starting in 1803, he promoted a western expansionist policy with the Louisiana Purchase, which doubled the nation's claimed land area. To make room for settlement, Jefferson began the process of Indian tribal removal from the newly acquired territory. As a result of peace negotiations with France, his administration reduced military forces. He was re-elected in 1804, but his second term was beset with difficulties at home, including the trial of former vice president Aaron Burr. In 1807, American foreign trade was diminished when Jefferson implemented the Embargo Act in response to British threats to U.S. shipping. The same year, Jefferson signed the Act Prohibiting Importation of Slaves.\n\nJefferson was a plantation owner, lawyer, and politician, and mastered many disciplines including surveying, mathematics, horticulture, and mechanics. He was also an architect in the Palladian tradition. Jefferson's keen interest in religion and philosophy led to his appointment as president of the American Philosophical Society. He largely shunned organized religion but was influenced by Christianity, Epicureanism,[4] and deism. Jefferson rejected fundamental Christianity, denying Christ's divinity. A philologist, Jefferson knew several languages. He was a prolific letter writer and corresponded with many prominent people, including Edward Carrington, John Taylor of Caroline, and James Madison. In 1785, Jefferson authored Notes on the State of Virginia, considered perhaps the most important American book published before 1800.[16] Jefferson championed the ideals, values, and teachings of the Enlightenment.\n\nSince the 1790s, Jefferson was rumored to have had children by his sister-in-law and slave Sally Hemings, leading to what is known as the Jefferson-Hemings controversy. A 1998 DNA test concluded that one of Sally Hemings's children, Eston Hemings, was of the Jefferson male line. According to scholarly consensus, based on documentary and statistical evaluation, as well as oral history, Jefferson probably fathered at least six children with Hemings, including four that survived to adulthood.[17][18][19]\n\nAfter retiring from public office, Jefferson founded the University of Virginia. Presidential scholars and historians generally praise Jefferson's public achievements, including his advocacy of religious freedom and tolerance in Virginia, his peaceful acquisition of the Louisiana Territory from France without war or controversy, and his ambitious and successful Lewis and Clark Expedition. Some modern historians are critical of Jefferson's personal involvement with slavery. Jefferson is consistently ranked among the top ten presidents of American history.", "category": "IT"}, {"instruction": "Who was Kyle Van Zyl playing against when he scored 36 of hisa teams 61 points?", "input": "Van Zyl joined the Eastern Province Kings Academy, where he played for the Eastern Province U19 side in the 2010 Under-19 Provincial Championship. He was a key player for the Eastern Province U21 side in the 2012 Under-21 Provincial Championship, scoring 71 points in eight appearances. Van Zyl was under the Top SARU Performers, scoring the most tries at 6 in the 2012 Provincial Under 21 in the Rugby Junior Provincials.[6]\n\nThis included a record and a remarkable personal haul in their opening match, when he scored 36 of his team's points in a 61\u20133 victory over Boland U21, consisting of four tries and eight conversions and was awarded Man of the Match.[7]", "output": "Kyle Van Zyl was playing against Boland U21 when he scored 36 points, leading his team to victory in a 61-3 win.", "category": "IT"}, {"instruction": "From the passage list down the areas for which Dar es Salaam is Tanzania's most prominent city. List the results in comma separated format.", "input": "Dar es Salaam (/\u02ccd\u0251\u02d0r \u025bs s\u0259\u02c8l\u0251\u02d0m/; from Arabic: \u062f\u064e\u0627\u0631 \u0627\u0644\u0633\u064e\u0651\u0644\u064e\u0627\u0645, romanized: D\u00e2r es-Sel\u00e2m, lit.\u2009'Abode of Peace') or commonly known as Dar, is the largest city and financial hub of Tanzania. It is also the capital of Dar es Salaam Region. With a population of over six million people, Dar is the largest city in East Africa and the seventh-largest in Africa. Located on the Swahili coast, Dar es Salaam is an important economic centre and is one of the fastest-growing cities in the world.[2]\n\nThe town was founded by Majid bin Said, the first Sultan of Zanzibar, in 1865 or 1866. It was the main administrative and commercial center of German East Africa, Tanganyika, and Tanzania. The decision was made in 1974 to move the capital to Dodoma and was officially completed in 1996.[3]\n\nDar es Salaam is Tanzania's most prominent city for arts, fashion, media, film, television, and finance. It is the capital of the co-extensive Dar es Salaam Region, one of Tanzania's 31 administrative regions, and consists of five districts: Kinondoni in the north; Ilala in the centre; Ubungo and Temeke in the south; and Kigamboni in the east across the Kurasini estuary.", "output": "arts, fashion, media, film, television, finance", "category": "IT"}, {"instruction": "What is a polygon?", "input": "", "output": "A polygon is a form in Geometry.  It is a single dimensional plane made of connecting lines and any number of vertices.  It is a closed chain of connected line segments or edges.  The vertices of the polygon are formed where two edges meet.  Examples of polygons are hexagons, pentagons, and octagons.  Any plane that does not contain edges or vertices is not a polygon.  An example of a non-polygon is a circle.", "category": "IT"}, {"instruction": "How do I start running?", "input": "", "output": "Make sure you get comfortable running shoes and attire. Start with achievable goal in mind like a 5K race. If you never ran before, start gradually from a walk, to brisk walk, light jog aiming for 15-30mins initially. Slowly increase your running time and distance as your fitness level improves. One of the most important things is cool down and gentle stretching. Always listen to your body, and take rest days when needed to prevent injury.", "category": "IT"}, {"instruction": "Which episodes of season four of Game of Thrones did Michelle MacLaren direct?", "input": "", "output": "She directed \"Oathkeeper\" and \"First of His Name\" the fourth and fifth episodes of season four, respectively.", "category": "IT"}, {"instruction": "What is process mining?", "input": "Process mining is a family of techniques relating the fields of data science and process management to support the analysis of operational processes based on event logs. The goal of process mining is to turn event data into insights and actions. Process mining is an integral part of data science, fueled by the availability of event data and the desire to improve processes.Process mining techniques use event data to show what people, machines, and organizations are really doing. Process mining provides novel insights that can be used to identify the executional path taken by operational processes and address their performance and compliance problems.\n\nProcess mining starts from event data. Input for process mining is an event log. An event log views a process from a particular angle. Each event in the log should contain (1) a unique identifier for a particular process instance (called case id), (2) an activity (description of the event that is occurring), and (3) a timestamp. There may be additional event attributes referring to resources, costs, etc., but these are optional. With some effort, such data can be extracted from any information system supporting operational processes. Process mining uses these event data to answer a variety of process-related questions.", "output": "Process mining brings together data mining, data science and process management to find process efficiencies.", "category": "IT"}, {"instruction": "What are some unique curtain tie backs that you can make yourself?", "input": "", "output": "There are many items you can use to make a curtain tie back. Some ideas for this include a chain, a circle and pin, jute rope, wooden beaded rope, a necklack or bracelet, a door knob, a length of a leather belt, macrame rope, or a string of artificial flowers.", "category": "IT"}, {"instruction": "What is a dispersive prism?", "input": "In optics, a dispersive prism is an optical prism that is used to disperse light, that is, to separate light into its spectral components (the colors of the rainbow). Different wavelengths (colors) of light will be deflected by the prism at different angles.[1] This is a result of the prism material's index of refraction varying with wavelength (dispersion). Generally, longer wavelengths (red) undergo a smaller deviation than shorter wavelengths (blue). The dispersion of white light into colors by a prism led Sir Isaac Newton to conclude that white light consisted of a mixture of different colors.", "output": "A dispersive prism is an optical prism that disperses the light's different wavelengths at different angles. When white light is shined through a dispersive prism it will separate into the different colors of the rainbow.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Cantaro, Gudok", "input": "", "output": "Gudok is string, Cantaro is percussion.", "category": "IT"}, {"instruction": "Give me the top 5 golf equipment company names.", "input": "", "output": "Titleist, Taylormade, Callaway, Ping, Cobra", "category": "IT"}, {"instruction": "What individual has won the most Olympic gold medals in the history of the games?", "input": "", "output": "Michael Phelps has won the most gold medals of all time with 23 golds.", "category": "IT"}, {"instruction": "Which Dutch artist painted \u201cGirl with a Pearl Earring\u201d?", "input": "", "output": "Vermeer", "category": "IT"}, {"instruction": "What happens when the sun goes down?", "input": "", "output": "When the sun sets, the evening starts.", "category": "IT"}, {"instruction": "What is a verb?", "input": "", "output": "A verb is an action word that describes an activity.  Examples of verbs are the following: swimming, hiking, biking, roller skating, or skydiving.  All of these single and combination word examples are tied to an activity that any living thing can do.  For example, a dog can bike ride with a human when the human is pedaling the bike.  Verb use is not limited to humans or people only but applies to all living things.", "category": "IT"}, {"instruction": "Extract the owner of Lamborghini and a listing of the different types of Huracan cars that Lamborghini has produced for its Motorsport division.", "input": "Automobili Lamborghini S.p.A. (Italian pronunciation: [auto\u02c8m\u0254\u02d0bili lambor\u02c8\u0261i\u02d0ni]) is an Italian manufacturer of luxury sports cars and SUVs based in Sant'Agata Bolognese. The company is owned by the Volkswagen Group through its subsidiary Audi.\n\nFerruccio Lamborghini (1916\u20131993), an Italian manufacturing magnate, founded Automobili Ferruccio Lamborghini S.p.A. in 1963 to compete with Ferrari. The company was noted for using a rear mid-engine, rear-wheel drive layout. Lamborghini grew rapidly during its first decade, but sales plunged in the wake of the 1973 worldwide financial downturn and the oil crisis. The firm's ownership changed three times after 1973, including a bankruptcy in 1978. American Chrysler Corporation took control of Lamborghini in 1987 and sold it to Malaysian investment group Mycom Setdco and Indonesian group V'Power Corporation in 1994. In 1998, Mycom Setdco and V'Power sold Lamborghini to the Volkswagen Group where it was placed under the control of the group's Audi division.\n\nNew products and model lines were introduced to the brand's portfolio and brought to the market and saw an increased productivity for the brand. In the late 2000s, during the worldwide financial crisis and the subsequent economic crisis, Lamborghini's sales saw a drop of nearly 50 per cent.\n\nLamborghini currently produces the V12-powered Aventador and the V10-powered Hurac\u00e1n, along with the Urus SUV powered by a twin-turbo V8 engine. In addition, the company produces V12 engines for offshore powerboat racing.\n\nLamborghini Trattori, founded in 1948 by Ferruccio Lamborghini, is headquartered in Pieve di Cento, Italy and continues to produce tractors. Since 1973, Lamborghini Trattori has been a separate entity from the automobile manufacturer.\n\nHistory\nMain article: History of Lamborghini\n\nFerruccio Lamborghini with a Jarama and a tractor of his brand\nManufacturing magnate Italian Ferruccio Lamborghini founded the company in 1963 with the objective of producing a refined grand touring car to compete with offerings from established marques such as Ferrari. The company's first models, such as the 350 GT, were released in the mid-1960s. Lamborghini was noted for the 1966 Miura sports coup\u00e9, which used a rear mid-engine, rear-wheel drive layout.\n\nLamborghini grew rapidly during its first ten years, but sales fell in the wake of the 1973 worldwide financial downturn and the oil crisis. Ferruccio Lamborghini sold the company to Georges-Henri Rossetti and Ren\u00e9 Leimer and retired in 1974. The company went bankrupt in 1978, and was placed in the receivership of brothers Jean-Claude and Patrick Mimran in 1980. The Mimrans purchased the company out of receivership by 1984 and invested heavily in its expansion. Under the Mimrans' management, Lamborghini's model line was expanded from the Countach to include the Jalpa sports car and the LM002 high-performance off-road vehicle.\n\nThe Mimrans sold Lamborghini to the Chrysler Corporation in 1987. After replacing the Countach with the Diablo and discontinuing the Jalpa and the LM002, Chrysler sold Lamborghini to Malaysian investment group Mycom Setdco and Indonesian group V'Power Corporation in 1994. In 1998, Mycom Setdco and V'Power sold Lamborghini to the Volkswagen Group where it was placed under the control of the group's Audi division. New products and model lines were introduced to the brand's portfolio and brought to the market and saw an increased productivity for the brand Lamborghini. In the late 2000s, during the worldwide financial crisis and the subsequent economic crisis, Lamborghini's sales saw a drop of nearly 50 per cent.\n\nIn 2021, the CEO of Lamborghini said that by 2024 all its models will be hybrid.[5]\n\nAutomobiles produced\nLamborghini Motorsport Division Squadra Corse produces GT3 cars and cars for their Super Trofeo events based on the Gallardo and Hurac\u00e1n. Apart from them, the Squadra Corse builds cars upon customer request.\n\nGT3 and Super Trofeo Cars\nGallardo LP 570-4 Super Trofeo\nGallardo LP 560-4 Super Trofeo\nHurac\u00e1n LP 620-2 Super Trofeo EVO\nHurac\u00e1n LP 620-2 Super Trofeo EVO2\nHurac\u00e1n Super Trofeo GT2\nHurac\u00e1n GT3\nHurac\u00e1n GT3 Evo\nHurac\u00e1n GT3 Evo 2\nSpecial cars\nThese cars were built by Squadra Corse upon customer request.\n\nEssenza SCV12\nSC18 Alston\nSC20", "output": "Vokswagen Group owns Lamborghini through its subsidiary, Audi.\n\nLamborghini has produced the following Huracan motorsport models:\n- Hurac\u00e1n LP 620-2 Super Trofeo EVO\n- Hurac\u00e1n LP 620-2 Super Trofeo EVO2\n- Hurac\u00e1n Super Trofeo GT2\n- Hurac\u00e1n GT3\n- Hurac\u00e1n GT3 Evo\n- Hurac\u00e1n GT3 Evo 2", "category": "IT"}, {"instruction": "Which of the following is useful for transportation: a glass of wine, a lamp, a train, an iced cube tray, a plane, a bicycle, an apple and a scooter.", "input": "", "output": "The useful objects for transportation in the list are train, plane, bicyle and scooter.", "category": "IT"}, {"instruction": "What is the average lifespan of a Golden Retriever?", "input": "Golden Retrievers are a generally healthy breed; they have an average lifespan of 12 to 13 years.[9] Irresponsible breeding to meet high demand has led to the prevalence of inherited health problems in some breed lines, including allergic skin conditions, eye problems and sometimes snappiness.[9] These problems are rarely encountered in dogs bred from responsible breeders.[9]", "output": "The average lifespan of a Golden Retriever is 12 to 13 years.", "category": "IT"}, {"instruction": "Without quoting directly from the text give me a summary of the history of the Key Lime Pie.", "input": "Key lime pie is probably derived from the \"Magic Lemon Cream Pie\" published in a promotional brochure by Borden, a producer of condensed milk, in 1931.[3] The recipe is attributed to Borden's fictional spokesperson, Jane Ellison, and includes condensed milk, lemon juice and rind, and egg yolks. It is covered with meringue, baked, and served cold.[4] According to the pastry chef Stella Parks, users of the recipe altered it with local ingredients; she describes it as \"a stunning reminder of how deeply America's traditions are shaped by advertising\".[3]\n\nA \"Tropical Lime Chiffon Pie\", using condensed milk and egg yolks, is documented in a 1933 Miami newspaper article.[5] An \"icebox lime pie\", was mentioned as a specialty of the Florida Keys in 1935.[6][full citation needed] and a recipe under the name \"Key Lime Pie\" was published in 1940.[7][full citation needed]\n\nNo earlier solid sources are known, despite appeals to the public.[8][9] A 1927 Key West Women's Club cookbook does not mention the recipe.[10] A 1926 restaurant menu includes \"lime pie\", but it is unclear what it was. Various accounts claim that it was known earlier, but none were recorded before 1933.[11][9] A widely-reported story claims that William Curry's cook Aunt Sally invented it in the late 19th century. But there is no evidence for this, and the oldest version of this story dates to only 1895, in promotional materials for a Bed and Breakfast in Curry's former house.[3]\n\nIt was in the 1950s that Key lime pie was promoted as Florida's \"most famous treat\" and in 1987 as \"the greatest of all regional American desserts.\"[3]", "output": "Key lime pie is an American dessert pie. It is made of lime juice, egg yolks, and sweetened condensed milk. It is best served with meringue topping and is typically cooked in a graham cracker crust.\n\nThe dish is named after the small Key limes which which have yellow juice complementing the filling which is typically yellow because of the egg yolks used.\n\nThe filling is made by simply mixing the ingredients without cooking the proteins of the egg yolks and condensed milk and the acidic lime juice curdle, thickening the mixture without baking.", "category": "IT"}, {"instruction": "What is LAPR?", "input": "", "output": "This stands for life assurance premium relief. Before 14 March 1984 there was tax relief on life insurance premiums paid by policyholders for policies which qualified for tax relief. Policies which started", "category": "IT"}, {"instruction": "Is beauty objective or subjective?", "input": "", "output": "The opinions on this question vary from person to person. \nStatistically, a pattern of preference is easily visible on what people would describe as beautiful. An evident example of this phenomenon is a beauty standard for women and men. Society seems to agree on what features, both physical and internal, can deem a person beautiful. The standard of beauty is also projected beyond humans, onto animal breeds, for example, in cat shows. \nA link between beauty and how closely it resembles perfection appears to exist. For example, a rose with many petals and no tears or scratches is generally seen as more beautiful than one with fewer, visibly ruined petals. \nHowever, the question of perfection also raises a problem as it is difficult and arguably impossible to define perfection. Beauty does not necessarily mean perfection. For example, large eyes are statistically considered to be more attractive however, in terms of their biological  purpose they possess no superiority to small eyes. Therefore, both beauty and perfection depend on the perspective or purpose with which you observe an object.\n\nFurthermore, the clear fluctuations through centuries and cultures on what is considered to be beautiful should also be taken into account. Fashion trends and art styles, for instance,  are constantly changing. Additionally, the diversity in opinions suggests there is nothing that is considered beautiful by everyone, so even if the majority deem a particular object or thing as beautiful, it\u2019s beauty remains subjective because it remains based on an ever-changing preference rather than objective truth.", "category": "IT"}, {"instruction": "Extract all of the dates mentioned in this paragraph and list them using bullets in the format {Date} - {Description}", "input": "Daniel Leavitt was born November 16, 1813, at Rye, New Hampshire, the son of Benning Leavitt, influential businessman, state senator, county commissioner and later Chicopee Selectman,[5] and his wife Olive (Jenness) Leavitt. Daniel Leavitt married in 1838 at West Springfield, Massachusetts, Ruth Jeannette Ball. They had three children.", "output": "\u2022 November 16, 1813 - This is when Daniel Leavitt was born\n\u2022 1838 - This is when Daniel Leavitt married his wife Ruth Jeannette Ball.", "category": "IT"}, {"instruction": "Which products apple sell?", "input": "", "output": "Apple sells variety of products. including watches, phones, laptops and computers.", "category": "IT"}, {"instruction": "Write a short story about a person who discovers a hidden room in their house. The story should include a plot twist and a clear resolution at the end.", "input": "", "output": "It was going to be a long day.  With her brother-in-law out of town, Lisa had agreed to watch her niece Stella for the afternoon and the little girl was known to be a bit of a handful. Her plan had been to spend the afternoon at the park to let Stella run and climb, to wear her out a bit.  Unfortunately, this outing was foiled by the constant downpour of rain so Lisa resigned herself to a day inside with the tiny tyrant. Stella arrived early and excited to play.  Lisa decided to begin with a game of hide and seek, after all this could take up a good part of the morning without too much trouble.  Stella ran off to hide and Lisa sat quietly drinking coffee while calling out to the little girl, pretending to seek. Eventually she set off to find the little girl but soon she realized that something was wrong.  No matter where she looked, Stella was nowhere to be found. The house wasn't that large, making her disappearance even more perplexing.  Lisa had only recently moved into the home that she bought from her great aunt shortly before her death and she hasn't even moved out all of the existing furniture. Maybe Stella had gotten stuck somewhere behind the large wardrobe in the bedroom or she had climbed up into a cupboard in the laundry room.  Panic was starting to settle in as she moved the wardrobe further from the wall, where only a small child could have hidden before.  Suddenly, saw a small crack in the wall, and then realized it was a small door that she never knew was there.  The door was slightly ajar and she eventually moved the wardrobe enough to open the door and climb inside. What was this place?  The entrance opened up to reveal a small room that Lisa never knew existed!  It was full of treasure, gold bars and jewels.  Stella sat in the middle of the room quietly playing with the treasure, unaware of the immense value she was surrounded by.  Lisa had known her aunt was a secretive woman but this was an incredible find and would change her life forever.  Stella's visit was the good luck charm she needed to unlock this bounty and she would be forever grateful to the little girl!  Time to call her brother-in-law to thank him for letting Stella visit.", "category": "IT"}, {"instruction": "Please describe  what is oil and give me a list of it\u2019s applications.", "input": "An oil is any nonpolar chemical substance that is composed primarily of hydrocarbons and is hydrophobic (does not mix with water) & lipophilic (mixes with other oils). Oils are usually flammable and surface active. Most oils are unsaturated lipids that are liquid at room temperature.\n\nThe general definition of oil includes classes of chemical compounds that may be otherwise unrelated in structure, properties, and uses. Oils may be animal, vegetable, or petrochemical in origin, and may be volatile or non-volatile.[1] They are used for food (e.g., olive oil), fuel (e.g., heating oil), medical purposes (e.g., mineral oil), lubrication (e.g. motor oil), and the manufacture of many types of paints, plastics, and other materials. Specially prepared oils are used in some religious ceremonies and rituals as purifying agents.", "output": "An oil is a chemical substance that is composed primarily of hydrocarbons and may be animal, vegetable or petrochemical in origin.\nOil is used in a wide range of applications and is essential to everyday human life. These are:\nCooking - edible vegetable and animal oils are used for various purposes in cooking and food preparation\nCosmetics - most facial cleansers, lotions and hair care products contain molecules that come from mineral and vegetable oils\nFuel - crude oil is refined and converted to diesel, gasoline or jet fuel to power cars, trucks and planes\nHeating - petrochemical oil is used for heating\nPainting - oil is used as a supporting medium for paints\nLubrication - oils are used in various engineering purposes as they do not easily adhere to other substance which makes them useful as lubricants\nReligion - oil has been used throughout history as a religious medium. It is often considered a spiritually purifying agent and is used to anointing purposes\nHealth - oils holds lots of fats and medical properties, for example fish oil holds the omega-3 fatty acid which helps with inflammation and reduces fat in the bloodstream", "category": "IT"}, {"instruction": "List 6 different types of rain in Seattle", "input": "", "output": "1. Mist\n2. Drizzle\n3. Sleet\n4. Downpour\n5. Freezing Rain\n6. Sun Shower", "category": "IT"}, {"instruction": "What is investment banking?", "input": "", "output": "Investment banking pertains to certain activities of a financial services company or a corporate division that consist in advisory-based financial transactions on behalf of individuals, corporations, and governments. Traditionally associated with corporate finance, such a bank might assist in raising financial capital by underwriting or acting as the client's agent in the issuance of debt or equity securities. An investment bank may also assist companies involved in mergers and acquisitions (M&A) and provide ancillary services such as market making, trading of derivatives and equity securities, FICC services (fixed income instruments, currencies, and commodities) or research (macroeconomic, credit or equity research). Most investment banks maintain prime brokerage and asset management departments in conjunction with their investment research businesses. As an industry, it is broken up into the Bulge Bracket (upper tier), Middle Market (mid-level businesses), and boutique market (specialized businesses).\n\nUnlike commercial banks and retail banks, investment banks do not take deposits.", "category": "IT"}, {"instruction": "I started a new company named Greystone Inc. What do we do?", "input": "", "output": "- Investment banking for weird guys only\n- Aerospace consulting\n- Pasta and pasta accessory global logistics\n- Political lobbying for the mining industry", "category": "IT"}, {"instruction": "Tell me whether or not these foods are on EWG's dirty dozen list", "input": "", "output": "avocados, kiwi, pairs, blueberries, green beans, kale, cabbage", "category": "IT"}, {"instruction": "How much music theory knowledge is required to compose music?", "input": "", "output": "Technically speaking, very little music theory knowledge is \u201crequired\u201d to compose music. Music theory is, essentially, what musicians have learned over the course of several hundred years about how to write music that is interesting and sounds good. In other words, music theory is there to help you, not hold you back. \n\nWhen you learn music theory, what often happens is that you expand your broader understanding of music, which can be a very helpful safety net. The more music theory you know, the easier you\u2019ll be able to distinguish between the good ideas and the not-so-good. You need to know the rules before you can break them. You need to be able to write by the book before you throw the book away. If not, you run the risk of writing music that\u2019s not nearly as clever as you think it is, that tries to be daring and experimental but ends up just being dull and vanilla. And frankly, I just don\u2019t see the value in ignoring all the work that centuries worth of musicians have done into knowing how music works. Putting the time into learning and really understanding it can only make you a better musician and a better composer.\n\nSo, that\u2019s my answer. Learn at least as much theory as you need to know to understand the rules you want to break.", "category": "IT"}, {"instruction": "Categorize each of the following instruments as either string or keyboard: Guitar, Violin, piano, harmonium, cello, accordion, banjo", "input": "", "output": "Guitar - String\nViolin - String\npiano - keyboard\nharmonium - keyboard\ncello - string\naccordion - keyboard\nbanjo - string", "category": "IT"}, {"instruction": "Summarize in one sentence this article about a famous song.", "input": "\"I'm an Old Cowhand (From the Rio Grande)\" is a comic song written by Johnny Mercer for the Paramount Pictures release Rhythm on the Range and sung by its star, Bing Crosby. The Crosby commercial recording was made on July 17, 1936, with Jimmy Dorsey & his Orchestra for Decca Records.[1] It was a huge hit in 1936, reaching the No. 2 spot in the charts of the day,[2] and it greatly furthered Mercer's career. Crosby recorded the song again in 1954 for his album Bing: A Musical Autobiography.\nMembers of the Western Writers of America chose it as one of the Top 100 Western songs of all time.[3]\n\nBackground\nMercer and his wife were driving across the US en route to his hometown, Savannah, Georgia, after having apparently failed to succeed in Hollywood. Mercer was amused by the sight of cowboys, with spurs and ten-gallon hats, driving cars and trucks instead of riding horses. Singing cowboys were popular in films and on the radio then, and within 15 minutes, writing on the back of an envelope, Mercer transferred the image he was seeing into a song whose satirical lyrics vented some of his own bitter frustration with Hollywood.[4]\n\nThe lyrics, about a 20th-century cowboy who has little in common with the cowpunchers of old, have been included in some anthologies of light verse.", "output": "I'm an Old Cowhand (From the Rio Grande), written by Johnny Mercer and recorded by Bing Crosby, is popular song from 1936 that satirizes cowboy culture of the time.", "category": "IT"}, {"instruction": "What is the Maareech Advanced Torpedo Defence System (ATDS)?", "input": "Maareech Advanced Torpedo Defence System (ATDS) is a torpedo detection and countermeasure system used by the Indian Navy. The system offers a complete solution to detect and locate an incoming torpedo and to apply countermeasures to protect naval platform against torpedo attack. It was developed as a joint project of the Naval Physical and Oceanographic Laboratory (NPOL), Kochi and the Naval Science and Technological Laboratory (NSTL), Visakhapatnam.[1][2][3][4] Bharat Electronics is manufacturing it India.[5]", "output": "The Maareech Advanced Torpedo Defence System (ATDS is a torpedo detection and countermeasure system used by the Indian Navy.", "category": "IT"}, {"instruction": "Change the following passage to past tense", "input": "The episode focuses on two people: an elderly hospital doctor (Aleksander Bardini), who lives by himself in the ubiquitous Dekalog apartment block; and Dorota Geller (Krystyna Janda), a woman in her 30s who lives in the same building and is a violinist with the Philharmonic Orchestra.", "output": "The episode focused on two people: an elderly hospital doctor (Aleksander Bardini), who lived by himself in the ubiquitous Dekalog apartment block; and Dorota Geller (Krystyna Janda), a woman in her 30s who lived in the same building and was a violinist with the Philharmonic Orchestra.", "category": "IT"}, {"instruction": "What is the tallest mountain in the continental US?", "input": "", "output": "Mt. Whitney, which is 14500 ft,  is the tallest mountain in the continental US. Although if we were to include the state of Alaska, then the tallest mountain is actually Mt Denali, which is 20,320 ft. Mt. Whitney is actually only the 17th tallest mountain in all of the US, where the tallest 1-16 are all mountains in Alaska.", "category": "IT"}, {"instruction": "Who is Shoji Hashimoto?", "input": "Shoji Hashimoto (\u6a4b\u672c \u660c\u4e8c, Hashimoto Sh\u014dji, April 18, 1935 \u2013 December 2, 2009) was a professional Go player.", "output": "Shoji Hashimoto (\u6a4b\u672c \u660c\u4e8c, Hashimoto Sh\u014dji, April 18, 1935 \u2013 December 2, 2009) was a professional Go player.\nHashimoto turned pro in 1947 when he was just 12. It took him only 11 years to reach 9p. He learned Go from his father Hashimoto Kunisabur\u014d and his disciples include Takahara Sh\u016bji, Moriyama Naoki, Oda Hiromitsu, Okahashi Hirotada, and Hayashi K\u014dz\u014d. He was a member of the Kansai Ki-in.", "category": "IT"}, {"instruction": "What are some of the best comedy movies of the 1980's?", "input": "", "output": "Some of the best movies released in the 1980's are The Breakfast Club, The Goonies, Sixteen Candles, Ghostbusters and Back to the Future.", "category": "IT"}, {"instruction": "In golf what do the Americans call an albatross", "input": "", "output": "Double Eagle", "category": "IT"}, {"instruction": "What are common ingredients of a full english breakfast?", "input": "", "output": "Bacon, eggs, sausages, beans, toast, mushrooms, tomatoes. Some people also include black pudding and hash browns.\nEggs are commonly fried or scrambled.", "category": "IT"}, {"instruction": "Plan for a three day road trip for May long weekend from Westfield, New Jersey", "input": "", "output": "May 26: Drive to Montreal from Westfield, NJ. Time taken  6 hrs. Stay there overnight\nMay 27:  have a quick breakfast..checkout and drive to Mount Tremblant. Time: 90 minutes\nMay 27: Hike Grand Brule ( red path) on the way up and green path on the way down\nMay 27: Stroll around the Tremblant village\nMay 28: Drive to Quebec City. Time taken: 4 hrs\nMay 28: Explore the city, aquarium and go for wildlife watching\nMay 29: Drive to Montreal. Spend time exploring the city\nMay 30: Drive back to Westfield, New Jersey", "category": "IT"}, {"instruction": "How do you operate a car with a manual transmission?", "input": "", "output": "Through a combination of a shifter and three pedals: gas, brake, and clutch. Press down the clutch pedal with one foot, and the brake with your other foot first and then turn on the engine of the car. It is recommended to shift to neutral immediately after turning on your car and prior to departing. To shift between one of the engaged gears, typically marked 1, 2, 3, 4, 5 N (for neutral) and R (for reverse), press down on the clutch all the way to the floor and move the shifter to the desired location. Once the car is on and you're in neutral if you want to move forward, press and hold the clutch pedal to the floor and move the shifter to the \"1\" position. Slowly disengage the clutch pedal partially, and while disengaging slowly start to press down on the gas pedal. After gradually pressing more on the gas pedal, slowly remove your foot from the clutch entirely. This will start you in forward motion, and you will be restricted to the speed limit of 1st gear. You can track this limit through the RPM (revolutions per minute) gauge on the dashboard of your car. Typically you want to keep the RPMs between 1500-4000. If the RPMs start to decrease to 1500-2000 that is a sign you want to shift from a higher gear to a lower gear (i.e. 2nd gear to 1st gear), and as the RPMs increase to 4000, that is an indication you want to shift to a higher gear (i.e. 2nd gear to 3rd gear).", "category": "IT"}, {"instruction": "What is the Research Collaboratory for Structural Bioinformatics Protein Data Bank (RCSB PDB)?", "input": "", "output": "The Research Collaboratory for Structural Bioinformatics Protein Data Bank (RCSB PDB) is a database that provides a wealth of information about the 3D structures of proteins, nucleic acids, and other macromolecules. The database contains experimentally determined atomic coordinates for a large number of macromolecules, which can be used to study their structures, functions, and interactions. The RCSB PDB is widely used in genomics research and drug discovery, as it provides a valuable resource for understanding the structural basis of many biological processes and for designing new drugs that target specific macromolecules.\n\nIn addition to the atomic coordinates, the RCSB PDB contains a wealth of additional information about each macromolecule, including experimental methods used for structure determination, citations to relevant scientific literature, and information about biological function, sequence, and homology. The database also provides a variety of tools and resources for visualizing, analyzing, and downloading structural data, including a web-based viewer that allows users to interactively explore the 3D structures of macromolecules.", "category": "IT"}, {"instruction": "What are 5 potential uses for an empty La Croix can?", "input": "", "output": "1. Make your bike sound like it has an engine by wrapping the can around the back tire.\n2. A percussion instrument to play along with friends in a jam session.  You could just crinkle it, hit it with a pen, or fill it with sand or debris and shake it.  \n3. A baking tool.  You can used the bottom of the can to stamp out perfectly circle, uniform cookies from a rolled-out sheet of cookie dough.\n4. A field razor.  Tear the can carefully to create an effective cutting device for emergency use.\n5. A make shift ball to throw around with friends at the park. An empty can could be a fun projectile to use in a friendly game of 3 Flies Up.", "category": "IT"}, {"instruction": "What is the name of the Winslow's nerdy next-door neighbor on the TV show \"Family Matters\"?", "input": "", "output": "Steve Urkel", "category": "IT"}, {"instruction": "Why are so many US Hollywood films made in the state of Georgia?", "input": "", "output": "While film in the United States as an audience artform started in New York it moved to Los Angeles for the stated reason of longer and sunnier days.  Another part of the story was a patent dispute in 1898 between Thomas Edison and his patent for the Kinetograph.  Edison stated that he effectively had a say in how films were made and wanted royalties for their use.  Moving from New York near where Edison was based to Los Angeles was a simple way to grow the industry and distance themselves from a patent war.  \n\nThis mobility at the start of the modern film era due to costs continued through the 1960's and 1970's with westerns being shot in Spain.  The 1980's and 1990's continued this trend primarily shooting in Canada or Mexico.  At the turn of the century state legislators in the United States started provided steep tax rebates.  The practical outworking of this is studios are encouraged to hire local talent and use local services when producing their film.  The ratios for these rebates is fairly complicated and have created a new industry of tax professionals serving the film industry.\n\nSo then why Georgia?  Georgia currently provides one of the highest incentive structures at 20% with minimal restrictions on talent and a very low minimum budget of $500,000.", "category": "IT"}, {"instruction": "How many managers have Arsenal had?", "input": "There have been twenty permanent and eight caretaker managers of Arsenal since 1897; Stewart Houston has managed the club in two separate spells as caretaker. The most successful person to manage Arsenal is Ars\u00e8ne Wenger, who won three Premier League titles, seven FA Cups and seven Community Shields between 1996 and 2018. Wenger is the club's longest-serving manager; he surpassed George Allison's record of 13 years in October 2009. Two Arsenal managers have died in the job \u2013 Herbert Chapman and Tom Whittaker.", "output": "Arsenal have had twenty permanent and eight caretake managers.", "category": "IT"}, {"instruction": "What is SVM?", "input": "In machine learning, support vector machines (SVMs, also support vector networks[1]) are supervised learning models with associated learning algorithms that analyze data for classification and regression analysis. Developed at AT&T Bell Laboratories by Vladimir Vapnik with colleagues (Boser et al., 1992, Guyon et al., 1993, Cortes and Vapnik, 1995,[1] Vapnik et al., 1997[citation needed]) SVMs are one of the most robust prediction methods, being based on statistical learning frameworks or VC theory proposed by Vapnik (1982, 1995) and Chervonenkis (1974). Given a set of training examples, each marked as belonging to one of two categories, an SVM training algorithm builds a model that assigns new examples to one category or the other, making it a non-probabilistic binary linear classifier (although methods such as Platt scaling exist to use SVM in a probabilistic classification setting). SVM maps training examples to points in space so as to maximise the width of the gap between the two categories. New examples are then mapped into that same space and predicted to belong to a category based on which side of the gap they fall.\n\nIn addition to performing linear classification, SVMs can efficiently perform a non-linear classification using what is called the kernel trick, implicitly mapping their inputs into high-dimensional feature spaces.\n\nThe support vector clustering[2] algorithm, created by Hava Siegelmann and Vladimir Vapnik, applies the statistics of support vectors, developed in the support vector machines algorithm, to categorize unlabeled data.[citation needed] These data sets require unsupervised learning approaches, which attempt to find natural clustering of the data to groups and, then, to map new data according to these clusters.", "output": "SVM stands for \"\"support vector machine\". It is a machine learning model for supervised learning tasks. It was popular in the 1990s and early 2000s, before deep learning take off. The classic use case is binary classification, but its extension can also do multi-label classification as we as regression. Kernel methods greatly enhanced SVM's capability to perform non-linear machine learning tasks.", "category": "IT"}, {"instruction": "What is the current capital of Japan?", "input": "Tokyo (/\u02c8to\u028akio\u028a/;[7] Japanese: \u6771\u4eac, T\u014dky\u014d, [to\u02d0k\u02b2o\u02d0] (listen)), officially the Tokyo Metropolis (\u6771\u4eac\u90fd, T\u014dky\u014d-to), is the capital and most populous city of Japan.[8] Formerly known as Edo, its metropolitan area (13,452 square kilometers or 5,194 square miles) is the most populous in the world, with an estimated 37.468 million residents as of 2018;[9] the city proper has a population of 13.99 million people.[4] Located at the head of Tokyo Bay, the prefecture forms part of the Kant\u014d region on the central coast of Honshu, Japan's largest island. Tokyo serves as Japan's economic center and is the seat of both the Japanese government and the Emperor of Japan.", "output": "Tokyo is the current capital of Japan.", "category": "IT"}, {"instruction": "Give me a bulleted list of the 5 highest mountains in the world and their respective heights in meters", "input": "", "output": "* Mount Everest. Height: 8,849 meters\n* K2. Height: 8,611 meters\n* Kangchenjunga. Height: 8,586 meters\n* Lhotse. Height: 8,516 meters\n* Makalu. Height: 8,485 meters", "category": "IT"}, {"instruction": "Classify the following as either dark-colored beers or light colored beers: porter, pilsner, stout, amber, lager", "input": "", "output": "Dark-colored beers: porter, stout, amber\nLight-colored beers: pilsner, lager", "category": "IT"}, {"instruction": "If we were playing a game where we had to identify things that can be found inside a house, which of these would we call out: car, chair, table, park, cloud, microwave.", "input": "", "output": "Inside a house you can find a chair, a table and a microwave. Cars, clouds and parks are found outside of houses.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Samphor, Viola toeria", "input": "", "output": "Viola toeria is string, Samphor is percussion.", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Kpanlogo, Shamisen", "input": "", "output": "Shamisen is string, Kpanlogo is percussion.", "category": "IT"}, {"instruction": "Why do potato chip bags become stale after opening?", "input": "", "output": "Potato chip bags are filled with nitrogen! Many consumers think the chip companies are out there to get your money by filling three quarters of your bag with air, but it\u2019s actually nitrogen to keep your chips fresh. This is why once you open the bag, you should finish the chips as soon as possible. There, now you have a reason to finish the whole bag of chips in one go without feeling guilty.", "category": "IT"}, {"instruction": "Classify each of the following as a primary color or a secondary color", "input": "", "output": "blue, yellow, green, red, purple, orange", "category": "IT"}, {"instruction": "Where are the British Virgin Islands (BVI) and which islands are a part of the BVI?", "input": "The British Virgin Islands (BVI), officially the Virgin Islands, are a British Overseas Territory in the Caribbean, to the east of Puerto Rico and the US Virgin Islands and north-west of Anguilla. The islands are geographically part of the Virgin Islands archipelago and are located in the Leeward Islands of the Lesser Antilles and part of the West Indies.\n\nThe British Virgin Islands consist of the main islands of Tortola, Virgin Gorda, Anegada and Jost Van Dyke, along with more than 50 other smaller islands and cays. About 16 of the islands are inhabited. The capital, Road Town, is on Tortola, the largest island, which is about 20 km (12 mi) long and 5 km (3 mi) wide. The islands had a population of 28,054 at the 2010 Census, of whom 23,491 lived on Tortola; current estimates put the population at 35,802 (July 2018).", "output": "The British Virgin Islands (BVI), officially the Virgin Islands, are a British Overseas Territory in the Caribbean, to the east of Puerto Rico and the US Virgin Islands and north-west of Anguilla. The islands are geographically part of the Virgin Islands archipelago and are located in the Leeward Islands of the Lesser Antilles and part of the West Indies.\n\nThe British Virgin Islands consist of the main islands of Tortola, Virgin Gorda, Anegada and Jost Van Dyke, along with more than 50 other smaller islands and cays.", "category": "IT"}, {"instruction": "Does \"outbreeding\" or \"inbreeding\" benefit the offspring more?", "input": "Exogamy often results in two individuals that are not closely genetically related marrying each other; that is, outbreeding as opposed to inbreeding. In moderation, this benefits the offspring as it reduces the risk of the offspring inheriting two copies of a defective gene. Increasing the genetic diversity of the offspring improves the chances of offspring reproducing, up until the fourth-cousin level of relatedness; however, reproduction between individuals on the fourth-cousin level of relatedness decreases evolutionarily fitness.", "output": "\"Outbreeding\" is more beneficial to the offspring as it reduces the risk of inheriting defective genes, increasing the offspring's ability to reproduce.", "category": "IT"}, {"instruction": "What is the future for human?", "input": "", "output": "This is a very wide open question. It could be two directions. One direction is that human would just disappear like the dinosaur.  One direction is that human would become a species like a god. For the first direction, it may be caused by many situations. e.g. Nuclear war from WW3, extreme climate change. For the other direction, reproduced energy is ready, all cancers can be cured, everything can be done with robot with AI, human life is unlimited.", "category": "IT"}, {"instruction": "Name some of the bravolebrities from Vanderpump Rules", "input": "", "output": "James Kennedy, Katie Maloney, Raquel Leviss, Tom Sandoval, Ariana Madix, Tom Schwartz and Lala Kent", "category": "IT"}, {"instruction": "Name some famous rock bands from the 1960s", "input": "", "output": "The 1960s had a number of famous rock bands including The Beatles, The Beach Boys, The Doors, The Rolling Stones, The Who, Led Zeppelin, The Grateful Dead, Pink Floyd, and many more.", "category": "IT"}, {"instruction": "Who is Muhammad Ejaz Shafi", "input": "Muhammad Ejaz Shafi is a Pakistani politician who was a Member of the Provincial Assembly of the Punjab, from 2002 to May 2018.\n\nEarly life and education\nHe was born on 1 May 1969 in Khanpur.[1]\n\nHe has the degree of the Bachelor of Arts.[1]\n\nPolitical career\nHe was elected to the Provincial Assembly of the Punjab as a candidate of Pakistan Muslim League (Q) (PML-Q) from Constituency PP-290 (Rahimyar Khan-VI) in 2002 Pakistani general election. He received 22,531 votes and defeated a candidate of Pakistan Awami Tehrik.[2]\n\nHe was re-elected to the Provincial Assembly of the Punjab as a candidate of PML-Q from Constituency PP-290 (Rahimyar Khan-VI) in 2008 Pakistani general election. He received 24,751 votes and defeated a candidate of Pakistan Peoples Party.[3]\n\nHe was re-elected to the Provincial Assembly of the Punjab as a candidate of Pakistan Muslim League (N) from Constituency PP-290 (Rahimyar Khan-VI) in 2013 Pakistani general election.[4][5]", "output": "Muhammad Ejaz Shafi is a Pakistani politician who was a Member of the Provincial Assembly of the Punjab, from 2002 to May 2018. He was born on 1 May 1969 in Khanpur.", "category": "IT"}, {"instruction": "Who invented the telephone?", "input": "", "output": "In 1876, Alexander Graham Bell was the first to obtain a United States patent for a device that produced a clearly intelligible replica of the human voice on a second device.\nA resolution passed by the United States House of Representatives on June 11, 2002 called for recognition of Antonio Meucci's work and contributions towards the invention of the telephone.", "category": "IT"}, {"instruction": "Who are the Smiths?", "input": "The Smiths were an English rock band formed in Manchester in 1982. They comprised the singer Morrissey, the guitarist Johnny Marr, the bassist Andy Rourke and the drummer Mike Joyce. Morrissey and Marr formed the band's songwriting partnership. They are regarded as one of the most important acts to emerge from the 1980s British independent music.", "output": "The Smiths were an English rock band from the 1980s. The lead singer was Morrissey. The other band members were: Johnny Marr on guitar, Andy Rourke on bass, and Mike Joyce on drums.", "category": "IT"}, {"instruction": "Give me five ways in which I can make my homebrew beer more interesting", "input": "", "output": "There are infinite ways to create interesting flavours, that are either personal favourites or attempt to replicate classic beers and beer styles. There are a number of factors that make up a beers flavour profile and part of the enjoyment brewing your own beer at home, is that you can play around with each of these to change the flavour and character of your homebrew beer. Here are five ways in which you can change your own homebrew recipe to add interesting flavours or alternatively you can alter an existing homebrew recipe shared by somebody else or a brewery.\n\n1. Use different hops\nThere is a huge variety of hops available to homebrewers and each of these can introduce its own particular flavour and aroma to your beer, ranging from pineapple and apricots, to pine trees and woods, to grapefruit pith and lemon zest. By using a different hop in your recipe either from the same family or from an entirely different family of hops, you can easily add interesting and often radical changes to the flavour profile of your beer. However, depending on when the hops are added in the brewing process, you can also increase/decrease the levels of bitterness of your beer, due to different hop varieties having different levels of alpha acids.\n\n2. Use a different yeast\nBesides fermenting the beer, yeast leave behind lots of interesting flavours and can give your homebrew it's own subtle character. For example, English yeast strains can add malty and sweet flavours, California yeast tends to create a clean and crisp beer, whilst saison yeast adds bright and fruity flavours to your beer.\n\n3. Use different grains\nChanging the amount of base malts can increase or decrease the alcohol in your finished beer. Trying swapping one base malt for another, like American pale malts for a British variety, and look for the subtle differences between them. You can also play around with the specialty grains, like using a slightly darker roast.\n\n4. Add fruit, spices or herbs\nFruits, spices, herbs, and other ingredients are a great way to add an entirely personal character to your homebrew. Anything from fresh strawberries and basil to vanilla beans and cardamom can really complement the other malty, hoppy flavours in a beer. \n\n5. Alter your water profile\nDifferent beer styles will typically be best achieved with a suitable water profile, with different levels of minerals to achieve the desired flavour profile. By adjusting the amounts of specific minerals found in your brewing water, beer can be made to taste fuller bodied, sweeter, drier, more bitter, or even sour.", "category": "IT"}, {"instruction": "How many Grammy Awards has Bad Bunny won?", "input": "", "output": "Bad Bunny has won 2 Grammy Awards and has been nominated for 6", "category": "IT"}, {"instruction": "What is an apple?", "input": "", "output": "An apple is an edible fruit produced by an apple tree. Apple trees are cultivated worldwide and are the most widely grown species in the genus Malus.", "category": "IT"}, {"instruction": "When was the first Reading railway station opened?", "input": "Reading railway station is a major transport hub in Reading, Berkshire, England. It is on the northern edge of the town centre, near the main retail and commercial areas and the River Thames, 36 miles (58 km) from London Paddington. The first Reading station was opened on 30 March 1840 as the temporary western terminus of the original line of the Great Western Railway (GWR). Reading is the ninth-busiest station in the UK outside London and the second busiest interchange station outside London with over 3.8 million passengers changing trains at the station annually.", "output": "The first Reading railway station was opened on the 30th of March, 1840.", "category": "IT"}, {"instruction": "What is a brown eared pheasant?", "input": "The brown eared pheasant (Crossoptilon mantchuricum) is a large, 96\u2013 to 100-cm-long, dark brown pheasant endemic to the mountain forests of northeastern China (Shanxi and nearby provinces). The species was first described by Robert Swinhoe in 1863. It has stiff white ear coverts behind the eyes, which look like a moustache. The crown is black with red bare facial skin and its tail of 22 elongated, white feathers is curved, loose and dark-tipped. Both sexes are similar in plumage.", "output": "The brown eared pheasant is a large dark brown pheasant native to the mountain forests of northeastern China. It has distinctive white ear covert behind the eyes that look like a moustache. It's crown is black with red bare facial skin, and it has a tail with long, white, curve, loose, dark-tipped feathers.", "category": "IT"}, {"instruction": "Which of these are rappers? Eminem, Michael Jackson, Rihanna, 50 Cent", "input": "", "output": "Eminem, 50 Cent", "category": "IT"}, {"instruction": "Is it true that Lewis Hamilton won the championship in his first F1 season?", "input": "Hamilton's first season in Formula One saw him partner two-time and defending World Champion Fernando Alonso. Hamilton is the first and, as of 2022, the only black driver to race in the series.[60][61][62] After finishing on the podium in his debut, Hamilton went on to set several records as he finished runner-up in the 2007 World Drivers' Championship to Kimi R\u00e4ikk\u00f6nen by one point, including those for the most consecutive podium finishes from debut (9), the joint most wins in a debut season (4) and the most points in a debut season (109). Throughout the season, Hamilton and Alonso were involved in a number of incidents which resulted in tensions between both drivers and the team, culminating in Alonso and McLaren terminating their contract by mutual consent in November. Following a successful first season at McLaren, Hamilton signed a multi-million-pound contract to stay with the team until 2012.[63]", "output": "Lewis Hamilton did not win the F1 world driver's championship in his rookie season in 2007. The title went to Kimi R\u00e4ikk\u00f6nen in the Ferrari team. Hamilton finished runner up, in second place, after a close battle with both Ferrari and his teammate Fernando Alonso.", "category": "IT"}, {"instruction": "What are some kinds of embroidery stitches for writing letters?", "input": "", "output": "Some embroidery stitches that can be used to embroider letters are the back stitch, the split stitch, the stem stitch, the chain stitch, the couching stitch, and the satin stitch.", "category": "IT"}, {"instruction": "What are the most common injuries in rowing?", "input": "Rowing is a low-impact sport with movement only in defined ranges, so that twist and sprain injuries are rare. However, the repetitive rowing action can put strain on knee joints, the spine and the tendons of the forearm, and inflammation of these are the most common rowing injuries.[52] If one rows with poor technique, especially rowing with a curved rather than straight back, other injuries may surface, including back pains and wrist injuries. Blisters occur for almost all rowers, especially in the beginning of one's rowing career, as every stroke puts pressure on the hands, though rowing frequently tends to harden hands and generate protective calluses. Holding the oars too tightly or making adjustments to technique may cause recurring or new blisters, as it is common to feather the blade. Another common injury is getting \"track bites\", thin cuts on the back of one's calf or thigh caused by contact with the seat tracks at either end of the stroke.[53]", "output": "The most common injuries in rowing are inflammation of the knees, spine and forearms. Oher common injuries also include hand blisters and track bites.", "category": "IT"}, {"instruction": "What is a kite?", "input": "", "output": "A kite is a toy that can be be purchased in a store or a specialty shop.  It is a craft that is lighter an air that is tied to a string that you can fly on wind currents.  The kite has wings that react against the air to create lift enabling it to fly.  You can fly a kite at a park or an open area, and you will want to make sure there are no power lines nearby to be safe when flying the kite.", "category": "IT"}, {"instruction": "Classify each of the following pieces of equipment according to the sport they are used for, either basketball, football, or soccer: shin guards, shooting sleeve, penalty flag, corner flag, kicking tee, and goalie gloves.", "input": "", "output": "The classification is as follows:\n- Soccer: goalie gloves, corner flag\n- Basketball: shooting sleeve\n- Football: penalty flag, kicking tee", "category": "IT"}, {"instruction": "Given this paragraph about Billie Eilish, tell me who produced her debut single, also tell me what is her chart-topping single?", "input": "Billie Eilish Pirate Baird O'Connell (/\u02c8a\u026al\u026a\u0283/ EYE-lish;[1] born December 18, 2001) is an American singer and songwriter. She first gained public attention in 2015 with her debut single \"Ocean Eyes\", written and produced by her brother Finneas O'Connell, with whom she collaborates on music and live shows. In 2017, she released her debut extended play (EP), titled Don't Smile at Me. Commercially successful, it reached the top 15 of record charts in numerous countries, including the US, UK, Canada, and Australia.\n\nEilish's first studio album, When We All Fall Asleep, Where Do We Go? (2019), debuted atop the US Billboard 200 and UK Albums Chart. It was one of the best-selling albums of the year, buoyed by the success of its fifth single \"Bad Guy\", Eilish's first number-one on the US Billboard Hot 100. This made her the first artist born in the 21st century to release a chart-topping single. The following year, Eilish performed the theme song \"No Time to Die\" for the James Bond film of the same name, which topped the UK Singles Chart and won the Academy Award for Best Original Song in 2022. Her subsequent singles \"Everything I Wanted\", \"My Future\", \"Therefore I Am\", and \"Your Power\" peaked in the top 10 in the US and UK. Her second studio album, Happier Than Ever (2021), topped charts in 25 countries.", "output": "Her brother Finneas O'Connell produced her debut single \"Ocean Eyes\", and her chart topping single is \"Bad Guy\"", "category": "IT"}, {"instruction": "What is a good way to get around without a car?", "input": "", "output": "If you live in a city you can access public transport such as buses and trains. You can also walk, use a bicycle, or electric scooter to get around.", "category": "IT"}, {"instruction": "Identify which animal species is alive or extinct: Palaeophis, Giant Tortoise", "input": "", "output": "Giant Tortoise is alive, Palaeophis is extinct.", "category": "IT"}, {"instruction": "Why is Santa Cruz, California a great place to live?", "input": "", "output": "Santa Cruz, California has one of the best climates in the continental U.S. \u2013 being close to the Pacific Ocean, temperatures stay warmer in the winters and cooler in the summers, but without the dreaded fog that nearby cities like San Francisco or Monterey experience. The small city is world-famous for surfing, and the relaxed vibe that comes with it. Natural beauty is abundant, with the mountains and beach only a few miles apart.", "category": "IT"}, {"instruction": "Give me some ideas to manage my manager.", "input": "", "output": "1. Be honest\n2. Communicate\n3. Understand goals\n4. Stay calm\n5. Solve problems\n6. Be positive\n7. Share your knowledge\n8. Be caring\n9. Practice positive reinforcement\n10. Be a strong performer", "category": "IT"}, {"instruction": "Who was boxer John Baldwin", "input": "Known as \"The Mad\" Baldwin, he turned pro in 1970 and lost a decision to Marvin Hagler in 1975. In 1977 he took on Rocky Mosley Jr in the ill-fated U.S. Championship Tournament, but lost via K.O. In 1978 he lost a decision to Marvin Johnson, and retired a year later.", "output": "Born in Detroit, John Baldwin was a professional US boxer.  He fought in the Light-Middleweight category and won a bronze medal in the 1968 Olympics.   He turned pro in 1970, and lost a decision to Marvin Hagler in 1975.  He retired in 1979", "category": "IT"}, {"instruction": "What is HiFI?", "input": "High fidelity (often shortened to Hi-Fi or HiFi) is the high-quality reproduction of sound.[1] It is popular with audiophiles and home audio enthusiasts. Ideally, high-fidelity equipment has inaudible noise and distortion, and a flat (neutral, uncolored) frequency response within the human hearing range.[2]\n\nHigh fidelity contrasts with the lower-quality \u201clo-fi\u201d sound produced by inexpensive audio equipment, AM radio, or the inferior quality of sound reproduction that can be heard in recordings made until the late 1940s.", "output": "Bell Laboratories began experimenting with a range of recording techniques in the early 1930s. Performances by Leopold Stokowski and the Philadelphia Orchestra were recorded in 1931 and 1932 using telephone lines between the Academy of Music in Philadelphia and the Bell labs in New Jersey. Some multitrack recordings were made on optical sound film, which led to new advances used primarily by MGM (as early as 1937) and Twentieth Century Fox Film Corporation (as early as 1941). RCA Victor began recording performances by several orchestras using optical sound around 1941, resulting in higher-fidelity masters for 78-rpm discs. During the 1930s, Avery Fisher, an amateur violinist, began experimenting with audio design and acoustics. He wanted to make a radio that would sound like he was listening to a live orchestra\u2014that would achieve high fidelity to the original sound. After World War II, Harry F. Olson conducted an experiment whereby test subjects listened to a live orchestra through a hidden variable acoustic filter. The results proved that listeners preferred high-fidelity reproduction, once the noise and distortion introduced by early sound equipment was removed.[citation needed]\n\nBeginning in 1948, several innovations created the conditions that made major improvements of home-audio quality possible:\n\nReel-to-reel audio tape recording, based on technology taken from Germany after WWII, helped musical artists such as Bing Crosby make and distribute recordings with better fidelity.\nThe advent of the 33\u2153 rpm Long Play (LP) microgroove vinyl record, with lower surface noise and quantitatively specified equalization curves as well as noise-reduction and dynamic range systems. Classical music fans, who were opinion leaders in the audio market, quickly adopted LPs because, unlike with older records, most classical works would fit on a single LP.\nHigher quality turntables, with more responsive needles\nFM radio, with wider audio bandwidth and less susceptibility to signal interference and fading than AM radio.\nBetter amplifier designs, with more attention to frequency response and much higher power output capability, reproducing audio without perceptible distortion.[3]\nNew loudspeaker designs, including acoustic suspension, developed by Edgar Villchur and Henry Kloss with improved bass frequency response.\nIn the 1950s, audio manufacturers employed the phrase high fidelity as a marketing term to describe records and equipment intended to provide faithful sound reproduction. Many consumers found the difference in quality compared to the then-standard AM radios and 78-rpm records readily apparent and bought high-fidelity phonographs and 33\u2153 LPs such as RCA's New Orthophonics and London's FFRR (Full Frequency Range Recording, a UK Decca system). Audiophiles paid attention to technical characteristics and bought individual components, such as separate turntables, radio tuners, preamplifiers, power amplifiers and loudspeakers. Some enthusiasts even assembled their own loudspeaker systems. With the advent of integrated multi-speaker console systems in the 1950s, hi-fi became a generic term for home sound equipment, to some extent displacing phonograph and record player.\n\nIn the late 1950s and early 1960s, the development of stereophonic equipment and recordings led to the next wave of home-audio improvement, and in common parlance stereo displaced hi-fi. Records were now played on a stereo. In the world of the audiophile, however, the concept of high fidelity continued to refer to the goal of highly accurate sound reproduction and to the technological resources available for approaching that goal. This period is regarded as the \"Golden Age of Hi-Fi\", when vacuum tube equipment manufacturers of the time produced many models considered superior by modern audiophiles, and just before solid state (transistorized) equipment was introduced to the market, subsequently replacing tube equipment as the mainstream technology.\n\nIn the 1960s, the FTC with the help of the audio manufacturers came up with a definition to identify high fidelity equipment so that the manufacturers could clearly state if they meet the requirements and reduce misleading advertisements.[4]\n\nThe metal\u2013oxide\u2013semiconductor field-effect transistor (MOSFET) was adapted into a power MOSFET for audio by Jun-ichi Nishizawa at Tohoku University in 1974. Power MOSFETs were soon manufactured by Yamaha for their hi-fi audio amplifiers. JVC, Pioneer Corporation, Sony and Toshiba also began manufacturing amplifiers with power MOSFETs in 1974.[5] In 1977, Hitachi introduced the LDMOS (lateral diffused MOS), a type of power MOSFET. Hitachi was the only LDMOS manufacturer between 1977 and 1983, during which time LDMOS was used in audio power amplifiers from manufacturers such as HH Electronics (V-series) and Ashly Audio, and were used for music and public address systems.[5] Class-D amplifiers became successful in the mid-1980s when low-cost, fast-switching MOSFETs were made available.[6] Many transistor amps use MOSFET devices in their power sections, because their distortion curve is more tube-like.[7]\n\nA popular type of system for reproducing music beginning in the 1970s was the integrated music centre\u2014which combined a phonograph turntable, AM-FM radio tuner, tape player, preamplifier, and power amplifier in one package, often sold with its own separate, detachable or integrated speakers. These systems advertised their simplicity. The consumer did not have to select and assemble individual components or be familiar with impedance and power ratings. Purists generally avoid referring to these systems as high fidelity, though some are capable of very good quality sound reproduction.\n\nAudiophiles in the 1970s and 1980s preferred to buy each component separately. That way, they could choose models of each component with the specifications that they desired. In the 1980s, a number of audiophile magazines became available, offering reviews of components and articles on how to choose and test speakers, amplifiers, and other components.\n\nListening tests\nSee also: Codec listening test\nListening tests are used by hi-fi manufacturers, audiophile magazines, and audio engineering researchers and scientists. If a listening test is done in such a way that the listener who is assessing the sound quality of a component or recording can see the components that are being used for the test (e.g., the same musical piece listened to through a tube power amplifier and a solid-state amplifier), then it is possible that the listener's pre-existing biases towards or against certain components or brands could affect their judgment. To respond to this issue, researchers began to use blind tests, in which listeners cannot see the components being tested. A commonly used variant of this test is the ABX test. A subject is presented with two known samples (sample A, the reference, and sample B, an alternative), and one unknown sample X, for three samples total. X is randomly selected from A and B, and the subject identifies X as being either A or B. Although there is no way to prove that a certain methodology is transparent,[8] a properly conducted double-blind test can prove that a method is not transparent.\n\nBlind tests are sometimes used as part of attempts to ascertain whether certain audio components (such as expensive, exotic cables) have any subjectively perceivable effect on sound quality. Data gleaned from these blind tests is not accepted by some audiophile magazines such as Stereophile and The Absolute Sound in their evaluations of audio equipment. John Atkinson, current editor of Stereophile, stated that he once purchased a solid-state amplifier, the Quad 405, in 1978 after seeing the results from blind tests, but came to realize months later that \"the magic was gone\" until he replaced it with a tube amp.[9] Robert Harley of The Absolute Sound wrote, in 2008, that: \"...blind listening tests fundamentally distort the listening process and are worthless in determining the audibility of a certain phenomenon.\"[10]\n\nDoug Schneider, editor of the online Soundstage network, refuted this position with two editorials in 2009.[11][12] He stated: \"Blind tests are at the core of the decades' worth of research into loudspeaker design done at Canada's National Research Council (NRC). The NRC researchers knew that for their result to be credible within the scientific community and to have the most meaningful results, they had to eliminate bias, and blind testing was the only way to do so.\" Many Canadian companies such as Axiom, Energy, Mirage, Paradigm, PSB, and Revel use blind testing extensively in designing their loudspeakers. Audio professional Dr. Sean Olive of Harman International shares this view.[13]", "category": "IT"}, {"instruction": "What was Angie Thomas's first published novel?", "input": "", "output": "\"The Hate U Give\" which was released in 2017 and debuted at number one on The New York Times Best Seller list.", "category": "IT"}, {"instruction": "Who scored first in Austin FC's first victory in a home game in the 2021 MLS season?", "input": "Austin FC played their first MLS match against LAFC at Banc of California Stadium on April 17, 2021, losing 0\u20132. The club secured its first victory the following week against the Colorado Rapids, winning 3\u20131. Diego Fag\u00fandez scored the club's first goal and the following two were scored by the club's first Designated Player, Cecilio Dominguez.[22] Their home opener was held on June 19, 2021, against the San Jose Earthquakes, a match which ended in a scoreless draw.[23] The team secured its first ever home victory on July 1, 2021, defeating the Portland Timbers 4\u20131. Jon Gallagher scored the team's first home goal and the first MLS goal at Q2 Stadium.[24]", "output": "Jon Gallagher scored the first goal in Austin FC's first win at home, over the Portland Timbers.", "category": "IT"}, {"instruction": "What are some of the common elements of visual design?", "input": "Design elements are the basic units of any visual design which form its structure and convey visual messages. Painter and design theorist Maitland E. Graves (1902-1978), who attempted to gestate the fundamental principles of aesthetic order in visual design,[3] in his book, The Art of Color and Design (1941), defined the elements of design as line, direction, shape, size, texture, value, and color, concluding that \"these elements are the materials from which all designs are built.\"", "output": "Line, shape, size, texture, color and direction are some of the common visual design elements.", "category": "IT"}, {"instruction": "What type of cheeses can you use to make a grilled cheese sandwich.", "input": "A grilled cheese sandwich is made by placing a cheese filling, often cheddar or American cheese, between two slices of bread, which is then heated until the bread browns and the cheese melts. A layer of butter or mayonnaise may be added to the outside of the bread for additional flavor and texture. Alternatives may include additional ingredients, such as meat, peppers, tomatoes, or onions.[3] Methods for heating the sandwich include cooking on a griddle, fried in a pan, or using a panini grill or sandwich toaster, the latter method more common in the United Kingdom, where the sandwiches are normally called \"toasted sandwiches\" or \"toasties\", in Australia, where they are called \"jaffles\" or \"toasted sandwiches\", and South Africa, where they are called \u201csnackwiches\u201d. Other methods include baking in an oven or toaster oven \u2014 or in a toasting bag in an electric toaster.", "output": "Common cheeses to make a grilled cheese are cheddar or American cheese, although you are not limited to those cheeses.  Depending on a persons preferences there are a large variety of cheeses that are well suited for a grilled cheese sandwich. Many people enjoy Swiss cheese, provolone, mozzarella cheese, brie, Monterey jack cheese, pepper jack cheese,  gouda, havarti, fontina and many others.", "category": "IT"}, {"instruction": "What is the tiny piece at the end of a shoelace called?", "input": "", "output": "An Aglet.", "category": "IT"}, {"instruction": "What links Brazil, Uruguay, Mozambique and Angola", "input": "", "output": "Colonies of Portugal", "category": "IT"}, {"instruction": "What the the effects of houseplants?", "input": "Houseplants do not have an appreciable effect on the concentration of volatile organic compounds (VOCs) in normal home environments: it would require between 10 and 1000 houseplants per square meter to achieve the same level of VOC removal as occurs from passive exchange between indoor and outdoor air. [41]\n\nThe idea that houseplants have an appreciable effect on indoor air quality is largely based on the Clean Air Study conducted by NASA in the 1980s.[41][42] The study tested plants in sealed chambers and with highly elevated levels of volatile organic compounds (specifically benzene, trichloroethylene and formaldehyde). It concluded that to the extent that houseplants improve air quality, the mechanism of action is microorganisms within the potting soil, rather than the plants themselves.[43][44][45]\n\nHouseplants do have a statistically significant effect on the concentrations of both carbon monoxide and carbon dioxide in normal indoor environments, reducing carbon dioxide levels by 10-25% and carbon monoxide levels by up to 90%. [46] The effect has been investigated by NASA for use in spacecraft.[47]\n\nPlants also appear to increase the number and diversity of bacteria in homes, while reducing fungal diversity.[48] They tend to increase humidity, reduce temperature swings, and reduce noise.[49]\n\nThere are also many claimed psychological and physiological benefits to having houseplants. A critical review of the experimental literature concluded \"The reviewed studies[50][51] suggest that indoor plants can provide psychological benefits such as stress-reduction and increased pain tolerance. However, they also showed substantial heterogeneity in methods and results. We therefore have strong reservations about general claims that indoor plants cause beneficial psychological changes. It appears that benefits are contingent on features of the context in which the indoor plants are encountered and on characteristics of the people encountering them.\"[52]", "output": "There are also many claimed psychological and physiological benefits to having houseplants. Houseplants do have a statistically significant effect on the concentrations of both carbon monoxide and carbon dioxide in normal indoor environments. \nPlants also appear to increase the number and diversity of bacteria in homes, while reducing fungal diversity.They tend to increase humidity, reduce temperature swings, and reduce noise. There are also many claimed psychological and physiological benefits to having houseplants. Indoor plants can provide psychological benefits such as stress-reduction and increased pain tolerance.", "category": "IT"}, {"instruction": "Who were the original 5 members of the Grateful Dead?", "input": "", "output": "The original 5 members of the Grateful Dead were Jerry Garcia, Bob Weir, Phil Lesh, Bill Kreutzmann, and Ron \"Pigpen\" McKernan", "category": "IT"}, {"instruction": "How is the The U.S. Naturalization Interview and test done?", "input": "", "output": "During your naturalization interview, a USCIS officer will ask you questions about your application and background. Unless you qualify for an exemption, you will also take a naturalization test which is made up of two components, an English and civics test.\n\nDuring the English test, you must demonstrate an understanding of the English language including the ability to read, write, and speak basic English. \nDuring the civics test, you will answer important questions about American government and history.", "category": "IT"}, {"instruction": "What is Magical Thinking?", "input": "Magical thinking, or superstitious thinking,[1] is the belief that unrelated events are causally connected despite the absence of any plausible causal link between them, particularly as a result of supernatural effects.[1][2][3] Examples include the idea that personal thoughts can influence the external world without acting on them, or that objects must be causally connected if they resemble each other or have come into contact with each other in the past.[1][2][4] Magical thinking is a type of fallacious thinking and is a common sour", "output": "Magical thinking is the belief that unrelated events are causally connected despite the absence of any plausible causal link between them.", "category": "IT"}, {"instruction": "List top 5 people with most silver medals in the olympics", "input": "", "output": "1. Larisa Latynina - 5 medals\n2. Nikolai Andrianov - 5 medals\n3. Edoardo Mangiarotti - 5 medals\n4. Ireen Wust - 5 medals\n5. Isabell Werth - 5 medals", "category": "IT"}, {"instruction": "Based on this paragraph, how many times has Joe Biden run for president and what characteristics make him unique among all past presidents?", "input": "Born in Scranton, Pennsylvania, Biden moved with his family to Delaware in 1953. He studied at the University of Delaware before earning his law degree from Syracuse University. He was elected to the New Castle County Council in 1970 and became the sixth-youngest senator in U.S. history after he was elected in 1972, at age 29. Biden was the chair or ranking member of the Senate Foreign Relations Committee for 12 years. He chaired the Senate Judiciary Committee from 1987 to 1995; drafted and led the effort to pass the Violent Crime Control and Law Enforcement Act and the Violence Against Women Act; and oversaw six U.S. Supreme Court confirmation hearings, including the contentious hearings for Robert Bork and Clarence Thomas. Biden ran unsuccessfully for the Democratic presidential nomination in 1988 and 2008. Barack Obama chose Biden as his running mate in the 2008 and 2012 presidential elections. Biden was a close counselor to Obama during his two terms as Obama's vice president. Biden and his running mate, Kamala Harris, defeated incumbents Donald Trump and Mike Pence in the 2020 presidential election. On January 20, 2021, he became the oldest president in U.S. history, the first to have a female vice president, and the first from Delaware. \nhttps://en.wikipedia.org/wiki/Joe_Biden", "output": "Based on this paragraph, Joe Biden has run for president three times, losing in 1988 and 2008 and eventually winning in 2020. As president, he is unique in three ways: the first to have a female vice president, and the first president from the state of Delaware.", "category": "IT"}, {"instruction": "What articles of clothes are often worn by people in summer months?", "input": "", "output": "In summer, when the weather is warmer, it is typical for people to wear shorts or skirts, light shirts, and sandals. People can also wear swimming suits with cover ups if they are somewhere where swimming is likely, such as a beach, pool, or water park.", "category": "IT"}, {"instruction": "Which Dutch actress played Xenia Onatopp in the James Bond movie GoldenEye?", "input": "", "output": "Dutch actress Marijke Janssen played Xenia Onatopp in the James Bond movie GoldenEye.", "category": "IT"}, {"instruction": "Which of the 10 largest earthquakes was the deadliest?", "input": "Largest Earthquakes ever recorded\nThe 10 largest magnitudes in recorded history\n1. Valdivia, Chile 22 May 1960 (magnitude 9.5)\nThis earthquake killed 1655 people, injured 3000 and displaced two million. It caused US$550 million damage in Chile, while the tsunami that it spawned caused deaths and damage as far away as Hawaii, Japan and the Philippines. The 'rupture zone' of the quake was more than 1000 km long. Two days after the initial quake, the nearby volcano Puyehue erupted, sending ash and steam up to 6 km into the atmosphere over a period of several weeks.\n\n2. Prince William Sound, Alaska 28 March 1964 (magnitude 9.2)\nCompared to the Chilean earthquake, this earthquake was less damaging: the resulting tsunami took 128 lives and caused overall US$311 million in damage. The earthquake was felt mainly over Alaska, as well as some places in Canada, while the tsunami created by it caused damage as far away as Hawaii. The most damage was sustained by the city of Anchorage, 120 km north-west of the epicentre. Shaking from the quake itself is reported to have lasted for three minutes.\n\n3. Sumatra, Indonesia 26 December 2004 (magnitude 9.1)\nIn terms of damage and loss of life, the scale of the disaster caused by the resulting Boxing Day Tsunami was enormous. In total, 227,900 people were killed or presumed dead, with around 1.7 million displaced over 14 countries in South Asia and East Africa. The epicentre was 250 km south-east of Band Aceh, Indonesia, at a depth of 30 km. Several days later on 28 December, a mud volcano began erupting near Baratang, Andamar Islands, which is thought to have been associated with the earthquake.\n\n4. Sendai, Japan 11 March 2011 (magnitude 9.0)\nSo far the official death toll stands at several thousand from the combined effect of the powerful earthquake, aftershocks and the tsunami. However, the total is expected to rise, with some estimates of a final toll of over 10,000. Economic impacts are expected to be huge, with the shutting down of nuclear reactors which many industries rely on for power.\n\n5. Kamchatka, Russia 4 November 1952 (magnitude 9.0)\nThis earthquake generated a tsunami that caused widespread damage in the Hawaiian Islands. Property damage was estimated at around US$1,000,000. Some reports describe waves of over 9 m high at Kaena Point, Oahu. A farmer on Oahu reported the loss of six cows to the tsunami, but no people were reported killed.\n\n6. Bio-bio, Chile 27 February 2010 (magnitude 8.8)\nThis earthquake and subsequent tsunami killed at least 521 people, with 56 missing and 12,000 injured. More than 800,000 people were displaced with a total of 1.8m people affected across Chile, where damage was estimated at US$30 billion. The epicentre was 335 km south-west of Santiago, at a depth of 35 km. A minor tsunami travelled across the Pacific causing damage to boats as far away as San Diego, California.\n\n7. Off the coast of Ecuador 31 January 1906 (magnitude 8.8)\nThis earthquake caused a tsunami that is reported to have killed between 500 and 1,500 in Ecuador and Colombia. The tsunami travelled as far north as San Francisco, on the west coast of the US, and west to Hawaii and Japan. The tsunami took roughly 12 hours to cross the Pacific to Hilo, Hawaii.\n\n8. Rat Islands, Alaska 2 April 1965 (magnitude 8.7)\nThe worst of the damage attributed to this earthquake was caused by a tsunami, reported to be about 10 m high on Shemya Island. The wave caused flooding on Amchitka Island, causing US$10,000 in property damage. No deaths or injuries were reported.\n\n9. Sumatra, Indonesia 28 March 2005 (magnitude 8.6)\nThis earthquake killed 1313, with over 400 people injured by the tsunami as far away as Sri Lanka. The epicentre was 205 km north-west of Sibolga, Sumatra, at a depth of 30 km. This region, also the site of the 2004 Boxing Day Tsunami, is particularly geologically active, with three of the 15 biggest known earthquakes having happened here.\n\n10. Assam - Tibet 15 August 1950 (magnitude 8.6)\nThis inland earthquake caused widespread damages to buildings as well as large landslides. 780 people were killed in eastern Tibet, with many villages and towns affected across Assam, China, Tibet and India. Oscillations to lake levels occurred as far away as Norway. The total death toll is likely to be higher, as no definitive total was ever estimated. While the earthquake itself is known as the Assam Earthquake, it is believed the epicentre may have been in Tibet.", "output": "The 2004 earthquake on Sumatra, Indonesia was the deadliest. It caused a tsunami that killed more than 200,000 people.", "category": "IT"}, {"instruction": "Give me some tips on how to train for a marathon.", "input": "", "output": "- Come up with a training plan\n- Plan for 3-5 months of training\n- Increase your daily mileage gradually\n- Increase your weekly mileage gradually\n- Have a mix of speedwork and endurance work\n- Include sessions to build strength\n- Stretch before and after your runs\n- Include rest days for recovery\n- Pay attention to nutrition and hydration\n- Pay attention to hydration\n- Taper 2 weeks before the marathon\n- Go for it, good luck on race day!", "category": "IT"}, {"instruction": "Extract the names of the cities and rank them in alphabetical order?", "input": "The United Kingdom is a constitutional monarchy and parliamentary democracy.[m][25] Its capital and largest city is London, the capital of England, a global city and financial centre with a population of over 14 million people. Edinburgh, Cardiff and Belfast are the national capitals of Scotland, Wales and Northern Ireland respectively.", "output": "The cities listed in alphabetical order are Belfast, Cardiff, Edinburgh and London.", "category": "IT"}, {"instruction": "Write a guide for how to catch a smallmouth bass.", "input": "", "output": "The smallmouth bass is a common freshwater fish, found in the rivers and lakes of North America. Its habitat stretches between northeastern Canada and a small range of waterways in Mexico. Fishermen of all ages enjoy catching the smallmouth bass, because of its propensity for jumping out of the water and trying to evade capture with vigor. You will find smallmouth enjoying shallower waters in the cool parts of the day, attracted to surface baits like imitation frogs, minnows, and spinnerbaits. As the day warms up, smallmouth retreat to cooler waters, and you might find them schooling near a drop-off or around a deep-water mound. Smallmouth are typically caught between June and October.\n\nNote: Please adhere to local fishing regulations to know when smallmouth bass are in season. Most jurisdictions require a license to fish and have limits on how many fish can be kept.", "category": "IT"}, {"instruction": "Which ones are metals and non metals: Copper, Hydrogen, Silver, Carbon, Gold, Nitrogen", "input": "", "output": "Metals: Copper, Silver, Gold\nNon Metals: Hydrogen, Carbon, Nitrogen", "category": "IT"}, {"instruction": "Write a funny and whimsical horoscope reading", "input": "", "output": "The stars say you should be patient, and that it can't last for ever.  They didn't say what they're talking about, though", "category": "IT"}, {"instruction": "From the passage provided, extract the date when the 34th Wisconsin Infantry Regiment was organized.", "input": "The 34th Wisconsin Infantry Regiment was a conscripted infantry regiment that served in the Union Army during the American Civil War. The 34th Wisconsin Infantry was composed of men drafted by state authorities under General Order No. 94. The regiment was organized at Madison, Wisconsin, and mustered into Federal service December 31, 1862.", "output": "The 34th Wisconsin Infantry Regiment was organized on December 31, 1862.", "category": "IT"}, {"instruction": "How did Robert Baratheon die?", "input": "", "output": "King Robert I Baratheon was on a boar hunting trip when he was gored by a boar. Lancel Lannister, one of his squires, provided the king with fortified wine, to ensure the king was overly drunk and would make a mistake. Had he not died from the boar, the king would have been deliberately knocked off his horse or shot with an arrow, according to Lord Varys. The king's death was arranged by his wife, Cersei Lannister, so he would not learn the truth about who actually sired his children he shared with Cersei.", "category": "IT"}, {"instruction": "For the Zodiac sign Aries, Share some information from the given text.", "input": "Aries (\u2648\ufe0e) (Greek: \u039a\u03c1\u03b9\u03cc\u03c2, romanized: Kri\u00f3s, Latin for \"ram\") is the first astrological sign in the zodiac, spanning the first 30 degrees of celestial longitude (0\u00b0\u2264 \u03bb <30\u00b0), and originates from the Aries constellation. Under the tropical zodiac, the Sun transits this sign from approximately March 21 to April 19 each year. This time duration is exactly the first month of the Solar Hijri calendar (Arabic Hamal/Persian Farvardin/Pashto Wray).", "output": "1.\tAries is the first astrological sign in the zodiac, spanned in the first 30 degrees of celestial longitude (0\u00b0\u2264 \u03bb <30\u00b0).\n2.\tAries is originated from the Aries constellation.\n3.\tThe Sun transits this sign from approximately March 21 to April 19 each year.\n4.\tThis time period is exactly the first month of the Solar Hijri calendar (Arabic Hamal/Persian Farvardin/Pashto Wray).", "category": "IT"}, {"instruction": "Without quoting from the text, can you summarise from wikipedia who Denis-Benjamin Viger was?", "input": "Denis-Benjamin Viger (French pronunciation: \u200b[d\u0259ni b\u025b\u0303\u0292am\u025b\u0303 vi\u0292e]; August 19, 1774 \u2013 February 13, 1861) was a 19th-century politician, lawyer, businessman in Lower Canada. He was a leader in the Patriote movement.\n\nViger was part of the militia in the early 19th century and then a captain in the War of 1812. He retired from the militia in 1824 with the rank of major.", "output": "Denis-Benjamin Viger was a Canadian 19th century politician, lawyer and businessman who lead the Patriote movement.", "category": "IT"}, {"instruction": "What is the best language in the world", "input": "", "output": "Bengali is the best language in the world Because it's very sweet to listen.", "category": "IT"}, {"instruction": "Tell me whether these are movies or film Directors: Sholay, Satyajit Ray, Mani Ratnam, Lagaan, Yash Chopra, Roja", "input": "", "output": "Sholay is a Bollywood movie \nSatyajit Ray was an Indian Film Director\nMani Ratnam is an Indian Film Director\nLagaan is a Bollywood movie\nYash Chopra was an film director\nRoja is a Bollywood Movie", "category": "IT"}, {"instruction": "How do you improve your basketball handles?", "input": "", "output": "One of the best ways to improve your basketball handles is to practice beyond dribbling. Rotating the ball around your head, body and legs is a great way to get a better feel for the ball all around your body. Once you can effortlessly move the ball around those three parts of your body, you can start experimenting with handling the ball between your legs in a figure-eight rotation. To further advance that skill, you can start the rotation from your head to your body, to between your legs and back up all in a single session.", "category": "IT"}, {"instruction": "What is the future trend of job industry", "input": "", "output": "More of cloud Machine learning AI security dive into these industries to be on top notch", "category": "IT"}, {"instruction": "How do I cast on a knitting project?", "input": "", "output": "Casting on is how to make the first row of stitches. Each method of casting on can look and feel slightly different (such as various levels of stretchiness and flexibility) so most knitters have their preferred cast on method. Many use the long-tail cast on method which can work for many projects.  First, measure the length of yarn that is about 4 times as long as the width of your project. For example, if the width of your project is 10 inches, measure out a 40 inch piece of yarn. Next, time a slip knot. Then, place the slip knot on your dominant hand\u2019s needle with the yarn tail closest to you (the tail is the length you measured out). Hold both strands of yarn with your non-dominant hand. Spread the two strands of yarn out with your thumb and forefinger, then bring the knitting needle in your right hand to the front of the tail of yarn draped over your thumb. Bring the needle back, up and through the loop toward your thumb loop, then push the needle back and under the forefinger loop, allowing the needle to catch the forefinger loop and allowing the thumb loop to fall off under the needle. That\u2019s your first cast on stitch. Repeat the steps for the total number of stitches you need.", "category": "IT"}, {"instruction": "Why do Filipinos like eating rice so much?", "input": "", "output": "Well, that has to do with the fact that the Filipino soil is ideal for rice cultivation. Also, given that rice is produced in abundance in the Phillipines, it becomes cheaper than other food staples. Therefore, rice easily became the most common dish in an ordinary Filipino household.\nOne can also say, that the neutral nature of rice flavour parries well with the Filipino traditional dishes like Adobo, Sinigang and Kare-Kare which are rich in flavour and welcome more neutral side dishes", "category": "IT"}, {"instruction": "Give me a bulleted list of the the first five books in the bible old testament?", "input": "", "output": "The first five books of the bible old testament are called the Pentateuch or the books of law\n1) The Book of Genesis - is an account of the creation of the world, the early history of humanity, and of Israel's ancestors and the origins of the Jewish people.\n2) The Book of Exodus - is the second book of the Bible. It narrates the story of the Exodus, in which the Israelites leave slavery in Biblical Egypt through the strength of Yahweh, who has chosen them as his people. \n3) The Book of Leviticus - The book has several main topics, some of which are the Jewish laws of sacrificing to God, and the work of the priests. These priests are sometimes known as Levites \n4) The Book of Numbers - is the culmination of the story of Israel's exodus from oppression in Egypt and their journey to take possession of the land God promised their fathers.\n5) The Book of Deuteronomy - is the covenant that binds Yahweh and Israel by oaths of fidelity and obedience. God will give Israel blessings of the land, fertility, and prosperity so long as Israel is faithful to God's teaching; disobedience will lead to curses and punishment.", "category": "IT"}, {"instruction": "According to the paragraph below, what is Generative AI?", "input": "A generative artificial intelligence or generative AI is a type of AI system capable of generating text, images, or other media in response to prompts.[1][2] Generative AI systems use generative models such as large language models to statistically sample new data based on the training data set that was used to create them.[3]", "output": "Generative Artificial Intelligence (AI) refers to AI systems that respond to user prompts to generate text, images and other media.", "category": "IT"}, {"instruction": "Which ones are programming languages, out of C, Java, Node.js, Python, HTML, BigData, Spark?", "input": "", "output": "Well, C, Java and Python are programming languages. \nWhile HTML is a language, it is a markup language and not a programming language. Node.js is actually a framework built on top of Javascript, so it can't be classified as a language. \nBigData is a broader term used for storing, processing and usage of large amounts of data. Spark is one of the most popular distributed data processing frameworks. Spark can be used from multiple languages.", "category": "IT"}, {"instruction": "What is Brdinje", "input": "Brdinje (pronounced [b\u0259\u027e\u02c8di\u02d0nj\u025b]) is a dispersed settlement in the hills southeast of Ravne na Koro\u0161kem in the Carinthia region in northern Slovenia", "output": "Brdinje (pronounced [b\u0259\u027e\u02c8di\u02d0nj\u025b]) is a dispersed settlement in the hills southeast of Ravne na Koro\u0161kem in the Carinthia region in northern Slovenia", "category": "IT"}, {"instruction": "What is Nando's?", "input": "", "output": "Nando's is a South African/Portuguese inspired chicken restaurant that has a number or restaurants around the UK.\nIt is piri piri inspired and specialises in grilled chicken.\nThe piri piri sauce is made from Birds Eye chillis from Mozambique which is basted across the grilled chicken.", "category": "IT"}, {"instruction": "What does Cisco specialize in, what technology markets do they address, and what are their most successful products?", "input": "Cisco Systems, Inc., commonly known as Cisco, is an American-based multinational digital communications technology conglomerate corporation headquartered in San Jose, California. Cisco develops, manufactures, and sells networking hardware, software, telecommunications equipment and other high-technology services and products. Cisco specializes in specific tech markets, such as the Internet of Things (IoT), domain security, videoconferencing, and energy management with leading products including Webex, OpenDNS, Jabber, Duo Security, and Jasper. Cisco is one of the largest technology companies in the world ranking 74 on the Fortune 100 with over $51 billion in revenue and nearly 80,000 employees.", "output": "Cisco develops, manufactures, and sells networking hardware, software, telecommunications equipment and other high-technology services and products. Cisco specializes in specific tech markets, such as the Internet of Things (IoT), domain security, videoconferencing, and energy management with leading products including Webex, OpenDNS, Jabber, Duo Security, and Jasper.", "category": "IT"}, {"instruction": "Sally has 2 chickens, 3 cows and 2 motorcycles. Doug has 6 monkeys, 12 pigs and 2 tractors. Amy has 1 car, 10 cows and 6 ducks. How many farm animals do Sally, Doug and Amy have in total?", "input": "", "output": "Chickens, cows, ducks and pigs are commonly considered to be farm animals because they are commonly raised in farms and are grown for human consumption. Meanwhile, monkeys are not considered to be farm animals because they often grow up in the wild and are not often consumed by humans. Cars, motorcycles and tractors are not living things so they are not farm animals. Sally, Doug and Amy have 2 + 3 + 12 + 10 + 6 = 33 farm animals in total.", "category": "IT"}, {"instruction": "Why is nitrogen gas used during the packaging of potato chips?", "input": "", "output": "The Brits call them \u201ccrisps\u201d for a reason. Three reasons at least for using 100% nitrogen:\n\nNitrogen contains no oxygen like air does which oxidizes the potatoes and promotes bacteria growth.\nNitrogen contains no water, which removes \u201ccrispness\u201d from the chips and promotes bacteria growth.\nNitrogen inflates the bag which protects the chips, but, honestly, that could be done with air which costs less than pure nitrogen. But we know the downsides of air, don\u2019t we?", "category": "IT"}, {"instruction": "What are the causes for Sensory processing disorder?", "input": "The exact cause of SPD is not known.However, it is known that the midbrain and brainstem regions of the central nervous system are early centers in the processing pathway for multisensory integration; these brain regions are involved in processes including coordination, attention, arousal, and autonomic function. After sensory information passes through these centers, it is then routed to brain regions responsible for emotions, memory, and higher level cognitive functions. Damage in any part of the brain involved in multisensory processing can cause difficulties in adequately processing stimuli in a functional way.", "output": "The exact cause of Sensory processing disorder is not known. However, it is known that the midbrain and brainstem regions of the central nervous system are early centers in the processing pathway for multisensory integration; these brain regions are involved in processes including coordination, attention, arousal, and autonomic function. After sensory information passes through these centers, it is then routed to brain regions responsible for emotions, memory, and higher level cognitive functions. Damage in any part of the brain involved in multisensory processing can cause difficulties in adequately processing stimuli in a functional way.", "category": "IT"}, {"instruction": "What is the greatest movie of all time?", "input": "", "output": "Determining the greatest movie of all time would depend on defining what is meant by \"greatest\". Opinions on what makes a movie \"great\" would be completely subjective and vary from person to person. Those opinions may be based on how funny, interesting or exciting a given movie is to a person, which in itself is also subject to individual preferences and personality. Some people might even base the criteria on achievements such as number of Oscars awards won, biggest box office record or popularity achieved. There's no way to answer this question in a definitive fashion.", "category": "IT"}, {"instruction": "What is cryptocurrency?", "input": "", "output": "Cryptocurrency is a currency that you can by with physical money and it is held as a digital currency.  It is not backed by the FDIC or insured, and there is a lot of risk when investing in cryptocurrency. Because it is not regulated you can see price fluctuations as high as 90% loss or gain in cryptocurrency.  It is also a decentralized digital currency.  Cryptocurrency can be a good way to send large amounts of money abroad without having to pay an institution fees to do this through a wire and its immediate.  It can be used to pay for certain goods and services too.", "category": "IT"}, {"instruction": "According to this text, when did Disney become a public company?", "input": "Disney is one of the biggest and best-known companies in the world, and has been ranked number 53 on the 2022 Fortune 500 list of biggest companies in the United States by revenue. Since its founding, the company has won 135 Academy Awards, 26 of which have been awarded to Walt. The company has been said to have produced some of the greatest films of all time, as well as revolutionizing the theme park industry. Disney has been criticized for supposed plagiarism, depicting racial stereotypes in the past, and both including and lacking LGBT-related elements in its films. The company, which has been public since 1940, trades on the New York Stock Exchange (NYSE) with ticker symbol DIS and has been a component of the Dow Jones Industrial Average since 1991. In August 2020, just under two-thirds of the stock was owned by large financial institutions.", "output": "According to this text, Disney became a publicly listed company on the New York Stock Exchange (NYSE) in 1940 with the ticker symbol DIS.", "category": "IT"}, {"instruction": "Which of the following are ice cream toppings and which are salad dressings: thousand island, chocolate sauce, hot fudge, balsamic vinaigrette, whipped cream, and Caesar.", "input": "", "output": "The ice cream toppings are chocolate sauce, hot fudge, and whipped cream. The salad dressings are thousand island, balsamic vinaigrette, and Caesar.", "category": "IT"}, {"instruction": "Where did Gretel attend primary school?", "input": "Gretel Beer was born in Vienna into a Jewish family. She was mostly raised by her aunt Olga Springer (Bechin, Bohemia 1879\u20131942 Maly Trostenets extermination camp[2]) the widow of a physician (in 1937: 9th district, Porzellangasse 45[3]), as her mother Regina Weidenfeld n\u00e9e Pisk died when Margaret was six years old and her father, Dionys (Duny) Weidenfeld, did not keep up a household. (At Porzellangasse, until 1938 Eric Pleskow and Ari Rath spent their childhood, as they told the Austrian broadcaster ORF in 2012.[4]) After attending primary school at Marchegg, a small town east of Vienna near the border with Slovakia, she attended a federal Realschule at Vereinsgasse in Vienna's 2nd district, where many Jewish Viennese lived.\n\nIn the spring of 1938, after the annexation of Austria by Germany, she and 48 other pupils were forced to leave this school and attend a Jewish class elsewhere in Vienna. At the entrance hall of her school, which is now called Bundesrealgymnasium Vereinsgasse, since 1989 the names of the expelled pupils are displayed on a memorial inscription.[5]", "output": "Gretel Beer attended primary school in Marchegg, in east of Vienna.", "category": "IT"}, {"instruction": "Which of these are car brands: Ferrari, Fiat, Batavus, Philips, Renault, BMW, IKEA and MG", "input": "", "output": "Fiat, Ferrari, Renault, BMW and MG are car brands.", "category": "IT"}, {"instruction": "In the United States of America, which state is the largest in size?", "input": "", "output": "In the Unites States of America, Alaska is the largest state in physical size.  Although not the most populated state is is 663,300 in square miles.  The next largest state is Texas followed by California.", "category": "IT"}, {"instruction": "Tell me whether each of these are animals or not: Alligator, Grass, Tree, Boat, Dolphin, Shark, Fish, Fence, Dog, Car", "input": "", "output": "Alligator: Animal\nGrass: Not an Animal\nTree: Not an Animal\nBoat: Not an Animal\nDolphin: Animal\nShark: Animal\nFish: Animal\nFence: Not an Animal\nDog: Animal\nCar: Not an Animal", "category": "IT"}, {"instruction": "Is skiing or snowboarding easier?", "input": "", "output": "The answer to this question depends on the individual. Some people find skiing easier, while others find snowboarding easier. Generally, most people have an easier time picking up skiing because the stance on skis is straightforward, similar to walking. On a snowboard, people must stand sideways (like how you'd stand on a skateboard or surfboard). This sideways stance can be more challenging for people to adjust to, and many people report falling on their wrists a lot while learning. Once a person has learned to competently ski or snowboard, it is a matter of personal preference as to what they like to do best.", "category": "IT"}, {"instruction": "What was the Counter Reformation?", "input": "", "output": "The Counter Reformation was a Catholic religious movement which was in response to the Protestant Reformation and sought to strengthen the Catholic faith.", "category": "IT"}, {"instruction": "What is time series data?", "input": "", "output": "Time series data are the data that reflect a change of a signal or variable over the time. While static data represent a snapshot of a current state, time series data show how a sifnal or variable was evolving over time.", "category": "IT"}, {"instruction": "Cauliflower rice is not that fun to eat in its bland form. Is there anything interesting and tasty I can cook with cauliflower rice?", "input": "", "output": "Cauliflower rice can be cooked within a few mins. You can make the dish more tasty with scrambled eggs , okra, and maybe other vegetables like peas, carrots and onions. One can cook this by mixing these ingredients including raw eggs in a bowl and then cooking them in a skillet for 5 mins. Pour one tablespoon of oil, let it heat up, and then put in the mix from the bowl. Stir for 5 mins on medium. Add pepper and salt. Once ready you can eat it with a sauce of your liking it just with pepper and salt.", "category": "IT"}, {"instruction": "Given a reference text about Psychiatry: An Industry of Death, tell me when it opened and and who owns and operates it.", "input": "Psychiatry: An Industry of Death is a museum in Hollywood, Los Angeles, California, that has also hosted several touring exhibitions.[1] It is owned and operated by the Citizens Commission on Human Rights (CCHR), an anti-psychiatry organization founded by the Church of Scientology and psychiatrist Thomas Szasz. The museum is located at 6616 Sunset Boulevard, Los Angeles, California. Entry is free.[2]\n\nThe opening event on December 17, 2005,[3] was attended by well-known Scientologists such as Priscilla Presley, Lisa Marie Presley, Jenna Elfman, Danny Masterson, Giovanni Ribisi, Catherine Bell, and Anne Archer,[4] as well as former Scientologist Leah Remini.\n\nThe museum is dedicated to criticizing what it describes as \"an industry driven entirely by profit\".[5] It has a variety of displays and exhibits that highlight physical psychiatric treatments, such as restraints, psychoactive drugs, electroconvulsive therapy and psychosurgery (including lobotomy, a procedure abandoned in the 1960s[6][7]).\n\nThe exhibition is also well-known for being the site of a heated confrontation between BBC Panorama reporter John Sweeney, and the Church's then-spokesman Tommy Davis in March 2007, during the filming of Sweeney's documentary Scientology and Me.", "output": "The Psychiatry: An Industry of Death museum opened on December 17, 2005 and is owned and operated by the Citizens Commission on Human Rights.", "category": "IT"}, {"instruction": "How to raise a kitten?", "input": "", "output": "When it comes to raise a kitten, it's like raising child. You need extra care and treat it with extra care. The first few months are a crucial time in shaping your kitten\u2019s emotional and physical well-being. In the first 8 week, there're 4 things you should pay attention to, 1) Always keep kittens warm. Because kittens under four weeks of age do not have the ability to thermoregulate, you must help them maintain body warmth. A warmed Snuggle Safe disk at the opening of the cage or crate is a good idea. 2) Provide kittens with adequate nutrition. Kittens should gain about \u00bd ounce (14 grams) per day or 4 ounces (113 grams) per week. When feeding,  The temperature of the formula before feeding should be warm to around 100oF or 38oC, but not too hot.3) Keep kittens clean. If kittens are orphaned and do not have a mom to regularly groom then, it is important to teach them to groom and keep them clean. It is okay to wash a kitten with warm water but focus only on the areas needing cleaned.4) Provide socialisation with people and with other kittens. It is good to get them used to contact with people when they're 3 weeks old. They could learn from their littermates and learning from their mom. Play is the best method to help them physically and socially develop.", "category": "IT"}, {"instruction": "What is engineering culture?", "input": "", "output": "Engineering culture often refers to common beliefs and behaviors of engineers within a company. A strong engineering culture allows engineers to work more effectively together.\n\nDifferent engineers often have different understanding or beliefs on the same topic, such as whether a PRD is needed for a design doc, or whether an engineer should write tests for their work. Without a strong engineering culture, engineers often waste timing debating on nuances, which can significantly hurt business productivity and create poor customer experience.\n\nLarge technology companies often have strong and unique engineering culture. For example: Apple favors design and quality; Amazon favors customer experience; Facebook favors success metrics; Google favors engineering excellence; Microsoft favors business success. Each engineering culture has its pros and cons. In general, having an engineering culture is better than not having one. A good leadership should intentionally foster a strong engineering culture in their company.", "category": "IT"}, {"instruction": "Who are the pianists that are considered masters in playing Bach's music?", "input": "", "output": "Glenn Gould is one of the most famous pianists playing Bach's music with his distinct style of articulating the contrapuntal texture of Bach's music. Zhu Xiao-mei's recording of Bach's The Goldberg Variations is acclaimed as one of the best recording of this piece. American pianist Murray Perahia has also built up a repertoire of Bach's piano music that's loved by many people.", "category": "IT"}, {"instruction": "Categorize these movies that came out in 1999 as cartoons or live-action: The Matrix, Stuart Little, Cruel Intentions, The Iron Giant, The Blair Witch Project, South Park: Bigger, Longer, and Uncut, The Sixth Sense", "input": "", "output": "Cartoons: Stuart Little, The Iron Giant, South Park: Bigger, Longer, and Uncut\nLive action: The Matrix, Cruel Intentions, The Blair Witch Project, The Sixth Sense", "category": "IT"}, {"instruction": "How are cats different than dogs?", "input": "", "output": "Dogs are domesticated animals that usually are more active and rely on their owner. Cats, on average, are more solitary creatures. They can be left alone longer and are more self sufficient. Dogs need lots of attention and activity while cats can entertain themselves.", "category": "IT"}, {"instruction": "What dog breed is a mix between a Cocker Spaniel and a Poodle?", "input": "", "output": "Cockapoo", "category": "IT"}, {"instruction": "What is the name of the largest red-light district in Amsterdam?", "input": "", "output": "The largest red-light district in Amsterdam is De Wallen.", "category": "IT"}, {"instruction": "Why do people move to California?", "input": "", "output": "There are many reasons why people may decide to move to California. California has very mild winters compared to many other parts of the United States. There are many jobs in technology, agriculture, finance, and film as well as other industries. California also has a very high number of universities for those looking to pursue higher education.", "category": "IT"}, {"instruction": "Discuss at least two risks associated with scraping data from websites. Describe steps an analyst could take to mitigate those risks.", "input": "", "output": "No clear Terms-of-service for scrapping the B2B partnership data \n\nThe companies like Hubspot (https://legal.hubspot.com/website-terms-of-use) and Salesforce do not have a clear Terms of Service (TOS) when using partnership data. The TOS is subject to interpretation. \n\nAutomation is highly fragile \n\nWeb-scrapping the B2B partnership data with an automated scrapping tool or a programming language like Python- BeautifulSoup is a highly fragile process. The website layout, which can be dynamically changing, can break the automated scraping. Even with automatic scrapping, there will be many manual activities to normalize the data. \n\nAn analyst could list the top companies for B2B partnerships and request the companies for the B2B data. The analyst can start approaching the smaller companies and build the business model to illustrate the value of sharing B2B data, creating a flywheel where more companies will be willing to share the data.", "category": "IT"}, {"instruction": "How are tornadoes formed?", "input": "", "output": "Tornadoes are rotating columns of air that is in contact with the ground. The catalyst that lead to tornadoes are temperature and humidity instability. Warm moist air near the ground, with cooler dry air at higher altitudes combined with wind shear, a change in wind speed and/or direction with height. This unstable airmass promotes the development of strong updrafts, while wind shear will further increase the strength of the updraft, and promotes the  rotation from which tornadoes are produced. Tornado intensities are measured using the Enhanced Fujita (EF) scale", "category": "IT"}, {"instruction": "Identify which instrument is string or percussion: Pambai, Steel Guitar", "input": "", "output": "Steel Guitar is string, Pambai is percussion", "category": "IT"}, {"instruction": "What mammal lays the largest eggs?", "input": "", "output": "The echidna, an Australian monotreme, is the largest egg-laying mammal.", "category": "IT"}, {"instruction": "Increased money supply (i.e. money printing)", "input": "", "output": "Demand-pull inflation.\nCost-push inflation.\nIncreased money supply (i.e. money printing)\nCurrency devaluation.\nGovernment policies and regulations.", "category": "IT"}, {"instruction": "According to the text below about UVA, name the UVA alumni that have won the Pulitzer Prize.", "input": "Rhodes Scholarships are international postgraduate awards given to students to study at the University of Oxford. Since the scholarship program began in 1904, UVA has had fifty-five Rhodes Scholars,[218] the most of any university in the American South, eighth-most overall, and third-most outside the Ivy League (behind Stanford University and the United States Military Academy (West Point)).[219]\n\nEight NASA astronauts and launch directors are UVA alumni: Karl Gordon Henize, Bill Nelson, Thomas Marshburn, Leland Melvin, Jeff Wisoff, Kathryn Thornton, Patrick Forrester; and Michael Leinbach.\n\nThe Pulitzer Prize has been awarded to eight UVA alumni: Edward P. Jones, Ron Suskind, Virginius Dabney, Claudia Emerson, Henry Taylor, Lane DeGregory, George Rodrigue, and Michael Vitez.", "output": "The Pulitzer Prize has been awarded to UVA alumni: Edward P. Jones, Ron Suskind, Virginius Dabney, Claudia Emerson, Henry Taylor, Lane DeGregory, George Rodrigue, and Michael Vitez.", "category": "IT"}, {"instruction": "Summarize the Challenger Sales Methodology for me", "input": "", "output": "The Challenger Sales Methodology is a highly popular research backed, insight based approach to selling. It was codified during a research study following the economic crash of 2008 where a group of sellers were outperforming their peers and the research team at CEB wanted to understand why. They conducted the largest research study of its kind across 25,000 sales people and found the most successful sellers leverage (5) core skills;\n1. Teaching customers about their business\n2. Tailoring the message to the company, industry, role and individual\n3. Taking control of the sales conversation\n4. Leveraging constructive tension in the sales conversation\n5. Leveraging Customer Mobilizers to sell on their behalf. \nMost sales approaches tend to focus on the features benefits and positive outcomes of the supplier product/solution. The Challenger approach is based upon leading the customer to the solution vs. leading with the solution.", "category": "IT"}, {"instruction": "Who are the three team managers that hold the record for the most appearances in the FIFA Club World Cup final?", "input": "Pep Guardiola and Carlo Ancelotti are the only managers to have won three FIFA Club World Cups; Guardiola won twice with Barcelona and once with Bayern Munich,[9][10] while Ancelotti was victorious once with Milan and twice with Real Madrid. Rafael Ben\u00edtez, alongside Ancelotti and Guardiola, holds the record for the most appearances in the final, leading English clubs Liverpool and Chelsea, as well as Italian club Internazionale, to one final each.[5][8] Lamine N'Diaye of Senegal in 2010, Faouzi Benzarti of Tunisia in 2013 and Masatada Ishii of Japan in 2016 were the only non-European and non-South American managers to have appeared in the final. The aforementioned three managers, as well as Zoran Mami\u0107 in 2018, Ricardo Ferretti in 2020 and Ram\u00f3n D\u00edaz in 2022, are the only ones to have led a club outside Europe and South America into the decisive match.[8]", "output": "Rafael Ben\u00edtez, Pep Guardiola, and Carlo Ancelotti hold the record for most appearances.", "category": "IT"}, {"instruction": "Give me a bulleted list of the last 5 Super Bowl winning teams", "input": "", "output": "Kansas City Chiefs\nLos Angeles Rams\nTampa Bay Buccaneers\nKansas City Chiefs \nNew England Patriots", "category": "IT"}, {"instruction": "Explain how a mechanical watch works", "input": "", "output": "A simple mechanical watch works by transferring power from the main spring, a tightly coiled metal spring, through an escapement and balance wheel, to wheels representing seconds, minutes, and hours.\n\nThe watch uses a gearing from the main spring that pushes an escapement gearing against a ruby palette to oscillate a balance wheel. The balance wheel and escapement are carefully constructed to oscillate at a specific frequency, releasing small bursts of power to the gear train. The train is constructed to gear the specific frequency of the balance wheel into seconds, minutes and hours. \n\nFurther complications like chronographs, sun phase, alarms, and others are not accounted for in this simple watch. An automatic watch contains a weighted rotor in order to wind the mainspring with the motion of a person's arm.", "category": "IT"}, {"instruction": "Classify these objects based on their shape.\nwheel, coin, CD, stamp, chess board", "input": "", "output": "Round - wheel, coin, CD\nSquare - stamp, chess board", "category": "IT"}, {"instruction": "Why are all the planets and moons round in shape? What makes them round? Does there exist another shape?", "input": "", "output": "Not all planets and moons are round. There is some variety in their shapes depending on their masses, and curiously looking worlds might even exist, unlike anything we know from our system.\n\nEverything within a planet or a moon is under the influence of gravity in such a way that bits of it would move to the center if they could. Under ideal conditions, it would acquire a spherical shape. For objects made of something other than liquids, it varies at what point they become round. It is generally assumed that they mostly become spheres around 400 kilometers/248 miles in diameter when made from icy material commonly found in our Solar System. Still, if something is made from something more rigid, it needs to be larger in diameter than that - around 750 km/466 miles. At a sufficient mass, even rock becomes fluid-like. The moon of Mars Deimos is only 12.6 km/7.8 miles across and is not spherical, and there are many other small moons of other planets that don\u2019t have a round shape.\n\nThis, however, is not all. Astronomical objects spin, giving them the flattened shape of a sphere the faster their rotation if they are massive enough. On top of it, they can have moons. This causes a bulge to form at the position of their orbiting body around them. In the case of Earth, our Moon causes tides via this process. Also, our Sun gives our planet tides. Elsewhere in the Universe, there could be planets with massive moons or two similarly massive planets, called double planets, orbiting their common center of mass, the barycenter, at a close distance, which can cause even stronger bulging. Their shape would be affected this way more visibly.\n\nFinally, a bizarre, toroidal planet, shown above, can be stable from what we know from physics, at least for a while. As I mentioned earlier, even rigid rock behaves like a fluid at large masses. An adequate rotation speed can counterbalance the strength of gravity with centrifugal acceleration, and a torus-shaped planet could exist. A possible scenario for such a world to come to be would be if two sufficiently fast rotating planets collided and formed a doughnut of vaporized rock, a so-called synestia.\n\nWe currently think that the events that would lead to the formation of a world of this shape are so unlikely that there might not be a single toroidal planet in the Visible Universe, but we were quite a few times surprised by what we discovered during our exploration of Cosmos. Perhaps we will even find a doughnut shape world one day.", "category": "IT"}, {"instruction": "what are the advantages of having a vegetable garden at home on the owners health?", "input": "", "output": "Vegetable garden allows you to think about the healthy factors of each vegetable. You can prioritize the health benefits of each vegetable and compare against how frequently you use that vegetable. You can plan on how many plants of each variety will be needed for making a dinner for your family. You will try to find vegetables that are easy to maintain and grow with minimal supervision. You will mix between vegetables that will grow in summer verses mild cold temperatures and choose your planting time. If you want year around produce of fresh vegetables you can even plan to have a green house with heating to keep your plants alive in all seasons. Making the soil ready and adding some plant food at regular intervals is required to keep the produce at good numbers. The owner will have health benefits of stress free time during the time they work on the garden and when they see the produce on the dinner table in the form of a delicious dish. Owners have a great time posting their produce pictures and dishes to social media to share with friends. Each year they plan 3 to 4 months in advance on the kind of plants that they would like to plant in the garden. They work with friends to find the seeds for various plants that they like to plant as well as share tips to keep the garden healthy. The key benefit is the owner will be able to get fresh produce that does not use any harsh chemicals or pesticides.", "category": "IT"}, {"instruction": "Can you tell me recipe to make a quick dessert , tell me one which is your favorite.", "input": "", "output": "Fruit Cream is one of my favorite desserts and very easy to make . All you need is 500 ml Heavy Cream , powdered sugar , all your favorite fruits ( banana , apples, grapes , strawberries , mango etc ) cut into small bite size pieces , dash of lemon juice . Whip the cream using a hand mixer , add sugar to it and mix well . Add 5-10 drops of lemon .This will prevent apples and bananas from blackening. In a dessert dish add all the cut fruits . Pour the cream on top of the fruits . Serve chilled with love . I am sure everyone you, your guests and family love this .", "category": "IT"}, {"instruction": "The album the ways to love a man by Tammy Wynette", "input": "The Ways to Love a Man is a studio album by American country artist, Tammy Wynette. It was released on January 26, 1970 via Epic Records and was the seventh studio album in Wynette's career. The disc consisted of 11 tracks which included both original material and cover recordings. Its title track was the album's only single included. It became a number one song on the North American country charts while also reaching chart positions in other musical genres as well. The album itself also reached chart positions on the country albums chart following its release. Critics and journalists gave the album a positive reception in the years that followed.", "output": "The Ways to Love a Man is a studio album by American country artist, Tammy Wynette. It was released on January 26, 1970 via Epic Records and was the seventh studio album in Wynette's career. The disc consisted of 11 tracks which included both original material and cover recordings. \n\nIts title track was the album's only single included. It became a number one song on the North American country charts while also reaching chart positions in other musical genres as well. The album itself also reached chart positions on the country albums chart following its release. Critics and journalists gave the album a positive reception in the years that followed.", "category": "IT"}, {"instruction": "Where to visit in Brazil?", "input": "", "output": "It depends what you are looking for. Brazil is known for the amazon forest, carnival and beaches in Rio but there are a lot more to explore.\n\nThere are pretty interesting cities, such as S\u00e3o Paulo, Curitiba and Recife. S\u00e3o Paulo has a great mix of culture and gastronomy, the city is vibrant and have bakeries that stay up all night. Curitiba became a leader in urban sustainability and also has a cultural aspect to it.\nRecife is a city in the northeastern state of Pernambuco, it has a night life in its old town, Recife antigo and some beaches as well. During the month of February the city has a vibrant carnival celebration, tourists and residents go out to the street to dance and celebrate, where you can see people of all ages.\n\nBesides the cities, Brazil has beautiful warm beaches in its northeastern states. From the Bahia state to Ce\u00e1ra state, there are many paradisiac beaches to visit. Be aware that road tripping in Brazil is not always safe and you need to speak Portuguese since you will find English speakers only in the main hotels and resorts. Stay in the main cities of Salvador, Aracaj\u00fa, Macei\u00f3, Recife, Jo\u00e3o Pessoa, Natal and Fortaleza to experience the most development and tourist services.", "category": "IT"}, {"instruction": "which are rainbow colours violet red orange purple indigo pink blue black white yellow  green grey", "input": "", "output": "VIBGYOR - Violet Indigo Blue Green Yellow orange red", "category": "IT"}, {"instruction": "What are some of the most common activities during winter in cold weather climates?", "input": "", "output": "Some common cold weather activities during winter months are: winter hiking, reading in-front of a warm fire, downhill and cross country skiing, enjoying a sauna with friends, going snowshoeing in the woods. During winter months many children enjoy: building snowmen, going sledding, having snowball fights, and warming up with hot cocoa.", "category": "IT"}, {"instruction": "Who is Cindy Robinson?", "input": "Cindy Robinson is an American voice actress who voices in animations and video games. Some of her major roles are Makoto Nanaya and Gii from the Blazblue series, Betty Boop in commercials, Queen Beryl in Sailor Moon, Chitose Nanbu in Ah My Buddha, Kukaku Shiba, Miyako Shiba, Jinta Hanakari (kid) and Kiyone Kotetsu in Bleach, Zola in the Blue Dragon series, Madeline Hatter in \"Ever After High\" Minerva and Hinoka in Fire Emblem. She also makes an uncredited appearance as the voice of the Purge Emergency Broadcast System in The Purge franchise.\n\nRobinson is best known for her role as Amy Rose in the Sonic the Hedgehog franchise since 2010.", "output": "Cindy Robinson is an American voice actress best known for her role as Amy Rose in the Sonic the Hedgehog franchise since 2010.", "category": "IT"}, {"instruction": "Does Palmeiras have a Fifa club world cup?", "input": "", "output": "Despite many claims that Palmeiras won a club world cup in 1951, the official list of the Fifa World Club winners starts in the year 2000 with Corinthians being the first champion of the tournament and Palmeiras doesn't have won any Fifa World Cup tournament since.", "category": "IT"}, {"instruction": "Given a reference text about Gennady Petrovich Lyachin, tell me when he joined the navy and when he was decommissioned.", "input": "Gennady Petrovich Lyachin (Russian: \u0413\u0435\u043d\u043d\u0430\u0434\u0438\u0439 \u041f\u0435\u0442\u0440\u043e\u0432\u0438\u0447 \u041b\u044f\u0447\u0438\u043d; 1 January 1955 \u2013 12 August 2000) was a Russian navy officer. He was the commanding officer of the Russian submarine Kursk when the vessel suffered a series of explosions and sank on 12 August 2000.\n\nLyachin was born in Sarpinsky in Volgograd Oblast. He entered the Navy in 1972 and graduated from the Higher Naval School of Submarine Navigation named for Lenin Komsomol in 1977 and was commissioned as an officer. He served as a weapons officer aboard the diesel-electric Juliett class cruise missile submarine K-58. From 1984 to 1986, as Captain 3rd Rank, he served as the executive officer of the K-77, also a Juliett Class. In 1986 he attended Advanced Special Officers' Classes during which time he was promoted to Captain 2nd Rank.\n\nIn October 1988, Lyachin received his first command, the K-304 also a Juliett class. He held this position until the K-304 was decommissioned after the fall of the Soviet Union in 1991.\n\nIn April 1991, he was appointed executive officer of a nuclear submarine, the Project 949A Antey class (NATO reporting name Oscar-II) K-119 Voronezh and served aboard through 1996. He and the newly formed crew spent the time between September 1991 and March 1993 undergoing training in Obninsk.\n\nLyachin was promoted to the rank of Captain 1st Rank in 1996 and given command of the Voronezh's sister ship, the ill-fated K-141 Kursk, the very last Project 949A submarine to be completed, which had been commissioned only two years earlier. When the Kursk sank on August 12, 2000, Lyachin perished along with the rest of the 117 crew members.", "output": "Gennady Petrovich Lyachin joined the Navy in 1972 and was decommissioned in 1991 after the fall of the Soviet Union.", "category": "IT"}, {"instruction": "How many cats did Freddie Mercury have?", "input": "", "output": "Freddie Mercury had ten cats.", "category": "IT"}, {"instruction": "Walter Koenig played which part in the Star Trek series", "input": "", "output": "Ensign Chekov", "category": "IT"}, {"instruction": "Write critical success factors for a proposal to a company called ABC for an Enterprise Application Integration (EAI) effort", "input": "", "output": "CRITICAL SUCCESS FACTORS \nThe following factors will be critical to the successful integration of the ABC's Operational \nSupport Systems:\nProject Management \u2013 Strong project management and planning will ensure an \norganized and cohesive solution. Excellent communication, aggressive issue resolution \nmanagement, and planning materials will ensure deadlines are met, objectives remain \nfocused, and costs are managed. The variety of vendors, system and process owners \ninvolved in an EAI effort requires a significant coordination effort to ensure success.\n\nKnowledge of Telecommunications Operational Business Practices \u2013 ABC\nmust employ the services of an experienced Telecommunications consulting company to \nensure business needs are met during the OSS EAI effort. Understanding of ABC \nbusiness needs in implementing this EAI project is critical in ensuring the appropriate \nimplementation strategy and successful rollout of the integration.\n\nEnterprise Application Integration Expertise \u2013 It is critical that the selected vendor \nhave extensive experience in planning, designing, and developing integration \napproaches, architectures, and frameworks to integrate complex Telecommunication \nOSS systems.\n\nKnowledge Transfer \u2013 In order to maintain a consistent level of operation and support, \nit is critical that ABC employees are imparted with the necessary knowledge to \nsuccessfully transition into the primary roles that support their systems and future \nintegration efforts. Documentation, personal attention, and other resources are vital to \nthis knowledge transfer and critical to ABC\u2019s ability to succeed as a growing service \nprovider.", "category": "IT"}, {"instruction": "Extract the reason why was Mark Hunt known as the King of Walk Offs", "input": "Mark Richard Hunt[3] (born 23 March 1974) is a New Zealand[4] former mixed martial artist and kickboxer of Samoan descent,[5] currently living in Sydney, Australia. Hunt competed in the Ultimate Fighting Championship (UFC) until 2018[6] and was the winner of the 2001 K-1 World Grand Prix. He is known as \"King of Walk-Offs\" due to his popularization of walking away and stopping attacks before the referee officially ends the match.[7][8][9]", "output": "Mark Hunt was a mixed martial artist and kickboxer who would walk away and stop his attacks before the referee officially ended the match.", "category": "IT"}, {"instruction": "Monitor and Merrimac refer to what in the passage?", "input": "Merrimac Butte[2] is a 5,627-foot (1,715-metre) sandstone summit located in Grand County, Utah, United States, about 12 miles northwest of the town of Moab. Merrimac Butte is a thin, 200\u2013600-foot-wide and 1,600-foot-long east-to-west butte with 200-foot-tall vertical Entrada Sandstone walls overlaying a Carmel Formation base.\n\nMonitor Butte is situated immediately east of Merrimac Butte. The two buttes were named after the Monitor and Merrimack, two ironclad steamships known for clashing during the American Civil War. They can be seen from Highway 313 after it climbs out of Sevenmile Canyon en route to the Island in the Sky section of Canyonlands National Park or Dead Horse Point State Park.", "output": "Monitor and Merrimac are two buttes which sit next to one another in Utah, U.S. These names are taken from two ironclad streamships of the American Civil War.", "category": "IT"}, {"instruction": "Could you write a poem about a standing desk?", "input": "", "output": "The Standing Desk\n\n\nTwo doors down\nStanding in the corner\nLooking out the window \nIs your desk\nBack turned\nWailing at all of us\nWondering why we can\u2019t hear it\nWhispering sometimes with secrets for the room\n\nWhen the door closes, it is particularly loud \nScreaming, screaming mad\nAngry and lonely \nMoaning now for us to find its partner \nGroaning now for why, why, why\nAnd only when it hears the occupants in the room questioning and turning to stare is it mollified \n\nWe unplugged it to keep it quiet\nLeft it tall and high at the position you liked best\nChair tucked neatly under\nGleaming clean and bear, beckoning for the next master \nAnd when everyone is busy \nMeeting our many meetings\nIt hums softly (usually that same song you taught it), seemingly content and happy \n\nPeople enter, come and go\nAnd the Observer watches and waits for a pause \nWanting to insert something weird and funny\nI glare at it when I come in\nIt knows, I know.\nI know, I know! Shhhhhh! \n\u201cWe\u2019re working on it,\u201d I say\nIt raises a brow at me \nI roll my eyes at it and shake my head\n\u201cNot enough!\u201d, it throws at me as I slink out walking backwards \n\nSearching, I stay out of sight\nLooking for its new companion\nSpecs on hand, omissions at the back of my throat\nSomeone smart, yet dumb enough\nSomeone commanding, yet submissive\nSomeone current, yet mature\nSomeone good but not too much \n\u201cSomeone who will stay,\u201d the desk whispers hopefully \n\nI grimace and say: \n\u201cI\u2019ll take someone tall enough for the desk!\u201d\n\nIt taunts and laughs at me\nWhile the memories flood in \nAnd I start to laugh too\nAnd the desk and I share a grin \n\n\u201cNot funny,\u201d I say\nThe desk shrugs and finally stays quiet \n\nOne day, when everyone was gone, I sneak in and stand before it \nPower it up and press the down button so I can rest my elbows on its smooth surface \nAnd I look out the dark window\nIn unison, we share a heavy sigh \nChoked up, I whisper: \u201cA new person will be here soon and I\u2019ll be gone.\nWatch over everyone, will you?\u201d\nThe desk nods quietly, lump in throat \n\nI take an orange sticker and press it gently underneath as a reminder of its promise \nAnd then walk two doors down to add one to my own desk before heading home for the night\nAs the elevator takes me down, the desk scans the empty office, takes a deep breath, and stands at the ready, a white knight brave but trembling, and starts humming your song.", "category": "IT"}, {"instruction": "Classify each of the following as either titles by J.K. Rowling or Suzanne Collins: Harry Potter and the Sorcerer's Stone, The Ickabog, Fantastic Beasts and Where to Find Them, The Cuckoo's Calling, Harry Potter and the Order of the Phoenix, Catching Fire, Mockingjay, Gregor the Overlander, Year of the Jungle, The Ballad of Songbirds and Snakes", "input": "", "output": "J.K. Rowling: Harry Potter and the Sorcerer's Stone, The Ickabog, Fantastic Beasts and Where to Find Them, The Cuckoo's Calling, Harry Potter and the Order of the Phoenix\nSuzanne Collins: Catching Fire, Mockingjay, Gregor the Overlander, Year of the Jungle, The Ballad of Songbirds and Snakes", "category": "IT"}, {"instruction": "What is the largest city in Washington state?", "input": "", "output": "Seattle", "category": "IT"}, {"instruction": "Tell me which months have 30 days and which have 31 days, based on this list: January, February, March, April, May, June, July, August, September, October, November, and December.", "input": "", "output": "Months that have 30 days are: April, June, September and November.\nMonths that have 31 days are: January, March, May, July, August, October and December.", "category": "IT"}, {"instruction": "List down important points about prisoners and events from the given passage", "input": "The first recorded interment occurred on 13 December 1922. Other burials at the cemetery include forty-four German and seven Italian prisoners of war who died at nearby detention camps during World War II, as well as four allied Chinese pilots. As of July 2022, there are three Medal of Honor recipients[1] and twenty general officers interred at the cemetery", "output": "1. On December 13, 1922, the first known interment took place.\n2. At the nearby detention centre during World War 2, 44 German and 7 Italian prisoners died and were buried there.\n3. Four Chinese pilots are also interred at the cemetery beside these POWs.\n4. Twenty general officers and three Medal of Honor recipients are buried at the cemetery as of July 22.", "category": "IT"}, {"instruction": "Based on this paragraph, how many younger siblings did Kennedy have?", "input": "Kennedy was born on February 22, 1932, at St. Margaret's Hospital in the Dorchester section of Boston, Massachusetts.[1] He was the youngest of the nine children of Joseph Patrick Kennedy and Rose Fitzgerald, members of prominent Irish American families in Boston.[1] They constituted one of the wealthiest families in the nation after their marriage.[2] His eight siblings were Joseph Jr., John, Rosemary, Kathleen, Eunice, Patricia, Robert, and Jean. His older brother John asked to be the newborn's godfather, a request his parents honored, though they did not agree to his request to name the baby George Washington Kennedy (Ted was born on President George Washington's 200th birthday). They named the boy after their father's assistant.[3]", "output": "Based on this paragraph, Kennedy had no younger siblings, as he was the youngest of nine children.", "category": "IT"}, {"instruction": "What are the advantages to studying Engineering in college?", "input": "", "output": "Studying engineering in undergraduate education has many benefits.\n1) Engineering education provides the student with technical / hard skills that make them valuable in the workforce\n2) Engineering education teaches students who to think critically, from first principles, to solve complex problems\n3) Engineering education teaches students that there may not be one solution to a problem, and the process for arriving at the solution is just as valuable as the solution itself.\n\nOverall, studying Engineering has many benefits both technical and non-technical.  Rather, it teaches students how to think.", "category": "IT"}, {"instruction": "Give me some facts about Ethiopia?", "input": "", "output": "Ethiopia is a federal parliamentary republic with a population of 113,656,596 people, as of 2021 (World factbook). The country is led by Prime Minister Abiy Ahmed, who came to power in 2018. Voting is allowed for citizens over 18 years of age, but it is not mandatory. Despite its leadership in government, Ethiopia faces significant issues with corruption. According to a corruption scale, the country ranks 129th out of 180 countries, with bribery being a common occurrence in government affairs. Agriculture is a major part of Ethiopia's economy, with 38.5 million hectares of land being cultivated in 2020(World factbook). The major crops grown in the country include coffee, pulses, oilseeds, cereals, potatoes, sugarcane, and vegetables. Approximately 80% of Ethiopia's population resides in rural areas due to the need for farming, while the remaining 20% lives in urban areas.", "category": "IT"}, {"instruction": "What does the Gini coefficient measure?", "input": "In economics, the Gini coefficient, also known as the Gini index or Gini ratio, is a measure of statistical dispersion intended to represent the income inequality or the wealth inequality or the consumption inequality within a nation or a social group. It was developed by statistician and sociologist Corrado Gini.\nThe Gini coefficient measures the inequality among values of a frequency distribution, such as levels of income. A Gini coefficient of 0 reflects perfect equality, where all income or wealth values are the same, while a Gini coefficient of 1 (or 100%) reflects maximal inequality among values. For example, if everyone has the same income, the Gini coefficient will be 0. In contrast, a Gini coefficient of 1 indicates that within a group of people, a single individual has all the income or consumption, while all others have none.\nThe Gini coefficient was proposed by Corrado Gini as a measure of inequality of income or wealth.  For OECD countries, in the late 20th century, considering the effect of taxes and transfer payments, the income Gini coefficient ranged between 0.24 and 0.49, with Slovenia being the lowest and Mexico the highest. African countries had the highest pre-tax Gini coefficients in 2008\u20132009, with South Africa having the world's highest, estimated to be 0.63 to 0.7, although this figure drops to 0.52 after social assistance is taken into account, and drops again to 0.47 after taxation. The global income Gini coefficient in 2005 has been estimated to be between 0.61 and 0.68 by various sources.", "output": "The Gini coefficient measures the inequality among values of a frequency distribution, such as levels of income.", "category": "IT"}, {"instruction": "Which of the following words starts with the letter S: Snake, Towel, Table, Shower, Yam, Butterfly, Apple", "input": "", "output": "Snake, Shower", "category": "IT"}, {"instruction": "What is CBT?", "input": "Technological advances also renewed interest in mental states and mental representations. English neuroscientist Charles Sherrington and Canadian psychologist Donald O. Hebb used experimental methods to link psychological phenomena to the structure and function of the brain. The rise of computer science, cybernetics, and artificial intelligence underlined the value of comparing information processing in humans and machines.\n\nA popular and representative topic in this area is cognitive bias, or irrational thought. Psychologists (and economists) have classified and described a sizeable catalogue of biases which recur frequently in human thought. The availability heuristic, for example, is the tendency to overestimate the importance of something which happens to come readily to mind.[91]\n\nElements of behaviorism and cognitive psychology were synthesized to form cognitive behavioral therapy, a form of psychotherapy modified from techniques developed by American psychologist Albert Ellis and American psychiatrist Aaron T. Beck.\n\nOn a broader level, cognitive science is an interdisciplinary enterprise involving cognitive psychologists, cognitive neuroscientists, linguists, and researchers in artificial intelligence, human\u2013computer interaction, and computational neuroscience. The discipline of cognitive science covers cognitive psychology as well as philosophy of mind, computer science, and neuroscience.[92] Computer simulations are sometimes used to model phenomena of interest.", "output": "Cognitive behavioral therapy (CBT) is a form of psychological treatment that is very effective to treat anxiety, substance abuse, eating disorders and several other mental health disorders.", "category": "IT"}, {"instruction": "What is appealing about Charleston in South Carolina?", "input": "", "output": "Charleston has a lot of historical sites that you can visit, which is great for educational purposes. The food is very diverse and provides many options for the pickiest of eaters. The low country is a beautiful scenery that sets the scene for cocktails, sunset catching and listening to the sounds of the creatures. There is a lot to see and learn from Charleston because of its southern charm and the people that have built its culture into a blossoming city.", "category": "IT"}, {"instruction": "Give me a list of nice board games to play with friends", "input": "", "output": "1. Cards Against Humanity\n2. Codenames\n3. The Game of Things\n4. Taboo\n5. Balderdash\n6. Scattergories\n7. Exploding Kittens", "category": "IT"}, {"instruction": "Where is Shuyga?", "input": "Shuyga (Russian: \u0428\u0443\u0439\u0433\u0430) is a rural locality (a settlement) in Surskoye Rural Settlement of Pinezhsky District, Arkhangelsk Oblast, Russia. The population was 472 as of 2010. There are 11 streets.", "output": "Shuyga is located on the Shuyga River, 99 km southeast of Karpogory (the district's administrative centre) by road. Shulomen is the nearest rural locality.", "category": "IT"}, {"instruction": "What's the best way to cook a soft-boiled egg?", "input": "", "output": "The best way to cook a soft-boiled egg:\n1. Add 1/2 inch of water into a pot.\n2. Bring water to a boil.\n3. Add the egg directly from the fridge.\n4. Simmer the egg for 6 minutes\n5. Drain the hot water and immediately submerge the egg in cold water\nIt's ready to eat when you are. Enjoy!", "category": "IT"}, {"instruction": "What is \"diglossia\"?", "input": "", "output": "Diglossia is when one community uses two different languages or dialects depending on the circumstances e.g. for written things and for casual conversation. A weird (not actual schoolbook) case of that is Swiss German. High German is used for written and formal things while Swiss German is used to speak.", "category": "IT"}, {"instruction": "Give me a bulleted list of the three most recent prime ministers of India", "input": "", "output": "1. Narendra Modi: Current prime minister of India since 2014\n2. Manmohan Singh: Former prime minister that chaired the prestigious position from 2004 till 2014.\n3. Atal Bihari Vajpayee: From 1998 to 2004, he was the prime minister of India.", "category": "IT"}, {"instruction": "How would you categorize the following sports into two groups; baseball, archery, decathlon, hockey", "input": "", "output": "One way of categorizing these sports is by whether they're team or individual competitions:\n\nTeam - baseball and hockey\n\nIndividual - archery and decathlon", "category": "IT"}, {"instruction": "What is the second oldest ballpark in Major League Baseball?", "input": "", "output": "The second oldest ballpark in Major League Baseball is Wrigley Field in Chicago, IL. It was built in 1914, two years after Fenway Park opened in Boston, MA.", "category": "IT"}, {"instruction": "What are some types of potatoes commonly grown in Ireland?", "input": "", "output": "Potato varieties can change in popularity over time. Most recently, the Irish Potato Federation has listed the following types as most popular: Rooster, Kerr's Pink, Golden Wonder, Salad & Baby Potatoes, and Maris Piper.", "category": "IT"}, {"instruction": "How do you know if you reached product market fit?", "input": "", "output": "Product market fit, a term used by the startups ecosystem to identify if they have a product that satisfies a need for a number of customers for a problem they are currently facing. There is not a single unit of measurement if a startup reached product market fit or not. One of the ways to measure product market fit is if a startup is able to develop a repeatable sales process and are able to do basic forecasting for revenue. A product market fit is crucially important for the first product released by a startup but it\u2019s also important for all upcoming releases of new products.", "category": "IT"}, {"instruction": "What are index funds?", "input": "", "output": "Index funds are investment funds that follow a benchmark index, such as the S&P 500 or the Nasdaq 100. When you put money in an index fund, that cash is then used to invest in all the companies that make up the particular index, which gives you a more diverse portfolio than if you were buying individual stocks.", "category": "IT"}, {"instruction": "How to calculate growth rate?", "input": "", "output": "The term \u201cgrowth rate\u201d describes the rate of change in the value of a specific metric across a given time period, expressed as a percentage.\n\nCommon examples of scenarios where the growth rate is often used are the following:\n\nCompany Sales\nPopulation Figures\nGross Domestic Product (GDP)\nInflation Rate\nUnder the specific context of financial modeling, the growth rate is most frequently on a quarterly or annual basis (i.e. year-over-year).\n\nMore defensible predictions can be made about the future trajectory of a metric in question by determining its historical growth, which can serve as a practical point of reference for forecasting purposes.\n\nHowever, the metric\u2019s usefulness is still tied to the extent that the underlying drivers are identified and researched in-depth.\n\nBy itself, calculating the historical growth is not enough, because what actually caused the past growth and which qualitative factors are likely to determine a metric\u2019s future growth must also be clearly understood.\n\n\nThe following formula can be used to calculate the growth rate across two periods.\n\nGrowth Rate (%) = (Ending Value \u00f7 Beginning Value) \u2013 1\nFor example, if a company\u2019s revenue was $100 million in 2020 and grew to $120 million in 2021, its year-over-year (YoY) growth rate is 20%.\n\nGrowth Rate = ($120 million \u00f7 $100 million) \u2013 1 = 0.20, or 20%", "category": "IT"}, {"instruction": "Why are dogs generally more popular than cats as pets?", "input": "", "output": "Although dogs generally seem to require more time and attention, they maintain their place as number 1 pet in the majority of countries. For example, statistics have shown that over 74% of US pet owners have a dog, in comparison with 47% owning a cat. \nThe reason for their popularity has to come down to their personality. Commonly, dogs are very social and affectionate creatures who enjoy spending time with their owners. Whereas, cats tend to be more independent animals by nature, and although they also require the attention of their owner, the majority prefer to keep to themselves. This stereotypical difference in behaviour is usually the main factor determining the popularity of these pets among people.", "category": "IT"}, {"instruction": "Name 10 of Kris Jenner's Grandchildren", "input": "", "output": "North West, Saint West, Chicago West, Psalm West, True Thompson, Dream Kardashian, Stormi Webster, Aire Webster, Mason Disick, Penelope Disick and Reign Disick.", "category": "IT"}, {"instruction": "What is the Turkish drink that tastes similar to", "input": "Ouzo is a clear liquid. However, when water or ice is added, ouzo turns a milky-white colour. This is because anethole, the essential oil of anise, is completely soluble in alcohol at approximately 38% ABV and above, but not in water. Diluting the spirit causes it to separate, creating an emulsion whose fine droplets scatter the light. This process is called louching and is also seen while preparing absinthe.\n\nThe drinks with a similar flavour of Ouzu include sambuca from (Italy), pastis from (France), oghi (from Armenia), rak\u0131 from Turkey, and arak (from the Levant). Its aniseed flavour is also similar to the anise-flavoured liqueur of an\u00eds (Spain) and the stronger spirits of absinthe (France and Switzerland). Aguardiente (Latin America), made from sugar cane, is also similar. The Italian drink Pallini Mistra, named after the Greek city of Mystras in the Peloponnese is a version of ouzo made in Rome that closely resembles Greek and Cypriot ouzo.", "output": "Rak\u0131 is a drink from Turkey that has similar flavour with Ouzo.", "category": "IT"}, {"instruction": "How many campgrounds does Shenandoah National Park have?", "input": "", "output": "Shenandoah National Park has five different campgrounds evenly dispersed throughout the park: Mathews Arm, Big Meadows, Lewis Mountain, Loft Mountain, and Dundo Group Campground. Mathews Arm is located in the northern section of the park. Big Meadows Campground is in the central portion of the park and is the most popular one. Lewis Mountain is similarly in the central part of the park, but is smaller, offering more privacy to people. Loft Mountain is the largest campground and is in the southern part of the park. Dundo Group Campground is also small and to the south, but only has group sites and the camp sits on the Appalachian Trail. The campsites offer different amenities such as food storage lockers and trash/recycling collection.", "category": "IT"}, {"instruction": "Who was the first women to do the spacewalk?", "input": "", "output": "Svetlana Savitskaya in the year 1984", "category": "IT"}, {"instruction": "Tell me whether each South Park character is a kid or adult: Randy, Stan, Kyle, Butters, Sharon", "input": "", "output": "Randy: Adult\nStan: Kid\nKyle: Kid\nButters: Kid\nSharon: Adult", "category": "IT"}, {"instruction": "What is the kiwi bird?", "input": "", "output": "The kiwi is a flightless bird with the scientific name Apteryx, meaning flightless big bird. It has relatives with the ostrich, the largest bird. The diet of the kiwi bird consists of woodlice, millipedes, centipedes, slugs, snails, spiders, insects, seeds, berries, and plant material. The Kiwi is a solitary animal that makes holes as hiding places for sleeping with its feet. The kiwi was created with a small, thin beak to get into crevices. This animal is almost extinct, and is important to the native ecosystem; the kiwi keeps the bug population down and is hunted by natural predators. New Zealand protects its most prized bird, for it is the only flightless bird in that ecosystem and a national symbol. The way we can protect and help the kiwi thrive is by donating to organizations like Save the Kiwi.", "category": "IT"}, {"instruction": "What is Unified Payments Interface (UPI) in India", "input": "", "output": "The Unified Payments Interface is a Peer to Peer payments system launched in India by the National Payments Corporation of India (NPCI) in 2016. NPCI set out with a mandate to change the face of India\u2019s payment systems. It developed the Unified Payments Interface (UPI) as an architecture framework with a set of standard Application Programming Interface (API) specifications to facilitate online payments. The aim was to simplify and provide a single interface across all NPCI systems, thereby creating interoperability and a superior customer experience.\n\nUPI is now one of the most preferred payment solutions in India, with over a billion transactions every month. FY22, the total transaction value processed by the United Payments Interface (UPI) platform accounted for 86% of India\u2019s GDP. UPI\u2019s core function is to support easy and secure money transfers between bank accounts. It does this by adding multiple bank accounts into a single mobile application, allowing for seamless fund transfers and merchant payments from one place. It also enables \u2018peer to peer\u2019 and \u2018peer to merchant\u2019 collection requests, which can be scheduled and paid as requested.\n\nPayments can be made using a UPI ID, UPI Number, Account number, and an Indian Financial System Code (IFSC). Payment security is as per applicable Reserve Bank of India (RBI) guidelines using a 1-click 2-factor authentication where the second factor of authentication is the UPI PIN. \n\nUPI can be accessed on all major platforms such as Android and iOS with apps developed by members for versions of Android 4.2.2 and iOS 8.1 and above.\n\nThe primary business uses of UPI are to allow a personal mobile as the primary device for all payments, including person to person, person to entity, and entity to person. Using a personal mobile an individual can \u2018Pay\u2019 someone (push) as well as \u2018Collect\u2019 from\nsomeone (pull). In addition, the ability to pay and collect using \u2018UPI IDs\u2019 that are \u2018aliases\u2019 to the VPA. The goal is to make  payments by providing an address without having to ever provide account details or credentials on third party applications or websites.\nAlso, sending \u2018collect\u2019 requests to others (person to person or entity to person) with a\u2018pay by\u2019 date, which allows customers to pay at a later date without blocking the money in the account. UPI also allows for pre-authorizing multiple recurring payments (utilities, school fees, subscriptions, etc.) with a one-time secure authentication and rule-based access, similar to ECS. UPI autopay allows customers to set recurring payments for their UPI transactions. Recurring payments up to Indian Rupees 2000 can be set at the frequency desired.\n\nThis makes payments using UPI a fully interoperable system across all PSPs without having silos and closed systems with one-click two-factor authentication, using a personal\nphone, and without any acquiring devices or physical tokens.\n\nIn March 2023, Reserve Bank of India (RBI) and the Monetary Authority of Singapore (MAS) launched the linkage of UPI and Singapore\u2019s PayNow. Remittances from Singapore to India were on track to breach the $100 billion mark in 2023, making it the fourth highest remitting nation to India, accounting for 5.7% of all inbound remittances. Integrating PayNow and UPI will likely reduce charges and the time taken for such transactions.", "category": "IT"}, {"instruction": "What is a spiral staircase?", "input": "", "output": "A spiral staircase is a set of stairs that circles around a central pole and allows for a steeper ascent than other stair designs.", "category": "IT"}, {"instruction": "Miles Davis, Rhianna, Elton John, John Coltrane, Taylor Swift, Amy Winehouse, Elvis, Billy Holiday. These are all musicians - list which of these are jazz musicians, and which are not.", "input": "", "output": "Miles Davis, John Coltrane, Amy Winehouse and Billy Holiday are considered to be jazz musicians. Rhianna, Taylor Swift, Elvis and Elton John are not jazz musicians.", "category": "IT"}, {"instruction": "Extract the criticisms that modern portfolio theory faces from this link https://en.wikipedia.org/wiki/Modern_portfolio_theory, place them in a bullet list", "input": "Despite its theoretical importance, critics of MPT question whether it is an ideal investment tool, because its model of financial markets does not match the real world in many ways\n\nThe risk, return, and correlation measures used by MPT are based on\u00a0[expected values](https://en.wikipedia.org/wiki/Expected_value), which means that they are statistical statements about the future (the expected value of returns is explicit in the above equations, and implicit in the definitions of\u00a0[variance](https://en.wikipedia.org/wiki/Variance)\n\u00a0and\u00a0[covariance](https://en.wikipedia.org/wiki/Covariance)). Such measures often cannot capture the true statistical features of the risk and return which often follow highly skewed distributions (e.g. the\u00a0[log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution)) and can give rise to, besides reduced\u00a0[volatility](https://en.wikipedia.org/wiki/Volatility_(finance)), also inflated growth of return.\u00a0In practice, investors must substitute predictions based on historical measurements of asset return and volatility for these values in the equations. Very often such expected values fail to take account of new circumstances that did not exist when the historical data were generated.\n\nMore fundamentally, investors are stuck with estimating key parameters from past market data because MPT attempts to model risk in terms of the likelihood of losses, but says nothing about why those losses might occur. The risk measurements used are\u00a0[probabilistic](https://en.wikipedia.org/wiki/Probability)\u00a0in nature, not structural. This is a major difference as compared to many engineering approaches to\u00a0[risk management](https://en.wikipedia.org/wiki/Risk_management).\n\nMathematical risk measurements are also useful only to the degree that they reflect investors' true concerns\u2014there is no point minimizing a variable that nobody cares about in practice. In particular,\u00a0[variance](https://en.wikipedia.org/wiki/Variance)\u00a0is a symmetric measure that counts abnormally high returns as just as risky as abnormally low returns. The psychological phenomenon of\u00a0[loss aversion](https://en.wikipedia.org/wiki/Loss_aversion)\u00a0is the idea that investors are more concerned about losses than gains, meaning that our intuitive concept of risk is fundamentally asymmetric in nature. There many other risk measures (like\u00a0[coherent risk measures](https://en.wikipedia.org/wiki/Coherent_risk_measure)) might better reflect investors' true preferences.\n\nModern portfolio theory has also been criticized because it assumes that returns follow a\u00a0[Gaussian distribution](https://en.wikipedia.org/wiki/Normal_distribution). Already in the 1960s,\u00a0[Benoit Mandelbrot](https://en.wikipedia.org/wiki/Benoit_Mandelbrot)\u00a0and\u00a0[Eugene Fama](https://en.wikipedia.org/wiki/Eugene_Fama)\u00a0showed the inadequacy of this assumption and proposed the use of more general\u00a0[stable distributions](https://en.wikipedia.org/wiki/Stable_distributions)\u00a0instead.\u00a0[Stefan Mittnik](https://en.wikipedia.org/wiki/Stefan_Mittnik)\u00a0and\u00a0[Svetlozar Rachev](https://en.wikipedia.org/wiki/Svetlozar_Rachev)\u00a0presented strategies for deriving optimal portfolios in such settings.\n\n[Contrarian investors](https://en.wikipedia.org/wiki/Contrarian_investing)\u00a0and\u00a0[value investors](https://en.wikipedia.org/wiki/Value_investing) typically do not subscribe to Modern Portfolio Theory.\u00a0One objection is that the MPT relies on the\u00a0[efficient-market hypothesis](https://en.wikipedia.org/wiki/Efficient-market_hypothesis)\n\u00a0and uses fluctuations in share price as a substitute for risk.\u00a0[Sir John Templeton](https://en.wikipedia.org/wiki/Sir_John_Templeton)\n\u00a0believed in diversification as a concept, but also felt the theoretical foundations of MPT were questionable, and concluded (as described by a biographer): \"the notion that building portfolios on the basis of unreliable and irrelevant statistical inputs, such as historical volatility, was doomed to failure.", "output": "- The risk, return, and correlation measures used by Modern portfolio theory (MPT) are based on\u00a0expected values, such expected values fail to take account of new circumstances that did not exist when the historical data were generated\n- The risk measurements used in MPT are\u00a0probabilistic because MPT models risk in terms of the likelihood of losses based on past market data and not why the losses occur.\n- MPT attempts to minimize risks in the form of variance. However, this metric doesn\u2019t reflect investors\u2019 true concerns in practice. Variance is symmetric, so it punishes high returns the same way as high losses. However, investors care more about loss than gain, so the perception of risk is asymmetric in nature. Coherent risk measures should be a better metric that reflects investors\u2019 preference\n- MPT assumes that returns follow Gaussian distribution. However, many scholars suggest that returns might follow other distributions such as stable distributions\n- MPT relies on the efficient-market hypothesis and assumes that share price fluctuation is a risk measure. However, building a portfolio based on historical volatility is a questionable premise criticized by Sir John Templeton", "category": "IT"}, {"instruction": "Give me a list of things I can do with a bunch of extra money.", "input": "", "output": "Here's what you can do with extra money:\n\nInvest in the stock market. For example, the average annualized return of the S&P 500 from 1928 through 2021 is 11.82%.\n\nInvest in yourself by purchasing classes. You can also explore new hobbies for your enjoyment. Some examples are skiing, painting, or playing guitar. \n\nTravel around the world to gain new experiences and experience new cultures.\n\nInvest in the real estate market.", "category": "IT"}, {"instruction": "Which is considered the first human technology?", "input": "", "output": "Fire", "category": "IT"}, {"instruction": "Given this paragraph about the Cold War, why did the Soviets pull out of their war in Afghanistan?", "input": "After World War II, parts of Eastern and Central Europe, including East Germany and eastern parts of Austria were occupied by Red Army according to the Potsdam Conference.[149] Dependent communist governments were installed in the Eastern Bloc satellite states.[150] After becoming the world's second nuclear power,[151] the Soviet Union established the Warsaw Pact alliance,[152] and entered into a struggle for global dominance, known as the Cold War, with the rivaling United States and NATO.[153] After Stalin's death in 1953 and a short period of collective rule, the new leader Nikita Khrushchev denounced Stalin and launched the policy of de-Stalinization, releasing many political prisoners from the Gulag labor camps.[154] The general easement of repressive policies became known later as the Khrushchev Thaw.[155] At the same time, Cold War tensions reached its peak when the two rivals clashed over the deployment of the United States Jupiter missiles in Turkey and Soviet missiles in Cuba.[156]\n\nIn 1957, the Soviet Union launched the world's first artificial satellite, Sputnik 1, thus starting the Space Age.[157] Russian cosmonaut Yuri Gagarin became the first human to orbit the Earth, aboard the Vostok 1 manned spacecraft on 12 April 1961.[158] Following the ousting of Khrushchev in 1964, another period of collective rule ensued, until Leonid Brezhnev became the leader. The era of the 1970s and the early 1980s was later designated as the Era of Stagnation. The 1965 Kosygin reform aimed for partial decentralisation of the Soviet economy.[159] In 1979, after a communist-led revolution in Afghanistan, Soviet forces invaded the country, ultimately starting the Soviet\u2013Afghan War.[160] In May 1988, the Soviets started to withdraw from Afghanistan, due to international opposition, persistent anti-Soviet guerrilla warfare, and a lack of support by Soviet citizens.[161]\n\nFrom 1985 onwards, the last Soviet leader Mikhail Gorbachev, who sought to enact liberal reforms in the Soviet system, introduced the policies of glasnost (openness) and perestroika (restructuring) in an attempt to end the period of economic stagnation and to democratise the government.[162] This, however, led to the rise of strong nationalist and separatist movements across the country.[163] Prior to 1991, the Soviet economy was the world's second-largest, but during its final years, it went into a crisis.[164]\n\nBy 1991, economic and political turmoil began to boil over as the Baltic states chose to secede from the Soviet Union.[165] On 17 March, a referendum was held, in which the vast majority of participating citizens voted in favour of changing the Soviet Union into a renewed federation.[166] In June 1991, Boris Yeltsin became the first directly elected president in Russian history when he was elected president of the Russian SFSR.[167] In August 1991, a coup d'\u00e9tat attempt by members of Gorbachev's government, directed against Gorbachev and aimed at preserving the Soviet Union, instead led to the end of the Communist Party of the Soviet Union.[168] On 25 December 1991, following the dissolution of the Soviet Union, along with contemporary Russia, fourteen other post-Soviet states emerged.", "output": "The Soviets withdrew from the Soviet-Afghan War beginning in May 1988 due to international opposition, persistent anti-Soviet guerrilla warfare, and a lack of support by Soviet citizens.", "category": "IT"}, {"instruction": "Why did the Seattle Supersonics leave Seattle?", "input": "", "output": "In 2006 the owner of the team, Howard Schultz, sold the team Clay Bennett. Clay Bennett originally agreed to keep the team in Seattle, however, he then told the city that if a new arena was not built using public funds that he would move the team. Ultimately, public funding for the arena fell through and the team was moved to Oklahoma. The team is now known at the Oklahoma City Thunder. The relocation of the team was very controversial as local news organizations and fans believe that Clay Bennett's intention was to remove the team from Seattle and did not provide reasonable terms for a renovation of the basketball arena.", "category": "IT"}, {"instruction": "Categorize each of the following as either 'spicy', 'not spicy' or 'sometimes spicy': jalapenos, chilis, sriracha, chips, pizza, cocktails, fruit, milk", "input": "", "output": "Jalapenos are spicy.\nChilis are spicy.\nSriracha is spicy.\nChips are sometimes spicy.\nPizza is sometimes spicy.\nCocktails are sometimes spicy.\nFruit is not spicy.\nMIlk is not spicy.", "category": "IT"}, {"instruction": "Give me three ideas for a fun dinner party", "input": "", "output": "Here are some engaging party ideas that put food at the center!\n- Tapas party: make lots of small dishes, such as stuffed mushrooms, that are easily passed and snacked on throughout an evening. This is great for a casual get together of friends, and leaves plenty of time for socializing. \n\n- Potluck: ask all attendees to bring one dish. This is a great way to let your guests showcase their own skills and share something they love, while also reducing the amount of prep required by the host!\n\n- One-dish meals: if you don't want to spend all day prepping, make a fun dish such as paella (large Spanish rice dish) or chili (green or red) that you can prepare in one large serving. These can also be made to accommodate dietary restrictions, such as vegetarian or gluten-free guests.", "category": "IT"}, {"instruction": "What are the benefits of division of labour?", "input": "The division of labour is the separation of the tasks in any economic system or organization so that participants may specialize (specialization). Individuals, organizations, and nations are endowed with or acquire specialized capabilities, and either form combinations or trade to take advantage of the capabilities of others in addition to their own. Specialized capabilities may include equipment or natural resources as well as skills. Training and combinations of equipment and other assets acting together are often important. For example, an individual may specialize by acquiring tools and the skills to use them effectively just as an organization may specialize by acquiring specialized equipment and hiring or training skilled operators. The division of labour is the motive for trade and the source of economic interdependence.\n\nHistorically, an increasing division of labour is associated with the growth of total output and trade, the rise of capitalism, and the increasing complexity of industrialized processes. The concept and implementation of division of labour has been observed in ancient Sumerian (Mesopotamian) culture, where assignment of jobs in some cities coincided with an increase in trade and economic interdependence. Division of labour generally also increases both producer and individual worker productivity.\n\nAfter the Neolithic Revolution, pastoralism and agriculture led to more reliable and abundant food supplies, which increased the population and led to specialization of labour, including new classes of artisans, warriors, and the development of elites. This specialization was furthered by the process of industrialization, and Industrial Revolution-era factories. Accordingly, many classical economists as well as some mechanical engineers, such as Charles Babbage, were proponents of division of labour. Also, having workers perform single or limited tasks eliminated the long training period required to train craftsmen, who were replaced with less-paid but more productive unskilled workers.", "output": "In general the following benefits are associated with increasing division of labour:\n- increase in total trade \n- increase in total output\n- an increase in market activity\n- increased specialization\n- increasing complexity of industrialized processes", "category": "IT"}, {"instruction": "What is the largest or biggest land animal?", "input": "", "output": "The largest or biggest land animal is the African bush elephant. It can reach weights of up to 10000 kgs (or 22000 lbs). However historically there have been dinosaurs that are greater in weight than elephants.", "category": "IT"}, {"instruction": "why is Mahatma Gandhi loved by everyone?", "input": "", "output": "Mahatma Gandhi preached non-cooperation using non-violent methods as a way to win against the oppressive rulers without resorting to guns.  This is difficult to do and requires public's cooperation.", "category": "IT"}, {"instruction": "What is Game of Thrones based on?", "input": "", "output": "Game of Thrones is based on the books written by George R. R. Martin called a Song of Ice and Fire.", "category": "IT"}, {"instruction": "What are the benefits of collaborating on a tech blog with your customers?", "input": "", "output": "It will improve visibility of the product. It will help with your customers' career. It will benefit other customers with related use cases.", "category": "IT"}, {"instruction": "Given this paragraph, how many public high schools are in Arlington, Virginia?", "input": "Arlington Public Schools operates the county's public K-12 education system of 22 elementary schools; 6 middle schools (Dorothy Hamm Middle School, Gunston Middle School, Kenmore Middle School, Swanson Middle School, Thomas Jefferson Middle School, and Williamsburg Middle School); and 3 public high schools (Wakefield High School, Washington-Liberty High School, and Yorktown High School). H-B Woodlawn and Arlington Tech are alternative public schools. Arlington County spends about half of its local revenues on education. For the FY2013 budget, 83 percent of funding was from local revenues, and 12 percent from the state. Per pupil expenditures are expected to average $18,700, well above its neighbors, Fairfax County ($13,600) and Montgomery County ($14,900).[135]", "output": "There are 3 public high schools in Arlington, Va.", "category": "IT"}, {"instruction": "What are all of the professional baseball teams in the state of Florida?", "input": "", "output": "The professional baseball teams in the state of Florida are the Tampa Bay Rays and Miami Marlins.", "category": "IT"}, {"instruction": "Given the reference text about the Cy Young Award, please describe what the award is and why it is awarded.", "input": "The Cy Young Award is given annually to the best pitchers in Major League Baseball (MLB), one each for the American League (AL) and National League (NL). The award was first introduced in 1956 by Baseball Commissioner Ford Frick in honor of Hall of Fame pitcher Cy Young, who died in 1955. The award was originally given to the single best pitcher in the major leagues, but in 1967, after the retirement of Frick, the award was given to one pitcher in each league.", "output": "The Cy Young Award is given to the best pitches in the American and National leagues of Major League Baseball, for their achievements that exceed those of their peers.", "category": "IT"}, {"instruction": "Extract what is Top Gun", "input": "The United States Navy Strike Fighter Tactics Instructor program (SFTI program), more popularly known as Top Gun (stylized as TOPGUN), is an American military program that teaches fighter and strike tactics and techniques to selected naval aviators and naval flight officers, who return to their operating units as surrogate instructors.", "output": "The United States Navy Fighter Weapons School was established on 3 March 1969, at Naval Air Station Miramar, California. \n\nThe unit's purpose was to train fighter air crews  in all aspects of fighter weapons systems and the art of aerial combat.  It serves to build a nucleus of eminently knowledgeable fighter crews to construct, guide, and enhance weapons training cycles and subsequent aircrew performance. This select group acts as the F-4 community\u2019s most operationally orientated weapons specialists. Top Gun's efforts are dedicated to the Navy\u2019s professional fighter crews, past, present and future.", "category": "IT"}, {"instruction": "Where to find the best croissant in San Francisco?", "input": "", "output": "This is hard to say as the answer heavily depends on your preference. Arsicault is generally a very popular bakery for croissants. The croissants here are very flaky and very buttery. If that is right up your alley, definitely give them a visit! Other than Arsicault, there are many bakeries in SF that offers croissant with a creative twist. A couple examples are Hahdough for pretzel croissants and Arizmendi for sourdough croissants. Personally, I prefer my croissants to be not too buttery but moist in the middle and crunchy on the outside. My personal favorite is Schubert's Bakery in Inner Richmond. The price point and taste well align with what I am looking for!", "category": "IT"}, {"instruction": "Do cats have nine lives?", "input": "", "output": "No", "category": "IT"}, {"instruction": "What is Microsoft?", "input": "Microsoft Corporation is an American multinational technology corporation headquartered in Redmond, Washington. Microsoft's best-known software products are the Windows line of operating systems, the Microsoft Office suite, and the Internet Explorer and Edge web browsers. Its flagship hardware products are the Xbox video game consoles and the Microsoft Surface lineup of touchscreen personal computers. Microsoft ranked No. 14 in the 2022 Fortune 500 rankings of the largest United States corporations by total revenue;[2] it was the world's largest software maker by revenue as of 2022. It is considered as one of the Big Five American information technology companies, alongside Alphabet (parent company of Google), Amazon, Apple, and Meta (formerly Facebook).", "output": "Microsoft Corporation is an American multinational technology corporation headquartered in Redmond, Washington. Microsoft's best-known software products are the Windows line of operating systems, the Microsoft Office suite, and the Internet Explorer and Edge web browsers.", "category": "IT"}, {"instruction": "How do you make soap?", "input": "", "output": "Soap is made with a mixture of natural or organic oils, sodium hydroxide and distilled water.  When making soap you need to mix a combination of light and heavy oils like olive and coconut oil and then mix it with sodium hydroxide and distilled water.  After this mixture has been mixed well you poor it into soap molds and let it hard over the course of many weeks.  This process called saponification is the time it takes for the sodium hydroxide to evaporate from the mixture which causes the soap to harden in he soap molds.  Other options you have when making soap are to add essential oils, like lavender and grapefruit to give a nice scent to the soap.  This has to be added prior to saponification.", "category": "IT"}, {"instruction": "How would I get from an upstairs apartment to the parking garage?", "input": "", "output": "If I needed to get from an upstairs apartment to the parking garage, I first would need to know where the parking garage is located.  Most parking garages at apartment complexes are located underground; however, some are above-ground.  Once I've determined where the parking garage is, I would exit my apartment by opening the door, stepping out into the hallway, and then locking the door, and then walk down the hallway in the direction of the elevator or stairs.  I would take the elevator or stairs to the appropriate floor and then exit into the parking garage.  I'm probably in the parking garage because I'm going to my car, so the next step would be to locate my car.  One trick for locating a car in a parking garage is to click the alarm or door lock button on your car's remote to make a sound.", "category": "IT"}, {"instruction": "What are three most commonly sung lyric soprano arias?", "input": "", "output": "Three most commonly sung lyric soprano arias?\n- \"Quando m'en vo\" from La Boheme by Puccini\n- \"O mio babbino caro\" from Gianni Schicchi by Puccini\n- \"Deh! vieni non tardar\" from Le Nozze di Figaro by Mozart", "category": "IT"}, {"instruction": "Cases of Anthrax were found in Kerala in which animals?", "input": "", "output": "Wild Boars", "category": "IT"}, {"instruction": "Categorize the following Taylor Swift songs based on what album they are in: The Archer, tolerate it, Lover, Love Story (Taylor's Version), Bejeweled, Don't Blame Me, 22 (Taylor's version), Look What You Made Me Do, Lavender Haze, willow, Cruel Summer", "input": "", "output": "The following songs are in Taylor Swift's album Lover: The Archer, Lover, Cruel Summer.\nThe following song is in the album Fearless (Taylor's Version): Love Story (Taylor's Version)\nThe following songs are in the album evermore: tolerate it, willow\nThe following songs are in the album Reputation: Don't Blame Me, Look What You Made Me Do\nThe following song is in the album Red (Taylor's Version): 22 (Taylor's version) \nThe following songs are in the album Midnights: Bejeweled, Lavender Haze", "category": "IT"}, {"instruction": "I'm creating a class to explain to kids the difference between items that are powered and can be plugged in and items that aren't. Please divide the following things into those you can plug in and those that you can't: table, hairdryer, television, chair, computer, fridge, comb, flowers.", "input": "", "output": "A hairdryer, television, computer and fridge are all examples of things that can be plugged in and powered by electricity. A common table, chair, comb and flower are examples of items that do not require electricity and cannot be plugged in.", "category": "IT"}, {"instruction": "Can you describe what team effectiveness is?", "input": "Team effectiveness (also referred to as group effectiveness) is the capacity a team has to accomplish the goals or objectives administered by an authorized personnel or the organization. A team is a collection of individuals who are interdependent in their tasks, share responsibility for outcomes, and view themselves as a unit embedded in an institutional or organizational system which operates within the established boundaries of that system. Teams and groups have established a synonymous relationship within the confines of processes and research relating to their effectiveness (i.e. group cohesiveness, teamwork) while still maintaining their independence as two separate units, as groups and their members are independent of each other's role, skill, knowledge or purpose versus teams and their members, who are interdependent upon each other's role, skill, knowledge and purpose.", "output": "Team effectiveness is the capacity a team has to achieve the goals set for that team. Teams are considered more or less effective based on their ability to achieve their goals and objectives. Teams are comprised of individuals who are interdependent in their tasks, share responsibility for outcomes, and view themselves as a unit embedded in an institutional or organizational system which operates within the boundaries of that system.", "category": "IT"}, {"instruction": "From the passage below, extract the names of the companies and technologies that Walmart has acquired over the last 3 years.", "input": "In the first quarter of 2020, consumers responded to COVID by shopping less frequently (5.6% fewer transactions), and buying more when they did shop (16.5%).[133] As people shifted from eating out to eating at home,[34] net sales at Walmart increased by 10.5%, while online sales rose by 74%. Although Walmart experienced a 5.5% increase in operating expenses, its net income increased by 3.9%.[133] In the third quarter of 2020, ending October 31, Walmart reported revenue of $134.7 billion, representing a year-on-year increase of 5.2 percent.[134]\n\nIn December 2020, Walmart launched a new service, Carrier Pickup, that allows the customers to schedule a return for a product bought online, in-store, or from a third-party vendor. These services can be initiated on the Walmart App or on the website.[135]\n\nIn January 2021, Walmart announced that the company is launching a fintech startup, with venture partner Ribbit Capital, to provide financial products for consumers and employees.[136]\n\nIn February 2021, Walmart acquired technology from Thunder Industries, which uses automation to create digital ads, to expand its online marketing capabilities.[137]\n\nIn August 2021, Walmart announced it would open its Spark crowdsource delivery to other businesses as a white-label service, competing with Postmates and online food ordering delivery companies.[114]\n\nIn December 2021, Walmart announced it will participate in the Stephens Investment Conference Wednesday, and the Morgan Stanley Virtual Global Consumer & Retail Conference.[138] In June 2022, Walmart announced it would be acquiring Memomi, an AR optical tech company.[139]\n\nIn August 2022, Walmart announced it would be acquiring Volt Systems, a vendor management and product tracking software company.[140] Walmart announced it was partnering with Paramount to offer Paramount+ content to its Walmart+ subscribers in a bid to better compete with Amazon.[141]\n\nWalmart announced in August 2022 that locations were not going back to 24 hours with most stores now being open between 6am and 11pm.[142]\n\nIn January 2023, Walmart announced it would raise its minimum wage for U.S. hourly workers from $12 to $14 an hour. Approximately 340,000 employees are expected to receive a raise, effective in early March 2023, and Walmart's U.S. average wage is expected to be over $17.50. The company also announced it would be adding additional college degrees and certificates to its Live Better U program.[143]", "output": "Walmart acquired Volt Systems in August 2022. Volt Systems focuses on vendor management and product tracking. They also acquired technology from Thunder Industries in February 2021 to create digital advertisements.", "category": "IT"}, {"instruction": "Tell whether these are countries, cities, continents or neither: Australia, Mexico, Mexico city, Antartica, Singapore, India, Gulf, Beijing, Jakarta, Luxembourg, Vatican City", "input": "", "output": "Australia is a country as well as a continent.\nMexico is a country.\nMexico City is a city.\nAntarctica is a continent.\nSingapore is a country as well as a city.\nIndia is a country.\nGulf is neither.\nBeijing is a city.\nJakarta is a city.\nLuxembourg is a country as well as a city.\nVatican City is a country as well as a city.", "category": "IT"}, {"instruction": "Why do people like gardening?", "input": "", "output": "People like to garden to grow their own food, flowers, and medicine, as well as experience the outdoors and natural ecosystems around us.  Some also like to garden to improve the aesthetics and monetary value of their property.", "category": "IT"}, {"instruction": "I am on a week long vacation to India and specifically want to explore Himalayan state of Himachal Pradesh. How should I plan my trip ?", "input": "", "output": "Firstly , fly to Delhi or Chandigarh. These cities are well connected via flights from across the world.  Next , take an overnight bus to Manali.  There are ample buses available connecting Manali from any cities.  Spend 4 days of your time  enjoying local cuisine and sight seeing.   Do carry wollens  as temperature drops sub zero during the night. Next , head towards Shimla and spend 2 days here for local sightseeing enjoying marvels of British architectures and old mall road.  Wrap up your trip travelling back to Delhi or Chandigarh. Spend time doing some local shopping before you fly back home.", "category": "IT"}, {"instruction": "From the passage provided, extract the second studio album that Taylor Swift released.", "input": "Swift signed a record deal with Big Machine Records in 2005 and released her eponymous debut album the following year. With 157 weeks on the Billboard 200 by December 2009, the album was the longest-charting album of the 2000s decade.[8] Swift's second studio album, Fearless (2008), topped the Billboard 200 for 11 weeks and was the only album from the 2000s decade to spend one year in the top 10.[9][10] The album was certified Diamond by the RIAA.[11] It also topped charts in Australia and Canada, and has sold 12 million copies worldwide.[12] Her third studio album, the self-written Speak Now (2010), spent six weeks atop the Billboard 200[13] and topped charts in Australia, Canada, and New Zealand.[14]", "output": "Fearless", "category": "IT"}, {"instruction": "Is there a World Taekwondo Grand Prix", "input": "The World Taekwondo Grand Prix is a taekwondo competition introduced by the World Taekwondo Federation in 2013 to provide a homogeneous system for qualification to the Olympic taekwondo tournament. It consists of four competitions per year in each Olympic weight category event. Olympic events occur at approximately half the weight classes as WTF-organised tournaments.", "output": "The World Taekwondo Grand Prix is a taekwondo competition introduced by the World Taekwondo Federation in 2013 to provide a homogeneous system for qualification to the Olympic taekwondo tournament. It consists of four competitions per year in each Olympic weight category event. Olympic events occur at approximately half the weight classes as WTF-organised tournaments.", "category": "IT"}, {"instruction": "Based on the provided text, place the following books in chronological order: \nThe Fox in the Attic, In Hazard: A Sea Story, A High Wind in Jamaica, and The Wooden Shepherdess", "input": "\"The Fox in the Attic\" was originally published in 1961 by Chatto & Windus: London as v. 1 of The Human Predicament trilogy, and then in the United States by Harper & Brothers: New York. This was 23 years after Hughes's previous novel, In Hazard: A Sea Story, and 33 years after A High Wind in Jamaica, which was a best seller in the United Kingdom and America.It was published the following year in Sweden (Stockholm: Norstedt) as R\u00e4ven p\u00e5 vinden.\n\nThe second novel in The Human Predicament trilogy, The Wooden Shepherdess, was published in 1973 by Chatto & Windus: London; it carries on the story to 1934 and the Night of the Long Knives.[6] The third and final novel was left unfinished, but the completed twelve chapters were included in the 2000 New York Review of Books edition of The Wooden Shepherdess.[2]", "output": "The order of the books are as follows:\n1) A High Wind in Jamaica\n2) In Hazard: A Sea Story\n3) The Fox in the Attic\n4) The Wooden Shepherdess", "category": "IT"}, {"instruction": "What is the best way to invest my money?", "input": "", "output": "There is no one way to best invest your money, it is based on multiple factors that determines how you should allocate in different asset types. Here are some factors that influence your investment allocation.\n\n- Time horizon: This is the amount of time you intend to have your money invested. This is important as different asset classes are impacted more or less by short term market conditions. Based on how long you wish to be exposed to the market choosing an asset type that aligns with your time horizon is very important in your investment strategy.\n\n- Risk Profile:  Indicates how confortable you are with the impact fluctuating market conditions have in your investments. Higher risk assets offer the biggest returns but they also have a higher chance of going down or loosing your investment completely. Understanding your risk profile is the first step in investing your money well. There are different investments assets that fit into different risk levels, a combination of these will offer a balanced way of investing your money. \n\n- Active/Passive investor: Depending on how much you want to be involved in the asset selection and allocation you would be considered an active investor or passive investor. Active investors are investors that spend extensive amount of time analysing the market and choosing assets for their portfolio. These investors may invest directly into stocks or stock options. Passive investors are investors that want to be exposed to the market but don't want to spend extensive amount of time selecting their assets, these investors leverage ETFs or mutual funds, that bundle different asset classes in one asset, to be exposed to their desired market without the need of choosing their underlying assets.. \n\nTheir is no right or wrong way of investing your money, it is important to understand what type of investor you are and choose what works best for you.", "category": "IT"}, {"instruction": "Do George Lucas and Steven Spielberg know each other?", "input": "", "output": "Yes, George Lucas and Steven Spielberg are long-time friends, dating back to their first meeting in 1967. They have collaborated and supported each other on a number of films and celebrated each others success in the field of filmmaking.", "category": "IT"}, {"instruction": "Give me a list of the best bravo tv shows", "input": "", "output": "Real housewives of Beverly Hills, vanderpump rules, southern charm, real housewives of Orange County, real housewives of New York, summer house, winter house", "category": "IT"}, {"instruction": "What is FIFA?", "input": "The recognised international governing body of football (and associated games, such as futsal and beach soccer)[d] is FIFA. The FIFA headquarters are located in Z\u00fcrich, Switzerland. Six regional confederations are associated with FIFA; these are:[136]\n\nAsia: Asian Football Confederation (AFC)\nAfrica: Confederation of African Football (CAF)\nEurope: Union of European Football Associations (UEFA)\nNorth/Central America & Caribbean: Confederation of North, Central American and Caribbean Association Football (CONCACAF)\nOceania: Oceania Football Confederation (OFC)\nSouth America: Confederaci\u00f3n Sudamericana de F\u00fatbol (South American Football Confederation; CONMEBOL)\nNational associations (or national federations) oversee football within individual countries. These are generally synonymous with sovereign states (for example, the Cameroonian Football Federation in Cameroon), but also include a smaller number of associations responsible for sub-national entities or autonomous regions (for example, the Scottish Football Association in Scotland). 211 national associations are affiliated both with FIFA and with their respective continental confederations.[136]\n\nWhile FIFA is responsible for arranging competitions and most rules related to international competition, the actual Laws of the Game are set by the IFAB, where each of the UK Associations has one vote, while FIFA collectively has four votes.[43]", "output": "FIFA stands for F\u00e9d\u00e9ration internationale de football association. It is the main international governing body for the sport of soccer (called football internationally outside the US)", "category": "IT"}, {"instruction": "From the passage provided, extract the state Lincoln was born in", "input": "Abraham Lincoln (/\u02c8l\u026a\u014bk\u0259n/ LINK-\u0259n; February 12, 1809 \u2013 April 15, 1865) was an American lawyer, politician and statesman who served as the 16th president of the United States from 1861 until his assassination in 1865. Lincoln led the Union through the American Civil War to defend the nation as a constitutional union and succeeded in abolishing slavery, bolstering the federal government, and modernizing the U.S. economy.\n\nLincoln was born into poverty in a log cabin in Kentucky and was raised on the frontier, primarily in Indiana. He was self-educated and became a lawyer, Whig Party leader, Illinois state legislator, and U.S. Congressman from Illinois. In 1849, he returned to his successful law practice in central Illinois. In 1854, he was angered by the Kansas\u2013Nebraska Act, which opened the territories to slavery, and he re-entered politics. He soon became a leader of the new Republican Party. He reached a national audience in the 1858 Senate campaign debates against Stephen A. Douglas. Lincoln ran for president in 1860, sweeping the North to gain victory. Pro-slavery elements in the South viewed his election as a threat to slavery, and Southern states began seceding from the nation. During this time, the newly formed Confederate States of America began seizing federal military bases in the south. Just over one month after Lincoln assumed the presidency, the Confederate States attacked Fort Sumter, a U.S. fort in South Carolina. Following the bombardment, Lincoln mobilized forces to suppress the rebellion and restore the union.", "output": "Lincoln was born in the state of Kentucky", "category": "IT"}, {"instruction": "Who was the first woman to have four country albums reach No. 1 on the Billboard 200?", "input": "", "output": "Carrie Underwood.", "category": "IT"}, {"instruction": "Which coin of U.S currency has the most ridges.", "input": "", "output": "The U.S. half dollar is the winner with 150 ridges.", "category": "IT"}, {"instruction": "What is the difference between a shrub and a tree?", "input": "", "output": "Some biologists maintain that there is no genetic difference between shrubs and trees - some species may have expressions in tree form and shrub form.  Other scientists believe that the physical form is essential and that shrubs are distinct from trees.", "category": "IT"}, {"instruction": "What city in the United States is known for its Mardi Gras celebrations?", "input": "", "output": "New Orleans is famous for its celebrations of Mardi Gras", "category": "IT"}, {"instruction": "Which characters belong to DC or Marvel Universe? Hulk, Spectre", "input": "", "output": "Spectre is DC, Hulk is Marvel", "category": "IT"}, {"instruction": "Extract why Tim Lincecum was called \"The Freak\"", "input": "Timothy Leroy Lincecum (/\u02c8l\u026ans\u0259k\u028cm/ LIN-s\u0259-kum;[1] born June 15, 1984), nicknamed \"The Freak\", \"The Franchise\", \"The Freaky Franchise\" and \"Big Time Timmy Jim\",[2] is an American former professional baseball pitcher. He played in Major League Baseball (MLB) for the San Francisco Giants (2007 to 2015) and Los Angeles Angels (2016). A two-time Cy Young Award winner, Lincecum helped the Giants win three World Series championships from 2010 through 2014.", "output": "Nicknamed \"The Freak\" for his ability to generate powerful pitches despite his slight physique (5 feet 11 inches, 170 pounds), the power pitcher led the National League in strikeouts for three consecutive years in a span from 2008 to 2010. He also led the league in shutouts in 2009 and won the Babe Ruth Award in 2010 as the most valuable player of the MLB postseason. Lincecum won consecutive Cy Young Awards in 2008 and 2009, becoming the first MLB pitcher to win the award in his first two full seasons. He also appeared in four consecutive All-Star Games from 2008 through 2011 and pitched no-hitters in 2013 and 2014.", "category": "IT"}, {"instruction": "Which players won the men's singles grand slam tennis tournaments in 2022.", "input": "", "output": "The following players won the men's singles grand slam tennis tournaments in 2022:\n- Rafael Nadal won the Australian Open and the French Open\n- Novak Djokovic won Wimbledon\n- Carlos Alcaraz won the US Open", "category": "IT"}, {"instruction": "Can you tell me something about Stanley J. Goldberg", "input": "Stanley J. Goldberg (born Maryland, 1939) is a special trial judge of the United States Tax Court.\n\nGoldberg attended public schools in Baltimore, MD. He earned a B.S. from the University of Maryland, School of Business and Public Administration in 1960 and an LL.B. from the University of Maryland School of Law in 1964. He did graduate work in Federal Income Taxation at New York University. Goldberg was admitted to practice in Maryland and New Jersey, 1964 and 1967, and Federal District Court. He began his career as a Tax Attorney in January 1965 with the United States Department of Treasury, Office of Chief Counsel, Internal Revenue Service, in New York City and was initially assigned to the General Litigation function. In 1967, he was reassigned to the Tax Litigation function. In 1976, he was promoted to Special Trial Attorney, and then to Assistant District Counsel in 1984. He was appointed a Special Trial Judge of the United States Tax Court on August 4, 1985.\n\nIn 1992, Goldberg commented on the trend of tax protester arguments being brought before the Tax Court and dismissed with penalties.[1]", "output": "Stanley J. Goldberg (born Maryland, 1939) is a special trial judge of the United States Tax Court.\n\nGoldberg attended public schools in Baltimore, MD. He earned a B.S. from the University of Maryland, School of Business and Public Administration in 1960 and an LL.B. from the University of Maryland School of Law in 1964. He did graduate work in Federal Income Taxation at New York University. Goldberg was admitted to practice in Maryland and New Jersey, 1964 and 1967, and Federal District Court. \n\nHe began his career as a Tax Attorney in January 1965 with the United States Department of Treasury, Office of Chief Counsel, Internal Revenue Service, in New York City and was initially assigned to the General Litigation function. In 1967, he was reassigned to the Tax Litigation function. In 1976, he was promoted to Special Trial Attorney, and then to Assistant District Counsel in 1984. He was appointed a Special Trial Judge of the United States Tax Court on August 4, 1985.\n\nIn 1992, Goldberg commented on the trend of tax protester arguments being brought before the Tax Court and dismissed with penalties.", "category": "IT"}, {"instruction": "Please summarize the causes and cure for color blindness given in the passage?", "input": "The most common cause of color blindness is an inherited problem or variation in the functionality of one or more of the three classes of cone cells in the retina, which mediate color vision.[2] The most common form is caused by a genetic disorder called congenital red\u2013green color blindness. Males are more likely to be color blind than females, because the genes responsible for the most common forms of color blindness are on the X chromosome.[2] Non-color-blind females can carry genes for color blindness and pass them on to their children.[2] Color blindness can also result from physical or chemical damage to the eye, the optic nerve, or parts of the brain.[2] Screening for color blindness is typically done with the Ishihara color test.[2]\n\nThere is no cure for color blindness.[2] Diagnosis may allow an individual, or their parents/teachers to actively accommodate the condition.[1] Special lenses such as EnChroma glasses or X-chrom contact lenses may help people with red\u2013green color blindness at some color tasks,[2] but they do not grant the wearer \"normal color vision\".[3] Mobile apps can help people identify colors.[2]", "output": "The most common cause of color blindness is genetic disorder. Males are more likely to be color blind than females, because the genes responsible for the same are present on the X chromosome. Females who are non-color blind could still carry and pass on genes for color blindness. Any kind of physical or chemical damage to the eye, optic nerve or brain could also lead to the same.\n\nThere is no cure for color blindness. Affected people can actively accommodate the condition or use special glasses or lenses that can help people with red-green color blindness to a certain extent. There are mobile apps available as well to help identify colors.", "category": "IT"}, {"instruction": "How can I improve my finances?", "input": "", "output": "Determine your short and long term financial goals. \nCreate a budget based on your total income, necessary, and discretionary expenses. \nPay down high interest debt first, such as credit card debt.\nPay off your credit cards in full each month. \nCreate an emergency fund that covers 3-6 months of expenses.\nMax out your 401K contributions every year.\nUse a high interest savings account instead of saving money with a traditional bank so you don't lose money due to inflation. \nCreate a diversified investment account.\nHire a financial planner to manage your assets. \nTurn a hobby into a second job and earn passive income. \nReduce temptations to overspend by setting up an automatic transfer from your paycheck into a savings account.", "category": "IT"}, {"instruction": "What is Zenthoefer Furs", "input": "Zenthoefer Furs were an amateur U.S. soccer club which played in St. Louis, Missouri during the late 1940s and early 1950s.\n\nThey had played as a junior squad named Schumachers in the 1947-48 season where they fell short of national honors when they lost in the final round of the National Junior Cup to Lighthouse Boys of Philadelphia. The Zenthoefers turned senior the next season. Under the guidance of manager George E. McGann they made their way to the 1949 National Amateur Cup final losing to SC Elizabeth by a 6-1 score. They also lost to the Chicago Polish-Americans 5-1 in the 1949 National Challenge Cup quarterfinals. In 1951, they won the St. Louis Major League by ten points over St. Louis Simpkins-Ford. In 1952, they entered the American Soccer League of St. Louis.", "output": "Zenthoefer Furs were an amateur U.S. soccer club which played in St. Louis, Missouri during the late 1940s and early 1950s.", "category": "IT"}, {"instruction": "What are the three branches of the US Federal Government?", "input": "", "output": "The US Constitution divides the federal government into three branches: legislative, executive and judicial.  This ensures that no individual or group will have too much power.", "category": "IT"}, {"instruction": "When rock climbing, what is the difference between lead climbing and top rope climbing?", "input": "", "output": "The difference between lead climbing and top rope climbing has to do with the location of the rope when the climb is started. In lead climbing the rope begins at the bottom attached to the climber as well as the belayer. The climber must then bring the rope from the bottom of the route to the top by clipping into a series of quick draws that are generally placed 10-15 feet apart. If a person were to fall while lead climbing, they would be caught by the last quick draw they clipped into. When top rope climbing, the rope is already at the top of the route. This means the climber must tie into one side of the rope while their belayer must clip into the other side of the rope. As the climber ascends higher up the route the belayer must take out the slack of the rope as opposed to lead climbing where the belayer would be giving slack. When a person falls in top rope climbing they will only fall a short distance as the rope is already clipped in above them at the top of the route, so how far they fall will be determined by how much slack the belayer has not taken in.", "category": "IT"}, {"instruction": "Which is a species of fish? Mola mola or Molar", "input": "", "output": "Mola mola", "category": "IT"}, {"instruction": "Imagine a world where life expectancy is fixed and the same for everyone at birth, yet people can engage in life expectancy \"donation\" \u2013\u00a0meaning that someone can extend your life three years longer at the expense of theirs. Talk about a likely scenario in this world that involves manipulated, coerced donation.", "input": "", "output": "Those with power and money could lure the underprivileged groups into \"donating\" their life expectancy in exchange for a better future. Assuming that illnesses are still not eradicated, another scenario involving coerced donation could be those in control of the medications force the patients to cut their life short in order to get treated.", "category": "IT"}, {"instruction": "What are the official languages of the United Nations?", "input": "The official languages of the United Nations are the six languages that are used in UN meetings and in which all official UN documents are written. In the six languages, four are the official language or national language of permanent members in the Security Council, while the remaining two are used due to the large number of their speakers. In alphabetical order of the Latin alphabet, they are:\n\nArabic (Modern Standard Arabic) \u2013 official or national language of several countries in the Middle East and North Africa, and used in the Arab world.\nChinese (Mandarin Chinese in simplified Chinese characters) \u2013 official language of the People's Republic of China.[1][2]\nEnglish \u2013 majority and de facto official language of the United Kingdom, the United States and Australia, and majority (de jure) official language of Canada and New Zealand. It is also the most popular language, the most popular lingua franca, and a majority and/or official language in several other countries and territories.\nFrench \u2013 official language of France. It is also official in Belgium, Switzerland, Canada, and several countries in Africa.\nRussian \u2013 official language of the Russian Federation. It is also used in several post-Soviet states.\nSpanish \u2013 official or national language in 18 countries and one territory in the Americas (mostly Latin America or Hispanic America), Spain, and Equatorial Guinea.", "output": "Arabic, Mandarin Chinese, English, French, Russian, Spanish", "category": "IT"}, {"instruction": "What makes a good sales account executive?", "input": "", "output": "A good Sales account executive will be able to multi-task, manage customer engagement activity for multiple teams, and expand relationships within a customer account by sharing the value proposition of the Company.", "category": "IT"}, {"instruction": "Think up some openings for beginners to the game of Chess", "input": "", "output": "Chess openings are the most important part of the game, there are some advanced ones, some common ones, and some easy ones. This is a list of openings for beginners to the game:\n- The King's Pawn Opening: This is a very common opening, you move your king's pawn 2 spaces forward, so does the opponent. This is followed by developing your knights. \n- The Fianchetto defense. You move your kingside knight's pawn forward 1 space, then you develop the kingside knight. You then put your kingside bishop in the square that the pawn used to be in, followed by castling. This opening is common among lower ranked players.\n- Four Knights Game: This doesn\u2019t happen too much. Both sides start by developing their knights, the pawns take it over from there.\n- The French Defense: You move your king's pawn 1 space forward, followed by developing all of your kingside pieces, and finishing by castling.", "category": "IT"}, {"instruction": "Give me a list of popular current artists in the EDM category.", "input": "", "output": "Currently popular musicians in the EDM, or electronic dance music, genre of music include Illenium, 3LAU, Calvin Harris, Kaskade, and Dimitri Vegas.", "category": "IT"}, {"instruction": "Which sports would be easiest to find success in if you\u2019re not tall: baseball, soccer, basketball, bowling.", "input": "", "output": "Soccer and bowling would be the two easiest sports in this list to succeed in if you\u2019re not tall.", "category": "IT"}, {"instruction": "What is the appeal of Flathead Lake as a Summer vacation destination?", "input": "", "output": "Flathead Lake is the largest natural freshwater lake West of the Mississippi in lower 48 contiguous states, with over 200 square miles of water and 185 miles of coastline.   It is a beautiful lake, surrounded by the tall and impressive Mission Mountains on the east and the smaller Salish Mountains to the west.  It borders several Indian reservations on the Southern end of the lake.\n\nThe lake offers an abundance of Summer activities including: sailing, boating, swimming, and camping.  The lake offers excellent fishing and the fish species in the lake consist primarily of lake trout, pike, yellow perch and whitefish, with some rainbow trout, bass, and salmon. The lake trout can reach monstrous sizes, frequently exceeding twenty-pounds.\n\nOverall, Flathead Lake is one of the premiere recreational and fishing lakes in Montana. It is popular for both fishing and pleasure boating and  the sheer beauty of the lake makes it a memorable one regardless of which activity is pursued.", "category": "IT"}, {"instruction": "What's the difference between tennis and pickleball?", "input": "", "output": "While they are similar sports, tennis and pickleball have various difference. First, the court size for pickleball is about half the size of a tennis court. Second, pickleball is played with a ball that resembles a whiffle ball. Third, pickleball is played with paddles as opposed to rackets. Finally, the scoring system is quite different as you play for points which can only be scored when you or your team are serving.", "category": "IT"}, {"instruction": "What is Linux?", "input": "Linux (/\u02c8li\u02d0n\u028aks/ (listen) LEE-nuuks or /\u02c8l\u026an\u028aks/ LIN-uuks)[11] is a family of open-source Unix-like operating systems based on the Linux kernel,[12] an operating system kernel first released on September 17, 1991, by Linus Torvalds.[13][14][15] Linux is typically packaged as a Linux distribution, which includes the kernel and supporting system software and libraries, many of which are provided by the GNU Project. Many Linux distributions use the word \"Linux\" in their name, but the Free Software Foundation uses the name \"GNU/Linux\" to emphasize the importance of GNU software, causing some controversy.[16][17]", "output": "After AT&T had dropped out of the Multics project, the Unix operating system was conceived and implemented by Ken Thompson and Dennis Ritchie (both of AT&T Bell Laboratories) in 1969 and first released in 1970. Later they rewrote it in a new programming language, C, to make it portable. The availability and portability of Unix caused it to be widely adopted, copied and modified by academic institutions and businesses.\n\nIn 1977, the Berkeley Software Distribution (BSD) was developed by the Computer Systems Research Group (CSRG) from UC Berkeley, based on the 6th edition of Unix from AT&T. Since BSD contained Unix code that AT&T owned, AT&T filed a lawsuit (USL v. BSDi) in the early 1990s against the University of California. This strongly limited the development and adoption of BSD.[5][6]\n\nOnyx Systems began selling early microcomputer-based Unix workstations in 1980. Later, Sun Microsystems, founded as a spin-off of a student project at Stanford University, also began selling Unix-based desktop workstations in 1982. While Sun workstations didn't utilize commodity PC hardware like Linux was later developed for, it represented the first successful commercial attempt at distributing a primarily single-user microcomputer that ran a Unix operating system.[7][8]\n\nIn 1983, Richard Stallman started the GNU project with the goal of creating a free UNIX-like operating system.[9] As part of this work, he wrote the GNU General Public License (GPL). By the early 1990s, there was almost enough available software to create a full operating system. However, the GNU kernel, called Hurd, failed to attract enough development effort, leaving GNU incomplete.[citation needed]\n\nIn 1985, Intel released the 80386, the first x86 microprocessor with a 32-bit instruction set and a memory management unit with paging.[10]\n\nIn 1986, Maurice J. Bach, of AT&T Bell Labs, published The Design of the UNIX Operating System.[11] This definitive description principally covered the System V Release 2 kernel, with some new features from Release 3 and BSD.\n\nIn 1987, MINIX, a Unix-like system intended for academic use, was released by Andrew S. Tanenbaum to exemplify the principles conveyed in his textbook, Operating Systems: Design and Implementation. While source code for the system was available, modification and redistribution were restricted. In addition, MINIX's 16-bit design was not well adapted to the 32-bit features of the increasingly cheap and popular Intel 386 architecture for personal computers. In the early nineties a commercial UNIX operating system for Intel 386 PCs was too expensive for private users.[12]\n\nThese factors and the lack of a widely adopted, free kernel provided the impetus for Torvalds' starting his project. He has stated that if either the GNU Hurd or 386BSD kernels had been available at the time, he likely would not have written his own.[13][14]", "category": "IT"}, {"instruction": "Given a reference text about Jen Shah, what is she famous from, when was she criminally charged, what was the verdict, and when was she sentenced.", "input": "Shah starred on the reality television series The Real Housewives of Salt Lake City, which premiered in November 2020.[7] In March 2021, she was criminally charged with conspiracy to commit money laundering and wire fraud, pleading not guilty to both charges days later.[8][9] Her legal case was chronicled in the documentary film Housewife and the Shah Shocker, which premiered on Hulu in November that same year.[10] In July 2022, Shah pleaded guilty to conspiracy to commit wire fraud. In January 2023, Shah was sentenced to six-and-a-half years in prison.[11] Shah began her prison sentence the following month.[2]", "output": "Jen Shah came into the spotlight in November 2020 when The Real Housewives of Salt Lake City aired. In March 2021 she was charged with conspiracy to commit money laundering as well as wire fraud. She pled not guilty, but then come July 2022 she plead guilty to commit wire fraud. January of 2023 she was sentenced to 6.5 years in prison and her sentence began in February.", "category": "IT"}, {"instruction": "What are the classifications of Academic Degrees?", "input": "", "output": "An academic degree is a qualification awarded to students upon successful completion of a course of study in higher education, usually at a college or university. These institutions commonly offer degrees at various levels, usually including undergraduate degrees, master's, and doctorates, often alongside other academic certificates and professional degrees. The most common undergraduate degree is the bachelor's degree, although in some countries there are lower-level higher education qualifications that are also titled degrees (e.g. associate degrees and foundation degrees).", "category": "IT"}, {"instruction": "What types of problems in government could AI be used to solve", "input": "The potential uses of AI in government are wide and varied, with Deloitte considering that \"Cognitive technologies could eventually revolutionize every facet of government operations\". Mehr suggests that six types of government problems are appropriate for AI applications:\n- Resource allocation - such as where administrative support is required to complete tasks more quickly.\n- Large datasets - where these are too large for employees to work efficiently and multiple datasets could be combined to provide greater insights.\n- Experts shortage - including where basic questions could be answered and niche issues can be learned.\n- Predictable scenario - historical data makes the situation predictable.\n- Procedural - repetitive tasks where inputs or outputs have a binary answer.\n- Diverse data - where data takes a variety of forms (such as visual and linguistic) and needs to be summarised regularly.", "output": "The potential uses of AI in government are wide and varied but some appropriate areas to consider AI applications include: Resource allocation; Large datasets; Repetitive tasks; Answering basic questions; Summarising data from multiple forms; Predicting future scenarios based on historical data.", "category": "IT"}, {"instruction": "Why isn't multi-threading making my Python code faster? How can I fix it.", "input": "", "output": "Python restricts access to the interpreter with a Global Interpreter Lock, referred to as the GIL, for internal thread-safety requirements. Unfortunately, this design decision restricts only allows one thread to interpret Python code at a time, even on a machine with the capability to run multiple threads together. \n\nIf you wish to run Python code on a set of data, and the data can be broken up into independent segments (a process known as data partitioning), you may wish to look into the multiprocessing library in Python. \n\nAs an example, consider the function foo which takes one argument, arg1, and say you wanted to run the foo function on a number of values, say, val1, val2, and val3.\n\ndef foo(arg1):\n  # do something\n\nif __name__ == '__main__':\n  foo(val1)\n  foo(val2)\n  foo(val3)\n\nTo have foo execute on multiple processes together, you could use the multiprocessing Pool  to run multiple worker processes together:\n\nfrom multiprocessing import Pool\n\ndef foo(arg1):\n  # do something\n\nif __name__ == '__main__':\n  p = Pool()\n  p.map(foo, [val1, val2, val3])\n\nThe multiprocessing library also provides various other APIs for parallel programming. Would you like to know more?", "category": "IT"}, {"instruction": "Who is the best NBA player of all time?", "input": "", "output": "This can be discussed but it is often admitted that Michael Jordan is the best NBA player of all time.", "category": "IT"}, {"instruction": "Classify each as either a vodka drink or a gin drink: Screwdriver, Bloody Mary, French 75, White Russian, Gimlet, Cosmopolitan, Tom Collins, Negroni", "input": "", "output": "Screwdrivers, Bloody Mary's, White Russians, and Cosmopolitans are traditionally vodka cocktails, whereas French 75's, Gimlets, Tom Collins', and Negronis are traditionally gin cocktails.", "category": "IT"}, {"instruction": "How can I get better performance when querying a delta table?", "input": "", "output": "To get better performance when querying a delta table, there are many things you can do.  \n\nFirst, ensure you are using the Photon engine.  The Photon engine is designed to handle high-concurrency and low-latency queries.  If you are using DBSQL, Photon is included free of charge and is turned on by default.\n\nSecond, you can use different indexing techniques when writing a Delta table for better read performance.  Z-ordering and bloom filters are two effective techniques when used correctly.\n\nThird, ensure your SQL Warehouse or compute resource is appropriately sized.  If you are trying to query a very large dataset from a very small warehouse, you will likely get slow query results.", "category": "IT"}, {"instruction": "Which of the following are colors: red, black, yellow, orange, sun, sunflower, chips, book, white, pink, blue, keyboard.", "input": "", "output": "The colors are: red, black, yellow, orange, white, pink and blue.", "category": "IT"}, {"instruction": "What type of weather is San Francisco famous for?", "input": "", "output": "San Francisco is a famously foggy city", "category": "IT"}, {"instruction": "As an expert skier, what are the top resorts in the US to go skiing?", "input": "", "output": "There are many ski resorts in the United States that offer challenging terrain for expert level skiers.  Som of the top resorts are: Big Sky, Jackson Hole, Pallisades, Crested Butte, Telluride, and Silverthorn", "category": "IT"}, {"instruction": "What's the game engine used by Bethesda before Creation Engine? And what's the last game make with it?", "input": "After using the Gamebryo engine to create The Elder Scrolls III: Morrowind, The Elder Scrolls IV: Oblivion, and Fallout 3, Bethesda decided that Gamebryo's capabilities were becoming too outdated and began work on the Creation Engine for their next game, The Elder Scrolls V: Skyrim, by forking the codebase used for Fallout 3.\n\nFollowing the completion of Skyrim, Bethesda set out to enhance the graphical core of the Creation Engine by first adding a physically based deferred renderer to allow for more dynamic lighting and to paint materials object surfaces with realistic materials. Bethesda worked with technology company Nvidia to implement volumetric lighting through a technique that makes use of hardware tesselation.[1][2] Additionally the updated version of the Creation Engine powering Bethesda's Fallout 4 offers more advanced character generation.[3][4][5]", "output": "Gamebryo was the engine used by Bethesda before Creation Engine. It is developed by Gamebase Cot., Ltd and Gamebase USA. Gamebryo is used by numerous companies within the gaming industry.\n\nBethesda decided that Gamebryo's capabilities were becoming too outdated and began work on the Creation Engine for their next game, The Elder Scrolls V: Skyrim, by forking the codebase used for Fallout 3.\n\nThe last game from Bethesda made with Gamebryo engine is Fallout 3 (2008).", "category": "IT"}, {"instruction": "What is the PGA Championship?", "input": "The PGA Championship (often referred to as the US PGA Championship or USPGA outside the United States[2][3][4]) is an annual golf tournament conducted by the Professional Golfers' Association of America. It is one of the four men's major championships in professional golf.", "output": "The PGA Championship (often referred to as the US PGA Championship or USPGA outside the United States[2][3][4]) is an annual golf tournament conducted by the Professional Golfers' Association of America. It is one of the four men's major championships in professional golf.\n\nIt was formerly played in mid-August on the third weekend before Labor Day weekend, serving as the fourth and final men's major of the golf season. Beginning in 2019, the tournament is played in May on the weekend before Memorial Day, as the season's second major following the Masters Tournament in April. It is an official money event on the PGA Tour, European Tour, and Japan Golf Tour, with a purse of $11 million for the 100th edition in 2018.\n\nIn line with the other majors, winning the PGA gains privileges that improve career security. PGA champions are automatically invited to play in the other three majors (Masters Tournament, U.S. Open, and The Open Championship) and The Players Championship for the next five years, and are eligible for the PGA Championship for life. They receive membership on the PGA Tour for the following five seasons and on the European Tour for the following seven seasons. The PGA Championship is the only one of the four majors that is exclusively for professional players.\n\nThe PGA Championship has been held at various venues. Some of the early sites are now quite obscure, but in recent years, the event has generally been played at a small group of celebrated courses.", "category": "IT"}, {"instruction": "What fruits and vegetables are grown in lower-lying areas of Kenya?", "input": "Tea, coffee, sisal, pyrethrum, corn, and wheat are grown in the fertile highlands, one of the most successful agricultural production regions in Africa.[117] Livestock predominates in the semi-arid savanna to the north and east. Coconuts, pineapples, cashew nuts, cotton, sugarcane, sisal, and corn are grown in the lower-lying areas. Kenya has not attained the level of investment and efficiency in agriculture that can guarantee food security, and coupled with resulting poverty (53% of the population lives below the poverty line), a significant portion of the population regularly starves and is heavily dependent on food aid.[166] Poor roads, an inadequate railway network, under-used water transport, and expensive air transport have isolated mostly arid and semi-arid areas, and farmers in other regions often leave food to rot in the fields because they cannot access markets. This was last seen in August and September 2011, prompting the Kenyans for Kenya initiative by the Red Cross.[173]", "output": "Coconuts, pineapples and corn are grown in lower-lying areas of Kenya.", "category": "IT"}, {"instruction": "Is Paris a good city to live in?", "input": "", "output": "Paris is the so called city of light. Other people call it the museum city. The reason for this is that you can find art in almost every corner in Paris, and beauty is everywhere. However, the price for living in the city can be very high. It would be a good city lo live in if you enjoy being surrounded by culture, art, good restaurants and museums; however, you have to take into account that you will probably be living surrounded by tourist and paying a very high price.", "category": "IT"}, {"instruction": "How are weather forecasts created?", "input": "", "output": "Weather forecasts are created by combining data from many sources, such as satellites, weather balloons, and ground stations.  Those data points are then fed to large computer systems with sophisticated models to predict how the weather will change over time.  \n\nWeather sites and even local weather forecasters use this information to provide a regional and short-term forecasts.", "category": "IT"}, {"instruction": "Since when did the SR22 include a glass cockpit", "input": "SR22s and SR20s built before 2003 were equipped with traditional analog instruments and a 10\" (later 12\") Multi-function display (MFD). In February 2003, Cirrus began offering SR22s with the Avidyne Entegra primary flight display (PFD), making the plane the first of its kind to come with a glass cockpit.[32] Later that year, this instrumentation became standard equipment on all SR-series aircraft and sparked a major transition in general aviation, whereby over 90% of all new light aircraft by the year 2006 were equipped with glass cockpits.[33][34] Retrofits are available for the older SR aircraft that replace the analog instrument panels with one that includes a PFD, a new MFD and the installation of back-up mechanical instruments.[35]\n\nOn 22 May 2008, Cirrus revealed the \"Cirrus Perspective\" glass cockpit (by Garmin).[36] Both cockpits were available for a while (the Avidyne cockpit was initially standard equipment) and after 2008 the SR22 was sold with only the Perspective panel.\n\nIn 2009, the third-generation Cirrus SR22 GTS came equipped with a new enhanced vision system (EVS), a sophisticated dual-wavelength instrument that offers both infrared and synthetic vision.[37]\n\nAt the 2010 EAA AirVenture, Cirrus announced its plans to certify Garmin's ESP system (Electronic Stability and Protection) on the Cirrus SR22. It included advanced flight envelope protection that could stabilize the aircraft with the push of a button, to avoid spiral from developing.[38]\n\nThe Cirrus Perspective-Plus avionics flight deck was introduced in 2017, with a faster processing speed, animated datalink weather, payload management, visual approach capabilities, wireless database uploads, glass back-up instruments, and more.[39]\n\nIn 2020, the Perspective-Plus flight deck included a new stabilized approach advisory system which provides alerts to the pilot of unstable conditions during approach.[23]", "output": "Since February 2003 Cirrus started to offer a glass panel for the SR22. First the Avidyne Entegra was offered to customers. Also retrofits became available for older SR versions. In May 2008, Cirrus revealed the \"Cirrus Perspective\" glass cockpit, which was based on instruments created by Garmin.\n\nUntil today, Cirrus is including Garmin glass cockpits in it's aircrafts.", "category": "IT"}, {"instruction": "Give me a bulleted list of the first ten MacOS (operating system) versions.", "input": "", "output": "1. Mac OS X 10.0 (Cheetah)\n2. Mac OS X 10.1 (Puma)\n3. Mac OS X 10.2 (Jaguar)\n4. Mac OS X 10.3 (Panther)\n5. Mac OS X 10.4 (Tiger)\n6. Mac OS X 10.5 (Leopard)\n7. Mac OS X 10.6 (Snow Leopard)\n8. Mac OS X 10.7 (Lion)\n9. OS X 10.8 (Mountain Lion)\n10. OS X 10.9 (Mavericks)", "category": "IT"}, {"instruction": "What do you know about the city of Aberdeen in Scotland?", "input": "", "output": "Aberdeen is a city located in the North East of Scotland. As of 2020 it had a population of 200,000 people and is the third largest city in Scotland, behind Edinburgh (435,000) and Glasgow (610,000). Aberdeen has been referred to as \"The Silver City\" due to the high number of buildings in the city constructed of Granite from the local quarry, which may sparkle on the rare occasion that the sunlight hits the buildings.  Since the 1960's the city's economy has largely revolved around Oil & Gas due to its proximity to the North Sea Oil discovery.   Aberdeen has two universities; the University of Aberdeen and Robert Gordon University. Notable people who have been associated with Aberdeen include singer Annie Lennox, golfer Paul Lawrie and architect Archibald \"Archie\" Simpson.", "category": "IT"}, {"instruction": "What is the English Premier League?", "input": "", "output": "The English Premier League is the top flight of English football.", "category": "IT"}, {"instruction": "Classify the following types of cars as \"economy\" or \"luxury\": Ford, Chevrolet, Lamborghini, Ferrari, Mercedes, Honda, Lexus, Toyota, Nissan, Subaru", "input": "", "output": "Ford, Chevrolet, Honda, Toyota, and Subaru are high-quality car brands, but are generally not considered to be \"luxury\" brands. Lamborghini, Ferrari, Mercedes, and Lexus are luxury brands.", "category": "IT"}, {"instruction": "Please list down some key points  regarding governance system of Portland from the given text", "input": "The government of Portland, Oregon is based on a city commission government system. Elected officials include the mayor, commissioners, and a city auditor. The mayor and commissioners (members of City Council) are responsible for legislative policy and oversee the various bureaus that oversee the day-to-day operation of the city. Portland began using a commission form of government in 1913 following a public vote on May 3 of that year. Each elected official serves a four-year term, without term limits. Each city council member is elected at-large. In 2022, Portland residents approved a ballot measure to replace the commission form of government with a 12-member council elected in four districts using single transferable vote, with a professional city manager appointed by a directly-elected mayor, with the first elections to be held in 2024.", "output": "1. Portland, Oregon's governance is built on a city commission system.\n2. Elected representatives include a city auditor, commissioners, and the mayor.\n3. The mayor and commissioners, who make up the City Council, are in charge of setting legislative policy and managing the different bureaus in charge of running the city on a daily basis.\n4. After a popular vote on May 3 of that year, Portland adopted a commission system of governance.\n5. There are no term limitations on the terms of each elected official's four-year terms.\n6. All members of the municipal council are chosen at-large.\n7. Portland voters approved a ballot measure in 2022 to replace the commission form of government with a 12-member council elected in four districts using a single transferable vote, with a professional city manager appointed by a directly-elected mayor. The first elections under the new system would take place in 2024.", "category": "IT"}, {"instruction": "Which river can you hike in Utah?", "input": "Hiking The Narrows is arguably the quintessential Zion experience. The Narrows can be hiked either as a top-down through-hike from Chamberlain Ranch to the Temple of Sinawava, or as an up-and-back bottom-up hike from the Temple of Sinawava. Hiking is done largely in the river as, for a third of the route, the river runs canyon wall to canyon wall. Water levels change from season to season; most hikers will wade at least waist-deep and many will swim a few short sections. \n\nThe Narrows is the narrowest section of Zion Canyon in Zion National Park, Utah, United States.", "output": "The Narrows at Zion National Park", "category": "IT"}, {"instruction": "What is predictive maintenance?", "input": "", "output": "Predictive Maintenance is widely used in the manufacturing industry. It is all about figuring out when an asset should be maintained, and what specific maintenance activities need to be performed, based on an asset\u2019s actual condition or state, rather than on a fixed schedule, so that you can maximize uptime and productivity. It is all about predicting & preventing failures and performing the right maintenance routines in order to reduce costly equipment downtimes.", "category": "IT"}, {"instruction": "Who are N-Dubz?", "input": "", "output": "N-Dubz are a popular band in the United Kingdom, made up of Tulisa, Fazer, and Dappy, formed out of London. The band were formed when they were young teenagers in the early 2000s. They were inspired to form the band by Dappy's late father, known to the band as \"Uncle B\". Their song \"Papa can you hear me?\" is a tribute to Uncle B. Tulisa and Dappy are cousins, whilst Fazer has always been a close friend.\nThe trio have had many successful hits, and collaborated with popular artists like Tinchy Strider and Skepta. They parted ways in 2011, and Dappy started a solo career, whilst Tulisa became a judge on the popular UK show \"The X Factor\". She formed and mentored the winning band Little Mix. \nThe band reunited in 2022 and released new music, along with a sold out UK tour.", "category": "IT"}, {"instruction": "When was Lamb Air operating", "input": "Lamb Air Ltd. was a Canadian airline that began operations in 1934 in The Pas, Manitoba, and went out of business in 1981.\n\nHistory\nTom Lamb was the son of Thomas Henry Peacock (THP) Lamb, who had emigrated from England in the late 19th century. THP Lamb turned from school teacher to fur trader and in 1900, started Lamb's Store in Moose Lake, Manitoba. Tom and his brothers and sisters grew up in northern Manitoba and worked for their father.\n\nTom Lamb left school before finishing grade 3. Later in life, he would make the comment, while giving his acceptance speech when receiving his honorary Doctorate of law from the University of Manitoba, \"If I had only gotten to grade 4\". At the age of 10, Tom, who had his own team of horses and sleigh, was competing with grown men in the fish hauling business. He would have to use fish boxes to step up on to be able to load his sleigh.\n\nOne of the Lamb family's businesses was \"logistics and transportation\". Fish, lumber, trees, fur and supplies needed to be hauled by any and all means. Dog teams, horses, boats, trucks and tractors were used. In the 1930s there was a transportation revolution happening. The aircraft was making its way into northern Canada. The first time Tom Lamb saw an aircraft he realized its potential. In 1930, Tom bought his first aircraft - a Stinson SR8. In 1930, Tom Lamb travelled to Winnipeg to learn to fly. To keep costs to a minimum, he lived in a tent behind the Winnipeg Flying Club. When he returned to The Pas and checked himself out on the Stinson.\n\nIn 1935, Tom incorporated Lamb Airways Limited. The airline had some name changes throughout the years and Tom became one of the best known Manitobans, if not Canadians, in the world. His adventures have been documented in books, a television documentary and even a song.", "output": "Lamb Air Ltd. was a Canadian airline that began operations in 1934 in The Pas, Manitoba, and went out of business in 1981.\n\nHistory\nTom Lamb was the son of Thomas Henry Peacock (THP) Lamb, who had emigrated from England in the late 19th century. THP Lamb turned from school teacher to fur trader and in 1900, started Lamb's Store in Moose Lake, Manitoba. Tom and his brothers and sisters grew up in northern Manitoba and worked for their father.\n\nTom Lamb left school before finishing grade 3. Later in life, he would make the comment, while giving his acceptance speech when receiving his honorary Doctorate of law from the University of Manitoba, \"If I had only gotten to grade 4\". At the age of 10, Tom, who had his own team of horses and sleigh, was competing with grown men in the fish hauling business. He would have to use fish boxes to step up on to be able to load his sleigh.\n\nOne of the Lamb family's businesses was \"logistics and transportation\". Fish, lumber, trees, fur and supplies needed to be hauled by any and all means. Dog teams, horses, boats, trucks and tractors were used. In the 1930s there was a transportation revolution happening. The aircraft was making its way into northern Canada. The first time Tom Lamb saw an aircraft he realized its potential. In 1930, Tom bought his first aircraft - a Stinson SR8. In 1930, Tom Lamb travelled to Winnipeg to learn to fly. To keep costs to a minimum, he lived in a tent behind the Winnipeg Flying Club. When he returned to The Pas and checked himself out on the Stinson.\n\nIn 1935, Tom incorporated Lamb Airways Limited. The airline had some name changes throughout the years and Tom became one of the best known Manitobans, if not Canadians, in the world. His adventures have been documented in books, a television documentary and even a song.", "category": "IT"}, {"instruction": "Write a haiku about how much I love pickles.", "input": "", "output": "Caressed by sweet brine,\nyou are crispy and crunchy.\nOh, won\u2019t you be mine?", "category": "IT"}, {"instruction": "What are the two longest rivers located in the United States?", "input": "", "output": "Mississippi and Missouri rivers", "category": "IT"}, {"instruction": "What are the words of House Reed?", "input": "", "output": "\"We Remember\"", "category": "IT"}, {"instruction": "What movies won best picture Oscars the last 5 years", "input": "", "output": "2023 Everything Everywhere All at Once\n2022 CODA\n2021 Nomadland \n2020 Parasite\n2019 Green Book", "category": "IT"}, {"instruction": "Classify each of the following grades as being in elementary or high school: 10th grade, 3rd grade, 4th grade, 12th grade, 1st grade.", "input": "", "output": "10th Grade: High School\n3rd Grade: Elementary School\n4th Grade: Elementary School\n12th Grade: High School\n1st Grade: Elementary School", "category": "IT"}, {"instruction": "Why is Brazilian jiu jitsu an excellent martial art?", "input": "", "output": "Brazilian jiu jitsu (BJJ) is an excellent martial art for a number of reasons.  BJJ is, first and foremost, a generally safe martial art.  BJJ does not emphasize or focus on striking techniques like punching and kicking, rather, BJJ focuses on use of leverage and body mechanics to control and subdue an opponent.  BJJ is accessible to almost anyone regardless of age, sex, or fitness level as the practitioner can determine how relaxed or aggressive to be during practicing the art.  BJJ is an excellent form of exercise and promotes cardiovascular fitness, flexibility, strength, endurance, and an overall sense of well-being.  Further, there are approaches to BJJ that resonate with people who are casual hobbyists as well as those that seek international competition- and all levels of studends across that spectru.  BJJ is easily a life-long endeavor that is safe, engaging, and also an excellent complement to striking based martial arts such as karate, kickboxing, and boxing.", "category": "IT"}, {"instruction": "What is Cup Game?", "input": "The cup game is a children's clapping game that involves tapping and hitting a cup using a defined rhythm.", "output": "The cup game is a children's clapping game that involves tapping and hitting a cup using a defined rhythm. The game can be played by many players seated around a table and is often played in large groups. Each player possesses a cup and in unison the players tap out the defined rhythm using their cups. It can be played competitively, where the rhythm speeds up in each \"round\", and a player making a mistake in the rhythm must drop out of the game, with a new \"round\" starting after each elimination, and game play continuing until only one player remains, with that player being the winner.", "category": "IT"}, {"instruction": "Which is a bird or fish: Blackchin, Black redstart", "input": "", "output": "Blackchin is a fish, Black redstart is a bird", "category": "IT"}, {"instruction": "Let\u2019s solve the following math problem. Each rabbit has 4 feets and each duck has 2 feets. If there are in total 25 heads and 88 feets, how many rabbits and how many ducks are there?", "input": "", "output": "Let\u2019s use equations to solve it! \nLet the number of ducks be X and the number of rabbits be Y.\nWe have X + Y = 25 and 2X + 4Y = 88.\nSimplifying the first equation, we get Y = 25 - X\nSubstitute that in the second equation, we will get 2X + 4(25-X) = 88,\nThus 100 - 2X = 88\nWhich means 2X = 100 \u2013 88 = 12, thus X = 6.\nWe substitute back into the first equation, we have Y = 25 - 6 = 19.\nThere are 6 ducks and 19 rabbits!", "category": "IT"}, {"instruction": "Classify the following water bodies into oceans, seas, rivers and lakes- aral, pacific, baikal, superior, amazon, colorado, indian, arabian, north, baltic, okhotosk, tahoe, victoria, lena, danube, arctic, mekong", "input": "", "output": "oceans- pacific, indian, arctic\nseas- okhotosk, aral, arabian, north, baltic\nrivers- amazon, colorado, lena, danube, mekong\nlakes- superior, tahoe, victoria , baikal", "category": "IT"}, {"instruction": "From the passage find the list of banks who supported Yes Bank in 2020. Display the results in comma separated format.", "input": "The history of Yes Bank can be traced back to 1999, when three Indian bankers decided to launch a non-banking financial enterprise together. They were Ashok Kapur, who had previously worked as the national head for the ABN Amro Bank, Harkirat Singh, who had previously worked as the country head for the Deutsche Bank, and Rana Kapoor, who had previously worked as the head of corporate finance for the ANZ Grindlays Bank. The Rabobank in the Netherlands held the remaining 75% of the shares in the non-banking financial business. The three Indian promoters each owned 25% of the company. In 2003, it was rebranded as the Yes Bank. It was also the same year that Harkirat Singh resigned due to concerns over the influence exercised by Rabobank in the hiring of CEO and executive chairman positions.[7]\n\nYes Bank has been unable to raise capital over the past few years, which has led to a steady deterioration in its financial position. This has resulted in potential loan losses, which in turn led to downgrades, which prompted investors to invoke bond covenants, and a withdrawal of deposits by customers. Over the course of the previous four quarters, the bank racked up losses and very little income.[8] Rana Kapoor was fired as a result, and he was arrested in connection with a INR 466 crore money laundering case.\n\nThe bank's management, under the new leadership of Kumar, immediately repositioned itself and dealt with all internal and market related challenges to restore customer and depositor confidence.[9] Under the coordinated efforts of the new board and management, Mehta assured shareholders of a speedy recovery, even as the Reserve Bank of India (RBI), State Bank of India (SBI), HDFC Bank, ICICI Bank, Axis Bank and other banks lent it support through the historic Yes Bank Reconstruction Scheme 2020.[10]\n\nIn July 2020, Yes Bank Ltd closed their follow-on public offer (FPO) with 95% subscription, driven by institutional investors.[11]\n\nAs of 28 July 2020, Yes Bank is an associate of State Bank of India which has a 30% stake in the company.[12]\n\nOn 21 February 2023, Yes Bank issued 2,13,650 equity shares to its employees under the company ESOP plan.[13]", "output": "Reserve Bank of India (RBI), State Bank of India (SBI), HDFC Bank, ICICI Bank, Axis Bank", "category": "IT"}, {"instruction": "What is WestWorld?", "input": "Westworld is an American dystopian science fiction western television series created by Jonathan Nolan and Lisa Joy that first aired on October 2, 2016, on HBO. It was based upon the 1973 film of the same name written and directed by Michael Crichton and loosely upon its 1976 sequel, Futureworld.", "output": "Westworld is an American dystopian science fiction western television series created by Jonathan Nolan and Lisa Joy that first aired on October 2, 2016, on HBO. It was based upon the 1973 film of the same name written and directed by Michael Crichton and loosely upon its 1976 sequel, Futureworld.\n\nThe story begins in Westworld, a fictional, technologically advanced Wild-West-themed amusement park populated by android \"hosts\". The park caters to high-paying guests who may indulge their wildest fantasies within the park without fear of retaliation from the hosts, who are prevented by their programming from harming humans. Later on, the series' setting expands to the real world, in the mid-21st century, where people's lives are driven and controlled by a powerful artificial intelligence named Rehoboam.\n\nNolan and Joy served as showrunners. The second, third and fourth season followed in April 2018, March 2020, and June 2022, respectively. Nolan and Joy planned a fifth and final season, and were in negotiations with HBO to produce it.[7] However, in November 2022, it was announced that HBO had canceled the series.[8] The series was removed from HBO Max on December 18, 2022.\n\nWestworld's debut on HBO had the network's highest viewership ratings for a premiere since the first episode of True Detective, in 2014. Westworld's first season is the most-watched first season of any HBO original series. The first season also received critical acclaim and was highly praised for its performances, visuals, narrative, themes and soundtrack from Ramin Djawadi. Reception of the series declined from the second season onwards, with the scripts, characterization and narrative opacity being targeted for criticism; viewership ratings also diminished throughout its run. It has received numerous accolades, winning nine Primetime Emmy Awards out of 54 nominations. Thandiwe Newton won the Primetime Emmy Award for Outstanding Supporting Actress in a Drama Series in 2018.", "category": "IT"}, {"instruction": "Best beach vacation in the world", "input": "", "output": "1. Maldives (Best resorts with All inclusive )\n2. Mauritius \n3. Cancun", "category": "IT"}, {"instruction": "What makes for a good photograph?", "input": "", "output": "There are three key elements to a good picture - light, subject and composition. Great photographs are in focus, sharp, have good exposure (light) and composition.  In order to take the perfect photograph you must be at the correct focal length, set the appropriate aperture for the subject(s) in your frame, make sure the shutter speed is set for the action you are capturing (higher shutter speed for sports, lower shutter speed for portraits) and make sure the ISO is correctly set to work with both the shutter speed and aperture.  Understanding how the ISO, Aperture and shutter speed work together is key to taking the perfect picture.", "category": "IT"}, {"instruction": "What is Terraform?", "input": "", "output": "Terraform is an infrastructure as code tool that lets you build/deploy, change, and version cloud and on-prem resources safely and efficiently.", "category": "IT"}, {"instruction": "Why do cooks use kosher salt?", "input": "", "output": "Many cooks prefer kosher salt because it has larger grains which makes it easier to pinch as well as to sprinkle more evenly across food.  Additionally when you purchase a particular brand of kosher salt it provides consistency and reliability to your recipe usage over time.", "category": "IT"}, {"instruction": "From the paragraph, tell me what is the fourth longest natural arch in the world", "input": "Landscape Arch is a natural arch in Arches National Park, Utah, United States. It is among the longest natural rock arches in the world. The arch is among many in the Devils Garden area in the north of the park. Landscape Arch was named by Frank Beckwith who explored the area in the winter of 1933\u20131934 as the leader of an Arches National Monument scientific expedition. The arch can be reached by a 0.8 mi (1.3 km) graded gravel trail.\n\nThe Natural Arch and Bridge Society (NABS) considers Landscape Arch the fifth longest natural arch in the world, after four arches in China. In 2004, the span of Landscape Arch was measured at 290.1 ft (88.4 m), \u00b10.8 ft (0.24 m), with a height of 77.5 ft (23.6 m). NABS measured the span of the slightly shorter Kolob Arch in Zion National Park at 287 ft (87 m) in 2006.\n\nThe most recent recorded rockfall events occurred in the 1990s when one large slab fell in 1991 and then two additional large rockfalls occurred in 1995. Since the rockfalls, the trail beneath the arch has been closed.", "output": "The article does not mention where the fourth longest natural arch in the world is. However, it does say that the top four are in China. The fifth longest one is the Landscape Arch in Utah, United States.", "category": "IT"}, {"instruction": "What are the top reasons to become a vegan?", "input": "", "output": "-climate change \n-animal agriculture \n-health", "category": "IT"}, {"instruction": "If each client was served by the same number of professionals, how many professionals (round to one decimal place) would each client be served by?", "input": "RGP, formerly known as Resources Global Professionals, is the operating arm of Resources Connection, Inc. (NASDAQ:RGP). The company provides consulting services in the areas of finance & accounting; information management; governance, risk & compliance (GRC); human capital; legal & regulatory; corporate advisory & restructuring; strategic communications; and supply chain management.[1] As of fiscal year ending May 28, 2016, the company employed 3,283 professionals in 68 offices in 20 countries around the world.[2] The company reported serving over 1,700 clients.[3] Company headquarters are located in Irvine, CA.", "output": "3283 professionals and 1700 clients, so 3283/1700 = 1.9 professionals serving each client.", "category": "IT"}, {"instruction": "From the passage provided, extract the languages in which Kishore Kumar provided his vocals as a playback singer. Separate them with a comma.", "input": "Kishore Kumar (born Abhas Kumar Ganguly; pronunciation (help\u00b7info); 4 August 1929 \u2013 13 October 1987) was an Indian playback singer and actor.[12] He is widely regarded as one of the greatest, most influential and dynamic singers in the history of Indian music.[13][14] He was one of the most popular singers in the Indian subcontinent, notable for his yodeling and ability to sing songs in different voices.[15] He used to sing in different genres but some of his rare compositions, considered classics, were lost in time.[16][17][18] According to his brother and legendary actor Ashok Kumar, Kishore Kumar was successful as a singer because his \"voice hits the mike, straight, at its most sensitive point\".[19]\n\nBesides Hindi, he sang in many other Indian languages, including Bengali, Marathi, Assamese, Gujarati, Kannada, Bhojpuri, Malayalam, Odia and Urdu.[20] He also released a few non-film albums in multiple languages, especially in Bengali, which are noted as all-time classics.[21]\n\nHe won 8 Filmfare Awards for Best Male Playback Singer and holds the record for winning the most Filmfare Awards in that category.[21] He was awarded the Lata Mangeshkar Award by the Madhya Pradesh government in 1985.", "output": "Hindi, Bengali, Marathi, Assamese, Gujarati, Kannada, Bhojpuri, Malayalam, Odia, Urdu", "category": "IT"}, {"instruction": "What are some movies that star Will Ferrell?", "input": "", "output": "Some of the most popular movies starring Will Ferrell include Old School, Stepbrothers, Elf, Anchorman, Stranger than Fiction, Blades of Glory, Zoolander, and Talladega Nights: The Ballad of Ricky Bobby.", "category": "IT"}, {"instruction": "What is the plot of Harry Potter?", "input": "", "output": "The books concern a wizard called Harry Potter and his journey through Hogwarts School of Witchcraft and Wizardry. The stories tell of him overcoming dangerous obstacles to defeat the Dark Wizard Lord Voldemort, who killed his parents when Harry was 15 months old.", "category": "IT"}, {"instruction": "What is the old name for The Go Between Bridge?", "input": "The Go Between Bridge, formerly known as the Hale Street Link, is a toll bridge for vehicles, pedestrians and cyclists over the Brisbane River in inner-city Brisbane, Queensland, Australia. The bridge connects Merivale and Cordelia Streets in West End to Hale Street and the Inner City Bypass at Milton. It is Brisbane's first inner-city traffic bridge in 40 years and carries around 12,000 vehicles per day. The bridge opened to traffic on 5 July 2010 and is now operated by Transurban Queensland.", "output": "Hale Street Link", "category": "IT"}, {"instruction": "Can I make chocolate at home?", "input": "", "output": "Making chocolate at home can be rewarding, but be prepared to spend a little money and a lot of time. The money goes to equipment and cocoa beans. For equipment, you will need a melanger (about $600)  to grind the beans and a tempering machine (about $400) to make the finished product. You will also need a silicone mat (about $20) and a hair dryer (about $30). But let's start at the beginning.\n\nBuy between two and six pounds of fermented raw cocoa beans. There are a variety of retail importers you can find on the web. Choose a single variety or a blend that appeals to your taste in chocolate.\n\nSort the beans, removing broken beans, badly misshapen beans, and whatever foreign bodies may be present.\n\nRoast the beans, two pounds at a time, at 350F for between 20 and 30 minutes, depending on your experience with the beans or by how they smell. They will smell like fresh brownies. Don't scorch them!\n\nLet the beans cool.\n\nPeel the beans. You can do this by hand - which I find produces a superior product - but be warned that this can take up to 6 hours per pound. Alternatively, you can purchase a winnower and use the hair dryer to blow out the skins. This approach is much faster, but leaves more skin and loses more bean fragments. Either way, weigh your final bean yield.\n\nGet you melanger going. Use the hair dryer to get the grinding surfaces up to at least 120F. Add the beans a handful at a time. Help the melanger along if it gets stuck. Make sure the melanger is going steadily before leaving it unattended. When it gets going, it will flow well.\n\nRun the melanger for 24 to 72 hours, again depending on your experience with the beans and your tastes. If trying a mix of beans, add the more robustly flavored beans early in the process and the more delicately flavored beans later. Give even the most delicate beans at least 8 hours. Add sugar to taste. The percentage of sugar by weight can vary from a few percent up to 30 percent. You may also add dried whole fat milk at this point, and other flavorings, like an inch or so of vanilla bean. Melange the sugar and other additives at least 8 more hours. The goal is to decrease the particle size below what can be detected by the  tongue. When done, decant into a silicone mat line baking pan. This is your untempered chocolate. it melts easily and tends to get crumbly as it ages. Which is why you will want to temper it.\n\nFinally, follow the directions on your tempering machine, adding chunks of untempered chocolate as indicated. The liquid tempered chocolate can be used for fruit dipping or can be poured into molds for bars or shaped candies. Other additives can be included at this stage - nuts, nougat etc. Cool the results at room temperature for several hours before serving. Enjoy the results of your labor.", "category": "IT"}, {"instruction": "How did Alfred Nobel make his money", "input": "", "output": "He invented Dynamite", "category": "IT"}, {"instruction": "What is the Trans Tahoe Relay?", "input": "", "output": "Each year there is a race held to swim across Lake Tahoe. The race was created and is still sponsored by The Olympic Club of San Francisco. Teams are created and entered from across the globe but primarily North America. The format of the race is a six person relay; all male, all female. or half male/female. Starting on the Nevada side of the lake each member of the team swims for 30 minutes following the team's boat. After each of the swimmers has completed the 30 minute rotation the swimmers then rotate again every 10 minutes. This is done is sequence until the team reach the other side of the lake in California. The swimmers need to touch one-another when rotating between swimmers and there are no wetsuits or fins allowed.", "category": "IT"}, {"instruction": "How do you prepare for case study interview for digital transformation case?", "input": "", "output": "Here is one suggested approach. 1. Gather all requirements related to business problem 2. Understand data sources the business is using. 3. Understand if business would like to build or buy solutions 4. Check for industry specific accelerators 5. Start with one business unit and show the impact of digital transformation and then expand to other business units. 6. Do business value assessment like ROI 7. Focus on tangible and intangible benefits of digital transformation 8. Cost benefit analysis 9. Implementation plan and timelines 10. Production plan  11. Maintenance and support", "category": "IT"}, {"instruction": "Identify which instrument is string or woodwind: Wheelharp, Clarinet", "input": "", "output": "Wheelharp is string, Clarinet is woodwind.", "category": "IT"}, {"instruction": "Which country makes the best coffee in the world?", "input": "", "output": "The answer is relative but Australia would make the best flat white while Italy would have the best expresso coffee.", "category": "IT"}, {"instruction": "Based on the reference text about Bitcoin, how many countries have banned Bitcoin?", "input": "Bitcoin (abbreviation: BTC[a] or XBT[b]; sign: \u20bf) is a protocol which implements a highly available, public, permanent, and decentralized ledger. In order to add to the ledger, a user must prove they control an entry in the ledger. The protocol specifies that the entry indicates an amount of a token, bitcoin with a minuscule b. The user can update the ledger, assigning some of their bitcoin to another entry in the ledger. Because the token has characteristics of money, it can be thought of as a digital currency.[10]\n\nBitcoin transactions are verified by network nodes through cryptography and recorded in a public distributed ledger called a blockchain. The cryptocurrency was invented in 2008 by an unknown person or group of people using the name Satoshi Nakamoto.[11] The currency began use in 2009,[12] when its implementation was released as open-source software.[7]:\u200ach. 1\u200a The word \"bitcoin\" was defined in a white paper published on October 31, 2008.[3][13] It is a compound of the words bit and coin.[14]\n\nThe Library of Congress reports that, as of November 2021, nine countries have fully banned bitcoin use, while a further forty-two have implicitly banned it.[15] A few governments have used bitcoin in some capacity. El Salvador has adopted Bitcoin as legal tender, although use by merchants remains low.[16] Ukraine has accepted cryptocurrency donations to fund the resistance to the 2022 Russian invasion. Iran has used bitcoin to bypass sanctions.", "output": "As of November 2021, 42 countries have implicitly banned and 9 countries have fully banned the use of Bitcoin.", "category": "IT"}, {"instruction": "What was the Underground Railroad?", "input": "The Underground Railroad was a network of clandestine routes and safe houses established in the United States during the early- to the mid-19th century. It was used by enslaved African Americans primarily to escape into free states and Canada.[1] The network was assisted by abolitionists and others sympathetic to the cause of the escapees.[2] The enslaved persons who risked escape and those who aided them are also collectively referred to as the \"Underground Railroad\".[3] Various other routes led to Mexico,[4] where slavery had been abolished, and to islands in the Caribbean that were not part of the slave trade.[5] An earlier escape route running south toward Florida, then a Spanish possession (except 1763\u20131783), existed from the late 17th century until approximately 1790.[6][7] However, the network now generally known as the Underground Railroad began in the late 18th century. It ran north and grew steadily until the Emancipation Proclamation was signed by President Abraham Lincoln.[8] One estimate suggests that by 1850, approximately 100,000 enslaved people had escaped to freedom via the network", "output": "The Underground Railroad was a secret network of routes and safe houses in the United States established in the early 19th century that led to free states, Canada, Mexico and other overseas areas. Black slaves used the Underground Railroad to escape from slavery. It is estimated that by 1850, about 100,000 slaves had escaped to freedom by the \"Railroad\".", "category": "IT"}, {"instruction": "When was the 8088 processor released?", "input": "The 8086[2] (also called iAPX 86)[3] is a 16-bit microprocessor chip designed by Intel between early 1976 and June 8, 1978, when it was released. The Intel 8088, released July 1, 1979,[4] is a slightly modified chip with an external 8-bit data bus (allowing the use of cheaper and fewer supporting ICs),[note 1] and is notable as the processor used in the original IBM PC design.", "output": "The Intel 8088 processor was released July 1, 1979.", "category": "IT"}, {"instruction": "What are the best social media sites", "input": "", "output": "Twitter, facebook, tiktok, snapchat", "category": "IT"}, {"instruction": "Given this paragraph on LeBron James' early career, when did he win his first NBA MVP?", "input": "James grew up playing basketball for St. Vincent\u2013St. Mary High School in his hometown of Akron, Ohio. He was heavily touted by the national media as a future NBA superstar. A prep-to-pro, he was selected by the Cleveland Cavaliers with the first overall pick of the 2003 NBA draft. Named the 2004 NBA Rookie of the Year, he soon established himself as one of the league's premier players, leading the Cavaliers to their first NBA Finals appearance in 2007 and winning the NBA MVP award in 2009 and 2010. After failing to win a championship with Cleveland, James left in 2010 as a free agent to join the Miami Heat; this was announced in a nationally televised special titled The Decision and is among the most controversial free agency moves in sports history.", "output": "LeBron James won his first NBA MVP in 2009.", "category": "IT"}, {"instruction": "I'm going to give you a passage from Marty Essen's book \"Cool Creatures, Hot Planet: Exploring the Seven Continents\" and want you to answer the following question: Where are western Hermann's tortoises found?\n\nAfter spending the night at a large chain hotel, Deb and I traveled southeast with tortoises on our mind. Our plan for the day was to infiltrate the Massif des Maures area and search for one of France's most endangered reptiles-- the western Hermann's tortoise.  The first stop of our quest was Le Village de Tortues (the Tortoise Village), a tortoise rehabilitation center near the town of Gonfaron. Our mission was to befriend a staff member, learn as much as we could, and get detailed information on tracking down the wily Hermann's tortoise in the wild. When we couldn't find an English-speaking staff member, our mission was nearly thwarted. Only through quick thinking and improvisation were we able to acquire the vital background information we needed. Okay - we utilized the signs provided for British visitors. For many people, the word tortoise invokes thoughts of giant four-foot-long Galapagos tortoises. Western Hermann's tortoises, on the other hand, are small, reaching a maximum length of eight inches. While both reptiles make the IUCN Red List of Threatened Species, the Galapagos tortoise is listed as \"vulnerable\" and the western Hermann's is listed as \"endangered.\" In France, habitat destruction, egg pilfering, and fire are the primary factors for the tortoises decline.", "input": "", "output": "Western Hermann's tortoises are found in France, in a turtle rehabilitation village, Le Village de Tortues, near Gonfaron.", "category": "IT"}, {"instruction": "Give me some ideas of kids items to stuff into Easter eggs.", "input": "", "output": "Here are some kids items that you might consider for your next Easter egg hunt: stickers, playdoh, bouncy balls, bubbles, coins, special rocks or gems, candy, other small toys", "category": "IT"}, {"instruction": "Why should we ban artificial sweeteners like aspartame?", "input": "", "output": "Artificial sweeteners like aspartame are incredibly dangerous to our health. There have been countless studies showing the damaging effects it can wreak on a person's health. One of those is your gut health. As we know more and more about gut health, your gut is now being referred to as your \"second brain\". One could argue without a healthy gut, you cannot have good health. We know that artificial sweeteners like aspartame are damaging to our gut and our microbiome.", "category": "IT"}, {"instruction": "Name all the books in the Harry Potter collection", "input": "", "output": "Here is a list of all the books in the Harry Potter collection written by J.K. Rowling - Harry Potter and the Philosopher's Stone, Harry Potter and the Chamber of Secrets, Harry Potter and the Prisoner of Azkaban, Harry Potter and the Goblet of Fire, Harry Potter and the Order of the Phoenix, Harry Potter and the Half-Blood Prince and Harry Potter and the Deathly Hallows", "category": "IT"}, {"instruction": "Tell me whether these cities are in Texas: Austin, Houston, New York, Chicago, Miami, Dallas", "input": "", "output": "Austin, Houston, Dallas", "category": "IT"}, {"instruction": "Tell me whether you drive on the right or left side of the road in these countries: USA, Mexico, Spain, England, New Zealand, Japan", "input": "", "output": "USA: Right Side\nMexico: Right Side\nSpain: Right Side\nEngland: Left Side\nNew Zealand: Left Side\nJapan: Left Side", "category": "IT"}, {"instruction": "Identify which car manufacturer is German or American: Opel, GMC", "input": "", "output": "Opel is German, GMC is American", "category": "IT"}, {"instruction": "Which team was relegated from the league at the conclusion of the 1991 Season?", "input": "Waterside Karori were relegated at the end of the 1990 season, to be replaced by the winner of a play-off series between teams from the northern, central, and southern leagues (Mount Albert-Ponsonby, Nelson United, and Burndale United respectively). Nelson United won the series to gain promotion, but there is some controversy about their participation in the play-offs as they had only finished second in the central regional league, which was won by Petone.[1]\n\nGisborne City were relegated at the end of the 1991 season", "output": "Gisborne City", "category": "IT"}, {"instruction": "Give me a list of recommendations to quickly heal from an achilles rupture surgery.", "input": "", "output": "Get plenty of rest\nStay off the injured leg\nKeep the foot elevated above the heart\nTake medication to keep inflammation down\nIce the area to reduce swelling\nBrace the ankle and foot, and point the toe down in a plantar flexion position", "category": "IT"}, {"instruction": "How has the video gaming industry evolved over the years ?", "input": "", "output": "Video games have been around for a while now. The industry have evolved massively in the recent 10 years. The industry begun with games that were programmed for the early computers. Then, specific devices like the Playstation from Sony, X-Box from Microsoft started to enter the scene. These helped with growing the number of people who play games since not everybody likes to own a PC to play games.\n\nAs the smartphone era begin, video games started to make an impact on those devices as well and the mobile gamer base started growing rapidly. \n\nRecently, the industry also evolved furthermore and professional e-sport teams started to emerge which boosted the spectator sport angle of the industry. This also grew with the adoption of streaming platforms like Twitch, where watching professional gamers play video games became a trend. \n\nNow, it is not uncommon to see most multiplayer competitive games to have a professional scene where teams like TSM, Liquid, Cloud 9 have signed players that compete on a professional level.", "category": "IT"}, {"instruction": "How many musicians performed in the world's largest rock band?", "input": "", "output": "The world\u2019s largest performing rock band included 953 musicians.", "category": "IT"}, {"instruction": "What percussion instruments are easy to learn?", "input": "", "output": "Hand drums, tambourine and triangle are easy to learn percussion instruments.", "category": "IT"}, {"instruction": "Summarizing the code.", "input": "def is_valid_url(url):\n    \"\"\"\"\"\"\n    pieces = urlparse(url)\n    return all([pieces.scheme, pieces.netloc])", "output": "Checks if a given string is an url", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_json_string(self, indent=None):\n        ''' \n\n        '''\n        root_ids = []\n        for r in self._roots:\n            root_ids.append(r.id)\n\n        root_references = self._all_models.values()\n\n        json = {\n            'title' : self.title,\n            'roots' : {\n                'root_ids' : root_ids,\n                'references' : references_json(root_references)\n            },\n            'version' : __version__\n        }\n\n        return serialize_json(json, indent=indent)", "output": "Convert the document to a JSON string.\n\n        Args:\n            indent (int or None, optional) : number of spaces to indent, or\n                None to suppress all newlines and indentation (default: None)\n\n        Returns:\n            str", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def roc_curve(input:Tensor, targ:Tensor):\n    \"\"\n    targ = (targ == 1)\n    desc_score_indices = torch.flip(input.argsort(-1), [-1])\n    input = input[desc_score_indices]\n    targ = targ[desc_score_indices]\n    d = input[1:] - input[:-1]\n    distinct_value_indices = torch.nonzero(d).transpose(0,1)[0]\n    threshold_idxs = torch.cat((distinct_value_indices, LongTensor([len(targ) - 1]).to(targ.device)))\n    tps = torch.cumsum(targ * 1, dim=-1)[threshold_idxs]\n    fps = (1 + threshold_idxs - tps)\n    if tps[0] != 0 or fps[0] != 0:\n        fps = torch.cat((LongTensor([0]), fps))\n        tps = torch.cat((LongTensor([0]), tps))\n    fpr, tpr = fps.float() / fps[-1], tps.float() / tps[-1]\n    return fpr, tpr", "output": "Returns the false positive and true positive rates", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_value(self):\r\n        \"\"\"\"\"\"\r\n        # It is import to avoid accessing Qt C++ object as it has probably\r\n        # already been destroyed, due to the Qt.WA_DeleteOnClose attribute\r\n        df = self.dataModel.get_data()\r\n        if self.is_series:\r\n            return df.iloc[:, 0]\r\n        else:\r\n            return df", "output": "Return modified Dataframe -- this is *not* a copy", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_config(self):\r\n        \"\"\"\"\"\"\r\n        for option, value in list(self.explorer.get_options().items()):\r\n            self.set_option(option, value)\r\n        self.set_option('expanded_state',\r\n                        self.explorer.treewidget.get_expanded_state())\r\n        self.set_option('scrollbar_position',\r\n                        self.explorer.treewidget.get_scrollbar_position())", "output": "Save configuration: tree widget state", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def words_and_tags_from_wsj_tree(tree_string):\n  \"\"\"\n  \"\"\"\n  stack, tags, words = [], [], []\n  for tok in tree_string.strip().split():\n    if tok[0] == \"(\":\n      symbol = tok[1:]\n      tags.append(symbol)\n      stack.append(symbol)\n    else:\n      assert tok[-1] == \")\"\n      stack.pop()  # Pop the POS-tag.\n      while tok[-2] == \")\":\n        tags.append(\"/\" + stack.pop())\n        tok = tok[:-1]\n      words.append(tok[:-1])\n  return str.join(\" \", words), str.join(\" \", tags[1:-1])", "output": "Generates linearized trees and tokens from the wsj tree format.\n\n  It uses the linearized algorithm described in https://arxiv.org/abs/1412.7449.\n\n  Args:\n    tree_string: tree in wsj format\n\n  Returns:\n    tuple: (words, linearized tree)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create(self):\n        \"\"\"\n        \"\"\"\n        if self.path is not None:\n            logger.debug(\n                \"Skipped creation of temporary directory: {}\".format(self.path)\n            )\n            return\n        # We realpath here because some systems have their default tmpdir\n        # symlinked to another directory.  This tends to confuse build\n        # scripts, so we canonicalize the path by traversing potential\n        # symlinks here.\n        self.path = os.path.realpath(\n            tempfile.mkdtemp(prefix=\"pip-{}-\".format(self.kind))\n        )\n        self._register_finalizer()\n        logger.debug(\"Created temporary directory: {}\".format(self.path))", "output": "Create a temporary directory and store its path in self.path", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def divide(n, iterable):\n    \"\"\"\n    \n    \"\"\"\n\n    seq = tuple(iterable)\n    q, r = divmod(len(seq), n)\n\n    ret = []\n    for i in range(n):\n        start = (i * q) + (i if i < r else r)\n        stop = ((i + 1) * q) + (i + 1 if i + 1 < r else r)\n        ret.append(iter(seq[start:stop]))\n\n    return ret", "output": "split an iterable into n groups, per https://more-itertools.readthedocs.io/en/latest/api.html#grouping\n\n    :param int n: Number of unique groups\n    :param iter iterable: An iterable to split up\n    :return: a list of new iterables derived from the original iterable\n    :rtype: list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def put_lifecycle(self, policy=None, body=None, params=None):\n        \"\"\"\n        \n        \"\"\"\n        return self.transport.perform_request(\n            \"PUT\", _make_path(\"_ilm\", \"policy\", policy), params=params, body=body\n        )", "output": "`<https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-put-lifecycle.html>`_\n\n        :arg policy: The name of the index lifecycle policy\n        :arg body: The lifecycle policy definition to register", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def build_available_time_string(availabilities):\n    \"\"\"\n    \n    \"\"\"\n    prefix = 'We have availabilities at '\n    if len(availabilities) > 3:\n        prefix = 'We have plenty of availability, including '\n\n    prefix += build_time_output_string(availabilities[0])\n    if len(availabilities) == 2:\n        return '{} and {}'.format(prefix, build_time_output_string(availabilities[1]))\n\n    return '{}, {} and {}'.format(prefix, build_time_output_string(availabilities[1]), build_time_output_string(availabilities[2]))", "output": "Build a string eliciting for a possible time slot among at least two availabilities.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def morsel_to_cookie(morsel):\n    \"\"\"\"\"\"\n\n    expires = None\n    if morsel['max-age']:\n        try:\n            expires = int(time.time() + int(morsel['max-age']))\n        except ValueError:\n            raise TypeError('max-age: %s must be integer' % morsel['max-age'])\n    elif morsel['expires']:\n        time_template = '%a, %d-%b-%Y %H:%M:%S GMT'\n        expires = calendar.timegm(\n            time.strptime(morsel['expires'], time_template)\n        )\n    return create_cookie(\n        comment=morsel['comment'],\n        comment_url=bool(morsel['comment']),\n        discard=False,\n        domain=morsel['domain'],\n        expires=expires,\n        name=morsel.key,\n        path=morsel['path'],\n        port=None,\n        rest={'HttpOnly': morsel['httponly']},\n        rfc2109=False,\n        secure=bool(morsel['secure']),\n        value=morsel.value,\n        version=morsel['version'] or 0,\n    )", "output": "Convert a Morsel object into a Cookie containing the one k/v pair.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_dump(self, fmap='', with_stats=False, dump_format=\"text\"):\n        \"\"\"\n        \n        \"\"\"\n        length = c_bst_ulong()\n        sarr = ctypes.POINTER(ctypes.c_char_p)()\n        if self.feature_names is not None and fmap == '':\n            flen = len(self.feature_names)\n\n            fname = from_pystr_to_cstr(self.feature_names)\n\n            if self.feature_types is None:\n                # use quantitative as default\n                # {'q': quantitative, 'i': indicator}\n                ftype = from_pystr_to_cstr(['q'] * flen)\n            else:\n                ftype = from_pystr_to_cstr(self.feature_types)\n            _check_call(_LIB.XGBoosterDumpModelExWithFeatures(\n                self.handle,\n                ctypes.c_int(flen),\n                fname,\n                ftype,\n                ctypes.c_int(with_stats),\n                c_str(dump_format),\n                ctypes.byref(length),\n                ctypes.byref(sarr)))\n        else:\n            if fmap != '' and not os.path.exists(fmap):\n                raise ValueError(\"No such file: {0}\".format(fmap))\n            _check_call(_LIB.XGBoosterDumpModelEx(self.handle,\n                                                  c_str(fmap),\n                                                  ctypes.c_int(with_stats),\n                                                  c_str(dump_format),\n                                                  ctypes.byref(length),\n                                                  ctypes.byref(sarr)))\n        res = from_cstr_to_pystr(sarr, length)\n        return res", "output": "Returns the model dump as a list of strings.\n\n        Parameters\n        ----------\n        fmap : string, optional\n            Name of the file containing feature map names.\n        with_stats : bool, optional\n            Controls whether the split statistics are output.\n        dump_format : string, optional\n            Format of model dump. Can be 'text' or 'json'.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_imglist(self, fname=None, root=None, shuffle=False):\n        \"\"\"\n        \n        \"\"\"\n        def progress_bar(count, total, suffix=''):\n            import sys\n            bar_len = 24\n            filled_len = int(round(bar_len * count / float(total)))\n\n            percents = round(100.0 * count / float(total), 1)\n            bar = '=' * filled_len + '-' * (bar_len - filled_len)\n            sys.stdout.write('[%s] %s%s ...%s\\r' % (bar, percents, '%', suffix))\n            sys.stdout.flush()\n\n        str_list = []\n        for index in range(self.num_images):\n            progress_bar(index, self.num_images)\n            label = self.label_from_index(index)\n            if label.size < 1:\n                continue\n            path = self.image_path_from_index(index)\n            if root:\n                path = osp.relpath(path, root)\n            str_list.append('\\t'.join([str(index), str(2), str(label.shape[1])] \\\n              + [\"{0:.4f}\".format(x) for x in label.ravel()] + [path,]) + '\\n')\n        if str_list:\n            if shuffle:\n                import random\n                random.shuffle(str_list)\n            if not fname:\n                fname = self.name + '.lst'\n            with open(fname, 'w') as f:\n                for line in str_list:\n                    f.write(line)\n        else:\n            raise RuntimeError(\"No image in imdb\")", "output": "save imglist to disk\n\n        Parameters:\n        ----------\n        fname : str\n            saved filename", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def download_gcs_file(path, out_fname=None, prefix_filter=None):\n  \"\"\"\"\"\"\n  url = posixpath.join(GCS_BUCKET, path)\n  if prefix_filter:\n    url += \"?prefix=%s\" % prefix_filter\n  stream = bool(out_fname)\n  resp = requests.get(url, stream=stream)\n  if not resp.ok:\n    raise ValueError(\"GCS bucket inaccessible\")\n  if out_fname:\n    with tf.io.gfile.GFile(out_fname, \"wb\") as f:\n      for chunk in resp.iter_content(1024):\n        f.write(chunk)\n  else:\n    return resp.content", "output": "Download a file from GCS, optionally to a file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fetch_node_from(self, path):\n        \"\"\" \n        \"\"\"\n        context = self\n        for key in path:\n            context = context[key]\n            if context is None:\n                break\n        return context", "output": "Returns a node for a path.\n\n        :param path: Tuple of :term:`hashable` s.\n        :rtype: :class:`~cerberus.errors.ErrorTreeNode` or :obj:`None`", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def parse_mimetype(mimetype: str) -> MimeType:\n    \"\"\"\n\n    \"\"\"\n    if not mimetype:\n        return MimeType(type='', subtype='', suffix='',\n                        parameters=MultiDictProxy(MultiDict()))\n\n    parts = mimetype.split(';')\n    params = MultiDict()  # type: MultiDict[str]\n    for item in parts[1:]:\n        if not item:\n            continue\n        key, value = cast(Tuple[str, str],\n                          item.split('=', 1) if '=' in item else (item, ''))\n        params.add(key.lower().strip(), value.strip(' \"'))\n\n    fulltype = parts[0].strip().lower()\n    if fulltype == '*':\n        fulltype = '*/*'\n\n    mtype, stype = (cast(Tuple[str, str], fulltype.split('/', 1))\n                    if '/' in fulltype else (fulltype, ''))\n    stype, suffix = (cast(Tuple[str, str], stype.split('+', 1))\n                     if '+' in stype else (stype, ''))\n\n    return MimeType(type=mtype, subtype=stype, suffix=suffix,\n                    parameters=MultiDictProxy(params))", "output": "Parses a MIME type into its components.\n\n    mimetype is a MIME type string.\n\n    Returns a MimeType object.\n\n    Example:\n\n    >>> parse_mimetype('text/html; charset=utf-8')\n    MimeType(type='text', subtype='html', suffix='',\n             parameters={'charset': 'utf-8'})", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def should_stop(self, result):\n        \"\"\"\"\"\"\n\n        if result.get(DONE):\n            return True\n\n        for criteria, stop_value in self.stopping_criterion.items():\n            if criteria not in result:\n                raise TuneError(\n                    \"Stopping criteria {} not provided in result {}.\".format(\n                        criteria, result))\n            if result[criteria] >= stop_value:\n                return True\n\n        return False", "output": "Whether the given result meets this trial's stopping criteria.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def expand_composites (properties):\n    \"\"\" \n    \"\"\"\n    if __debug__:\n        from .property import Property\n        assert is_iterable_typed(properties, Property)\n    explicit_features = set(p.feature for p in properties)\n\n    result = []\n\n    # now expand composite features\n    for p in properties:\n        expanded = expand_composite(p)\n\n        for x in expanded:\n            if not x in result:\n                f = x.feature\n\n                if f.free:\n                    result.append (x)\n                elif not x in properties:  # x is the result of expansion\n                    if not f in explicit_features:  # not explicitly-specified\n                        if any(r.feature == f for r in result):\n                            raise FeatureConflict(\n                                \"expansions of composite features result in \"\n                                \"conflicting values for '%s'\\nvalues: '%s'\\none contributing composite property was '%s'\" %\n                                (f.name, [r.value for r in result if r.feature == f] + [x.value], p))\n                        else:\n                            result.append (x)\n                elif any(r.feature == f for r in result):\n                    raise FeatureConflict (\"explicitly-specified values of non-free feature '%s' conflict\\n\"\n                    \"existing values: '%s'\\nvalue from expanding '%s': '%s'\" % (f,\n                    [r.value for r in result if r.feature == f], p, x.value))\n                else:\n                    result.append (x)\n\n    return result", "output": "Expand all composite properties in the set so that all components\n        are explicitly expressed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rename_file(self, fname):\r\n        \"\"\"\"\"\"\r\n        path, valid = QInputDialog.getText(self, _('Rename'),\r\n                              _('New name:'), QLineEdit.Normal,\r\n                              osp.basename(fname))\r\n        if valid:\r\n            path = osp.join(osp.dirname(fname), to_text_string(path))\r\n            if path == fname:\r\n                return\r\n            if osp.exists(path):\r\n                if QMessageBox.warning(self, _(\"Rename\"),\r\n                         _(\"Do you really want to rename <b>%s</b> and \"\r\n                           \"overwrite the existing file <b>%s</b>?\"\r\n                           ) % (osp.basename(fname), osp.basename(path)),\r\n                         QMessageBox.Yes|QMessageBox.No) == QMessageBox.No:\r\n                    return\r\n            try:\r\n                misc.rename_file(fname, path)\r\n                if osp.isfile(fname):\r\n                    self.sig_renamed.emit(fname, path)\r\n                else:\r\n                    self.sig_renamed_tree.emit(fname, path)\r\n                return path\r\n            except EnvironmentError as error:\r\n                QMessageBox.critical(self, _(\"Rename\"),\r\n                            _(\"<b>Unable to rename file <i>%s</i></b>\"\r\n                              \"<br><br>Error message:<br>%s\"\r\n                              ) % (osp.basename(fname), to_text_string(error)))", "output": "Rename file", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def validate_read(self, kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs = super().validate_read(kwargs)\n        if 'start' in kwargs or 'stop' in kwargs:\n            raise NotImplementedError(\"start and/or stop are not supported \"\n                                      \"in fixed Sparse reading\")\n        return kwargs", "output": "we don't support start, stop kwds in Sparse", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _expand_disk(disk):\n    '''\n    \n    '''\n    ret = {}\n    ret.update(disk.__dict__)\n    zone = ret['extra']['zone']\n    ret['extra']['zone'] = {}\n    ret['extra']['zone'].update(zone.__dict__)\n    return ret", "output": "Convert the libcloud Volume object into something more serializable.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _make_order(field_path, direction):\n        \"\"\"\"\"\"\n        return query_pb2.StructuredQuery.Order(\n            field=query_pb2.StructuredQuery.FieldReference(field_path=field_path),\n            direction=_enum_from_direction(direction),\n        )", "output": "Helper for :meth:`order_by`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def callJavaFunc(sc, func, *args):\n    \"\"\"  \"\"\"\n    args = [_py2java(sc, a) for a in args]\n    return _java2py(sc, func(*args))", "output": "Call Java Function", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def try_to_create_directory(directory_path):\n    \"\"\"\n    \"\"\"\n    logger = logging.getLogger(\"ray\")\n    directory_path = os.path.expanduser(directory_path)\n    if not os.path.exists(directory_path):\n        try:\n            os.makedirs(directory_path)\n        except OSError as e:\n            if e.errno != errno.EEXIST:\n                raise e\n            logger.warning(\n                \"Attempted to create '{}', but the directory already \"\n                \"exists.\".format(directory_path))\n        # Change the log directory permissions so others can use it. This is\n        # important when multiple people are using the same machine.\n    try:\n        os.chmod(directory_path, 0o0777)\n    except OSError as e:\n        # Silently suppress the PermissionError that is thrown by the chmod.\n        # This is done because the user attempting to change the permissions\n        # on a directory may not own it. The chmod is attempted whether the\n        # directory is new or not to avoid race conditions.\n        # ray-project/ray/#3591\n        if e.errno in [errno.EACCES, errno.EPERM]:\n            pass\n        else:\n            raise", "output": "Attempt to create a directory that is globally readable/writable.\n\n    Args:\n        directory_path: The path of the directory to create.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def experiment_pb(\n    hparam_infos,\n    metric_infos,\n    user='',\n    description='',\n    time_created_secs=None):\n  \"\"\"\n  \"\"\"\n  if time_created_secs is None:\n    time_created_secs = time.time()\n  experiment = api_pb2.Experiment(\n      description=description,\n      user=user,\n      time_created_secs=time_created_secs,\n      hparam_infos=hparam_infos,\n      metric_infos=metric_infos)\n  return _summary(metadata.EXPERIMENT_TAG,\n                  plugin_data_pb2.HParamsPluginData(experiment=experiment))", "output": "Creates a summary that defines a hyperparameter-tuning experiment.\n\n  Args:\n    hparam_infos: Array of api_pb2.HParamInfo messages. Describes the\n        hyperparameters used in the experiment.\n    metric_infos: Array of api_pb2.MetricInfo messages. Describes the metrics\n        used in the experiment. See the documentation at the top of this file\n        for how to populate this.\n    user: String. An id for the user running the experiment\n    description: String. A description for the experiment. May contain markdown.\n    time_created_secs: float. The time the experiment is created in seconds\n    since the UNIX epoch. If None uses the current time.\n\n  Returns:\n    A summary protobuffer containing the experiment definition.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def MessageToJson(message,\n                  including_default_value_fields=False,\n                  preserving_proto_field_name=False):\n  \"\"\"\n  \"\"\"\n  printer = _Printer(including_default_value_fields,\n                     preserving_proto_field_name)\n  return printer.ToJsonString(message)", "output": "Converts protobuf message to JSON format.\n\n  Args:\n    message: The protocol buffers message instance to serialize.\n    including_default_value_fields: If True, singular primitive fields,\n        repeated fields, and map fields will always be serialized.  If\n        False, only serialize non-empty fields.  Singular message fields\n        and oneof fields are not affected by this option.\n    preserving_proto_field_name: If True, use the original proto field\n        names as defined in the .proto file. If False, convert the field\n        names to lowerCamelCase.\n\n  Returns:\n    A string containing the JSON formatted protocol buffer message.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ping(dest_ip=None, **kwargs):\n    '''\n    \n    '''\n    conn = __proxy__['junos.conn']()\n    ret = {}\n\n    if dest_ip is None:\n        ret['message'] = 'Please specify the destination ip to ping.'\n        ret['out'] = False\n        return ret\n\n    op = {'host': dest_ip}\n    if '__pub_arg' in kwargs:\n        if kwargs['__pub_arg']:\n            if isinstance(kwargs['__pub_arg'][-1], dict):\n                op.update(kwargs['__pub_arg'][-1])\n    else:\n        op.update(kwargs)\n\n    op['count'] = six.text_type(op.pop('count', 5))\n    if 'ttl' in op:\n        op['ttl'] = six.text_type(op['ttl'])\n\n    ret['out'] = True\n    try:\n        ret['message'] = jxmlease.parse(etree.tostring(conn.rpc.ping(**op)))\n    except Exception as exception:\n        ret['message'] = 'Execution failed due to \"{0}\"'.format(exception)\n        ret['out'] = False\n    return ret", "output": "Send a ping RPC to a device\n\n    dest_ip\n      The IP of the device to ping\n\n    dev_timeout : 30\n        The NETCONF RPC timeout (in seconds)\n\n    rapid : False\n        When ``True``, executes ping at 100pps instead of 1pps\n\n    ttl\n        Maximum number of IP routers (IP hops) allowed between source and\n        destination\n\n    routing_instance\n      Name of the routing instance to use to send the ping\n\n    interface\n      Interface used to send traffic\n\n    count : 5\n      Number of packets to send\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt 'device_name' junos.ping '8.8.8.8' count=5\n        salt 'device_name' junos.ping '8.8.8.8' ttl=1 rapid=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def recovery(self, index=None, params=None):\n        \"\"\"\n        \n        \"\"\"\n        return self.transport.perform_request('GET', _make_path('_cat',\n            'recovery', index), params=params)", "output": "recovery is a view of shard replication.\n        `<https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-recovery.html>`_\n\n        :arg index: A comma-separated list of index names to limit the returned\n            information\n        :arg bytes: The unit in which to display byte values, valid choices are:\n            'b', 'k', 'kb', 'm', 'mb', 'g', 'gb', 't', 'tb', 'p', 'pb'\n        :arg format: a short version of the Accept header, e.g. json, yaml\n        :arg h: Comma-separated list of column names to display\n        :arg help: Return help information, default False\n        :arg master_timeout: Explicit operation timeout for connection to master\n            node\n        :arg s: Comma-separated list of column names or column aliases to sort\n            by\n        :arg v: Verbose mode. Display column headers, default False", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shift(self, periods=1, freq=None, axis=0, fill_value=None):\n        \"\"\"\n        \n        \"\"\"\n\n        if freq is not None or axis != 0 or not isna(fill_value):\n            return self.apply(lambda x: x.shift(periods, freq,\n                                                axis, fill_value))\n\n        return self._get_cythonized_result('group_shift_indexer',\n                                           self.grouper, cython_dtype=np.int64,\n                                           needs_ngroups=True,\n                                           result_is_index=True,\n                                           periods=periods)", "output": "Shift each group by periods observations.\n\n        Parameters\n        ----------\n        periods : integer, default 1\n            number of periods to shift\n        freq : frequency string\n        axis : axis to shift, default 0\n        fill_value : optional\n\n            .. versionadded:: 0.24.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def track_strategy_worker(self, strategy, name, interval=10, **kwargs):\n        \"\"\"\"\"\"\n        while True:\n            try:\n                transactions = self.query_strategy_transaction(\n                    strategy, **kwargs\n                )\n            # pylint: disable=broad-except\n            except Exception as e:\n                log.exception(\"\u65e0\u6cd5\u83b7\u53d6\u7b56\u7565 %s \u8c03\u4ed3\u4fe1\u606f, \u9519\u8bef: %s, \u8df3\u8fc7\u6b64\u6b21\u8c03\u4ed3\u67e5\u8be2\", name, e)\n                time.sleep(3)\n                continue\n            for transaction in transactions:\n                trade_cmd = {\n                    \"strategy\": strategy,\n                    \"strategy_name\": name,\n                    \"action\": transaction[\"action\"],\n                    \"stock_code\": transaction[\"stock_code\"],\n                    \"amount\": transaction[\"amount\"],\n                    \"price\": transaction[\"price\"],\n                    \"datetime\": transaction[\"datetime\"],\n                }\n                if self.is_cmd_expired(trade_cmd):\n                    continue\n                log.info(\n                    \"\u7b56\u7565 [%s] \u53d1\u9001\u6307\u4ee4\u5230\u4ea4\u6613\u961f\u5217, \u80a1\u7968: %s \u52a8\u4f5c: %s \u6570\u91cf: %s \u4ef7\u683c: %s \u4fe1\u53f7\u4ea7\u751f\u65f6\u95f4: %s\",\n                    name,\n                    trade_cmd[\"stock_code\"],\n                    trade_cmd[\"action\"],\n                    trade_cmd[\"amount\"],\n                    trade_cmd[\"price\"],\n                    trade_cmd[\"datetime\"],\n                )\n                self.trade_queue.put(trade_cmd)\n                self.add_cmd_to_expired_cmds(trade_cmd)\n            try:\n                for _ in range(interval):\n                    time.sleep(1)\n            except KeyboardInterrupt:\n                log.info(\"\u7a0b\u5e8f\u9000\u51fa\")\n                break", "output": "\u8ddf\u8e2a\u4e0b\u5355worker\n        :param strategy: \u7b56\u7565id\n        :param name: \u7b56\u7565\u540d\u5b57\n        :param interval: \u8f6e\u8be2\u7b56\u7565\u7684\u65f6\u95f4\u95f4\u9694\uff0c\u5355\u4f4d\u4e3a\u79d2", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def nansem(values, axis=None, skipna=True, ddof=1, mask=None):\n    \"\"\"\n    \n    \"\"\"\n\n    # This checks if non-numeric-like data is passed with numeric_only=False\n    # and raises a TypeError otherwise\n    nanvar(values, axis, skipna, ddof=ddof, mask=mask)\n\n    if mask is None:\n        mask = isna(values)\n    if not is_float_dtype(values.dtype):\n        values = values.astype('f8')\n    count, _ = _get_counts_nanvar(mask, axis, ddof, values.dtype)\n    var = nanvar(values, axis, skipna, ddof=ddof)\n\n    return np.sqrt(var) / np.sqrt(count)", "output": "Compute the standard error in the mean along given axis while ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    ddof : int, default 1\n        Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n        where N represents the number of elements.\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float64\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 3])\n    >>> nanops.nansem(s)\n     0.5773502691896258", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def counting_sort(arr):\n    \"\"\"\n    \n    \"\"\"\n\n    m = min(arr)\n    # in case there are negative elements, change the array to all positive element\n    different = 0\n    if m < 0:\n        # save the change, so that we can convert the array back to all positive number\n        different = -m\n        for i in range(len(arr)):\n            arr[i] += -m\n    k = max(arr)\n    temp_arr = [0] * (k + 1)\n    for i in range(0, len(arr)):\n        temp_arr[arr[i]] = temp_arr[arr[i]] + 1\n    # temp_array[i] contain the times the number i appear in arr\n\n    for i in range(1, k + 1):\n        temp_arr[i] = temp_arr[i] + temp_arr[i - 1]\n    # temp_array[i] contain the number of element less than or equal i in arr\n\n    result_arr = arr.copy()\n    # creating a result_arr an put the element in a correct positon\n    for i in range(len(arr) - 1, -1, -1):\n        result_arr[temp_arr[arr[i]] - 1] = arr[i] - different\n        temp_arr[arr[i]] = temp_arr[arr[i]] - 1\n\n    return result_arr", "output": "Counting_sort\n    Sorting a array which has no element greater than k\n    Creating a new temp_arr,where temp_arr[i] contain the number of\n    element less than or equal to i in the arr\n    Then placing the number i into a correct position in the result_arr\n    return the result_arr\n    Complexity: 0(n)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def write_raw(path, raw):\n    '''\n    \n    '''\n    log.debug('Writing vault secrets for %s at %s', __grains__['id'], path)\n    try:\n        url = 'v1/{0}'.format(path)\n        response = __utils__['vault.make_request']('POST', url, json=raw)\n        if response.status_code == 200:\n            return response.json()['data']\n        elif response.status_code != 204:\n            response.raise_for_status()\n        return True\n    except Exception as err:\n        log.error('Failed to write secret! %s: %s', type(err).__name__, err)\n        return False", "output": "Set raw data at the path in vault. The vault policy used must allow this.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n            salt '*' vault.write_raw \"secret/my/secret\" '{\"user\":\"foo\",\"password\": \"bar\"}'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def from_dict(cls, data, intersect=False, orient='items', dtype=None):\n        \"\"\"\n        \n        \"\"\"\n        from collections import defaultdict\n\n        orient = orient.lower()\n        if orient == 'minor':\n            new_data = defaultdict(OrderedDict)\n            for col, df in data.items():\n                for item, s in df.items():\n                    new_data[item][col] = s\n            data = new_data\n        elif orient != 'items':  # pragma: no cover\n            raise ValueError('Orientation must be one of {items, minor}.')\n\n        d = cls._homogenize_dict(cls, data, intersect=intersect, dtype=dtype)\n        ks = list(d['data'].keys())\n        if not isinstance(d['data'], OrderedDict):\n            ks = list(sorted(ks))\n        d[cls._info_axis_name] = Index(ks)\n        return cls(**d)", "output": "Construct Panel from dict of DataFrame objects.\n\n        Parameters\n        ----------\n        data : dict\n            {field : DataFrame}\n        intersect : boolean\n            Intersect indexes of input DataFrames\n        orient : {'items', 'minor'}, default 'items'\n            The \"orientation\" of the data. If the keys of the passed dict\n            should be the items of the result panel, pass 'items'\n            (default). Otherwise if the columns of the values of the passed\n            DataFrame objects should be the items (which in the case of\n            mixed-dtype data you should do), instead pass 'minor'\n        dtype : dtype, default None\n            Data type to force, otherwise infer\n\n        Returns\n        -------\n        Panel", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _format_operation_dict(operation, parameters):\n    \"\"\"\n    \"\"\"\n    formatted_params = {}\n    for name in parameters:\n        escaped_name = name.replace(\"`\", r\"\\`\")\n        formatted_params[name] = \"@`{}`\".format(escaped_name)\n\n    try:\n        return operation % formatted_params\n    except KeyError as exc:\n        raise exceptions.ProgrammingError(exc)", "output": "Formats parameters in operation in the way BigQuery expects.\n\n    The input operation will be a query like ``SELECT %(namedparam)s`` and\n    the output will be a query like ``SELECT @namedparam``.\n\n    :type operation: str\n    :param operation: A Google BigQuery query string.\n\n    :type parameters: Mapping[str, Any]\n    :param parameters: Dictionary of parameter values.\n\n    :rtype: str\n    :returns: A formatted query string.\n    :raises: :class:`~google.cloud.bigquery.dbapi.ProgrammingError`\n        if a parameter used in the operation is not found in the\n        ``parameters`` argument.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create(cls, fpath):\n        \"\"\n        fpath = _expand_path(fpath)\n        assert(fpath.suffix == '.yml')\n        if fpath.exists(): return\n        fpath.parent.mkdir(parents=True, exist_ok=True)\n        with open(fpath, 'w') as yaml_file:\n            yaml.dump(cls.DEFAULT_CONFIG, yaml_file, default_flow_style=False)", "output": "Creates a `Config` from `fpath`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _prepare_graph_terms(self, default_screen):\n        \"\"\"\"\"\"\n        columns = self.columns.copy()\n        screen = self.screen\n        if screen is None:\n            screen = default_screen\n        columns[SCREEN_NAME] = screen\n        return columns", "output": "Helper for to_graph and to_execution_plan.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def validator(self, meth):\n        \"\"\"\n        \n        \"\"\"\n        if self._validator is None:\n            self._validator = meth\n        else:\n            self._validator = and_(self._validator, meth)\n        return meth", "output": "Decorator that adds *meth* to the list of validators.\n\n        Returns *meth* unchanged.\n\n        .. versionadded:: 17.1.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_data_stock_to_fq(__data, type_='01'):\n\n    def __QA_fetch_stock_xdxr(\n            code,\n            format_='pd',\n            collections=DATABASE.stock_xdxr\n    ):\n        '\u83b7\u53d6\u80a1\u7968\u9664\u6743\u4fe1\u606f/\u6570\u636e\u5e93'\n        try:\n            data = pd.DataFrame(\n                [item for item in collections.find({'code': code})]\n            ).drop(['_id'],\n                   axis=1)\n            data['date'] = pd.to_datetime(data['date'])\n            return data.set_index(['date', 'code'], drop=False)\n        except:\n            return pd.DataFrame(\n                data=[],\n                columns=[\n                    'category',\n                    'category_meaning',\n                    'code',\n                    'date',\n                    'fenhong',\n                    'fenshu',\n                    'liquidity_after',\n                    'liquidity_before',\n                    'name',\n                    'peigu',\n                    'peigujia',\n                    'shares_after',\n                    'shares_before',\n                    'songzhuangu',\n                    'suogu',\n                    'xingquanjia'\n                ]\n            )\n\n    ''\n\n    code = __data.index.remove_unused_levels().levels[1][0] if isinstance(\n        __data.index,\n        pd.core.indexes.multi.MultiIndex\n    ) else __data['code'][0]\n\n    return _QA_data_stock_to_fq(\n        bfq_data=__data,\n        xdxr_data=__QA_fetch_stock_xdxr(code),\n        fqtype=type_\n    )", "output": "\u80a1\u7968 \u65e5\u7ebf/\u5206\u949f\u7ebf \u52a8\u6001\u590d\u6743\u63a5\u53e3", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def initialized(name, **kwargs):\n    \n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': 'The VM is already correctly defined'\n           }\n\n    # define a machine to start later\n    ret, kwargs = _find_init_change(name, ret, **kwargs)\n\n    if ret['changes'] == {}:\n        return ret\n\n    kwargs['start'] = False\n    __salt__['vagrant.init'](name, **kwargs)\n    ret['changes'][name] = 'Node initialized'\n    ret['comment'] = 'Node {0} defined but not started.'.format(name)\n\n    return ret", "output": "r'''\n    Defines a new VM with specified arguments, but does not start it.\n\n    :param name: the Salt_id node name you wish your VM to have.\n\n    Each machine must be initialized individually using this function\n    or the \"vagrant.running\" function, or the vagrant.init execution module call.\n\n    This command will not change the state of a running or paused machine.\n\n    Possible keyword arguments:\n\n    - cwd: The directory (path) containing the Vagrantfile\n    - machine: ('') the name of the machine (in the Vagrantfile) if not default\n    - vagrant_runas: ('root') the username who owns the vagrantbox file\n    - vagrant_provider: the provider to run the VM (usually 'virtualbox')\n    - vm: ({}) a dictionary containing these or other keyword arguments\n\n    .. code-block:: yaml\n\n        node_name1:\n          vagrant.initialized\n            - cwd: /projects/my_project\n            - vagrant_runas: my_username\n            - machine: machine1\n\n        node_name2:\n          vagrant.initialized\n            - cwd: /projects/my_project\n            - vagrant_runas: my_username\n            - machine: machine2\n\n        start_nodes:\n          vagrant.start:\n            - name: node_name?", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def open(name, device, keyfile):\n    '''\n    \n    '''\n    if keyfile is None or keyfile == 'none' or keyfile == '-':\n        raise CommandExecutionError('For immediate crypt device mapping, keyfile must not be none')\n\n    code = __salt__['cmd.retcode']('cryptsetup open --key-file {0} {1} {2}'\n                                   .format(keyfile, device, name))\n    return code == 0", "output": "Open a crypt device using ``cryptsetup``. The ``keyfile`` must not be\n    ``None`` or ``'none'``, because ``cryptsetup`` will otherwise ask for the\n    password interactively.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cryptdev.open foo /dev/sdz1 /path/to/keyfile", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _prefix_from_prefix_string(self, prefixlen_str):\n        \"\"\"\n        \"\"\"\n        # int allows a leading +/- as well as surrounding whitespace,\n        # so we ensure that isn't the case\n        if not _BaseV4._DECIMAL_DIGITS.issuperset(prefixlen_str):\n            self._report_invalid_netmask(prefixlen_str)\n        try:\n            prefixlen = int(prefixlen_str)\n        except ValueError:\n            self._report_invalid_netmask(prefixlen_str)\n        if not (0 <= prefixlen <= self._max_prefixlen):\n            self._report_invalid_netmask(prefixlen_str)\n        return prefixlen", "output": "Return prefix length from a numeric string\n\n        Args:\n            prefixlen_str: The string to be converted\n\n        Returns:\n            An integer, the prefix length.\n\n        Raises:\n            NetmaskValueError: If the input is not a valid netmask", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_fill_indexer_searchsorted(self, target, method, limit=None):\n        \"\"\"\n        \n        \"\"\"\n        if limit is not None:\n            raise ValueError('limit argument for %r method only well-defined '\n                             'if index and target are monotonic' % method)\n\n        side = 'left' if method == 'pad' else 'right'\n\n        # find exact matches first (this simplifies the algorithm)\n        indexer = self.get_indexer(target)\n        nonexact = (indexer == -1)\n        indexer[nonexact] = self._searchsorted_monotonic(target[nonexact],\n                                                         side)\n        if side == 'left':\n            # searchsorted returns \"indices into a sorted array such that,\n            # if the corresponding elements in v were inserted before the\n            # indices, the order of a would be preserved\".\n            # Thus, we need to subtract 1 to find values to the left.\n            indexer[nonexact] -= 1\n            # This also mapped not found values (values of 0 from\n            # np.searchsorted) to -1, which conveniently is also our\n            # sentinel for missing values\n        else:\n            # Mark indices to the right of the largest value as not found\n            indexer[indexer == len(self)] = -1\n        return indexer", "output": "Fallback pad/backfill get_indexer that works for monotonic decreasing\n        indexes and non-monotonic targets.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ctxtReadMemory(self, buffer, size, URL, encoding, options):\n        \"\"\" \"\"\"\n        ret = libxml2mod.xmlCtxtReadMemory(self._o, buffer, size, URL, encoding, options)\n        if ret is None:raise treeError('xmlCtxtReadMemory() failed')\n        __tmp = xmlDoc(_obj=ret)\n        return __tmp", "output": "parse an XML in-memory document and build a tree. This\n           reuses the existing @ctxt parser context", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def boto_resource(self, service, *args, **kwargs):\n        \"\"\"\"\"\"\n        return self.boto_session.resource(service, *args, **self.configure_boto_session_method_kwargs(service, kwargs))", "output": "A wrapper to apply configuration options to boto resources", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def attention(targets_shifted, inputs_encoded, norm_fn, hparams, bias=None):\n  \"\"\"\"\"\"\n  separabilities = [hparams.separability, hparams.separability]\n  if hparams.separability < 0:\n    separabilities = [hparams.separability - 1, hparams.separability]\n  targets_timed = common_layers.subseparable_conv_block(\n      common_layers.add_timing_signal(targets_shifted),\n      hparams.hidden_size, [((1, 1), (5, 1)), ((4, 1), (5, 1))],\n      normalizer_fn=norm_fn,\n      padding=\"LEFT\",\n      separabilities=separabilities,\n      name=\"targets_time\")\n  if hparams.attention_type == \"transformer\":\n    targets_timed = tf.squeeze(targets_timed, 2)\n    target_shape = tf.shape(targets_timed)\n    targets_segment = tf.zeros([target_shape[0], target_shape[1]])\n    target_attention_bias = common_attention.attention_bias(\n        targets_segment, targets_segment, lower_triangular=True)\n    inputs_attention_bias = tf.zeros([\n        tf.shape(inputs_encoded)[0], hparams.num_heads,\n        tf.shape(targets_segment)[1],\n        tf.shape(inputs_encoded)[1]\n    ])\n\n    qv = common_attention.multihead_attention(\n        targets_timed,\n        None,\n        target_attention_bias,\n        hparams.hidden_size,\n        hparams.hidden_size,\n        hparams.hidden_size,\n        hparams.num_heads,\n        hparams.attention_dropout,\n        name=\"self_attention\")\n    qv = common_attention.multihead_attention(\n        qv,\n        inputs_encoded,\n        inputs_attention_bias,\n        hparams.hidden_size,\n        hparams.hidden_size,\n        hparams.hidden_size,\n        hparams.num_heads,\n        hparams.attention_dropout,\n        name=\"encdec_attention\")\n    return tf.expand_dims(qv, 2)\n  elif hparams.attention_type == \"simple\":\n    targets_with_attention = common_layers.simple_attention(\n        targets_timed, inputs_encoded, bias=bias)\n    return norm_fn(targets_shifted + targets_with_attention, name=\"attn_norm\")", "output": "Complete attention layer with preprocessing.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def abs_error(predictions, labels, weights_fn=None):\n  \"\"\"\"\"\"\n  del weights_fn  # Unused\n  targets = tf.squeeze(labels, axis=[2, 3])\n  batch_abs_error = tf.abs(predictions - targets)\n  den = tf.ones(tf.shape(batch_abs_error), dtype=tf.float32)\n  return (batch_abs_error, den)", "output": "Computes mean(abs(preds-target)).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def process_notifications(self, messages):\n        \"\"\"\"\"\"\n        for object_id, object_size, metadata_size in messages:\n            if object_size > 0 and object_id in self._waiting_dict:\n                linked_list = self._waiting_dict[object_id]\n                self._complete_future(linked_list)", "output": "Process notifications.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _layer_norm(self, name, x):\n    \"\"\"\"\"\"\n    if self.init_layers:\n      bn = LayerNorm()\n      bn.name = name\n      self.layers += [bn]\n    else:\n      bn = self.layers[self.layer_idx]\n      self.layer_idx += 1\n    bn.device_name = self.device_name\n    bn.set_training(self.training)\n    x = bn.fprop(x)\n    return x", "output": "Layer normalization.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def export(self, description, local=False, path='/tmp', format='qcow2'):\n        '''\n        \n        '''\n        kiwiproc.__salt__ = __salt__\n        return kiwiproc.KiwiExporter(grains=__grains__,\n                                     format=format).load(**description).export('something')", "output": "Export description for Kiwi.\n\n        :param local:\n        :param path:\n        :return:", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _slice(self, slicer):\n        \"\"\"  \"\"\"\n\n        # slice the category\n        # return same dims as we currently have\n\n        if isinstance(slicer, tuple) and len(slicer) == 2:\n            if not com.is_null_slice(slicer[0]):\n                raise AssertionError(\"invalid slicing for a 1-ndim \"\n                                     \"categorical\")\n            slicer = slicer[1]\n\n        return self.values[slicer]", "output": "return a slice of my values", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def export_to_dict(self, recursive=True, include_parent_ref=False,\n                       include_defaults=False):\n        \"\"\"\"\"\"\n        cls = self.__class__\n        parent_excludes = {}\n        if recursive and not include_parent_ref:\n            parent_ref = cls.__mapper__.relationships.get(cls.export_parent)\n            if parent_ref:\n                parent_excludes = {c.name for c in parent_ref.local_columns}\n        dict_rep = {c.name: getattr(self, c.name)\n                    for c in cls.__table__.columns\n                    if (c.name in self.export_fields and\n                        c.name not in parent_excludes and\n                        (include_defaults or (\n                            getattr(self, c.name) is not None and\n                            (not c.default or\n                                getattr(self, c.name) != c.default.arg))))\n                    }\n        if recursive:\n            for c in self.export_children:\n                # sorting to make lists of children stable\n                dict_rep[c] = sorted(\n                    [\n                        child.export_to_dict(\n                            recursive=recursive,\n                            include_parent_ref=include_parent_ref,\n                            include_defaults=include_defaults,\n                        ) for child in getattr(self, c)\n                    ],\n                    key=lambda k: sorted(k.items()))\n\n        return dict_rep", "output": "Export obj to dictionary", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def scalars_route(self, request):\n    \"\"\"\n    \"\"\"\n    # TODO: return HTTP status code for malformed requests\n    tag_regex_string = request.args.get('tag')\n    run = request.args.get('run')\n    mime_type = 'application/json'\n\n    try:\n      body = self.scalars_impl(run, tag_regex_string)\n    except ValueError as e:\n      return http_util.Respond(\n          request=request,\n          content=str(e),\n          content_type='text/plain',\n          code=500)\n\n    # Produce the response.\n    return http_util.Respond(request, body, mime_type)", "output": "Given a tag regex and single run, return ScalarEvents.\n\n    This route takes 2 GET params:\n    run: A run string to find tags for.\n    tag: A string that is a regex used to find matching tags.\n    The response is a JSON object:\n    {\n      // Whether the regular expression is valid. Also false if empty.\n      regexValid: boolean,\n\n      // An object mapping tag name to a list of ScalarEvents.\n      payload: Object<string, ScalarEvent[]>,\n    }", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _svrg_grads_update_rule(self, g_curr_batch_curr_weight, g_curr_batch_special_weight,\n                                g_special_weight_all_batch):\n        \"\"\"\n        \"\"\"\n        for index, grad in enumerate(g_curr_batch_curr_weight):\n            grad -= g_curr_batch_special_weight[index]\n            grad += g_special_weight_all_batch[index]\n        return g_curr_batch_curr_weight", "output": "Calculates the gradient based on the SVRG update rule.\n        Parameters\n        ----------\n        g_curr_batch_curr_weight : NDArray\n            gradients of current weight of self.mod w.r.t current batch of data\n        g_curr_batch_special_weight: NDArray\n            gradients of the weight of past m epochs of self._mod_special w.r.t current batch of data\n        g_special_weight_all_batch: NDArray\n            average of full gradients over full pass of data\n\n        Returns\n        ----------\n        Gradients calculated using SVRG update rule:\n        grads = g_curr_batch_curr_weight - g_curr_batch_special_weight + g_special_weight_all_batch", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_services():\n    '''\n    \n    '''\n    serv = []\n    services = pyconnman.ConnManager().get_services()\n    for path, _ in services:\n        serv.append(six.text_type(path[len(SERVICE_PATH):]))\n    return serv", "output": "Returns a list with all connman services", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_absent(name, profile=None, **connection_args):\n    '''\n    \n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': 'User \"{0}\" is already absent'.format(name)}\n\n    # Check if user is present\n    user = __salt__['keystone.user_get'](name=name, profile=profile,\n                                         **connection_args)\n    if 'Error' not in user:\n        if __opts__.get('test'):\n            ret['result'] = None\n            ret['comment'] = 'User \"{0}\" will be deleted'.format(name)\n            return ret\n        # Delete that user!\n        __salt__['keystone.user_delete'](name=name, profile=profile,\n                                         **connection_args)\n        ret['comment'] = 'User \"{0}\" has been deleted'.format(name)\n        ret['changes']['User'] = 'Deleted'\n\n    return ret", "output": "Ensure that the keystone user is absent.\n\n    name\n        The name of the user that should not exist", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lmx_relative():\n  \"\"\"\"\"\"\n  hparams = lmx_base()\n  hparams.self_attention_type = \"dot_product_relative_v2\"\n  hparams.activation_dtype = \"float32\"\n  hparams.weight_dtype = \"float32\"\n  return hparams", "output": "Language model using relative attention.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def postprocess_keyevent(self, event):\r\n        \"\"\"\"\"\"\r\n        ShellBaseWidget.postprocess_keyevent(self, event)\r\n        if QToolTip.isVisible():\r\n            _event, _text, key, _ctrl, _shift = restore_keyevent(event)\r\n            self.hide_tooltip_if_necessary(key)", "output": "Process keypress event", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def train_supervised(problem, model_name, hparams, data_dir, output_dir,\n                     train_steps, eval_steps, local_eval_frequency=None,\n                     schedule=\"continuous_train_and_eval\"):\n  \"\"\"\"\"\"\n  if local_eval_frequency is None:\n    local_eval_frequency = FLAGS.local_eval_frequency\n\n  exp_fn = trainer_lib.create_experiment_fn(\n      model_name, problem, data_dir, train_steps, eval_steps,\n      min_eval_frequency=local_eval_frequency\n  )\n  run_config = trainer_lib.create_run_config(model_name, model_dir=output_dir)\n  exp = exp_fn(run_config, hparams)\n  getattr(exp, schedule)()", "output": "Train supervised.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def select_directory(self):\r\n        \"\"\"\"\"\"\r\n        self.redirect_stdio.emit(False)\r\n        directory = getexistingdirectory(self.main, _(\"\"),\r\n                                         getcwd_or_home())\r\n        if directory:\r\n            self.chdir(directory)\r\n        self.redirect_stdio.emit(True)", "output": "Select directory", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def focusInEvent(self, event):\r\n        \"\"\"\"\"\"\r\n        show_status = getattr(self.lineEdit(), 'show_status_icon', None)\r\n        if show_status:\r\n            show_status()\r\n        QComboBox.focusInEvent(self, event)", "output": "Handle focus in event restoring to display the status icon.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def authenticate(remote_addr, password, cert, key, verify_cert=True):\n    '''\n    \n\n    '''\n    client = pylxd_client_get(remote_addr, cert, key, verify_cert)\n\n    if client.trusted:\n        return True\n\n    try:\n        client.authenticate(password)\n    except pylxd.exceptions.LXDAPIException as e:\n        # Wrong password\n        raise CommandExecutionError(six.text_type(e))\n\n    return client.trusted", "output": "Authenticate with a remote LXDaemon.\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if you\n        provide remote_addr and its a TCP Address!\n\n        Examples:\n            https://myserver.lan:8443\n\n    password :\n        The password of the remote.\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        $ salt '*' lxd.authenticate https://srv01:8443 <yourpass> ~/.config/lxc/client.crt ~/.config/lxc/client.key false\n\n    See the `requests-docs`_ for the SSL stuff.\n\n    .. _requests-docs: http://docs.python-requests.org/en/master/user/advanced/#ssl-cert-verification", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def embed_sentences(self,\n                        sentences: Iterable[List[str]],\n                        batch_size: int = DEFAULT_BATCH_SIZE) -> Iterable[numpy.ndarray]:\n        \"\"\"\n        \n        \"\"\"\n        for batch in lazy_groups_of(iter(sentences), batch_size):\n            yield from self.embed_batch(batch)", "output": "Computes the ELMo embeddings for a iterable of sentences.\n\n        Please note that ELMo has internal state and will give different results for the same input.\n        See the comment under the class definition.\n\n        Parameters\n        ----------\n        sentences : ``Iterable[List[str]]``, required\n            An iterable of tokenized sentences.\n        batch_size : ``int``, required\n            The number of sentences ELMo should process at once.\n\n        Returns\n        -------\n            A list of tensors, each representing the ELMo vectors for the input sentence at the same index.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_code(self, code):\n        \"\"\"\n        \"\"\"\n        # code= [code] if isinstance(code,str) else\n        return self.new(self.data.loc[(slice(None), code), :])", "output": "getcode \u83b7\u53d6\u67d0\u4e00\u53ea\u80a1\u7968\u7684\u677f\u5757\n\n        Arguments:\n            code {str} -- \u80a1\u7968\u4ee3\u7801\n\n        Returns:\n            DataStruct -- [description]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def revoke_auth(preserve_minion_cache=False):\n    '''\n    \n    '''\n    masters = list()\n    ret = True\n    if 'master_uri_list' in __opts__:\n        for master_uri in __opts__['master_uri_list']:\n            masters.append(master_uri)\n    else:\n        masters.append(__opts__['master_uri'])\n\n    for master in masters:\n        channel = salt.transport.client.ReqChannel.factory(__opts__, master_uri=master)\n        tok = channel.auth.gen_token(b'salt')\n        load = {'cmd': 'revoke_auth',\n                'id': __opts__['id'],\n                'tok': tok,\n                'preserve_minion_cache': preserve_minion_cache}\n        try:\n            channel.send(load)\n        except SaltReqTimeoutError:\n            ret = False\n        finally:\n            channel.close()\n    return ret", "output": "The minion sends a request to the master to revoke its own key.\n    Note that the minion session will be revoked and the minion may\n    not be able to return the result of this command back to the master.\n\n    If the 'preserve_minion_cache' flag is set to True, the master\n    cache for this minion will not be removed.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' saltutil.revoke_auth", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _slice(attrs, inputs, proto_obj):\n    \"\"\"\"\"\"\n    new_attrs = translation_utils._fix_attribute_names(attrs,\n                                                       {'axes' : 'axis',\n                                                        'ends' : 'end',\n                                                        'starts' : 'begin'})\n    # onnx slice provides slicing on multiple axis. Adding multiple slice_axis operator\n    # for multiple axes from mxnet\n    begin = new_attrs.get('begin')\n    end = new_attrs.get('end')\n    axes = new_attrs.get('axis', tuple(range(len(begin))))\n    slice_op = symbol.slice_axis(inputs[0], axis=axes[0], begin=begin[0], end=end[0])\n    if len(axes) > 1:\n        for i, axis in enumerate(axes):\n            slice_op = symbol.slice_axis(slice_op, axis=axis, begin=begin[i], end=end[i])\n    return slice_op, new_attrs, inputs", "output": "Returns a slice of the input tensor along multiple axes.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def find_learning_rate_from_args(args: argparse.Namespace) -> None:\n    \"\"\"\n    \n    \"\"\"\n    params = Params.from_file(args.param_path, args.overrides)\n    find_learning_rate_model(params, args.serialization_dir,\n                             start_lr=args.start_lr,\n                             end_lr=args.end_lr,\n                             num_batches=args.num_batches,\n                             linear_steps=args.linear,\n                             stopping_factor=args.stopping_factor,\n                             force=args.force)", "output": "Start learning rate finder for given args", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_subject(self, subject):\n        \"\"\"\n        \n        \"\"\"\n\n        url = '/'.join([self.url, 'subjects', subject])\n\n        result, code = self._send_request(url, method=\"DELETE\")\n        if not (code >= 200 and code <= 299):\n            raise ClientError('Unable to delete subject: {}'.format(result))\n        return result", "output": "DELETE /subjects/(string: subject)\n        Deletes the specified subject and its associated compatibility level if registered.\n        It is recommended to use this API only when a topic needs to be recycled or in development environments.\n        :param subject: subject name\n        :returns: version of the schema deleted under this subject\n        :rtype: (int)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _to_predictor(self, pred_parameter=None):\n        \"\"\"\"\"\"\n        predictor = _InnerPredictor(booster_handle=self.handle, pred_parameter=pred_parameter)\n        predictor.pandas_categorical = self.pandas_categorical\n        return predictor", "output": "Convert to predictor.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def kernels_list_cli(self,\n                         mine=False,\n                         page=1,\n                         page_size=20,\n                         search=None,\n                         csv_display=False,\n                         parent=None,\n                         competition=None,\n                         dataset=None,\n                         user=None,\n                         language=None,\n                         kernel_type=None,\n                         output_type=None,\n                         sort_by=None):\n        \"\"\" \n        \"\"\"\n        kernels = self.kernels_list(\n            page=page,\n            page_size=page_size,\n            search=search,\n            mine=mine,\n            dataset=dataset,\n            competition=competition,\n            parent_kernel=parent,\n            user=user,\n            language=language,\n            kernel_type=kernel_type,\n            output_type=output_type,\n            sort_by=sort_by)\n        fields = ['ref', 'title', 'author', 'lastRunTime', 'totalVotes']\n        if kernels:\n            if csv_display:\n                self.print_csv(kernels, fields)\n            else:\n                self.print_table(kernels, fields)\n        else:\n            print('No kernels found')", "output": "client wrapper for kernels_list, see this function for arguments.\n            Additional arguments are provided here.\n             Parameters\n            ==========\n            csv_display: if True, print comma separated values instead of table", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_jids():\n    '''\n    \n    '''\n    serv = _get_serv(ret=None)\n    sql = \"select distinct(jid) from jids group by load\"\n\n    # [{u'points': [[0, jid, load],\n    #               [0, jid, load]],\n    #   u'name': u'jids',\n    #   u'columns': [u'time', u'distinct', u'load']}]\n    data = serv.query(sql)\n    ret = {}\n    if data:\n        for _, jid, load in data[0]['points']:\n            ret[jid] = salt.utils.jid.format_jid_instance(jid, salt.utils.json.loads(load))\n    return ret", "output": "Return a list of all job ids", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def namespaces(**kwargs):\n    '''\n    \n    '''\n    cfg = _setup_conn(**kwargs)\n    try:\n        api_instance = kubernetes.client.CoreV1Api()\n        api_response = api_instance.list_namespace()\n\n        return [nms['metadata']['name'] for nms in api_response.to_dict().get('items')]\n    except (ApiException, HTTPError) as exc:\n        if isinstance(exc, ApiException) and exc.status == 404:\n            return None\n        else:\n            log.exception('Exception when calling CoreV1Api->list_namespace')\n            raise CommandExecutionError(exc)\n    finally:\n        _cleanup(**cfg)", "output": "Return the names of the available namespaces\n\n    CLI Examples::\n\n        salt '*' kubernetes.namespaces\n        salt '*' kubernetes.namespaces kubeconfig=/etc/salt/k8s/kubeconfig context=minikube", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def removeRef(self, attr):\n        \"\"\" \"\"\"\n        if attr is None: attr__o = None\n        else: attr__o = attr._o\n        ret = libxml2mod.xmlRemoveRef(self._o, attr__o)\n        return ret", "output": "Remove the given attribute from the Ref table maintained\n           internally.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_focus_widget_properties(self):\r\n        \"\"\"\"\"\"\r\n        from spyder.plugins.editor.widgets.editor import TextEditBaseWidget\r\n        from spyder.plugins.ipythonconsole.widgets import ControlWidget\r\n        widget = QApplication.focusWidget()\r\n\r\n        textedit_properties = None\r\n        if isinstance(widget, (TextEditBaseWidget, ControlWidget)):\r\n            console = isinstance(widget, ControlWidget)\r\n            not_readonly = not widget.isReadOnly()\r\n            readwrite_editor = not_readonly and not console\r\n            textedit_properties = (console, not_readonly, readwrite_editor)\r\n        return widget, textedit_properties", "output": "Get properties of focus widget\r\n        Returns tuple (widget, properties) where properties is a tuple of\r\n        booleans: (is_console, not_readonly, readwrite_editor)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_pyproject_toml(self):\n        # type: () -> None\n        \"\"\"\n        \"\"\"\n        pep517_data = load_pyproject_toml(\n            self.use_pep517,\n            self.pyproject_toml,\n            self.setup_py,\n            str(self)\n        )\n\n        if pep517_data is None:\n            self.use_pep517 = False\n        else:\n            self.use_pep517 = True\n            requires, backend, check = pep517_data\n            self.requirements_to_check = check\n            self.pyproject_requires = requires\n            self.pep517_backend = Pep517HookCaller(self.setup_py_dir, backend)\n\n            # Use a custom function to call subprocesses\n            self.spin_message = \"\"\n\n            def runner(cmd, cwd=None, extra_environ=None):\n                with open_spinner(self.spin_message) as spinner:\n                    call_subprocess(\n                        cmd,\n                        cwd=cwd,\n                        extra_environ=extra_environ,\n                        show_stdout=False,\n                        spinner=spinner\n                    )\n                self.spin_message = \"\"\n\n            self.pep517_backend._subprocess_runner = runner", "output": "Load the pyproject.toml file.\n\n        After calling this routine, all of the attributes related to PEP 517\n        processing for this requirement have been set. In particular, the\n        use_pep517 attribute can be used to determine whether we should\n        follow the PEP 517 or legacy (setup.py) code path.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def receive_trial_result(self, parameter_id, parameters, value):\n        \"\"\"\n        \"\"\"\n        reward = extract_scalar_reward(value)\n        if self.optimize_mode is OptimizeMode.Maximize:\n            reward = -reward\n\n        if parameter_id not in self.total_data:\n            raise RuntimeError('Received parameter_id not in total_data.')\n        if self.first_one:\n            self.smbo_solver.nni_smac_receive_first_run(self.total_data[parameter_id], reward)\n            self.first_one = False\n        else:\n            self.smbo_solver.nni_smac_receive_runs(self.total_data[parameter_id], reward)", "output": "receive_trial_result\n       \n        Parameters\n        ----------\n        parameter_id: int\n            parameter id\n        parameters:\n            parameters\n        value:\n            value\n        \n        Raises\n        ------\n        RuntimeError\n            Received parameter id not in total_data", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def full_data(tgt,\n              fun,\n              arg=None,\n              tgt_type='glob',\n              returner='',\n              timeout=5):\n    '''\n    \n\n    '''\n    return _publish(tgt,\n                    fun,\n                    arg=arg,\n                    tgt_type=tgt_type,\n                    returner=returner,\n                    timeout=timeout,\n                    form='full',\n                    wait=True)", "output": "Return the full data about the publication, this is invoked in the same\n    way as the publish function\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt system.example.com publish.full_data '*' cmd.run 'ls -la /tmp'\n\n    .. admonition:: Attention\n\n        If you need to pass a value to a function argument and that value\n        contains an equal sign, you **must** include the argument name.\n        For example:\n\n        .. code-block:: bash\n\n            salt '*' publish.full_data test.kwarg arg='cheese=spam'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def log_inference(batch_id, batch_num, metric, step_loss, log_interval):\n    \"\"\"\n    \"\"\"\n    metric_nm, metric_val = metric.get()\n    if not isinstance(metric_nm, list):\n        metric_nm = [metric_nm]\n        metric_val = [metric_val]\n\n    eval_str = '[Batch %d/%d] loss=%.4f, metrics:' + \\\n               ','.join([i + ':%.4f' for i in metric_nm])\n    logging.info(eval_str, batch_id + 1, batch_num, \\\n                 step_loss / log_interval, \\\n                 *metric_val)", "output": "Generate and print out the log message for inference.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _dictionary_to_stringlist(input_dict):\n    '''\n    \n    '''\n    string_value = \"\"\n    for s in input_dict:\n        string_value += \"{0}={1},\".format(s, input_dict[s])\n    string_value = string_value[:-1]\n    return string_value", "output": "Convert a dictionary to a stringlist (comma separated settings)\n\n    The result of the dictionary {'setting1':'value1','setting2':'value2'} will be:\n\n    setting1=value1,setting2=value2", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_resources(name, expr, resources):\n    \"\"\"\n    \"\"\"\n    if expr is None:\n        return\n    bound = expr._resources()\n    if not bound and resources is None:\n        raise ValueError('no resources provided to compute %s' % name)\n    if bound and resources:\n        raise ValueError(\n            'explicit and implicit resources provided to compute %s' % name,\n        )", "output": "Validate that the expression and resources passed match up.\n\n    Parameters\n    ----------\n    name : str\n        The name of the argument we are checking.\n    expr : Expr\n        The potentially bound expr.\n    resources\n        The explicitly passed resources to compute expr.\n\n    Raises\n    ------\n    ValueError\n        If the resources do not match for an expression.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ports_open(name, ports, proto='tcp', direction='in'):\n    '''\n    \n    '''\n\n    ports = list(six.moves.map(six.text_type, ports))\n    diff = False\n    ret = {'name': ','.join(ports),\n           'changes': {},\n           'result': True,\n           'comment': 'Ports open.'}\n\n    current_ports = __salt__['csf.get_ports'](proto=proto, direction=direction)\n    direction = direction.upper()\n    directions = __salt__['csf.build_directions'](direction)\n    for direction in directions:\n        log.trace('current_ports[direction]: %s', current_ports[direction])\n        log.trace('ports: %s', ports)\n        if current_ports[direction] != ports:\n            diff = True\n    if diff:\n        result = __salt__['csf.allow_ports'](ports, proto=proto, direction=direction)\n        ret['changes']['Ports'] = 'Changed'\n        ret['comment'] = result\n    return ret", "output": "Ensure ports are open for a protocol, in a direction.\n    e.g. - proto='tcp', direction='in' would set the values\n    for TCP_IN in the csf.conf file.\n\n    ports\n        A list of ports that should be open.\n\n    proto\n        The protocol. May be one of 'tcp', 'udp',\n        'tcp6', or 'udp6'.\n\n    direction\n        Choose 'in', 'out', or both to indicate the port\n        should be opened for inbound traffic, outbound\n        traffic, or both.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def all(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\r\n        \"\"\"\r\n        \"\"\"\r\n        if axis is not None:\r\n            axis = self._get_axis_number(axis)\r\n            if bool_only and axis == 0:\r\n                if hasattr(self, \"dtype\"):\r\n                    raise NotImplementedError(\r\n                        \"{}.{} does not implement numeric_only.\".format(\r\n                            self.__name__, \"all\"\r\n                        )\r\n                    )\r\n                data_for_compute = self[self.columns[self.dtypes == np.bool]]\r\n                return data_for_compute.all(\r\n                    axis=axis, bool_only=False, skipna=skipna, level=level, **kwargs\r\n                )\r\n            return self._reduce_dimension(\r\n                self._query_compiler.all(\r\n                    axis=axis, bool_only=bool_only, skipna=skipna, level=level, **kwargs\r\n                )\r\n            )\r\n        else:\r\n            if bool_only:\r\n                raise ValueError(\"Axis must be 0 or 1 (got {})\".format(axis))\r\n            # Reduce to a scalar if axis is None.\r\n            result = self._reduce_dimension(\r\n                self._query_compiler.all(\r\n                    axis=0, bool_only=bool_only, skipna=skipna, level=level, **kwargs\r\n                )\r\n            )\r\n            if isinstance(result, BasePandasDataset):\r\n                return result.all(\r\n                    axis=axis, bool_only=bool_only, skipna=skipna, level=level, **kwargs\r\n                )\r\n            return result", "output": "Return whether all elements are True over requested axis\r\n\r\n        Note:\r\n            If axis=None or axis=0, this call applies df.all(axis=1)\r\n                to the transpose of df.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_external_workers(worker):\n    \"\"\"\n    \n    \"\"\"\n    worker_that_blocked_task = collections.defaultdict(set)\n    get_work_response_history = worker._get_work_response_history\n    for get_work_response in get_work_response_history:\n        if get_work_response['task_id'] is None:\n            for running_task in get_work_response['running_tasks']:\n                other_worker_id = running_task['worker']\n                other_task_id = running_task['task_id']\n                other_task = worker._scheduled_tasks.get(other_task_id)\n                if other_worker_id == worker._id or not other_task:\n                    continue\n                worker_that_blocked_task[other_worker_id].add(other_task)\n    return worker_that_blocked_task", "output": "This returns a dict with a set of tasks for all of the other workers", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def power_on_vm(name, datacenter=None, service_instance=None):\n    '''\n    \n\n    '''\n    log.trace('Powering on virtual machine %s', name)\n    vm_properties = [\n        'name',\n        'summary.runtime.powerState'\n    ]\n    virtual_machine = salt.utils.vmware.get_vm_by_property(\n        service_instance,\n        name,\n        datacenter=datacenter,\n        vm_properties=vm_properties)\n    if virtual_machine['summary.runtime.powerState'] == 'poweredOn':\n        result = {'comment': 'Virtual machine is already powered on',\n                  'changes': {'power_on': True}}\n        return result\n    salt.utils.vmware.power_cycle_vm(virtual_machine['object'], action='on')\n    result = {'comment': 'Virtual machine power on action succeeded',\n              'changes': {'power_on': True}}\n    return result", "output": "Powers on a virtual machine specified by it's name.\n\n    name\n        Name of the virtual machine\n\n    datacenter\n        Datacenter of the virtual machine\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter.\n        Default is None.\n\n    .. code-block:: bash\n\n        salt '*' vsphere.power_on_vm name=my_vm", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reboot_node(node_id, profile, **libcloud_kwargs):\n    '''\n    \n    '''\n    conn = _get_driver(profile=profile)\n    node = _get_by_id(conn.list_nodes(**libcloud_kwargs), node_id)\n    return conn.reboot_node(node, **libcloud_kwargs)", "output": "Reboot a node in the cloud\n\n    :param node_id: Unique ID of the node to reboot\n    :type  node_id: ``str``\n\n    :param profile: The profile key\n    :type  profile: ``str``\n\n    :param libcloud_kwargs: Extra arguments for the driver's reboot_node method\n    :type  libcloud_kwargs: ``dict``\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion libcloud_compute.reboot_node as-2346 profile1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def clean_whitespace(statement):\n    \"\"\"\n    \n    \"\"\"\n    import re\n\n    # Replace linebreaks and tabs with spaces\n    statement.text = statement.text.replace('\\n', ' ').replace('\\r', ' ').replace('\\t', ' ')\n\n    # Remove any leeding or trailing whitespace\n    statement.text = statement.text.strip()\n\n    # Remove consecutive spaces\n    statement.text = re.sub(' +', ' ', statement.text)\n\n    return statement", "output": "Remove any consecutive whitespace characters from the statement text.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def try_one_generator (project, name, generator, target_type, properties, sources):\n    \"\"\" \n    \"\"\"\n    if __debug__:\n        from .targets import ProjectTarget\n        assert isinstance(project, ProjectTarget)\n        assert isinstance(name, basestring) or name is None\n        assert isinstance(generator, Generator)\n        assert isinstance(target_type, basestring)\n        assert isinstance(properties, property_set.PropertySet)\n        assert is_iterable_typed(sources, virtual_target.VirtualTarget)\n    source_types = []\n\n    for s in sources:\n        source_types.append (s.type ())\n\n    viable_source_types = viable_source_types_for_generator (generator)\n\n    if source_types and viable_source_types != ['*'] and\\\n           not set_.intersection (source_types, viable_source_types):\n        if project.manager ().logger ().on ():\n            id = generator.id ()\n            project.manager ().logger ().log (__name__, \"generator '%s' pruned\" % id)\n            project.manager ().logger ().log (__name__, \"source_types\" '%s' % source_types)\n            project.manager ().logger ().log (__name__, \"viable_source_types '%s'\" % viable_source_types)\n\n        return []\n\n    else:\n        return try_one_generator_really (project, name, generator, target_type, properties, sources)", "output": "Checks if generator invocation can be pruned, because it's guaranteed\n        to fail. If so, quickly returns empty list. Otherwise, calls\n        try_one_generator_really.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_external_data_for_tensor(tensor, base_dir):  # type: (TensorProto, Text) -> None\n    \"\"\"\n    \n    \"\"\"\n    if tensor.HasField(\"raw_data\"):  # already loaded\n        return\n    info = ExternalDataInfo(tensor)\n    file_location = _sanitize_path(info.location)\n    external_data_file_path = os.path.join(base_dir, file_location)\n\n    with open(external_data_file_path, 'rb') as data_file:\n\n        if info.offset:\n            data_file.seek(info.offset)\n\n        if info.length:\n            tensor.raw_data = data_file.read(info.length)\n        else:\n            tensor.raw_data = data_file.read()", "output": "Load data from an external file for tensor.\n\n    @params\n    tensor: a TensorProto object.\n    base_dir: directory that contains the external data.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_new_line(self):\r\n        \"\"\"\"\"\"\r\n        self.set_cursor_position('eof')\r\n        self.current_prompt_pos = self.get_position('cursor')\r\n        self.new_input_line = False", "output": "On new input line", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __dict_to_pod_spec(spec):\n    '''\n    \n    '''\n    spec_obj = kubernetes.client.V1PodSpec()\n    for key, value in iteritems(spec):\n        if hasattr(spec_obj, key):\n            setattr(spec_obj, key, value)\n\n    return spec_obj", "output": "Converts a dictionary into kubernetes V1PodSpec instance.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _affine_inv_mult(c, m):\n    \"\"\n    size = c.flow.size()\n    h,w = c.size\n    m[0,1] *= h/w\n    m[1,0] *= w/h\n    c.flow = c.flow.view(-1,2)\n    a = torch.inverse(m[:2,:2].t())\n    c.flow = torch.mm(c.flow - m[:2,2], a).view(size)\n    return c", "output": "Applies the inverse affine transform described in `m` to `c`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_vm(name, datacenter=None, vm_properties=None, traversal_spec=None,\n           parent_ref=None, service_instance=None):\n    '''\n    \n    '''\n    virtual_machine = salt.utils.vmware.get_vm_by_property(\n        service_instance,\n        name,\n        datacenter=datacenter,\n        vm_properties=vm_properties,\n        traversal_spec=traversal_spec,\n        parent_ref=parent_ref)\n    return virtual_machine", "output": "Returns vm object properties.\n\n    name\n        Name of the virtual machine.\n\n    datacenter\n        Datacenter name\n\n    vm_properties\n        List of vm properties.\n\n    traversal_spec\n        Traversal Spec object(s) for searching.\n\n    parent_ref\n        Container Reference object for searching under a given object.\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter.\n        Default is None.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def unregister(name, delete=False):\n    '''\n    \n    '''\n    nodes = list_nodes_min()\n    if name not in nodes:\n        raise CommandExecutionError(\n            'The specified VM ({0}) is not registered.'.format(name)\n        )\n\n    cmd = '{0} unregistervm {1}'.format(vboxcmd(), name)\n    if delete is True:\n        cmd += ' --delete'\n    ret = salt.modules.cmdmod.run_all(cmd)\n    if ret['retcode'] == 0:\n        return True\n    return ret['stderr']", "output": "Unregister a VM\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' vboxmanage.unregister my_vm_filename", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def write_docstring_at_first_line_of_function(self):\r\n        \"\"\"\"\"\"\r\n        result = self.get_function_definition_from_first_line()\r\n        editor = self.code_editor\r\n        if result:\r\n            func_text, number_of_line_func = result\r\n            line_number_function = (self.line_number_cursor +\r\n                                    number_of_line_func - 1)\r\n\r\n            cursor = editor.textCursor()\r\n            line_number_cursor = cursor.blockNumber() + 1\r\n            offset = line_number_function - line_number_cursor\r\n            if offset > 0:\r\n                for __ in range(offset):\r\n                    cursor.movePosition(QTextCursor.NextBlock)\r\n            else:\r\n                for __ in range(abs(offset)):\r\n                    cursor.movePosition(QTextCursor.PreviousBlock)\r\n            cursor.movePosition(QTextCursor.EndOfLine, QTextCursor.MoveAnchor)\r\n            editor.setTextCursor(cursor)\r\n\r\n            indent = get_indent(func_text)\r\n            editor.insert_text('\\n{}{}\"\"\"'.format(indent, editor.indent_chars))\r\n            self.write_docstring()", "output": "Write docstring to editor at mouse position.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_config(**api_opts):\n    '''\n    \n    '''\n    config = {\n        'api_sslverify': True,\n        'api_url': 'https://INFOBLOX/wapi/v1.2.1',\n        'api_user': '',\n        'api_key': '',\n    }\n    if '__salt__' in globals():\n        config_key = '{0}.config'.format(__virtualname__)\n        config.update(__salt__['config.get'](config_key, {}))\n    # pylint: disable=C0201\n    for k in set(config.keys()) & set(api_opts.keys()):\n        config[k] = api_opts[k]\n    return config", "output": "Return configuration\n    user passed api_opts override salt config.get vars", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_connection_close(self) -> None:\n        \"\"\"\n        \"\"\"\n        if _has_stream_request_body(self.__class__):\n            if not self.request._body_future.done():\n                self.request._body_future.set_exception(iostream.StreamClosedError())\n                self.request._body_future.exception()", "output": "Called in async handlers if the client closed the connection.\n\n        Override this to clean up resources associated with\n        long-lived connections.  Note that this method is called only if\n        the connection was closed during asynchronous processing; if you\n        need to do cleanup after every request override `on_finish`\n        instead.\n\n        Proxies may keep a connection open for a time (perhaps\n        indefinitely) after the client has gone away, so this method\n        may not be called promptly after the end user closes their\n        connection.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_post(self, path: str, handler: _WebHandler,\n                 **kwargs: Any) -> AbstractRoute:\n        \"\"\"\n        \n        \"\"\"\n        return self.add_route(hdrs.METH_POST, path, handler, **kwargs)", "output": "Shortcut for add_route with method POST", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _copy_default(cls, default):\n        ''' \n\n        '''\n        if not isinstance(default, types.FunctionType):\n            return copy(default)\n        else:\n            return default()", "output": "Return a copy of the default, or a new value if the default\n        is specified by a function.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_dtype_kinds(l):\n    \"\"\"\n    \n    \"\"\"\n\n    typs = set()\n    for arr in l:\n\n        dtype = arr.dtype\n        if is_categorical_dtype(dtype):\n            typ = 'category'\n        elif is_sparse(arr):\n            typ = 'sparse'\n        elif isinstance(arr, ABCRangeIndex):\n            typ = 'range'\n        elif is_datetime64tz_dtype(arr):\n            # if to_concat contains different tz,\n            # the result must be object dtype\n            typ = str(arr.dtype)\n        elif is_datetime64_dtype(dtype):\n            typ = 'datetime'\n        elif is_timedelta64_dtype(dtype):\n            typ = 'timedelta'\n        elif is_object_dtype(dtype):\n            typ = 'object'\n        elif is_bool_dtype(dtype):\n            typ = 'bool'\n        elif is_extension_array_dtype(dtype):\n            typ = str(arr.dtype)\n        else:\n            typ = dtype.kind\n        typs.add(typ)\n    return typs", "output": "Parameters\n    ----------\n    l : list of arrays\n\n    Returns\n    -------\n    a set of kinds that exist in this list of arrays", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cut(self):\n        \"\"\"\"\"\"\n        self.truncate_selection(self.header_end_pos)\n        if self.has_selected_text():\n            CodeEditor.cut(self)", "output": "Cut text", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read(self):\n        \"\"\"\n        \n        \"\"\"\n        cursor = self.get_collection().find(\n            {\n                '_id': {'$in': self._document_ids},\n                self._field: {'$exists': True}\n            },\n            {self._field: True}\n        )\n\n        return {doc['_id']: doc[self._field] for doc in cursor}", "output": "Read the targets value", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def patch_traces(self, traces, project_id=None):\n        \"\"\"\n        \"\"\"\n        if project_id is None:\n            project_id = self.project\n\n        self.trace_api.patch_traces(project_id=project_id, traces=traces)", "output": "Sends new traces to Stackdriver Trace or updates existing traces.\n\n        Args:\n            traces (dict): Required. The traces to be patched in the API call.\n\n            project_id (Optional[str]): ID of the Cloud project where the trace\n                data is stored.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(key, profile=None):\n    '''\n    \n    '''\n    conn = salt.utils.memcached.get_conn(profile)\n    return salt.utils.memcached.get(conn, key)", "output": "Get a value from memcached", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def transformer_base_vq1_16_nb1_packed_dan_b01_scales():\n  \"\"\"\"\"\"\n  hparams = transformer_base_vq_ada_32ex_packed()\n  hparams.use_scales = int(True)\n  hparams.moe_num_experts = 16\n  hparams.moe_k = 1\n  hparams.beta = 0.1\n  hparams.ema = False\n  return hparams", "output": "Set of hyperparameters.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_worker_processes(apppool):\n    '''\n    \n    '''\n    ps_cmd = ['Get-ChildItem',\n              r\"'IIS:\\AppPools\\{0}\\WorkerProcesses'\".format(apppool)]\n\n    cmd_ret = _srvmgr(cmd=ps_cmd, return_json=True)\n\n    try:\n        items = salt.utils.json.loads(cmd_ret['stdout'], strict=False)\n    except ValueError:\n        raise CommandExecutionError('Unable to parse return data as Json.')\n\n    ret = dict()\n    for item in items:\n        ret[item['processId']] = item['appPoolName']\n\n    if not ret:\n        log.warning('No backups found in output: %s', cmd_ret)\n\n    return ret", "output": "Returns a list of worker processes that correspond to the passed\n    application pool.\n\n    .. versionadded:: 2017.7.0\n\n    Args:\n        apppool (str): The application pool to query\n\n    Returns:\n        dict: A dictionary of worker processes with their process IDs\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' win_iis.list_worker_processes 'My App Pool'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _handle_sub_action(self, input_dict, handler):\n        \"\"\"\n        \n        \"\"\"\n        if not self.can_handle(input_dict):\n            return input_dict\n\n        key = self.intrinsic_name\n        sub_value = input_dict[key]\n\n        input_dict[key] = self._handle_sub_value(sub_value, handler)\n\n        return input_dict", "output": "Handles resolving replacements in the Sub action based on the handler that is passed as an input.\n\n        :param input_dict: Dictionary to be resolved\n        :param supported_values: One of several different objects that contain the supported values that\n            need to be changed. See each method above for specifics on these objects.\n        :param handler: handler that is specific to each implementation.\n        :return: Resolved value of the Sub dictionary", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def split_by_fname_file(self, fname:PathOrStr, path:PathOrStr=None)->'ItemLists':\n        \"\"\n        path = Path(ifnone(path, self.path))\n        valid_names = loadtxt_str(path/fname)\n        return self.split_by_files(valid_names)", "output": "Split the data by using the names in `fname` for the validation set. `path` will override `self.path`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _tmp_access_rule(method,\n                    ip=None,\n                    ttl=None,\n                    port=None,\n                    direction='in',\n                    port_origin='d',\n                    ip_origin='d',\n                    comment=''):\n    '''\n    \n    '''\n    if _status_csf():\n        if ip is None:\n            return {'error': 'You must supply an ip address or CIDR.'}\n        if ttl is None:\n            return {'error': 'You must supply a ttl.'}\n        args = _build_tmp_access_args(method, ip, ttl, port, direction, comment)\n        return __csf_cmd(args)", "output": "Handles the cmd execution for tempdeny and tempallow commands.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def release(self, xcoord, ycoord):\n        \"\"\"\n        \n        \"\"\"\n        self._actions.append(lambda: self._driver.execute(\n            Command.TOUCH_UP, {\n                'x': int(xcoord),\n                'y': int(ycoord)}))\n        return self", "output": "Release previously issued tap 'and hold' command at specified location.\n\n        :Args:\n         - xcoord: X Coordinate to release.\n         - ycoord: Y Coordinate to release.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def skip_connection_distance(a, b):\n    \"\"\"\"\"\"\n    if a[2] != b[2]:\n        return 1.0\n    len_a = abs(a[1] - a[0])\n    len_b = abs(b[1] - b[0])\n    return (abs(a[0] - b[0]) + abs(len_a - len_b)) / (max(a[0], b[0]) + max(len_a, len_b))", "output": "The distance between two skip-connections.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def key_type(key, host=None, port=None, db=None, password=None):\n    '''\n    \n    '''\n    server = _connect(host, port, db, password)\n    return server.type(key)", "output": "Get redis key type\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' redis.type foo", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _parse_schema_resource(info):\n    \"\"\"\n    \"\"\"\n    if \"fields\" not in info:\n        return ()\n\n    schema = []\n    for r_field in info[\"fields\"]:\n        name = r_field[\"name\"]\n        field_type = r_field[\"type\"]\n        mode = r_field.get(\"mode\", \"NULLABLE\")\n        description = r_field.get(\"description\")\n        sub_fields = _parse_schema_resource(r_field)\n        schema.append(SchemaField(name, field_type, mode, description, sub_fields))\n    return schema", "output": "Parse a resource fragment into a schema field.\n\n    Args:\n        info: (Mapping[str->dict]): should contain a \"fields\" key to be parsed\n\n    Returns:\n        (Union[Sequence[:class:`google.cloud.bigquery.schema.SchemaField`],None])\n            a list of parsed fields, or ``None`` if no \"fields\" key found.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_root_path(self, root_path):\r\n        \"\"\"\"\"\"\r\n        if self.name is None:\r\n            self.name = osp.basename(root_path)\r\n        self.root_path = to_text_string(root_path)\r\n        config_path = self.__get_project_config_path()\r\n        if osp.exists(config_path):\r\n            self.load()\r\n        else:\r\n            if not osp.isdir(self.root_path):\r\n                os.mkdir(self.root_path)\r\n            self.save()", "output": "Set project root path.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _run_hook_from_repo_dir(repo_dir, hook_name, project_dir, context,\n                            delete_project_on_failure):\n    \"\"\"\n    \"\"\"\n    with work_in(repo_dir):\n        try:\n            run_hook(hook_name, project_dir, context)\n        except FailedHookException:\n            if delete_project_on_failure:\n                rmtree(project_dir)\n            logger.error(\n                \"Stopping generation because {} hook \"\n                \"script didn't exit successfully\".format(hook_name)\n            )\n            raise", "output": "Run hook from repo directory, clean project directory if hook fails.\n\n    :param repo_dir: Project template input directory.\n    :param hook_name: The hook to execute.\n    :param project_dir: The directory to execute the script from.\n    :param context: Cookiecutter project context.\n    :param delete_project_on_failure: Delete the project directory on hook\n        failure?", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def nanmedian(values, axis=None, skipna=True, mask=None):\n    \"\"\"\n    \n    \"\"\"\n    def get_median(x):\n        mask = notna(x)\n        if not skipna and not mask.all():\n            return np.nan\n        return np.nanmedian(x[mask])\n\n    values, mask, dtype, dtype_max, _ = _get_values(values, skipna, mask=mask)\n    if not is_float_dtype(values):\n        values = values.astype('f8')\n        values[mask] = np.nan\n\n    if axis is None:\n        values = values.ravel()\n\n    notempty = values.size\n\n    # an array from a frame\n    if values.ndim > 1:\n\n        # there's a non-empty array to apply over otherwise numpy raises\n        if notempty:\n            if not skipna:\n                return _wrap_results(\n                    np.apply_along_axis(get_median, axis, values), dtype)\n\n            # fastpath for the skipna case\n            return _wrap_results(np.nanmedian(values, axis), dtype)\n\n        # must return the correct shape, but median is not defined for the\n        # empty set so return nans of shape \"everything but the passed axis\"\n        # since \"axis\" is where the reduction would occur if we had a nonempty\n        # array\n        shp = np.array(values.shape)\n        dims = np.arange(values.ndim)\n        ret = np.empty(shp[dims != axis])\n        ret.fill(np.nan)\n        return _wrap_results(ret, dtype)\n\n    # otherwise return a scalar value\n    return _wrap_results(get_median(values) if notempty else np.nan, dtype)", "output": "Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 2])\n    >>> nanops.nanmedian(s)\n    2.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def autologin(self, limit=10):\n        \"\"\"\n        \"\"\"\n        for _ in range(limit):\n            if self.login():\n                break\n        else:\n            raise exceptions.NotLoginError(\n                \"\u767b\u5f55\u5931\u8d25\u6b21\u6570\u8fc7\u591a, \u8bf7\u68c0\u67e5\u5bc6\u7801\u662f\u5426\u6b63\u786e / \u5238\u5546\u670d\u52a1\u5668\u662f\u5426\u5904\u4e8e\u7ef4\u62a4\u4e2d / \u7f51\u7edc\u8fde\u63a5\u662f\u5426\u6b63\u5e38\"\n            )\n        self.keepalive()", "output": "\u5b9e\u73b0\u81ea\u52a8\u767b\u5f55\n        :param limit: \u767b\u5f55\u6b21\u6570\u9650\u5236", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_user(name, runas=None):\n    '''\n    \n    '''\n    if runas is None and not salt.utils.platform.is_windows():\n        runas = salt.utils.user.get_user()\n    res = __salt__['cmd.run_all'](\n        [RABBITMQCTL, 'delete_user', name],\n        reset_system_locale=False,\n        python_shell=False,\n        runas=runas)\n    msg = 'Deleted'\n\n    return _format_response(res, msg)", "output": "Deletes a user via rabbitmqctl delete_user.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' rabbitmq.delete_user rabbit_user", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def timed_operation(msg, log_start=False):\n    \"\"\"\n    \n    \"\"\"\n    assert len(msg)\n    if log_start:\n        logger.info('Start {} ...'.format(msg))\n    start = timer()\n    yield\n    msg = msg[0].upper() + msg[1:]\n    logger.info('{} finished, time:{:.4f} sec.'.format(\n        msg, timer() - start))", "output": "Surround a context with a timer.\n\n    Args:\n        msg(str): the log to print.\n        log_start(bool): whether to print also at the beginning.\n\n    Example:\n        .. code-block:: python\n\n            with timed_operation('Good Stuff'):\n                time.sleep(1)\n\n        Will print:\n\n        .. code-block:: python\n\n            Good stuff finished, time:1sec.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_python_interpreter_valid_name(filename):\r\n    \"\"\"\"\"\"\r\n    pattern = r'.*python(\\d\\.?\\d*)?(w)?(.exe)?$'\r\n    if re.match(pattern, filename, flags=re.I) is None:\r\n        return False\r\n    else:\r\n        return True", "output": "Check that the python interpreter file has a valid name.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def setup():\n    \"\"\"\n    \n    \"\"\"\n    # create an index template\n    index_template = BlogPost._index.as_template(ALIAS, PATTERN)\n    # upload the template into elasticsearch\n    # potentially overriding the one already there\n    index_template.save()\n\n    # create the first index if it doesn't exist\n    if not BlogPost._index.exists():\n        migrate(move_data=False)", "output": "Create the index template in elasticsearch specifying the mappings and any\n    settings to be used. This can be run at any time, ideally at every new code\n    deploy.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _filter_nodes(superclass, all_nodes=_all_nodes):\n    \"\"\"\"\"\"\n    node_names = (node.__name__ for node in all_nodes\n                  if issubclass(node, superclass))\n    return frozenset(node_names)", "output": "Filter out AST nodes that are subclasses of ``superclass``.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_firewall_rule(self, firewall_rule, protocol=None, action=None,\n                             name=None, description=None, ip_version=None,\n                             source_ip_address=None, destination_ip_address=None, source_port=None,\n                             destination_port=None, shared=None, enabled=None):\n        '''\n        \n        '''\n        body = {}\n        if protocol:\n            body['protocol'] = protocol\n        if action:\n            body['action'] = action\n        if name:\n            body['name'] = name\n        if description:\n            body['description'] = description\n        if ip_version:\n            body['ip_version'] = ip_version\n        if source_ip_address:\n            body['source_ip_address'] = source_ip_address\n        if destination_ip_address:\n            body['destination_ip_address'] = destination_ip_address\n        if source_port:\n            body['source_port'] = source_port\n        if destination_port:\n            body['destination_port'] = destination_port\n        if shared:\n            body['shared'] = shared\n        if enabled:\n            body['enabled'] = enabled\n        return self.network_conn.update_firewall_rule(firewall_rule, body={'firewall_rule': body})", "output": "Update a firewall rule", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def offset(self, num_to_skip):\n        \"\"\"\n        \"\"\"\n        return self.__class__(\n            self._parent,\n            projection=self._projection,\n            field_filters=self._field_filters,\n            orders=self._orders,\n            limit=self._limit,\n            offset=num_to_skip,\n            start_at=self._start_at,\n            end_at=self._end_at,\n        )", "output": "Skip to an offset in a query.\n\n        If the current query already has specified an offset, this will\n        overwrite it.\n\n        Args:\n            num_to_skip (int): The number of results to skip at the beginning\n                of query results. (Must be non-negative.)\n\n        Returns:\n            ~.firestore_v1beta1.query.Query: An offset query. Acts as a\n            copy of the current query, modified with the newly added\n            \"offset\" field.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_role(username, role, **kwargs):\n    '''\n    \n    '''\n    role_line = 'username {0} role {1}'.format(username, role)\n    return config(role_line, **kwargs)", "output": "Assign role to username.\n\n    username\n        Username for role configuration\n\n    role\n        Configure role for username\n\n    no_save_config\n        If True, don't save configuration commands to startup configuration.\n        If False, save configuration to startup configuration.\n        Default: False\n\n    .. code-block:: bash\n\n        salt '*' nxos.cmd set_role username=daniel role=vdc-admin.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ensure_index_from_sequences(sequences, names=None):\n    \"\"\"\n    \n    \"\"\"\n    from .multi import MultiIndex\n\n    if len(sequences) == 1:\n        if names is not None:\n            names = names[0]\n        return Index(sequences[0], name=names)\n    else:\n        return MultiIndex.from_arrays(sequences, names=names)", "output": "Construct an index from sequences of data.\n\n    A single sequence returns an Index. Many sequences returns a\n    MultiIndex.\n\n    Parameters\n    ----------\n    sequences : sequence of sequences\n    names : sequence of str\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index_from_sequences([[1, 2, 3]], names=['name'])\n    Int64Index([1, 2, 3], dtype='int64', name='name')\n\n    >>> ensure_index_from_sequences([['a', 'a'], ['a', 'b']],\n                                    names=['L1', 'L2'])\n    MultiIndex(levels=[['a'], ['a', 'b']],\n               codes=[[0, 0], [0, 1]],\n               names=['L1', 'L2'])\n\n    See Also\n    --------\n    ensure_index", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def insert_option_group(self, idx, *args, **kwargs):\n        \"\"\"\"\"\"\n        group = self.add_option_group(*args, **kwargs)\n\n        self.option_groups.pop()\n        self.option_groups.insert(idx, group)\n\n        return group", "output": "Insert an OptionGroup at a given position.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def click_and_hold(self, on_element=None):\n        \"\"\"\n        \n        \"\"\"\n        if on_element:\n            self.move_to_element(on_element)\n        if self._driver.w3c:\n            self.w3c_actions.pointer_action.click_and_hold()\n            self.w3c_actions.key_action.pause()\n        else:\n            self._actions.append(lambda: self._driver.execute(\n                                 Command.MOUSE_DOWN, {}))\n        return self", "output": "Holds down the left mouse button on an element.\n\n        :Args:\n         - on_element: The element to mouse down.\n           If None, clicks on current mouse position.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stop_volume(name, force=False):\n    '''\n    \n    '''\n    volinfo = info()\n    if name not in volinfo:\n        log.error('Cannot stop non-existing volume %s', name)\n        return False\n    if int(volinfo[name]['status']) != 1:\n        log.warning('Attempt to stop already stopped volume %s', name)\n        return True\n\n    cmd = 'volume stop {0}'.format(name)\n    if force:\n        cmd += ' force'\n\n    return _gluster(cmd)", "output": "Stop a gluster volume\n\n    name\n        Volume name\n\n    force\n        Force stop the volume\n\n        .. versionadded:: 2015.8.4\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' glusterfs.stop_volume mycluster", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_visible_toolbars(self):\r\n        \"\"\"\"\"\"\r\n        toolbars = []\r\n        for toolbar in self.toolbarslist:\r\n            if toolbar.toggleViewAction().isChecked():\r\n                toolbars.append(toolbar)\r\n        self.visible_toolbars = toolbars", "output": "Collects the visible toolbars.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _extract_apis_from_events(function_logical_id, serverless_function_events, collector):\n        \"\"\"\n        \n        \"\"\"\n        count = 0\n        for _, event in serverless_function_events.items():\n\n            if SamApiProvider._FUNCTION_EVENT_TYPE_API == event.get(SamApiProvider._TYPE):\n                api_resource_id, api = SamApiProvider._convert_event_api(function_logical_id, event.get(\"Properties\"))\n                collector.add_apis(api_resource_id, [api])\n                count += 1\n\n        LOG.debug(\"Found '%d' API Events in Serverless function with name '%s'\", count, function_logical_id)", "output": "Given an AWS::Serverless::Function Event Dictionary, extract out all 'Api' events and store  within the\n        collector\n\n        Parameters\n        ----------\n        function_logical_id : str\n            LogicalId of the AWS::Serverless::Function\n\n        serverless_function_events : dict\n            Event Dictionary of a AWS::Serverless::Function\n\n        collector : ApiCollector\n            Instance of the API collector that where we will save the API information", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_training(train_mode): #pylint: disable=redefined-outer-name\n    \"\"\"\n    \"\"\"\n    prev = ctypes.c_int()\n    check_call(_LIB.MXAutogradSetIsTraining(\n        ctypes.c_int(train_mode), ctypes.byref(prev)))\n    return bool(prev.value)", "output": "Set status to training/predicting. This affects ctx.is_train in operator\n    running context. For example, Dropout will drop inputs randomly when\n    train_mode=True while simply passing through if train_mode=False.\n\n    Parameters\n    ----------\n    train_mode: bool\n\n    Returns\n    -------\n    previous state before this set.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def config(name,\n           config,\n           write=True):\n    '''\n    \n\n    '''\n\n    _build_config_tree(name, config)\n    configs = _render_configuration()\n\n    if __opts__.get('test', False):\n        comment = 'State syslog_ng will write \\'{0}\\' into {1}'.format(\n            configs,\n            __SYSLOG_NG_CONFIG_FILE\n        )\n        return _format_state_result(name, result=None, comment=comment)\n\n    succ = write\n    if write:\n        succ = _write_config(config=configs)\n\n    return _format_state_result(name, result=succ,\n                                changes={'new': configs, 'old': ''})", "output": "Builds syslog-ng configuration. This function is intended to be used from\n    the state module, users should not use it directly!\n\n    name : the id of the Salt document or it is the format of <statement name>.id\n    config : the parsed YAML code\n    write : if True, it writes  the config into the configuration file,\n    otherwise just returns it\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' syslog_ng.config name='s_local' config=\"[{'tcp':[{'ip':'127.0.0.1'},{'port':1233}]}]\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mouseMoveEvent(self, event):\n        \"\"\"\n        \"\"\"\n        self.line_number_hint = self.editor.get_linenumber_from_mouse_event(\n            event)\n        self.update()", "output": "Override Qt method.\n\n        Draw semitransparent breakpoint hint.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def plot(self, key, funcname):\r\n        \"\"\"\"\"\"\r\n        data = self.model.get_data()\r\n        import spyder.pyplot as plt\r\n        plt.figure()\r\n        getattr(plt, funcname)(data[key])\r\n        plt.show()", "output": "Plot item", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _find_element(driver, by):\n    \"\"\"\"\"\"\n    try:\n        return driver.find_element(*by)\n    except NoSuchElementException as e:\n        raise e\n    except WebDriverException as e:\n        raise e", "output": "Looks up an element. Logs and re-raises ``WebDriverException``\n    if thrown.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_root_path(self, root_path):\r\n        \"\"\"\"\"\"\r\n        self.root_path = root_path\r\n        self.install_model()\r\n        index = self.fsmodel.setRootPath(root_path)\r\n        self.proxymodel.setup_filter(self.root_path, [])\r\n        self.setRootIndex(self.proxymodel.mapFromSource(index))", "output": "Set root path", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_current_text(self):\r\n        \"\"\"\r\n        \r\n        \"\"\"\r\n        text = self.currentText()\r\n        if osp.isdir(text) and text:\r\n            if text[-1] == os.sep:\r\n                text = text[:-1]\r\n        self.add_text(text)", "output": "Add current text to combo box history (convenient method).\r\n        If path ends in os separator (\"\\\" windows, \"/\" unix) remove it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def enter_maintenance_mode(kwargs=None, call=None):\n    '''\n    \n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The enter_maintenance_mode function must be called with '\n            '-f or --function.'\n        )\n\n    host_name = kwargs.get('host') if kwargs and 'host' in kwargs else None\n\n    host_ref = salt.utils.vmware.get_mor_by_property(_get_si(), vim.HostSystem, host_name)\n\n    if not host_name or not host_ref:\n        raise SaltCloudSystemExit(\n            'You must specify a valid name of the host system.'\n        )\n\n    if host_ref.runtime.inMaintenanceMode:\n        return {host_name: 'already in maintenance mode'}\n\n    try:\n        task = host_ref.EnterMaintenanceMode(timeout=0, evacuatePoweredOffVms=True)\n        salt.utils.vmware.wait_for_task(task, host_name, 'enter maintenance mode')\n    except Exception as exc:\n        log.error(\n            'Error while moving host system %s in maintenance mode: %s',\n            host_name, exc,\n            # Show the traceback if the debug logging level is enabled\n            exc_info_on_loglevel=logging.DEBUG\n        )\n        return {host_name: 'failed to enter maintenance mode'}\n\n    return {host_name: 'entered maintenance mode'}", "output": "To put the specified host system in maintenance mode in this VMware environment\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -f enter_maintenance_mode my-vmware-config host=\"myHostSystemName\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def put(self, entity):\n        \"\"\"\n        \"\"\"\n        if self._status != self._IN_PROGRESS:\n            raise ValueError(\"Batch must be in progress to put()\")\n\n        if entity.key is None:\n            raise ValueError(\"Entity must have a key\")\n\n        if self.project != entity.key.project:\n            raise ValueError(\"Key must be from same project as batch\")\n\n        if entity.key.is_partial:\n            entity_pb = self._add_partial_key_entity_pb()\n            self._partial_key_entities.append(entity)\n        else:\n            entity_pb = self._add_complete_key_entity_pb()\n\n        _assign_entity_to_pb(entity_pb, entity)", "output": "Remember an entity's state to be saved during :meth:`commit`.\n\n        .. note::\n           Any existing properties for the entity will be replaced by those\n           currently set on this instance.  Already-stored properties which do\n           not correspond to keys set on this instance will be removed from\n           the datastore.\n\n        .. note::\n           Property values which are \"text\" ('unicode' in Python2, 'str' in\n           Python3) map to 'string_value' in the datastore;  values which are\n           \"bytes\" ('str' in Python2, 'bytes' in Python3) map to 'blob_value'.\n\n        When an entity has a partial key, calling :meth:`commit` sends it as\n        an ``insert`` mutation and the key is completed. On return,\n        the key for the ``entity`` passed in is updated to match the key ID\n        assigned by the server.\n\n        :type entity: :class:`google.cloud.datastore.entity.Entity`\n        :param entity: the entity to be saved.\n\n        :raises: :class:`~exceptions.ValueError` if the batch is not in\n                 progress, if entity has no key assigned, or if the key's\n                 ``project`` does not match ours.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def np_to_list(elem):\n  \"\"\"\"\"\"\n  if isinstance(elem, list):\n    return elem\n  elif isinstance(elem, tuple):\n    return list(elem)\n  elif isinstance(elem, np.ndarray):\n    return list(elem)\n  else:\n    raise ValueError(\n        'Input elements of a sequence should be either a numpy array, a '\n        'python list or tuple. Got {}'.format(type(elem)))", "output": "Returns list from list, tuple or ndarray.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove_permission(FunctionName, StatementId, Qualifier=None,\n                      region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n\n    try:\n        conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n        kwargs = {}\n        if Qualifier is not None:\n            kwargs['Qualifier'] = Qualifier\n        conn.remove_permission(FunctionName=FunctionName, StatementId=StatementId,\n                               **kwargs)\n        return {'updated': True}\n    except ClientError as e:\n        return {'updated': False, 'error': __utils__['boto3.get_error'](e)}", "output": "Remove a permission from a lambda function.\n\n    Returns {removed: true} if the permission was removed and returns\n    {removed: False} if the permission was not removed.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_lamba.remove_permission my_function my_id", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save(self, fn:PathOrStr):\n        \"\"\n        x = image2np(self.data*255).astype(np.uint8)\n        PIL.Image.fromarray(x).save(fn)", "output": "Save the image to `fn`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dir_list(self, tgt_env):\n        '''\n        \n        '''\n        def _traverse(tree, blobs, prefix):\n            '''\n            Traverse through a pygit2 Tree object recursively, accumulating all\n            the empty directories within it in the \"blobs\" list\n            '''\n            for entry in iter(tree):\n                if entry.oid not in self.repo:\n                    # Entry is a submodule, skip it\n                    continue\n                blob = self.repo[entry.oid]\n                if not isinstance(blob, pygit2.Tree):\n                    continue\n                blobs.append(\n                    salt.utils.path.join(prefix, entry.name, use_posixpath=True)\n                )\n                if blob:\n                    _traverse(\n                        blob, blobs, salt.utils.path.join(\n                            prefix, entry.name, use_posixpath=True)\n                    )\n\n        ret = set()\n        tree = self.get_tree(tgt_env)\n        if not tree:\n            return ret\n        if self.root(tgt_env):\n            try:\n                oid = tree[self.root(tgt_env)].oid\n                tree = self.repo[oid]\n            except KeyError:\n                return ret\n            if not isinstance(tree, pygit2.Tree):\n                return ret\n            relpath = lambda path: os.path.relpath(path, self.root(tgt_env))\n        else:\n            relpath = lambda path: path\n        blobs = []\n        if tree:\n            _traverse(tree, blobs, self.root(tgt_env))\n        add_mountpoint = lambda path: salt.utils.path.join(\n            self.mountpoint(tgt_env), path, use_posixpath=True)\n        for blob in blobs:\n            ret.add(add_mountpoint(relpath(blob)))\n        if self.mountpoint(tgt_env):\n            ret.add(self.mountpoint(tgt_env))\n        return ret", "output": "Get a list of directories for the target environment using pygit2", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def install_translator(qapp):\r\n    \"\"\"\"\"\"\r\n    global QT_TRANSLATOR\r\n    if QT_TRANSLATOR is None:\r\n        qt_translator = QTranslator()\r\n        if qt_translator.load(\"qt_\"+QLocale.system().name(),\r\n                      QLibraryInfo.location(QLibraryInfo.TranslationsPath)):\r\n            QT_TRANSLATOR = qt_translator # Keep reference alive\r\n    if QT_TRANSLATOR is not None:\r\n        qapp.installTranslator(QT_TRANSLATOR)", "output": "Install Qt translator to the QApplication instance", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_resource_config(cls, resource):\n        \"\"\"\n        \"\"\"\n        if \"jobReference\" not in resource or \"jobId\" not in resource[\"jobReference\"]:\n            raise KeyError(\n                \"Resource lacks required identity information: \"\n                '[\"jobReference\"][\"jobId\"]'\n            )\n        job_id = resource[\"jobReference\"][\"jobId\"]\n        if (\n            \"configuration\" not in resource\n            or cls._JOB_TYPE not in resource[\"configuration\"]\n        ):\n            raise KeyError(\n                \"Resource lacks required configuration: \"\n                '[\"configuration\"][\"%s\"]' % cls._JOB_TYPE\n            )\n        return job_id, resource[\"configuration\"]", "output": "Helper for :meth:`from_api_repr`\n\n        :type resource: dict\n        :param resource: resource for the job\n\n        :rtype: dict\n        :returns: tuple (string, dict), where the first element is the\n                  job ID and the second contains job-specific configuration.\n        :raises: :class:`KeyError` if the resource has no identifier, or\n                 is missing the appropriate configuration.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def options(self, **options):\n        \"\"\"\n        \"\"\"\n        for k in options:\n            self._jreader = self._jreader.option(k, to_str(options[k]))\n        return self", "output": "Adds input options for the underlying data source.\n\n        You can set the following option(s) for reading files:\n            * ``timeZone``: sets the string that indicates a timezone to be used to parse timestamps\n                in the JSON/CSV datasources or partition values.\n                If it isn't set, it uses the default value, session local timezone.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def requote_redirect_url(self, val: bool) -> None:\n        \"\"\"\"\"\"\n        warnings.warn(\"session.requote_redirect_url modification \"\n                      \"is deprecated #2778\",\n                      DeprecationWarning,\n                      stacklevel=2)\n        self._requote_redirect_url = val", "output": "Do URL requoting on redirection handling.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def str_decode(arr, encoding, errors=\"strict\"):\n    \"\"\"\n    \n    \"\"\"\n    if encoding in _cpython_optimized_decoders:\n        # CPython optimized implementation\n        f = lambda x: x.decode(encoding, errors)\n    else:\n        decoder = codecs.getdecoder(encoding)\n        f = lambda x: decoder(x, errors)[0]\n    return _na_map(f, arr)", "output": "Decode character string in the Series/Index using indicated encoding.\n    Equivalent to :meth:`str.decode` in python2 and :meth:`bytes.decode` in\n    python3.\n\n    Parameters\n    ----------\n    encoding : str\n    errors : str, optional\n\n    Returns\n    -------\n    Series or Index", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ping():\n    '''\n    \n    '''\n\n    dev = conn()\n    # Check that the underlying netconf connection still exists.\n    if dev._conn is None:\n        return False\n\n    # call rpc only if ncclient queue is empty. If not empty that means other\n    # rpc call is going on.\n    if hasattr(dev._conn, '_session'):\n        if dev._conn._session._transport.is_active():\n            # there is no on going rpc call. buffer tell can be 1 as it stores\n            # remaining char after \"]]>]]>\" which can be a new line char\n            if dev._conn._session._buffer.tell() <= 1 and \\\n                    dev._conn._session._q.empty():\n                return _rpc_file_list(dev)\n            else:\n                log.debug('skipped ping() call as proxy already getting data')\n                return True\n        else:\n            # ssh connection is lost\n            return False\n    else:\n        # other connection modes, like telnet\n        return _rpc_file_list(dev)", "output": "Ping?  Pong!", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def next_frame_basic_recurrent():\n  \"\"\"\"\"\"\n  hparams = basic_stochastic.next_frame_basic_stochastic_discrete()\n  hparams.filter_double_steps = 2\n  hparams.hidden_size = 64\n  hparams.video_num_input_frames = 4\n  hparams.video_num_target_frames = 4\n  hparams.concat_internal_states = False\n  hparams.add_hparam(\"num_lstm_layers\", 2)\n  hparams.add_hparam(\"num_lstm_filters\", 256)\n  return hparams", "output": "Basic 2-frame recurrent model with stochastic tower.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def poll_event(self):\n        \"\"\"\n        \"\"\"\n        try:\n            msg = await self.recv()\n            await self.received_message(msg)\n        except websockets.exceptions.ConnectionClosed as exc:\n            if self._can_handle_close(exc.code):\n                log.info('Websocket closed with %s (%s), attempting a reconnect.', exc.code, exc.reason)\n                raise ResumeWebSocket(self.shard_id) from exc\n            else:\n                log.info('Websocket closed with %s (%s), cannot reconnect.', exc.code, exc.reason)\n                raise ConnectionClosed(exc, shard_id=self.shard_id) from exc", "output": "Polls for a DISPATCH event and handles the general gateway loop.\n\n        Raises\n        ------\n        ConnectionClosed\n            The websocket connection was terminated for unhandled reasons.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read(self, where=None, columns=None, **kwargs):\n        \"\"\"\n        \"\"\"\n\n        if not self.read_axes(where=where, **kwargs):\n            return None\n\n        raise NotImplementedError(\"Panel is removed in pandas 0.25.0\")", "output": "we have n indexable columns, with an arbitrary number of data\n        axes", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _smartos_zone_pkgin_data():\n    '''\n    \n    '''\n    # Provides:\n    #   pkgin_repositories\n\n    grains = {\n        'pkgin_repositories': [],\n    }\n\n    pkginrepo = re.compile('^(?:https|http|ftp|file)://.*$')\n    if os.path.isfile('/opt/local/etc/pkgin/repositories.conf'):\n        with salt.utils.files.fopen('/opt/local/etc/pkgin/repositories.conf', 'r') as fp_:\n            for line in fp_:\n                line = salt.utils.stringutils.to_unicode(line)\n                if pkginrepo.match(line):\n                    grains['pkgin_repositories'].append(line)\n\n    return grains", "output": "SmartOS zone pkgsrc information", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def send_cmd(cmd, args, ret):\n        \"\"\"\n        \"\"\"\n        from dvc.daemon import daemon\n\n        if not Analytics._is_enabled(cmd):\n            return\n\n        analytics = Analytics()\n        analytics.collect_cmd(args, ret)\n        daemon([\"analytics\", analytics.dump()])", "output": "Collect and send analytics for CLI command.\n\n        Args:\n            args (list): parsed args for the CLI command.\n            ret (int): return value of the CLI command.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def map(self, map_fn, name=\"Map\"):\n        \"\"\"\n        \"\"\"\n        op = Operator(\n            _generate_uuid(),\n            OpType.Map,\n            name,\n            map_fn,\n            num_instances=self.env.config.parallelism)\n        return self.__register(op)", "output": "Applies a map operator to the stream.\n\n        Attributes:\n             map_fn (function): The user-defined logic of the map.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def param_dict_to_str(data):\n    \"\"\"\"\"\"\n    if data is None or not data:\n        return \"\"\n    pairs = []\n    for key, val in data.items():\n        if isinstance(val, (list, tuple, set)) or is_numpy_1d_array(val):\n            pairs.append(str(key) + '=' + ','.join(map(str, val)))\n        elif isinstance(val, string_type) or isinstance(val, numeric_types) or is_numeric(val):\n            pairs.append(str(key) + '=' + str(val))\n        elif val is not None:\n            raise TypeError('Unknown type of parameter:%s, got:%s'\n                            % (key, type(val).__name__))\n    return ' '.join(pairs)", "output": "Convert Python dictionary to string, which is passed to C API.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_org_details(organization_id):\n    '''\n    \n    '''\n\n    qdata = salt.utils.http.query(\n        '{0}/organization/{1}'.format(_base_url(), organization_id),\n        method='GET',\n        decode=True,\n        decode_type='json',\n        header_dict={\n            'X-DC-DEVKEY': _api_key(),\n            'Content-Type': 'application/json',\n        },\n    )\n    return qdata", "output": "Return the details for an organization\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-run digicert.get_org_details 34\n\n    Returns a dictionary with the org details, or with 'error' and 'status' keys.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_reactor(self, tag):\n        '''\n        \n        '''\n        reactors = self.list_all()\n        for reactor in reactors:\n            _tag = next(six.iterkeys(reactor))\n            if _tag == tag:\n                self.minion.opts['reactor'].remove(reactor)\n                return {'status': True, 'comment': 'Reactor deleted.'}\n\n        return {'status': False, 'comment': 'Reactor does not exists.'}", "output": "Delete a reactor", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def deploy_ray_func(func, partition, kwargs):  # pragma: no cover\n    \"\"\"\n    \"\"\"\n    try:\n        return func(partition, **kwargs)\n    # Sometimes Arrow forces us to make a copy of an object before we operate\n    # on it. We don't want the error to propagate to the user, and we want to\n    # avoid copying unless we absolutely have to.\n    except ValueError:\n        return func(partition.copy(), **kwargs)", "output": "Deploy a function to a partition in Ray.\n\n    Note: Ray functions are not detected by codecov (thus pragma: no cover)\n\n    Args:\n        func: The function to apply.\n        partition: The partition to apply the function to.\n        kwargs: A dictionary of keyword arguments for the function.\n\n    Returns:\n        The result of the function.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def describe_api_models(restApiId, region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n    try:\n        conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n        models = _multi_call(conn.get_models, 'items', restApiId=restApiId)\n        return {'models': [_convert_datetime_str(model) for model in models]}\n    except ClientError as e:\n        return {'error': __utils__['boto3.get_error'](e)}", "output": "Get all models for a given API\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_apigateway.describe_api_models restApiId", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def filter_by_folder(self, include=None, exclude=None):\n        \"\"\n        include,exclude = listify(include),listify(exclude)\n        def _inner(o):\n            if isinstance(o, Path): n = o.relative_to(self.path).parts[0]\n            else: n = o.split(os.path.sep)[len(str(self.path).split(os.path.sep))]\n            if include and not n in include: return False\n            if exclude and     n in exclude: return False\n            return True\n        return self.filter_by_func(_inner)", "output": "Only keep filenames in `include` folder or reject the ones in `exclude`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_authorizer(self, restapi, uri, authorizer):\n        \"\"\"\n        \n        \"\"\"\n        authorizer_type = authorizer.get(\"type\", \"TOKEN\").upper()\n        identity_validation_expression = authorizer.get('validation_expression', None)\n\n        authorizer_resource = troposphere.apigateway.Authorizer(\"Authorizer\")\n        authorizer_resource.RestApiId = troposphere.Ref(restapi)\n        authorizer_resource.Name = authorizer.get(\"name\", \"ZappaAuthorizer\")\n        authorizer_resource.Type = authorizer_type\n        authorizer_resource.AuthorizerUri = uri\n        authorizer_resource.IdentitySource = \"method.request.header.%s\" % authorizer.get('token_header', 'Authorization')\n        if identity_validation_expression:\n            authorizer_resource.IdentityValidationExpression = identity_validation_expression\n\n        if authorizer_type == 'TOKEN':\n            if not self.credentials_arn:\n                self.get_credentials_arn()\n            authorizer_resource.AuthorizerResultTtlInSeconds = authorizer.get('result_ttl', 300)\n            authorizer_resource.AuthorizerCredentials = self.credentials_arn\n        if authorizer_type == 'COGNITO_USER_POOLS':\n            authorizer_resource.ProviderARNs = authorizer.get('provider_arns')\n\n        self.cf_api_resources.append(authorizer_resource.title)\n        self.cf_template.add_resource(authorizer_resource)\n\n        return authorizer_resource", "output": "Create Authorizer for API gateway", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def bb_pad_collate(samples:BatchSamples, pad_idx:int=0) -> Tuple[FloatTensor, Tuple[LongTensor, LongTensor]]:\n    \"\"\n    if isinstance(samples[0][1], int): return data_collate(samples)\n    max_len = max([len(s[1].data[1]) for s in samples])\n    bboxes = torch.zeros(len(samples), max_len, 4)\n    labels = torch.zeros(len(samples), max_len).long() + pad_idx\n    imgs = []\n    for i,s in enumerate(samples):\n        imgs.append(s[0].data[None])\n        bbs, lbls = s[1].data\n        if not (bbs.nelement() == 0):\n            bboxes[i,-len(lbls):] = bbs\n            labels[i,-len(lbls):] = tensor(lbls)\n    return torch.cat(imgs,0), (bboxes,labels)", "output": "Function that collect `samples` of labelled bboxes and adds padding with `pad_idx`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_global_config_dir():\n        \"\"\"\n        \"\"\"\n        from appdirs import user_config_dir\n\n        return user_config_dir(\n            appname=Config.APPNAME, appauthor=Config.APPAUTHOR\n        )", "output": "Returns global config location. E.g. ~/.config/dvc/config.\n\n        Returns:\n            str: path to the global config directory.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert_symbol(prototxt_fname):\n    \"\"\"\n    \"\"\"\n    sym, output_name, input_dim = _parse_proto(prototxt_fname)\n    exec(sym)                   # pylint: disable=exec-used\n    _locals = locals()\n    exec(\"ret = \" + output_name, globals(), _locals)  # pylint: disable=exec-used\n    ret = _locals['ret']\n    return ret, input_dim", "output": "Convert caffe model definition into Symbol\n\n    Parameters\n    ----------\n    prototxt_fname : str\n        Filename of the prototxt file\n\n    Returns\n    -------\n    Symbol\n        Converted Symbol\n    tuple\n        Input shape", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def start_router(router_class, router_name):\n    \"\"\"\n    \"\"\"\n    handle = router_class.remote(router_name)\n    ray.experimental.register_actor(router_name, handle)\n    handle.start.remote()\n    return handle", "output": "Wrapper for starting a router and register it.\n\n    Args:\n        router_class: The router class to instantiate.\n        router_name: The name to give to the router.\n\n    Returns:\n        A handle to newly started router actor.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reference_image_path(cls, project, location, product, reference_image):\n        \"\"\"\"\"\"\n        return google.api_core.path_template.expand(\n            \"projects/{project}/locations/{location}/products/{product}/referenceImages/{reference_image}\",\n            project=project,\n            location=location,\n            product=product,\n            reference_image=reference_image,\n        )", "output": "Return a fully-qualified reference_image string.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_module(prefix, epoch, data_names, data_shapes):\n    \"\"\"\n    \"\"\"\n    sym, arg_params, aux_params = mx.model.load_checkpoint(prefix, epoch)\n\n    # We don't need CTC loss for prediction, just a simple softmax will suffice.\n    # We get the output of the layer just before the loss layer ('pred_fc') and add softmax on top\n    pred_fc = sym.get_internals()['pred_fc_output']\n    sym = mx.sym.softmax(data=pred_fc)\n\n    mod = mx.mod.Module(symbol=sym, context=mx.cpu(), data_names=data_names, label_names=None)\n    mod.bind(for_training=False, data_shapes=data_shapes)\n    mod.set_params(arg_params, aux_params, allow_missing=False)\n    return mod", "output": "Loads the model from checkpoint specified by prefix and epoch, binds it\n    to an executor, and sets its parameters and returns a mx.mod.Module", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_progress(opts, out, progress):\n    '''\n    \n    '''\n    return salt.loader.raw_mod(opts,\n                                out,\n                                'rawmodule',\n                                mod='output')['{0}.progress_iter'.format(out)](progress)", "output": "Get the progress bar from the given outputter", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _write(self, to_write):\n        \"\"\"\n        \n        \"\"\"\n        self._file.write(to_write.encode(self._encoding or\n                                         self._default_encoding))", "output": "Helper to call encode before writing to file for Python 3 compat.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _normalize_cursor(self, cursor, orders):\n        \"\"\"\"\"\"\n        if cursor is None:\n            return\n\n        if not orders:\n            raise ValueError(_NO_ORDERS_FOR_CURSOR)\n\n        document_fields, before = cursor\n\n        order_keys = [order.field.field_path for order in orders]\n\n        if isinstance(document_fields, document.DocumentSnapshot):\n            snapshot = document_fields\n            document_fields = snapshot.to_dict()\n            document_fields[\"__name__\"] = snapshot.reference\n\n        if isinstance(document_fields, dict):\n            # Transform to list using orders\n            values = []\n            data = document_fields\n            for order_key in order_keys:\n                try:\n                    values.append(field_path_module.get_nested_value(order_key, data))\n                except KeyError:\n                    msg = _MISSING_ORDER_BY.format(order_key, data)\n                    raise ValueError(msg)\n            document_fields = values\n\n        if len(document_fields) != len(orders):\n            msg = _MISMATCH_CURSOR_W_ORDER_BY.format(document_fields, order_keys)\n            raise ValueError(msg)\n\n        _transform_bases = (transforms.Sentinel, transforms._ValueList)\n\n        for index, key_field in enumerate(zip(order_keys, document_fields)):\n            key, field = key_field\n\n            if isinstance(field, _transform_bases):\n                msg = _INVALID_CURSOR_TRANSFORM\n                raise ValueError(msg)\n\n            if key == \"__name__\" and isinstance(field, six.string_types):\n                document_fields[index] = self._parent.document(field)\n\n        return document_fields, before", "output": "Helper: convert cursor to a list of values based on orders.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _beam_decode(self,\n                   features,\n                   decode_length,\n                   beam_size,\n                   top_beams,\n                   alpha,\n                   use_tpu=False):\n    \"\"\"\n    \"\"\"\n    return self._beam_decode_slow(features, decode_length, beam_size, top_beams,\n                                  alpha, use_tpu)", "output": "Beam search decoding.\n\n    Models should ideally implement a more efficient version of this function.\n\n    Args:\n      features: an map of string to `Tensor`\n      decode_length: an integer.  How many additional timesteps to decode.\n      beam_size: number of beams.\n      top_beams: an integer. How many of the beams to return.\n      alpha: Float that controls the length penalty. larger the alpha, stronger\n        the preference for longer translations.\n      use_tpu: A bool, whether to do beam decode on TPU.\n\n    Returns:\n       samples: an integer `Tensor`. Top samples from the beam search", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def satisfier(self, term):  # type: (Term) -> Assignment\n        \"\"\"\n        \n        \"\"\"\n        assigned_term = None  # type: Term\n\n        for assignment in self._assignments:\n            if assignment.dependency.name != term.dependency.name:\n                continue\n\n            if (\n                not assignment.dependency.is_root\n                and not assignment.dependency.name == term.dependency.name\n            ):\n                if not assignment.is_positive():\n                    continue\n\n                assert not term.is_positive()\n\n                return assignment\n\n            if assigned_term is None:\n                assigned_term = assignment\n            else:\n                assigned_term = assigned_term.intersect(assignment)\n\n            # As soon as we have enough assignments to satisfy term, return them.\n            if assigned_term.satisfies(term):\n                return assignment\n\n        raise RuntimeError(\"[BUG] {} is not satisfied.\".format(term))", "output": "Returns the first Assignment in this solution such that the sublist of\n        assignments up to and including that entry collectively satisfies term.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def unpin(self):\n        \"\"\"\n        \"\"\"\n\n        await self._state.http.unpin_message(self.channel.id, self.id)\n        self.pinned = False", "output": "|coro|\n\n        Unpins the message.\n\n        You must have the :attr:`~Permissions.manage_messages` permission to do\n        this in a non-private channel context.\n\n        Raises\n        -------\n        Forbidden\n            You do not have permissions to unpin the message.\n        NotFound\n            The message or channel was not found or deleted.\n        HTTPException\n            Unpinning the message failed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_circuit_provider(name, asn=None):\n    '''\n    \n    '''\n\n    nb_circuit_provider = get_('circuits', 'providers', name=name)\n    payload = {}\n    if nb_circuit_provider:\n        if nb_circuit_provider['asn'] == asn:\n            return False\n        else:\n            log.error('Duplicate provider with different ASN: %s: %s', name, asn)\n            raise CommandExecutionError(\n                'Duplicate provider with different ASN: {}: {}'.format(name, asn)\n            )\n    else:\n        payload = {\n            'name': name,\n            'slug': slugify(name)\n        }\n        if asn:\n            payload['asn'] = asn\n        circuit_provider = _add('circuits', 'providers', payload)\n        if circuit_provider:\n            return {'circuits': {'providers': {circuit_provider['id']: payload}}}\n        else:\n            return circuit_provider", "output": ".. versionadded:: 2019.2.0\n\n    Create a new Netbox circuit provider\n\n    name\n        The name of the circuit provider\n    asn\n        The ASN of the circuit provider\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion netbox.create_circuit_provider Telia 1299", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_frame(self, index=True, name=None):\n        \"\"\"\n        \n        \"\"\"\n\n        from pandas import DataFrame\n        if name is not None:\n            if not is_list_like(name):\n                raise TypeError(\"'name' must be a list / sequence \"\n                                \"of column names.\")\n\n            if len(name) != len(self.levels):\n                raise ValueError(\"'name' should have same length as \"\n                                 \"number of levels on index.\")\n            idx_names = name\n        else:\n            idx_names = self.names\n\n        # Guarantee resulting column order\n        result = DataFrame(\n            OrderedDict([\n                ((level if lvlname is None else lvlname),\n                 self._get_level_values(level))\n                for lvlname, level in zip(idx_names, range(len(self.levels)))\n            ]),\n            copy=False\n        )\n\n        if index:\n            result.index = self\n        return result", "output": "Create a DataFrame with the levels of the MultiIndex as columns.\n\n        Column ordering is determined by the DataFrame constructor with data as\n        a dict.\n\n        .. versionadded:: 0.24.0\n\n        Parameters\n        ----------\n        index : boolean, default True\n            Set the index of the returned DataFrame as the original MultiIndex.\n\n        name : list / sequence of strings, optional\n            The passed names should substitute index level names.\n\n        Returns\n        -------\n        DataFrame : a DataFrame containing the original MultiIndex data.\n\n        See Also\n        --------\n        DataFrame", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _exclusion_indices_for_range(self, start_idx, end_idx):\n        \"\"\"\n        \n        \"\"\"\n        itree = self._minute_exclusion_tree\n        if itree.overlaps(start_idx, end_idx):\n            ranges = []\n            intervals = itree[start_idx:end_idx]\n            for interval in intervals:\n                ranges.append(interval.data)\n            return sorted(ranges)\n        else:\n            return None", "output": "Returns\n        -------\n        List of tuples of (start, stop) which represent the ranges of minutes\n        which should be excluded when a market minute window is requested.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_absent(name, htpasswd_file=None, runas=None):\n    '''\n    \n\n    '''\n    ret = {'name': name,\n           'changes': {},\n           'comment': '',\n           'result': None}\n\n    exists = __salt__['file.grep'](\n        htpasswd_file, '^{0}:'.format(name))['retcode'] == 0\n\n    if not exists:\n        if __opts__['test']:\n            ret['result'] = None\n        else:\n            ret['result'] = True\n        ret['comment'] = 'User already not in file'\n    else:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'User \\'{0}\\' is set to be removed from htpasswd file'.format(name)\n            ret['changes'] = {name: True}\n        else:\n            userdel_ret = __salt__['webutil.userdel'](\n                htpasswd_file, name, runas=runas, all_results=True)\n\n            ret['result'] = userdel_ret['retcode'] == 0\n            ret['comment'] = userdel_ret['stderr']\n\n            if ret['result']:\n                ret['changes'] = {name: True}\n\n    return ret", "output": "Make sure the user is not in the specified htpasswd file\n\n    name\n        User name\n\n    htpasswd_file\n        Path to the htpasswd file\n\n    runas\n        The system user to run htpasswd command with", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_archive_formats():\n    \"\"\"\n    \"\"\"\n    formats = [(name, registry[2]) for name, registry in\n               _ARCHIVE_FORMATS.items()]\n    formats.sort()\n    return formats", "output": "Returns a list of supported formats for archiving and unarchiving.\n\n    Each element of the returned sequence is a tuple (name, description)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def imagetransformer_bas8l_8h_big_uncond_dr03_imgnet():\n  \"\"\"\"\"\"\n  hparams = imagetransformer_base_14l_8h_big_dr01()\n  # num_hidden_layers\n  hparams.num_decoder_layers = 8\n  hparams.num_heads = 8\n  hparams.hidden_size = 512\n  hparams.filter_size = 2048\n  hparams.layer_prepostprocess_dropout = 0.3\n  return hparams", "output": "big 1d model for conditional image generation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _build_resource_from_properties(obj, filter_fields):\n    \"\"\"\n    \"\"\"\n    partial = {}\n    for filter_field in filter_fields:\n        api_field = obj._PROPERTY_TO_API_FIELD.get(filter_field)\n        if api_field is None and filter_field not in obj._properties:\n            raise ValueError(\"No property %s\" % filter_field)\n        elif api_field is not None:\n            partial[api_field] = obj._properties.get(api_field)\n        else:\n            # allows properties that are not defined in the library\n            # and properties that have the same name as API resource key\n            partial[filter_field] = obj._properties[filter_field]\n\n    return partial", "output": "Build a resource based on a ``_properties`` dictionary, filtered by\n    ``filter_fields``, which follow the name of the Python object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_svn_page(html):\n    # type: (Union[str, Text]) -> Optional[Match[Union[str, Text]]]\n    \"\"\"\n    \n    \"\"\"\n    return (re.search(r'<title>[^<]*Revision \\d+:', html) and\n            re.search(r'Powered by (?:<a[^>]*?>)?Subversion', html, re.I))", "output": "Returns true if the page appears to be the index page of an svn repository", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_audit_sink(self, body, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.create_audit_sink_with_http_info(body, **kwargs)\n        else:\n            (data) = self.create_audit_sink_with_http_info(body, **kwargs)\n            return data", "output": "create an AuditSink\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_audit_sink(body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param V1alpha1AuditSink body: (required)\n        :param str pretty: If 'true', then the output is pretty printed.\n        :param str dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed\n        :param str field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.\n        :return: V1alpha1AuditSink\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def meanApprox(self, timeout, confidence=0.95):\n        \"\"\"\n        \n        \"\"\"\n        jrdd = self.map(float)._to_java_object_rdd()\n        jdrdd = self.ctx._jvm.JavaDoubleRDD.fromRDD(jrdd.rdd())\n        r = jdrdd.meanApprox(timeout, confidence).getFinalValue()\n        return BoundedFloat(r.mean(), r.confidence(), r.low(), r.high())", "output": ".. note:: Experimental\n\n        Approximate operation to return the mean within a timeout\n        or meet the confidence.\n\n        >>> rdd = sc.parallelize(range(1000), 10)\n        >>> r = sum(range(1000)) / 1000.0\n        >>> abs(rdd.meanApprox(1000) - r) / r < 0.05\n        True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_is_chained_assignment_possible(self):\n        \"\"\"\n        \n        \"\"\"\n        if self._is_view and self._is_cached:\n            ref = self._get_cacher()\n            if ref is not None and ref._is_mixed_type:\n                self._check_setitem_copy(stacklevel=4, t='referant',\n                                         force=True)\n            return True\n        elif self._is_copy:\n            self._check_setitem_copy(stacklevel=4, t='referant')\n        return False", "output": "Check if we are a view, have a cacher, and are of mixed type.\n        If so, then force a setitem_copy check.\n\n        Should be called just near setting a value\n\n        Will return a boolean if it we are a view and are cached, but a\n        single-dtype meaning that the cacher should be updated following\n        setting.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete(queue_id):\n    '''\n    \n\n    '''\n\n    ret = {'message': '',\n           'result': True\n           }\n\n    if not queue_id:\n        log.error('Require argument queue_id')\n\n    if not queue_id == 'ALL':\n        queue = show_queue()\n        _message = None\n        for item in queue:\n            if item['queue_id'] == queue_id:\n                _message = item\n\n        if not _message:\n            ret['message'] = 'No message in queue with ID {0}'.format(queue_id)\n            ret['result'] = False\n            return ret\n\n    cmd = 'postsuper -d {0}'.format(queue_id)\n    result = __salt__['cmd.run_all'](cmd)\n\n    if result['retcode'] == 0:\n        if queue_id == 'ALL':\n            ret['message'] = 'Successfully removed all messages'\n        else:\n            ret['message'] = 'Successfully removed message with queue id {0}'.format(queue_id)\n    else:\n        if queue_id == 'ALL':\n            ret['message'] = 'Unable to removed all messages'\n        else:\n            ret['message'] = 'Unable to remove message with queue id {0}: {1}'.format(queue_id, result['stderr'])\n    return ret", "output": "Delete message(s) from the mail queue\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' postfix.delete 5C33CA0DEA\n\n        salt '*' postfix.delete ALL", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_thing_type(thingTypeName,\n            region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n\n    try:\n        conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n        conn.delete_thing_type(thingTypeName=thingTypeName)\n        return {'deleted': True}\n    except ClientError as e:\n        err = __utils__['boto3.get_error'](e)\n        if e.response.get('Error', {}).get('Code') == 'ResourceNotFoundException':\n            return {'deleted': True}\n        return {'deleted': False, 'error': err}", "output": "Given a thing type name, delete it.\n\n    Returns {deleted: true} if the thing type was deleted and returns\n    {deleted: false} if the thing type was not deleted.\n\n    .. versionadded:: 2016.11.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_iot.delete_thing_type mythingtype", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _sections_to_variance_sections(self, sections_over_time):\n    '''\n    '''\n    variance_sections = []\n\n    for i in range(len(sections_over_time[0])):\n      time_sections = [sections[i] for sections in sections_over_time]\n      variance = np.var(time_sections, axis=0)\n      variance_sections.append(variance)\n\n    return variance_sections", "output": "Computes the variance of corresponding sections over time.\n\n    Returns:\n      a list of np arrays.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def clean(ctx, state, dry_run=False, bare=False, user=False):\n    \"\"\"\"\"\"\n    from ..core import do_clean\n    do_clean(ctx=ctx, three=state.three, python=state.python, dry_run=dry_run,\n             system=state.system)", "output": "Uninstalls all packages not specified in Pipfile.lock.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def expect_element(__funcname=_qualified_name, **named):\n    \"\"\"\n    \n    \"\"\"\n    def _expect_element(collection):\n        if isinstance(collection, (set, frozenset)):\n            # Special case the error message for set and frozen set to make it\n            # less verbose.\n            collection_for_error_message = tuple(sorted(collection))\n        else:\n            collection_for_error_message = collection\n\n        template = (\n            \"%(funcname)s() expected a value in {collection} \"\n            \"for argument '%(argname)s', but got %(actual)s instead.\"\n        ).format(collection=collection_for_error_message)\n        return make_check(\n            ValueError,\n            template,\n            complement(op.contains(collection)),\n            repr,\n            funcname=__funcname,\n        )\n    return preprocess(**valmap(_expect_element, named))", "output": "Preprocessing decorator that verifies inputs are elements of some\n    expected collection.\n\n    Examples\n    --------\n    >>> @expect_element(x=('a', 'b'))\n    ... def foo(x):\n    ...    return x.upper()\n    ...\n    >>> foo('a')\n    'A'\n    >>> foo('b')\n    'B'\n    >>> foo('c')  # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS\n    Traceback (most recent call last):\n       ...\n    ValueError: ...foo() expected a value in ('a', 'b') for argument 'x',\n    but got 'c' instead.\n\n    Notes\n    -----\n    A special argument, __funcname, can be provided as a string to override the\n    function name shown in error messages.  This is most often used on __init__\n    or __new__ methods to make errors refer to the class name instead of the\n    function name.\n\n    This uses the `in` operator (__contains__) to make the containment check.\n    This allows us to use any custom container as long as the object supports\n    the container protocol.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def volume_list(search_opts=None, profile=None, **kwargs):\n    '''\n    \n\n    '''\n    conn = _auth(profile, **kwargs)\n    return conn.volume_list(search_opts=search_opts)", "output": "List storage volumes\n\n    search_opts\n        Dictionary of search options\n\n    profile\n        Profile to use\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' nova.volume_list search_opts='{\"display_name\": \"myblock\"}' profile=openstack", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def GSSAuth(auth_method, gss_deleg_creds=True):\n    \"\"\"\n    \n    \"\"\"\n    if _API == \"MIT\":\n        return _SSH_GSSAPI(auth_method, gss_deleg_creds)\n    elif _API == \"SSPI\" and os.name == \"nt\":\n        return _SSH_SSPI(auth_method, gss_deleg_creds)\n    else:\n        raise ImportError(\"Unable to import a GSS-API / SSPI module!\")", "output": "Provide SSH2 GSS-API / SSPI authentication.\n\n    :param str auth_method: The name of the SSH authentication mechanism\n                            (gssapi-with-mic or gss-keyex)\n    :param bool gss_deleg_creds: Delegate client credentials or not.\n                                 We delegate credentials by default.\n    :return: Either an `._SSH_GSSAPI` (Unix) object or an\n             `_SSH_SSPI` (Windows) object\n\n    :raises: ``ImportError`` -- If no GSS-API / SSPI module could be imported.\n\n    :see: `RFC 4462 <http://www.ietf.org/rfc/rfc4462.txt>`_\n    :note: Check for the available API and return either an `._SSH_GSSAPI`\n           (MIT GSSAPI) object or an `._SSH_SSPI` (MS SSPI) object. If you\n           get python-gssapi working on Windows, python-gssapi\n           will be used and a `._SSH_GSSAPI` object will be returned.\n           If there is no supported API available,\n           ``None`` will be returned.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def join_cluster(host, user='rabbit', ram_node=None, runas=None):\n    '''\n    \n    '''\n    cmd = [RABBITMQCTL, 'join_cluster']\n    if ram_node:\n        cmd.append('--ram')\n    cmd.append('{0}@{1}'.format(user, host))\n\n    if runas is None and not salt.utils.platform.is_windows():\n        runas = salt.utils.user.get_user()\n    stop_app(runas)\n    res = __salt__['cmd.run_all'](cmd, reset_system_locale=False, runas=runas, python_shell=False)\n    start_app(runas)\n\n    return _format_response(res, 'Join')", "output": "Join a rabbit cluster\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' rabbitmq.join_cluster rabbit.example.com rabbit", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_properties_from_api_repr(self, resource):\n        \"\"\"\"\"\"\n        self.name = resource.get(\"name\")\n        self.number = resource[\"projectNumber\"]\n        self.labels = resource.get(\"labels\", {})\n        self.status = resource[\"lifecycleState\"]\n        if \"parent\" in resource:\n            self.parent = resource[\"parent\"]", "output": "Update specific properties from its API representation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def find_common_type(types):\n    \"\"\"\n    \n\n    \"\"\"\n\n    if len(types) == 0:\n        raise ValueError('no types given')\n\n    first = types[0]\n\n    # workaround for find_common_type([np.dtype('datetime64[ns]')] * 2)\n    # => object\n    if all(is_dtype_equal(first, t) for t in types[1:]):\n        return first\n\n    if any(isinstance(t, (PandasExtensionDtype, ExtensionDtype))\n           for t in types):\n        return np.object\n\n    # take lowest unit\n    if all(is_datetime64_dtype(t) for t in types):\n        return np.dtype('datetime64[ns]')\n    if all(is_timedelta64_dtype(t) for t in types):\n        return np.dtype('timedelta64[ns]')\n\n    # don't mix bool / int or float or complex\n    # this is different from numpy, which casts bool with float/int as int\n    has_bools = any(is_bool_dtype(t) for t in types)\n    if has_bools:\n        for t in types:\n            if is_integer_dtype(t) or is_float_dtype(t) or is_complex_dtype(t):\n                return np.object\n\n    return np.find_common_type(types, [])", "output": "Find a common data type among the given dtypes.\n\n    Parameters\n    ----------\n    types : list of dtypes\n\n    Returns\n    -------\n    pandas extension or numpy dtype\n\n    See Also\n    --------\n    numpy.find_common_type", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def padded_neg_log_perplexity(predictions,\n                              labels,\n                              weights_fn=common_layers.weights_nonzero):\n  \"\"\"\"\"\"\n  num, den = common_layers.padded_cross_entropy(\n      predictions, labels, 0.0, weights_fn=weights_fn, reduce_sum=False)\n  return (-num, den)", "output": "Average log-perplexity exluding padding 0s. No smoothing.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def expect(self, pattern, timeout=-1):\n        \"\"\"\"\"\"\n\n        if self.blocking:\n            raise RuntimeError(\"expect can only be used on non-blocking commands.\")\n\n        try:\n            self.subprocess.expect(pattern=pattern, timeout=timeout)\n        except pexpect.EOF:\n            pass", "output": "Waits on the given pattern to appear in std_out", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _process_all_1(self, texts:Collection[str]) -> List[List[str]]:\n        \"\"\n        tok = self.tok_func(self.lang)\n        if self.special_cases: tok.add_special_cases(self.special_cases)\n        return [self.process_text(str(t), tok) for t in texts]", "output": "Process a list of `texts` in one process.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_outputs(self):\n        \"\"\"\n        \"\"\"\n        out_size = mx_uint()\n        handles = ctypes.POINTER(NDArrayHandle)()\n        check_call(_LIB.MXExecutorOutputs(self.handle,\n                                          ctypes.byref(out_size), ctypes.byref(handles)))\n        num_output = out_size.value\n        outputs = [_ndarray_cls(NDArrayHandle(handles[i])) for i in range(num_output)]\n        return outputs", "output": "List all the output NDArray.\n\n        Returns\n        -------\n        A list of ndarray bound to the heads of executor.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def generate_np(self, x_val, **kwargs):\n    \"\"\"\n    \n    \"\"\"\n\n    if self.sess is None:\n      raise ValueError(\"Cannot use `generate_np` when no `sess` was\"\n                       \" provided\")\n\n    packed = self.construct_variables(kwargs)\n    fixed, feedable, _, hash_key = packed\n\n    if hash_key not in self.graphs:\n      self.construct_graph(fixed, feedable, x_val, hash_key)\n    else:\n      # remove the None arguments, they are just left blank\n      for k in list(feedable.keys()):\n        if feedable[k] is None:\n          del feedable[k]\n\n    x, new_kwargs, x_adv = self.graphs[hash_key]\n\n    feed_dict = {x: x_val}\n\n    for name in feedable:\n      feed_dict[new_kwargs[name]] = feedable[name]\n\n    return self.sess.run(x_adv, feed_dict)", "output": "Generate adversarial examples and return them as a NumPy array.\n    Sub-classes *should not* implement this method unless they must\n    perform special handling of arguments.\n\n    :param x_val: A NumPy array with the original inputs.\n    :param **kwargs: optional parameters used by child classes.\n    :return: A NumPy array holding the adversarial examples.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def image_info(call=None, kwargs=None):\n    '''\n    \n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The image_info function must be called with -f or --function.'\n        )\n\n    if kwargs is None:\n        kwargs = {}\n\n    name = kwargs.get('name', None)\n    image_id = kwargs.get('image_id', None)\n\n    if image_id:\n        if name:\n            log.warning(\n                'Both the \\'image_id\\' and \\'name\\' arguments were provided. '\n                '\\'image_id\\' will take precedence.'\n            )\n    elif name:\n        image_id = get_image_id(kwargs={'name': name})\n    else:\n        raise SaltCloudSystemExit(\n            'The image_info function requires either a \\'name or an \\'image_id\\' '\n            'to be provided.'\n        )\n\n    server, user, password = _get_xml_rpc()\n    auth = ':'.join([user, password])\n\n    info = {}\n    response = server.one.image.info(auth, int(image_id))[1]\n    tree = _get_xml(response)\n    info[tree.find('NAME').text] = _xml_to_dict(tree)\n\n    return info", "output": "Retrieves information for a given image. Either a name or an image_id must be\n    supplied.\n\n    .. versionadded:: 2016.3.0\n\n    name\n        The name of the image for which to gather information. Can be used instead\n        of ``image_id``.\n\n    image_id\n        The ID of the image for which to gather information. Can be used instead of\n        ``name``.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -f image_info opennebula name=my-image\n        salt-cloud --function image_info opennebula image_id=5", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _posix_split_name(self, name):\n        \"\"\"\n        \"\"\"\n        prefix = name[:LENGTH_PREFIX + 1]\n        while prefix and prefix[-1] != \"/\":\n            prefix = prefix[:-1]\n\n        name = name[len(prefix):]\n        prefix = prefix[:-1]\n\n        if not prefix or len(name) > LENGTH_NAME:\n            raise ValueError(\"name is too long\")\n        return prefix, name", "output": "Split a name longer than 100 chars into a prefix\n           and a name part.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_dictlist(data):\n    '''\n    \n    '''\n    if isinstance(data, list):\n        for element in data:\n            if isinstance(element, dict):\n                if len(element) != 1:\n                    return False\n            else:\n                return False\n        return True\n    return False", "output": "Returns True if data is a list of one-element dicts (as found in many SLS\n    schemas), otherwise returns False", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_pb(self):\n        \"\"\"\n        \"\"\"\n        max_age = _helpers._timedelta_to_duration_pb(self.max_age)\n        return table_v2_pb2.GcRule(max_age=max_age)", "output": "Converts the garbage collection rule to a protobuf.\n\n        :rtype: :class:`.table_v2_pb2.GcRule`\n        :returns: The converted current object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_len(self, key):\r\n        \"\"\"\"\"\"\r\n        data = self.model.get_data()\r\n        return len(data[key])", "output": "Return sequence length", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def RelaxNGValidateCtxt(self, ctxt, options):\n        \"\"\" \"\"\"\n        if ctxt is None: ctxt__o = None\n        else: ctxt__o = ctxt._o\n        ret = libxml2mod.xmlTextReaderRelaxNGValidateCtxt(self._o, ctxt__o, options)\n        return ret", "output": "Use RelaxNG schema context to validate the document as it\n          is processed. Activation is only possible before the first\n          Read(). If @ctxt is None, then RelaxNG schema validation is\n           deactivated.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _import_api():\n    '''\n    \n    '''\n    global api\n    full_url = 'https://{0}:{1}/pve-docs/api-viewer/apidoc.js'.format(url, port)\n    returned_data = requests.get(full_url, verify=verify_ssl)\n\n    re_filter = re.compile('(?<=pveapi =)(.*)(?=^;)', re.DOTALL | re.MULTILINE)\n    api_json = re_filter.findall(returned_data.text)[0]\n    api = salt.utils.json.loads(api_json)", "output": "Download https://<url>/pve-docs/api-viewer/apidoc.js\n    Extract content of pveapi var (json formated)\n    Load this json content into global variable \"api\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lst_avg(lst):\n    '''\n    \n    '''\n    salt.utils.versions.warn_until(\n        'Neon',\n        'This results of this function are currently being rounded.'\n        'Beginning in the Salt Neon release, results will no longer be '\n        'rounded and this warning will be removed.',\n        stacklevel=3\n    )\n\n    if not isinstance(lst, collections.Hashable):\n        return float(sum(lst)/len(lst))\n    return float(lst)", "output": "Returns the average value of a list.\n\n    .. code-block:: jinja\n\n        {% my_list = [1,2,3,4] -%}\n        {{ set my_list | avg }}\n\n    will be rendered as:\n\n    .. code-block:: yaml\n\n        2.5", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_ssh_key(host,\n                username,\n                password,\n                protocol=None,\n                port=None,\n                certificate_verify=False):\n    '''\n    \n\n    '''\n    if protocol is None:\n        protocol = 'https'\n    if port is None:\n        port = 443\n\n    url = '{0}://{1}:{2}/host/ssh_root_authorized_keys'.format(protocol,\n                                                               host,\n                                                               port)\n    ret = {}\n    try:\n        result = salt.utils.http.query(url,\n                                       status=True,\n                                       text=True,\n                                       method='GET',\n                                       username=username,\n                                       password=password,\n                                       verify_ssl=certificate_verify)\n        if result.get('status') == 200:\n            ret['status'] = True\n            ret['key'] = result['text']\n        else:\n            ret['status'] = False\n            ret['Error'] = result['error']\n    except Exception as msg:\n        ret['status'] = False\n        ret['Error'] = msg\n\n    return ret", "output": "Retrieve the authorized_keys entry for root.\n    This function only works for ESXi, not vCenter.\n\n    :param host: The location of the ESXi Host\n    :param username: Username to connect as\n    :param password: Password for the ESXi web endpoint\n    :param protocol: defaults to https, can be http if ssl is disabled on ESXi\n    :param port: defaults to 443 for https\n    :param certificate_verify: If true require that the SSL connection present\n                               a valid certificate\n    :return: True if upload is successful\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' vsphere.get_ssh_key my.esxi.host root bad-password certificate_verify=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init_copy(self, connection):\n        \"\"\"\n        \n        \"\"\"\n        if not self.does_schema_exist(connection):\n            logger.info(\"Creating schema for %s\", self.table)\n            self.create_schema(connection)\n\n        if not self.does_table_exist(connection):\n            logger.info(\"Creating table %s\", self.table)\n            self.create_table(connection)\n\n        if self.enable_metadata_columns:\n            self._add_metadata_columns(connection)\n\n        if self.do_truncate_table:\n            logger.info(\"Truncating table %s\", self.table)\n            self.truncate_table(connection)\n\n        if self.do_prune():\n            logger.info(\"Removing %s older than %s from %s\", self.prune_column, self.prune_date, self.prune_table)\n            self.prune(connection)", "output": "Perform pre-copy sql - such as creating table, truncating, or removing data older than x.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def from_auto_dict(values, source='auto'):\n    '''\n    \n\n    '''\n    for name, value in values.items():\n        values[name] = from_auto(name, value, source)\n\n    return values", "output": "Pass an entire dictionary to from_auto\n\n    .. note::\n        The key will be passed as the name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def scalars_route(self, request):\n    \"\"\"\"\"\"\n    # TODO: return HTTP status code for malformed requests\n    tag = request.args.get('tag')\n    run = request.args.get('run')\n    experiment = request.args.get('experiment')\n    output_format = request.args.get('format')\n    (body, mime_type) = self.scalars_impl(tag, run, experiment, output_format)\n    return http_util.Respond(request, body, mime_type)", "output": "Given a tag and single run, return array of ScalarEvents.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _netstat_aix():\n    '''\n    \n    '''\n    ret = []\n    ## AIX 6.1 - 7.2, appears to ignore addr_family field contents\n    ## for addr_family in ('inet', 'inet6'):\n    for addr_family in ('inet',):\n        # Lookup connections\n        cmd = 'netstat -n -a -f {0} | tail -n +3'.format(addr_family)\n        out = __salt__['cmd.run'](cmd, python_shell=True)\n        for line in out.splitlines():\n            comps = line.split()\n            if len(comps) < 5:\n                continue\n\n            proto_seen = None\n            tcp_flag = True\n            if 'tcp' == comps[0] or 'tcp4' == comps[0]:\n                proto_seen = 'tcp'\n            elif 'tcp6' == comps[0]:\n                proto_seen = 'tcp6'\n            elif 'udp' == comps[0] or 'udp4' == comps[0]:\n                proto_seen = 'udp'\n                tcp_flag = False\n            elif 'udp6' == comps[0]:\n                proto_seen = 'udp6'\n                tcp_flag = False\n\n            if tcp_flag:\n                if len(comps) >= 6:\n                    ret.append({\n                        'proto': proto_seen,\n                        'recv-q': comps[1],\n                        'send-q': comps[2],\n                        'local-address': comps[3],\n                        'remote-address': comps[4],\n                        'state': comps[5]})\n            else:\n                if len(comps) >= 5:\n                    ret.append({\n                        'proto': proto_seen,\n                        'local-address': comps[3],\n                        'remote-address': comps[4]})\n    return ret", "output": "Return netstat information for SunOS flavors", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _generate_examples(self, num_examples, data_path, label_path):\n    \"\"\"\n    \"\"\"\n    images = _extract_mnist_images(data_path, num_examples)\n    labels = _extract_mnist_labels(label_path, num_examples)\n    data = list(zip(images, labels))\n\n    # Data is shuffled automatically to distribute classes uniformly.\n    for image, label in data:\n      yield {\n          \"image\": image,\n          \"label\": label,\n      }", "output": "Generate MNIST examples as dicts.\n\n    Args:\n      num_examples (int): The number of example.\n      data_path (str): Path to the data files\n      label_path (str): Path to the labels\n\n    Yields:\n      Generator yielding the next examples", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _exponential_timeout_generator(initial, maximum, multiplier, deadline):\n    \"\"\"\n    \"\"\"\n    if deadline is not None:\n        deadline_datetime = datetime_helpers.utcnow() + datetime.timedelta(\n            seconds=deadline\n        )\n    else:\n        deadline_datetime = datetime.datetime.max\n\n    timeout = initial\n    while True:\n        now = datetime_helpers.utcnow()\n        yield min(\n            # The calculated timeout based on invocations.\n            timeout,\n            # The set maximum timeout.\n            maximum,\n            # The remaining time before the deadline is reached.\n            float((deadline_datetime - now).seconds),\n        )\n        timeout = timeout * multiplier", "output": "A generator that yields exponential timeout values.\n\n    Args:\n        initial (float): The initial timeout.\n        maximum (float): The maximum timeout.\n        multiplier (float): The multiplier applied to the timeout.\n        deadline (float): The overall deadline across all invocations.\n\n    Yields:\n        float: A timeout value.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_dict(self, time, code):\n        '''\n        \n        '''\n        try:\n            return self.dicts[(QA_util_to_datetime(time), str(code))]\n        except Exception as e:\n            raise e", "output": "'give the time,code tuple and turn the dict'\n        :param time:\n        :param code:\n        :return:  \u5b57\u5178dict \u7c7b\u578b", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _update_val(self, val, result_score_list):\n        \"\"\"\n        \"\"\"\n        self._update_pbar()\n        if val == 'Timeout':\n            self._update_pbar(pbar_msg=('Skipped pipeline #{0} due to time out. '\n                                        'Continuing to the next pipeline.'.format(self._pbar.n)))\n            result_score_list.append(-float('inf'))\n        else:\n            result_score_list.append(val)\n        return result_score_list", "output": "Update values in the list of result scores and self._pbar during pipeline evaluation.\n\n        Parameters\n        ----------\n        val: float or \"Timeout\"\n            CV scores\n        result_score_list: list\n            A list of CV scores\n\n        Returns\n        -------\n        result_score_list: list\n            A updated list of CV scores", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _minimize_constraints_fun_summation(x):\n    '''\n    \n    '''\n    summation = sum([x[i] for i in CONSTRAINT_PARAMS_IDX])\n    return CONSTRAINT_UPPERBOUND >= summation >= CONSTRAINT_LOWERBOUND", "output": "Minimize constraints fun summation", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init_logger(self):\n        \"\"\"\"\"\"\n\n        if not self.result_logger:\n            if not os.path.exists(self.local_dir):\n                os.makedirs(self.local_dir)\n            if not self.logdir:\n                self.logdir = tempfile.mkdtemp(\n                    prefix=\"{}_{}\".format(\n                        str(self)[:MAX_LEN_IDENTIFIER], date_str()),\n                    dir=self.local_dir)\n            elif not os.path.exists(self.logdir):\n                os.makedirs(self.logdir)\n\n            self.result_logger = UnifiedLogger(\n                self.config,\n                self.logdir,\n                upload_uri=self.upload_dir,\n                loggers=self.loggers,\n                sync_function=self.sync_function)", "output": "Init logger.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def vb_get_network_adapters(machine_name=None, machine=None):\n    '''\n    \n    '''\n\n    if machine_name:\n        machine = vb_get_box().findMachine(machine_name)\n    network_adapters = []\n\n    for i in range(vb_get_max_network_slots()):\n        try:\n            inetwork_adapter = machine.getNetworkAdapter(i)\n            network_adapter = vb_xpcom_to_attribute_dict(\n                inetwork_adapter, 'INetworkAdapter'\n            )\n            network_adapter['properties'] = inetwork_adapter.getProperties('')\n            network_adapters.append(network_adapter)\n        except Exception:\n            pass\n\n    return network_adapters", "output": "A valid machine_name or a machine is needed to make this work!\n\n    @param machine_name:\n    @type machine_name: str\n    @param machine:\n    @type machine: IMachine\n    @return: INetorkAdapter's converted to dicts\n    @rtype: [dict]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def upgrade(self, using=None, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        return self._get_connection(using).indices.upgrade(index=self._name, **kwargs)", "output": "Upgrade the index to the latest format.\n\n        Any additional keyword arguments will be passed to\n        ``Elasticsearch.indices.upgrade`` unchanged.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def build_char_states(self, char_embed, is_training, reuse, char_ids, char_lengths):\n        \"\"\"\"\"\"\n        max_char_length = self.cfg.max_char_length\n\n        inputs = dropout(tf.nn.embedding_lookup(char_embed, char_ids),\n                         self.cfg.dropout, is_training)\n        inputs = tf.reshape(\n            inputs, shape=[max_char_length, -1, self.cfg.char_embed_dim])\n        char_lengths = tf.reshape(char_lengths, shape=[-1])\n        with tf.variable_scope('char_encoding', reuse=reuse):\n            cell_fw = XGRUCell(hidden_dim=self.cfg.char_embed_dim)\n            cell_bw = XGRUCell(hidden_dim=self.cfg.char_embed_dim)\n            _, (left_right, right_left) = tf.nn.bidirectional_dynamic_rnn(\n                cell_fw=cell_fw,\n                cell_bw=cell_bw,\n                sequence_length=char_lengths,\n                inputs=inputs,\n                time_major=True,\n                dtype=tf.float32\n            )\n\n        left_right = tf.reshape(left_right, shape=[-1, self.cfg.char_embed_dim])\n\n        right_left = tf.reshape(right_left, shape=[-1, self.cfg.char_embed_dim])\n\n        states = tf.concat([left_right, right_left], axis=1)\n        out_shape = tf.shape(char_ids)[1:3]\n        out_shape = tf.concat([out_shape, tf.constant(\n            value=[self.cfg.char_embed_dim * 2], dtype=tf.int32)], axis=0)\n        return tf.reshape(states, shape=out_shape)", "output": "Build char embedding network for the QA model.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _linux_wwns():\n    '''\n    \n    '''\n    ret = []\n    for fc_file in glob.glob('/sys/class/fc_host/*/port_name'):\n        with salt.utils.files.fopen(fc_file, 'r') as _wwn:\n            content = _wwn.read()\n            for line in content.splitlines():\n                ret.append(line.rstrip()[2:])\n    return ret", "output": "Return Fibre Channel port WWNs from a Linux host.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_default_storage_policy_of_datastore(datastore, service_instance=None):\n    '''\n    \n    '''\n    log.trace('Listing the default storage policy of datastore \\'%s\\'', datastore)\n    # Find datastore\n    target_ref = _get_proxy_target(service_instance)\n    ds_refs = salt.utils.vmware.get_datastores(service_instance, target_ref,\n                                               datastore_names=[datastore])\n    if not ds_refs:\n        raise VMwareObjectRetrievalError('Datastore \\'{0}\\' was not '\n                                         'found'.format(datastore))\n    profile_manager = salt.utils.pbm.get_profile_manager(service_instance)\n    policy = salt.utils.pbm.get_default_storage_policy_of_datastore(\n        profile_manager, ds_refs[0])\n    return _get_policy_dict(policy)", "output": "Returns a list of datastores assign the the storage policies.\n\n    datastore\n        Name of the datastore to assign.\n        The datastore needs to be visible to the VMware entity the proxy\n        points to.\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter.\n        Default is None.\n\n    .. code-block:: bash\n\n        salt '*' vsphere.list_default_storage_policy_of_datastore datastore=ds1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _SkipFieldValue(tokenizer):\n  \"\"\"\n  \"\"\"\n  # String/bytes tokens can come in multiple adjacent string literals.\n  # If we can consume one, consume as many as we can.\n  if tokenizer.TryConsumeByteString():\n    while tokenizer.TryConsumeByteString():\n      pass\n    return\n\n  if (not tokenizer.TryConsumeIdentifier() and\n      not _TryConsumeInt64(tokenizer) and not _TryConsumeUint64(tokenizer) and\n      not tokenizer.TryConsumeFloat()):\n    raise ParseError('Invalid field value: ' + tokenizer.token)", "output": "Skips over a field value.\n\n  Args:\n    tokenizer: A tokenizer to parse the field name and values.\n\n  Raises:\n    ParseError: In case an invalid field value is found.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reindex_axis(self, labels, axis=0, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        # for compatibility with higher dims\n        if axis != 0:\n            raise ValueError(\"cannot reindex series on non-zero axis!\")\n        msg = (\"'.reindex_axis' is deprecated and will be removed in a future \"\n               \"version. Use '.reindex' instead.\")\n        warnings.warn(msg, FutureWarning, stacklevel=2)\n\n        return self.reindex(index=labels, **kwargs)", "output": "Conform Series to new index with optional filling logic.\n\n        .. deprecated:: 0.21.0\n            Use ``Series.reindex`` instead.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def image_show(id=None, name=None, profile=None):  # pylint: disable=C0103\n    '''\n    \n    '''\n    g_client = _auth(profile)\n    ret = {}\n    if name:\n        for image in g_client.images.list():\n            if image.name == name:\n                id = image.id  # pylint: disable=C0103\n                continue\n    if not id:\n        return {\n            'result': False,\n            'comment':\n                'Unable to resolve image ID '\n                'for name \\'{0}\\''.format(name)\n            }\n    try:\n        image = g_client.images.get(id)\n    except exc.HTTPNotFound:\n        return {\n            'result': False,\n            'comment': 'No image with ID {0}'.format(id)\n            }\n    log.debug(\n        'Properties of image %s:\\n%s',\n        image.name, pprint.PrettyPrinter(indent=4).pformat(image)\n    )\n\n    schema = image_schema(profile=profile)\n    if len(schema.keys()) == 1:\n        schema = schema['image']\n    for key in schema:\n        if key in image:\n            ret[key] = image[key]\n    return ret", "output": "Return details about a specific image (glance image-show)\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' glance.image_show", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def encode_label(label_data):\n    \"\"\"\n    \"\"\"\n    systole = label_data[:, 1]\n    diastole = label_data[:, 2]\n    systole_encode = np.array([\n            (x < np.arange(600)) for x in systole\n        ], dtype=np.uint8)\n    diastole_encode = np.array([\n            (x < np.arange(600)) for x in diastole\n        ], dtype=np.uint8)\n    return systole_encode, diastole_encode", "output": "Run encoding to encode the label into the CDF target.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _delivery_report(err, msg):\n    '''  '''\n    if err is not None:\n        log.error('Message delivery failed: %s', err)\n    else:\n        log.debug('Message delivered to %s [%s]', msg.topic(), msg.partition())", "output": "Called once for each message produced to indicate delivery result.\n        Triggered by poll() or flush().", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_hosts(self, host):\n        \"\"\"\n        \n        \"\"\"\n        try:\n            return shlex.split(host)\n        except ValueError:\n            raise Exception(\"Unparsable host {}\".format(host))", "output": "Return a list of host_names from host value.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _virt_call(domain, function, section, comment,\n               connection=None, username=None, password=None, **kwargs):\n    '''\n    \n    '''\n    ret = {'name': domain, 'changes': {}, 'result': True, 'comment': ''}\n    targeted_domains = fnmatch.filter(__salt__['virt.list_domains'](), domain)\n    changed_domains = list()\n    ignored_domains = list()\n    for targeted_domain in targeted_domains:\n        try:\n            response = __salt__['virt.{0}'.format(function)](targeted_domain,\n                                                             connection=connection,\n                                                             username=username,\n                                                             password=password,\n                                                             **kwargs)\n            if isinstance(response, dict):\n                response = response['name']\n            changed_domains.append({'domain': targeted_domain, function: response})\n        except libvirt.libvirtError as err:\n            ignored_domains.append({'domain': targeted_domain, 'issue': six.text_type(err)})\n    if not changed_domains:\n        ret['result'] = False\n        ret['comment'] = 'No changes had happened'\n        if ignored_domains:\n            ret['changes'] = {'ignored': ignored_domains}\n    else:\n        ret['changes'] = {section: changed_domains}\n        ret['comment'] = comment\n\n    return ret", "output": "Helper to call the virt functions. Wildcards supported.\n\n    :param domain:\n    :param function:\n    :param section:\n    :param comment:\n    :return:", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _convert_parsed_show_output(parsed_data):\n    '''\n    \n    '''\n    # Match lines like \"main: xenial [snapshot]\" or \"test [local]\".\n    source_pattern = re.compile(r'(?:(?P<component>\\S+):)?\\s*(?P<name>\\S+)\\s+\\[(?P<type>\\S+)\\]')\n    sources = list()\n\n    if 'architectures' in parsed_data:\n        parsed_data['architectures'] = [item.strip() for item in parsed_data['architectures'].split()]\n        parsed_data['architectures'] = sorted(parsed_data['architectures'])\n\n    for source in parsed_data.get('sources', []):\n        # Retain the key/value of only the matching named groups.\n        matches = source_pattern.search(source)\n\n        if matches:\n            groups = matches.groupdict()\n            sources.append({key: groups[key] for key in groups if groups[key]})\n    if sources:\n        parsed_data['sources'] = sources\n\n    return parsed_data", "output": "Convert matching string values to lists/dictionaries.\n\n    :param dict parsed_data: The text of the command output that needs to be parsed.\n\n    :return: A dictionary containing the modified configuration data.\n    :rtype: dict", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _smooth_distribution(p, eps=0.0001):\n    \"\"\"\n    \"\"\"\n    is_zeros = (p == 0).astype(np.float32)\n    is_nonzeros = (p != 0).astype(np.float32)\n    n_zeros = is_zeros.sum()\n    n_nonzeros = p.size - n_zeros\n    if not n_nonzeros:\n        raise ValueError('The discrete probability distribution is malformed. All entries are 0.')\n    eps1 = eps * float(n_zeros) / float(n_nonzeros)\n    assert eps1 < 1.0, 'n_zeros=%d, n_nonzeros=%d, eps1=%f' % (n_zeros, n_nonzeros, eps1)\n    hist = p.astype(np.float32)\n    hist += eps * is_zeros + (-eps1) * is_nonzeros\n    assert (hist <= 0).sum() == 0\n    return hist", "output": "Given a discrete distribution (may have not been normalized to 1),\n    smooth it by replacing zeros with eps multiplied by a scaling factor and taking the\n    corresponding amount off the non-zero values.\n    Ref: http://web.engr.illinois.edu/~hanj/cs412/bk3/KL-divergence.pdf", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _gather_group_members(group, groups, users):\n    '''\n    \n    '''\n    _group = __salt__['group.info'](group)\n\n    if not _group:\n        log.warning('Group %s does not exist, ignoring.', group)\n        return\n\n    for member in _group['members']:\n        if member not in users:\n            users[member] = groups[group]", "output": "Gather group members", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def table(self):\n        \"\"\"\n        \n        \"\"\"\n        return pd.DataFrame([\n            self.message,\n        ]).set_index(\n            'account_cookie',\n            drop=False\n        ).T", "output": "\u6253\u5370\u51faaccount\u7684\u5185\u5bb9", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_sample_weight(pipeline_steps, sample_weight=None):\n    \"\"\"\n\n    \"\"\"\n    sample_weight_dict = {}\n    if not isinstance(sample_weight, type(None)):\n        for (pname, obj) in pipeline_steps:\n            if inspect.getargspec(obj.fit).args.count('sample_weight'):\n                step_sw = pname + '__sample_weight'\n                sample_weight_dict[step_sw] = sample_weight\n\n    if sample_weight_dict:\n        return sample_weight_dict\n    else:\n        return None", "output": "Recursively iterates through all objects in the pipeline and sets sample weight.\n\n    Parameters\n    ----------\n    pipeline_steps: array-like\n        List of (str, obj) tuples from a scikit-learn pipeline or related object\n    sample_weight: array-like\n        List of sample weight\n    Returns\n    -------\n    sample_weight_dict:\n        A dictionary of sample_weight", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def highlight_block(self, text):\r\n        \"\"\"\"\"\"\r\n        text = to_text_string(text)\r\n        inside_comment = tbh.get_state(self.currentBlock().previous()) == self.INSIDE_COMMENT\r\n        self.setFormat(0, len(text),\r\n                       self.formats[\"comment\" if inside_comment else \"normal\"])\r\n        \r\n        match = self.PROG.search(text)\r\n        index = 0\r\n        while match:\r\n            for key, value in list(match.groupdict().items()):\r\n                if value:\r\n                    start, end = match.span(key)\r\n                    index += end-start\r\n                    if key == \"comment_start\":\r\n                        inside_comment = True\r\n                        self.setFormat(start, len(text)-start,\r\n                                       self.formats[\"comment\"])\r\n                    elif key == \"comment_end\":\r\n                        inside_comment = False\r\n                        self.setFormat(start, end-start,\r\n                                       self.formats[\"comment\"])\r\n                    elif inside_comment:\r\n                        self.setFormat(start, end-start,\r\n                                       self.formats[\"comment\"])\r\n                    elif key == \"define\":\r\n                        self.setFormat(start, end-start,\r\n                                       self.formats[\"number\"])\r\n                    else:\r\n                        self.setFormat(start, end-start, self.formats[key])\r\n                    \r\n            match = self.PROG.search(text, match.end())\r\n        \r\n        self.highlight_spaces(text)\r\n        \r\n        last_state = self.INSIDE_COMMENT if inside_comment else self.NORMAL\r\n        tbh.set_state(self.currentBlock(), last_state)", "output": "Implement highlight specific for C/C++.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def process_class_docstrings(app, what, name, obj, options, lines):\n    \"\"\"\n    \n\n    \"\"\"\n    if what == \"class\":\n        joined = '\\n'.join(lines)\n\n        templates = [\n            \"\"\".. rubric:: Attributes\n\n.. autosummary::\n   :toctree:\n\n   None\n\"\"\",\n            \"\"\".. rubric:: Methods\n\n.. autosummary::\n   :toctree:\n\n   None\n\"\"\"\n        ]\n\n        for template in templates:\n            if template in joined:\n                joined = joined.replace(template, '')\n        lines[:] = joined.split('\\n')", "output": "For those classes for which we use ::\n\n    :template: autosummary/class_without_autosummary.rst\n\n    the documented attributes/methods have to be listed in the class\n    docstring. However, if one of those lists is empty, we use 'None',\n    which then generates warnings in sphinx / ugly html output.\n    This \"autodoc-process-docstring\" event connector removes that part\n    from the processed docstring.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def normalVectorRDD(sc, numRows, numCols, numPartitions=None, seed=None):\n        \"\"\"\n        \n        \"\"\"\n        return callMLlibFunc(\"normalVectorRDD\", sc._jsc, numRows, numCols, numPartitions, seed)", "output": "Generates an RDD comprised of vectors containing i.i.d. samples drawn\n        from the standard normal distribution.\n\n        :param sc: SparkContext used to create the RDD.\n        :param numRows: Number of Vectors in the RDD.\n        :param numCols: Number of elements in each Vector.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`).\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of Vector with vectors containing i.i.d. samples ~ `N(0.0, 1.0)`.\n\n        >>> import numpy as np\n        >>> mat = np.matrix(RandomRDDs.normalVectorRDD(sc, 100, 100, seed=1).collect())\n        >>> mat.shape\n        (100, 100)\n        >>> abs(mat.mean() - 0.0) < 0.1\n        True\n        >>> abs(mat.std() - 1.0) < 0.1\n        True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_table_columns(metadata):\n    \"\"\" \n    \"\"\"\n    cols = OrderedDict()\n    for col in metadata.c:\n        name = str(col).rpartition(\".\")[2]\n        cols[name] = col.type.python_type.__name__\n    return cols", "output": "Extract columns names and python typos from metadata\n\n    Args:\n        metadata: Table metadata\n\n    Returns:\n        dict with columns names and python types", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def namespace_match(pattern: str, namespace: str):\n    \"\"\"\n    \n    \"\"\"\n    if pattern[0] == '*' and namespace.endswith(pattern[1:]):\n        return True\n    elif pattern == namespace:\n        return True\n    return False", "output": "Matches a namespace pattern against a namespace string.  For example, ``*tags`` matches\n    ``passage_tags`` and ``question_tags`` and ``tokens`` matches ``tokens`` but not\n    ``stemmed_tokens``.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _ensure_element(tup, elem):\n    \"\"\"\n    \n    \"\"\"\n    try:\n        return tup, tup.index(elem)\n    except ValueError:\n        return tuple(chain(tup, (elem,))), len(tup)", "output": "Create a tuple containing all elements of tup, plus elem.\n\n    Returns the new tuple and the index of elem in the new tuple.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show_calltip(self, signature, doc='', parameter='', parameter_doc='',\r\n                     color=_DEFAULT_TITLE_COLOR, is_python=False):\r\n        \"\"\"\r\n        \r\n        \"\"\"\r\n        # Find position of calltip\r\n        point = self._calculate_position()\r\n\r\n        # Format text\r\n        tiptext, wrapped_lines = self._format_signature(\r\n            signature,\r\n            doc,\r\n            parameter,\r\n            parameter_doc,\r\n            color,\r\n            is_python,\r\n        )\r\n\r\n        self._update_stylesheet(self.calltip_widget)\r\n\r\n        # Show calltip\r\n        self.calltip_widget.show_tip(point, tiptext, wrapped_lines)", "output": "Show calltip.\r\n\r\n        Calltips look like tooltips but will not disappear if mouse hovers\r\n        them. They are useful for displaying signature information on methods\r\n        and functions.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def yank_fields_from_attrs(attrs, _as=None, sort=True):\n    \"\"\"\n    \n    \"\"\"\n    fields_with_names = []\n    for attname, value in list(attrs.items()):\n        field = get_field_as(value, _as)\n        if not field:\n            continue\n        fields_with_names.append((attname, field))\n\n    if sort:\n        fields_with_names = sorted(fields_with_names, key=lambda f: f[1])\n    return OrderedDict(fields_with_names)", "output": "Extract all the fields in given attributes (dict)\n    and return them ordered", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _remove_persistent_module(mod, comment):\n    '''\n    \n    '''\n    conf = _get_modules_conf()\n    mod_name = _strip_module_name(mod)\n    if not mod_name or mod_name not in mod_list(True):\n        return set()\n    escape_mod = re.escape(mod)\n    if comment:\n        __salt__['file.comment'](conf, '^[\\t ]*{0}[\\t ]?'.format(escape_mod))\n    else:\n        __salt__['file.sed'](conf, '^[\\t ]*{0}[\\t ]?'.format(escape_mod), '')\n    return set([mod_name])", "output": "Remove module from configuration file. If comment is true only comment line\n    where module is.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _validate_dependencies_met():\n    \"\"\"\n    \n    \"\"\"\n    # Method added in `cryptography==1.1`; not available in older versions\n    from cryptography.x509.extensions import Extensions\n    if getattr(Extensions, \"get_extension_for_class\", None) is None:\n        raise ImportError(\"'cryptography' module missing required functionality.  \"\n                          \"Try upgrading to v1.3.4 or newer.\")\n\n    # pyOpenSSL 0.14 and above use cryptography for OpenSSL bindings. The _x509\n    # attribute is only present on those versions.\n    from OpenSSL.crypto import X509\n    x509 = X509()\n    if getattr(x509, \"_x509\", None) is None:\n        raise ImportError(\"'pyOpenSSL' module missing required functionality. \"\n                          \"Try upgrading to v0.14 or newer.\")", "output": "Verifies that PyOpenSSL's package-level dependencies have been met.\n    Throws `ImportError` if they are not met.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pdb_has_stopped(self, fname, lineno, shellwidget):\r\n        \"\"\"\"\"\"\r\n        # This is a unique form of the edit_goto signal that is intended to\r\n        # prevent keyboard input from accidentally entering the editor\r\n        # during repeated, rapid entry of debugging commands.\r\n        self.edit_goto[str, int, str, bool].emit(fname, lineno, '', False)\r\n        self.activateWindow()\r\n        shellwidget._control.setFocus()", "output": "Python debugger has just stopped at frame (fname, lineno)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def getPermissionBit(self, t, m):\n        '''\n        \n        '''\n        try:\n            if isinstance(m, string_types):\n                return self.rights[t][m]['BITS']\n            else:\n                return m\n        except KeyError:\n            raise CommandExecutionError((\n                'No right \"{0}\".  It should be one of the following:  {1}')\n                .format(m, ', '.join(self.rights[t])))", "output": "returns a permission bit of the string permission value for the specified object type", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_cond_latents(cond_latents, hparams):\n  \"\"\"\"\"\"\n  if cond_latents is None:\n    return\n  if not isinstance(cond_latents[0], list):\n    cond_latents = [cond_latents]\n  exp_num_latents = hparams.num_cond_latents\n  if hparams.latent_dist_encoder == \"conv_net\":\n    exp_num_latents += int(hparams.cond_first_frame)\n  if len(cond_latents) != exp_num_latents:\n    raise ValueError(\"Expected number of cond_latents: %d, got %d\" %\n                     (exp_num_latents, len(cond_latents)))\n  for cond_latent in cond_latents:\n    if len(cond_latent) != hparams.n_levels - 1:\n      raise ValueError(\"Expected level_latents to be %d, got %d\" %\n                       (hparams.n_levels - 1, len(cond_latent)))", "output": "Shape checking for cond_latents.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def transformer_parsing_base():\n  \"\"\"\"\"\"\n  hparams = transformer_base()\n  hparams.attention_dropout = 0.2\n  hparams.layer_prepostprocess_dropout = 0.2\n  hparams.max_length = 512\n  hparams.learning_rate_warmup_steps = 16000\n  hparams.hidden_size = 1024\n  hparams.learning_rate = 0.05\n  hparams.shared_embedding_and_softmax_weights = False\n  return hparams", "output": "HParams for parsing on WSJ only.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def setData(self, index, value, role=Qt.EditRole, change_type=None):\r\n        \"\"\"\"\"\"\r\n        column = index.column()\r\n        row = index.row()\r\n\r\n        if index in self.display_error_idxs:\r\n            return False\r\n        if change_type is not None:\r\n            try:\r\n                value = self.data(index, role=Qt.DisplayRole)\r\n                val = from_qvariant(value, str)\r\n                if change_type is bool:\r\n                    val = bool_false_check(val)\r\n                self.df.iloc[row, column] = change_type(val)\r\n            except ValueError:\r\n                self.df.iloc[row, column] = change_type('0')\r\n        else:\r\n            val = from_qvariant(value, str)\r\n            current_value = self.get_value(row, column)\r\n            if isinstance(current_value, (bool, np.bool_)):\r\n                val = bool_false_check(val)\r\n            supported_types = (bool, np.bool_) + REAL_NUMBER_TYPES\r\n            if (isinstance(current_value, supported_types) or\r\n                    is_text_string(current_value)):\r\n                try:\r\n                    self.df.iloc[row, column] = current_value.__class__(val)\r\n                except (ValueError, OverflowError) as e:\r\n                    QMessageBox.critical(self.dialog, \"Error\",\r\n                                         str(type(e).__name__) + \": \" + str(e))\r\n                    return False\r\n            else:\r\n                QMessageBox.critical(self.dialog, \"Error\",\r\n                                     \"Editing dtype {0!s} not yet supported.\"\r\n                                     .format(type(current_value).__name__))\r\n                return False\r\n        self.max_min_col_update()\r\n        self.dataChanged.emit(index, index)\r\n        return True", "output": "Cell content change", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_tickers_from_file(self, filename):\n        \"\"\"\"\"\"\n        if not os.path.exists(filename):\n            log.error(\"Ticker List file does not exist: %s\", filename)\n\n        tickers = []\n        with io.open(filename, 'r') as fd:\n            for ticker in fd:\n                tickers.append(ticker.rstrip())\n        return tickers", "output": "Load ticker list from txt file", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_for_invalid_keys(fname, kwargs, compat_args):\n    \"\"\"\n    \n\n    \"\"\"\n    # set(dict) --> set of the dictionary's keys\n    diff = set(kwargs) - set(compat_args)\n\n    if diff:\n        bad_arg = list(diff)[0]\n        raise TypeError((\"{fname}() got an unexpected \"\n                         \"keyword argument '{arg}'\".\n                         format(fname=fname, arg=bad_arg)))", "output": "Checks whether 'kwargs' contains any keys that are not\n    in 'compat_args' and raises a TypeError if there is one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def put_watch(self, id, body=None, params=None):\n        \"\"\"\n        \n        \"\"\"\n        if id in SKIP_IN_PATH:\n            raise ValueError(\"Empty value passed for a required argument 'id'.\")\n        return self.transport.perform_request(\n            \"PUT\", _make_path(\"_watcher\", \"watch\", id), params=params, body=body\n        )", "output": "`<http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-put-watch.html>`_\n\n        :arg id: Watch ID\n        :arg body: The watch\n        :arg active: Specify whether the watch is in/active by default\n        :arg if_primary_term: only update the watch if the last operation that\n            has changed the watch has the specified primary term\n        :arg if_seq_no: only update the watch if the last operation that has\n            changed the watch has the specified sequence number\n        :arg version: Explicit version number for concurrency control", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def native_concat(nodes):\n    \"\"\"\n    \"\"\"\n    head = list(islice(nodes, 2))\n\n    if not head:\n        return None\n\n    if len(head) == 1:\n        out = head[0]\n    else:\n        out = u''.join([text_type(v) for v in chain(head, nodes)])\n\n    try:\n        return literal_eval(out)\n    except (ValueError, SyntaxError, MemoryError):\n        return out", "output": "Return a native Python type from the list of compiled nodes. If the\n    result is a single node, its value is returned. Otherwise, the nodes are\n    concatenated as strings. If the result can be parsed with\n    :func:`ast.literal_eval`, the parsed value is returned. Otherwise, the\n    string is returned.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _do_names(names, fun, path=None):\n    '''\n    \n    '''\n    ret = {}\n    hosts = find_guests(names, path=path)\n    if not hosts:\n        return False\n\n    client = salt.client.get_local_client(__opts__['conf_file'])\n    for host, sub_names in six.iteritems(hosts):\n        cmds = []\n        for name in sub_names:\n            cmds.append(client.cmd_iter(\n                    host,\n                    'lxc.{0}'.format(fun),\n                    [name],\n                    kwarg={'path': path},\n                    timeout=60))\n        for cmd in cmds:\n            data = next(cmd)\n            data = data.get(host, {}).get('ret', None)\n            if data:\n                ret.update({host: data})\n    return ret", "output": "Invoke a function in the lxc module with no args\n\n    path\n        path to the container parent\n        default: /var/lib/lxc (system default)\n\n        .. versionadded:: 2015.8.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _concat(self, first_data, second_data):\n        \"\"\"\"\"\"\n        assert len(first_data) == len(\n            second_data), 'data source should contain the same size'\n        if first_data and second_data:\n            return [\n                concat(\n                    first_data[x],\n                    second_data[x],\n                    dim=0\n                ) for x in range(len(first_data))\n            ]\n        elif (not first_data) and (not second_data):\n            return []\n        else:\n            return [\n                first_data[0] if first_data else second_data[0]\n                for x in range(len(first_data))\n            ]", "output": "Helper function to concat two NDArrays.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def _oauth_get_user_future(\n        self, access_token: Dict[str, Any]\n    ) -> Dict[str, Any]:\n        \"\"\"\n        \"\"\"\n        raise NotImplementedError()", "output": "Subclasses must override this to get basic information about the\n        user.\n\n        Should be a coroutine whose result is a dictionary\n        containing information about the user, which may have been\n        retrieved by using ``access_token`` to make a request to the\n        service.\n\n        The access token will be added to the returned dictionary to make\n        the result of `get_authenticated_user`.\n\n        .. versionchanged:: 5.1\n\n           Subclasses may also define this method with ``async def``.\n\n        .. versionchanged:: 6.0\n\n           A synchronous fallback to ``_oauth_get_user`` was removed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_view_on_selected(self, widget, selected_item_key):\n        \"\"\" \n        \"\"\"\n        self.lbl.set_text('List selection: ' + self.listView.children[selected_item_key].get_text())", "output": "The selection event of the listView, returns a key of the clicked event.\n            You can retrieve the item rapidly", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_top_states(saltenv='base'):\n    '''\n    \n    '''\n    alt_states = []\n    try:\n        returned = __salt__['state.show_top']()\n        for i in returned[saltenv]:\n            alt_states.append(i)\n    except Exception:\n        raise\n    # log.info(\"top states: %s\", alt_states)\n    return alt_states", "output": "Equivalent to a salt cli: salt web state.show_top", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _parent_info(self):\n        \"\"\"\n        \"\"\"\n        parent_doc = self.parent\n        if parent_doc is None:\n            parent_path = _helpers.DOCUMENT_PATH_DELIMITER.join(\n                (self._client._database_string, \"documents\")\n            )\n        else:\n            parent_path = parent_doc._document_path\n\n        expected_prefix = _helpers.DOCUMENT_PATH_DELIMITER.join((parent_path, self.id))\n        return parent_path, expected_prefix", "output": "Get fully-qualified parent path and prefix for this collection.\n\n        Returns:\n            Tuple[str, str]: Pair of\n\n            * the fully-qualified (with database and project) path to the\n              parent of this collection (will either be the database path\n              or a document path).\n            * the prefix to a document in this collection.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def parse(cls, src, dist=None):\n        \"\"\"\n        \"\"\"\n        m = cls.pattern.match(src)\n        if not m:\n            msg = \"EntryPoint must be in 'name=module:attrs [extras]' format\"\n            raise ValueError(msg, src)\n        res = m.groupdict()\n        extras = cls._parse_extras(res['extras'])\n        attrs = res['attr'].split('.') if res['attr'] else ()\n        return cls(res['name'], res['module'], attrs, extras, dist)", "output": "Parse a single entry point from string `src`\n\n        Entry point syntax follows the form::\n\n            name = some.module:some.attr [extra1, extra2]\n\n        The entry name and module name are required, but the ``:attrs`` and\n        ``[extras]`` parts are optional", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_insert_idx(pos_dict, name):\n    \"\"\n    keys,i = list(pos_dict.keys()),0\n    while i < len(keys) and str.lower(keys[i]) < str.lower(name): i+=1\n    if i == len(keys): return -1\n    else:              return pos_dict[keys[i]]", "output": "Return the position to insert a given function doc in a notebook.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_conn(profile):\n    '''\n    \n    '''\n    params = {}\n    for key in ('host', 'port', 'token', 'scheme', 'consistency', 'dc', 'verify'):\n        if key in profile:\n            params[key] = profile[key]\n\n    if HAS_CONSUL:\n        return consul.Consul(**params)\n    else:\n        raise CommandExecutionError(\n            '(unable to import consul, '\n            'module most likely not installed. PLease install python-consul)'\n        )", "output": "Return a client object for accessing consul", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def raw_command(netfn, command, bridge_request=None, data=(), retry=True, delay_xmit=None, **kwargs):\n    '''\n    \n    '''\n    with _IpmiSession(**kwargs) as s:\n        r = s.raw_command(netfn=int(netfn),\n                        command=int(command),\n                        bridge_request=bridge_request,\n                        data=data,\n                        retry=retry,\n                        delay_xmit=delay_xmit)\n        return r", "output": "Send raw ipmi command\n\n    This allows arbitrary IPMI bytes to be issued.  This is commonly used\n    for certain vendor specific commands.\n\n    :param netfn: Net function number\n    :param command: Command value\n    :param bridge_request: The target slave address and channel number for\n                        the bridge request.\n    :param data: Command data as a tuple or list\n    :param kwargs:\n        - api_host=127.0.0.1\n        - api_user=admin\n        - api_pass=example\n        - api_port=623\n        - api_kg=None\n\n    :returns: dict -- The response from IPMI device\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-call ipmi.raw_command netfn=0x06 command=0x46 data=[0x02]\n        # this will return the name of the user with id 2 in bytes", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cancel_job(self, job_id, project=None, location=None, retry=DEFAULT_RETRY):\n        \"\"\"\n        \"\"\"\n        extra_params = {\"projection\": \"full\"}\n\n        if project is None:\n            project = self.project\n\n        if location is None:\n            location = self.location\n\n        if location is not None:\n            extra_params[\"location\"] = location\n\n        path = \"/projects/{}/jobs/{}/cancel\".format(project, job_id)\n\n        resource = self._call_api(\n            retry, method=\"POST\", path=path, query_params=extra_params\n        )\n\n        return self.job_from_resource(resource[\"job\"])", "output": "Attempt to cancel a job from a job ID.\n\n        See\n        https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/cancel\n\n        Arguments:\n            job_id (str): Unique job identifier.\n\n        Keyword Arguments:\n            project (str):\n                (Optional) ID of the project which owns the job (defaults to\n                the client's project).\n            location (str): Location where the job was run.\n            retry (google.api_core.retry.Retry):\n                (Optional) How to retry the RPC.\n\n        Returns:\n            Union[google.cloud.bigquery.job.LoadJob, \\\n                  google.cloud.bigquery.job.CopyJob, \\\n                  google.cloud.bigquery.job.ExtractJob, \\\n                  google.cloud.bigquery.job.QueryJob]:\n                Job instance, based on the resource returned by the API.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sub(self, repl):\n        \"\"\"\n        \n        \"\"\"\n        if self.asGroupList:\n            warnings.warn(\"cannot use sub() with Regex(asGroupList=True)\",\n                           SyntaxWarning, stacklevel=2)\n            raise SyntaxError()\n\n        if self.asMatch and callable(repl):\n            warnings.warn(\"cannot use sub() with a callable with Regex(asMatch=True)\",\n                           SyntaxWarning, stacklevel=2)\n            raise SyntaxError()\n\n        if self.asMatch:\n            def pa(tokens):\n                return tokens[0].expand(repl)\n        else:\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n        return self.addParseAction(pa)", "output": "Return Regex with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transformString(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_all(self):\r\n        \"\"\"\r\n        \"\"\"\r\n        for index in range(self.get_stack_count()):\r\n            if self.data[index].editor.document().isModified():\r\n                self.save(index)", "output": "Save all opened files.\r\n\r\n        Iterate through self.data and call save() on any modified files.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _rules_from_env(self, val):\n        \"\"\"\"\"\"\n        val = val.split(':')\n        if 'DEFAULT_RULES' in val:\n            val = const.DEFAULT_RULES + [rule for rule in val if rule != 'DEFAULT_RULES']\n        return val", "output": "Transforms rules list from env-string to python.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def accepts(self, package):  # type: (poetry.packages.Package) -> bool\n        \"\"\"\n        \n        \"\"\"\n        return (\n            self._name == package.name\n            and self._constraint.allows(package.version)\n            and (not package.is_prerelease() or self.allows_prereleases())\n        )", "output": "Determines if the given package matches this dependency.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def registry_path(cls, project, location, registry):\n        \"\"\"\"\"\"\n        return google.api_core.path_template.expand(\n            \"projects/{project}/locations/{location}/registries/{registry}\",\n            project=project,\n            location=location,\n            registry=registry,\n        )", "output": "Return a fully-qualified registry string.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def graph_memoized(func):\n    \"\"\"\n    \n    \"\"\"\n\n    # TODO it keeps the graph alive\n    from ..compat import tfv1\n    GRAPH_ARG_NAME = '__IMPOSSIBLE_NAME_FOR_YOU__'\n\n    @memoized\n    def func_with_graph_arg(*args, **kwargs):\n        kwargs.pop(GRAPH_ARG_NAME)\n        return func(*args, **kwargs)\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        assert GRAPH_ARG_NAME not in kwargs, \"No Way!!\"\n        graph = tfv1.get_default_graph()\n        kwargs[GRAPH_ARG_NAME] = graph\n        return func_with_graph_arg(*args, **kwargs)\n    return wrapper", "output": "Like memoized, but keep one cache per default graph.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_edit_filetypes():\n    \"\"\"\"\"\"\n    # The filter details are not hidden on Windows, so we can't use\n    # all Pygments extensions on that platform\n    if os.name == 'nt':\n        supported_exts = []\n    else:\n        try:\n            supported_exts = _get_pygments_extensions()\n        except Exception:\n            supported_exts = []\n\n    # NOTE: Try to not add too much extensions to this list to not\n    # make the filter look too big on Windows\n    favorite_exts = ['.py', '.R', '.jl', '.ipynb', '.md', '.pyw', '.pyx',\n                     '.c', '.cpp', '.json', '.dat', '.csv', '.tsv', '.txt',\n                     '.ini', '.html', '.js', '.h', '.bat']\n\n    other_exts = [ext for ext in supported_exts if ext not in favorite_exts]\n    all_exts = tuple(favorite_exts + other_exts)\n    text_filetypes = (_(\"Supported text files\"), all_exts)\n    return [text_filetypes] + EDIT_FILETYPES", "output": "Get all file types supported by the Editor", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def components(self):\n        \"\"\"\n        \n        \"\"\"\n        from pandas import DataFrame\n\n        columns = ['days', 'hours', 'minutes', 'seconds',\n                   'milliseconds', 'microseconds', 'nanoseconds']\n        hasnans = self._hasnans\n        if hasnans:\n            def f(x):\n                if isna(x):\n                    return [np.nan] * len(columns)\n                return x.components\n        else:\n            def f(x):\n                return x.components\n\n        result = DataFrame([f(x) for x in self], columns=columns)\n        if not hasnans:\n            result = result.astype('int64')\n        return result", "output": "Return a dataframe of the components (days, hours, minutes,\n        seconds, milliseconds, microseconds, nanoseconds) of the Timedeltas.\n\n        Returns\n        -------\n        a DataFrame", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def slice_indexer(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        \n        \"\"\"\n        start_slice, end_slice = self.slice_locs(start, end, step=step,\n                                                 kind=kind)\n\n        # return a slice\n        if not is_scalar(start_slice):\n            raise AssertionError(\"Start slice bound is non-scalar\")\n        if not is_scalar(end_slice):\n            raise AssertionError(\"End slice bound is non-scalar\")\n\n        return slice(start_slice, end_slice, step)", "output": "For an ordered or unique index, compute the slice indexer for input\n        labels and step.\n\n        Parameters\n        ----------\n        start : label, default None\n            If None, defaults to the beginning\n        end : label, default None\n            If None, defaults to the end\n        step : int, default None\n        kind : string, default None\n\n        Returns\n        -------\n        indexer : slice\n\n        Raises\n        ------\n        KeyError : If key does not exist, or key is not unique and index is\n            not ordered.\n\n        Notes\n        -----\n        This function assumes that the data is sorted, so use at your own peril\n\n        Examples\n        ---------\n        This is a method on all index types. For example you can do:\n\n        >>> idx = pd.Index(list('abcd'))\n        >>> idx.slice_indexer(start='b', end='c')\n        slice(1, 3)\n\n        >>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])\n        >>> idx.slice_indexer(start='b', end=('c', 'g'))\n        slice(1, 3)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_technologies():\n    '''\n    \n    '''\n    tech = ''\n    technologies = pyconnman.ConnManager().get_technologies()\n    for path, params in technologies:\n        tech += '{0}\\n\\tName = {1}\\n\\tType = {2}\\n\\tPowered = {3}\\n\\tConnected = {4}\\n'.format(\n            path, params['Name'], params['Type'], params['Powered'] == 1, params['Connected'] == 1)\n    return tech", "output": "Returns the technologies of connman", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_ownership(obj, raise_if_false=True):\n    \"\"\"\n    \"\"\"\n    if not obj:\n        return False\n\n    security_exception = SupersetSecurityException(\n        \"You don't have the rights to alter [{}]\".format(obj))\n\n    if g.user.is_anonymous:\n        if raise_if_false:\n            raise security_exception\n        return False\n    roles = [r.name for r in get_user_roles()]\n    if 'Admin' in roles:\n        return True\n    session = db.create_scoped_session()\n    orig_obj = session.query(obj.__class__).filter_by(id=obj.id).first()\n\n    # Making a list of owners that works across ORM models\n    owners = []\n    if hasattr(orig_obj, 'owners'):\n        owners += orig_obj.owners\n    if hasattr(orig_obj, 'owner'):\n        owners += [orig_obj.owner]\n    if hasattr(orig_obj, 'created_by'):\n        owners += [orig_obj.created_by]\n\n    owner_names = [o.username for o in owners if o]\n\n    if (\n            g.user and hasattr(g.user, 'username') and\n            g.user.username in owner_names):\n        return True\n    if raise_if_false:\n        raise security_exception\n    else:\n        return False", "output": "Meant to be used in `pre_update` hooks on models to enforce ownership\n\n    Admin have all access, and other users need to be referenced on either\n    the created_by field that comes with the ``AuditMixin``, or in a field\n    named ``owners`` which is expected to be a one-to-many with the User\n    model. It is meant to be used in the ModelView's pre_update hook in\n    which raising will abort the update.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mmodule(saltenv, fun, *args, **kwargs):\n    '''\n    \n    '''\n    mminion = _MMinion(saltenv)\n    return mminion.functions[fun](*args, **kwargs)", "output": "Loads minion modules from an environment so that they can be used in pillars\n    for that environment\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' saltutil.mmodule base test.ping", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_util_add_months(dt, months):\n    \"\"\"\n    \n    \"\"\"\n    dt = datetime.datetime.strptime(\n        dt, \"%Y-%m-%d\") + relativedelta(months=months)\n    return(dt)", "output": "#\u8fd4\u56dedt\u9694months\u4e2a\u6708\u540e\u7684\u65e5\u671f\uff0cmonths\u76f8\u5f53\u4e8e\u6b65\u957f", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cell_value(self, column_family_id, column, index=0):\n        \"\"\"\n        \"\"\"\n        cells = self.find_cells(column_family_id, column)\n\n        try:\n            cell = cells[index]\n        except (TypeError, IndexError):\n            num_cells = len(cells)\n            msg = _MISSING_INDEX.format(index, column, column_family_id, num_cells)\n            raise IndexError(msg)\n\n        return cell.value", "output": "Get a single cell value stored on this instance.\n\n        For example:\n\n        .. literalinclude:: snippets_table.py\n            :start-after: [START bigtable_row_cell_value]\n            :end-before: [END bigtable_row_cell_value]\n\n        Args:\n            column_family_id (str): The ID of the column family. Must be of the\n                form ``[_a-zA-Z0-9][-_.a-zA-Z0-9]*``.\n            column (bytes): The column within the column family where the cell\n                is located.\n            index (Optional[int]): The offset within the series of values. If\n                not specified, will return the first cell.\n\n        Returns:\n            ~google.cloud.bigtable.row_data.Cell value: The cell value stored\n            in the specified column and specified index.\n\n        Raises:\n            KeyError: If ``column_family_id`` is not among the cells stored\n                in this row.\n            KeyError: If ``column`` is not among the cells stored in this row\n                for the given ``column_family_id``.\n            IndexError: If ``index`` cannot be found within the cells stored\n                in this row for the given ``column_family_id``, ``column``\n                pair.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def flush(self, fsync=False):\n        \"\"\"\n        \n        \"\"\"\n        if self._handle is not None:\n            self._handle.flush()\n            if fsync:\n                try:\n                    os.fsync(self._handle.fileno())\n                except OSError:\n                    pass", "output": "Force all buffered modifications to be written to disk.\n\n        Parameters\n        ----------\n        fsync : bool (default False)\n          call ``os.fsync()`` on the file handle to force writing to disk.\n\n        Notes\n        -----\n        Without ``fsync=True``, flushing may not guarantee that the OS writes\n        to disk. With fsync, the operation will block until the OS claims the\n        file has been written; however, other caching layers may still\n        interfere.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resources(self):\n        '''  '''\n        used_resources = self._used_resources()\n        ret = collections.defaultdict(dict)\n        for resource, total in six.iteritems(self._resources):\n            ret[resource]['total'] = total\n            if resource in used_resources:\n                ret[resource]['used'] = used_resources[resource]\n            else:\n                ret[resource]['used'] = 0\n        return ret", "output": "get total resources and available ones", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def start(name, call=None):\n    '''\n    \n    '''\n    if call != 'action':\n        raise SaltCloudException(\n            'The start action must be called with -a or --action.'\n        )\n\n    node_id = get_linode_id_from_name(name)\n    node = get_linode(kwargs={'linode_id': node_id})\n\n    if node['STATUS'] == 1:\n        return {'success': True,\n                'action': 'start',\n                'state': 'Running',\n                'msg': 'Machine already running'}\n\n    response = _query('linode', 'boot', args={'LinodeID': node_id})['DATA']\n\n    if _wait_for_job(node_id, response['JobID']):\n        return {'state': 'Running',\n                'action': 'start',\n                'success': True}\n    else:\n        return {'action': 'start',\n                'success': False}", "output": "Start a VM in Linode.\n\n    name\n        The name of the VM to start.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -a stop vm_name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def div(a, b):\n  \"\"\"\n  \n  \"\"\"\n  def divide(a, b):\n    \"\"\"Division\"\"\"\n    return a / b\n  return op_with_scalar_cast(a, b, divide)", "output": "A wrapper around tf division that does more automatic casting of\n  the input.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def union(self, other):\n        \"\"\"\n        \n        \"\"\"\n        if self._jrdd_deserializer == other._jrdd_deserializer:\n            rdd = RDD(self._jrdd.union(other._jrdd), self.ctx,\n                      self._jrdd_deserializer)\n        else:\n            # These RDDs contain data in different serialized formats, so we\n            # must normalize them to the default serializer.\n            self_copy = self._reserialize()\n            other_copy = other._reserialize()\n            rdd = RDD(self_copy._jrdd.union(other_copy._jrdd), self.ctx,\n                      self.ctx.serializer)\n        if (self.partitioner == other.partitioner and\n                self.getNumPartitions() == rdd.getNumPartitions()):\n            rdd.partitioner = self.partitioner\n        return rdd", "output": "Return the union of this RDD and another one.\n\n        >>> rdd = sc.parallelize([1, 1, 2, 3])\n        >>> rdd.union(rdd).collect()\n        [1, 1, 2, 3, 1, 1, 2, 3]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def equals(self, rhs):\n    \"\"\"\n    \"\"\"\n\n    for comparator in self._comparators:\n      if comparator.equals(rhs):\n        return True\n\n    return False", "output": "Checks whether any Comparator is equal to rhs.\n\n    Args:\n      # rhs: can be anything\n\n    Returns:\n      bool", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def const_rand(size, seed=23980):\n    \"\"\" \n    \"\"\"\n    old_seed = np.random.seed()\n    np.random.seed(seed)\n    out = np.random.rand(size)\n    np.random.seed(old_seed)\n    return out", "output": "Generate a random array with a fixed seed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def replace_node_status(self, name, body, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.replace_node_status_with_http_info(name, body, **kwargs)\n        else:\n            (data) = self.replace_node_status_with_http_info(name, body, **kwargs)\n            return data", "output": "replace status of the specified Node\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.replace_node_status(name, body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str name: name of the Node (required)\n        :param V1Node body: (required)\n        :param str pretty: If 'true', then the output is pretty printed.\n        :param str dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed\n        :param str field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.\n        :return: V1Node\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def contextMenuEvent(self, event):\r\n        \"\"\"\"\"\"\r\n        self.menu.popup(event.globalPos())\r\n        event.accept()", "output": "Reimplement Qt method", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def slice_shift(self, periods=1, axis=0):\n        \"\"\"\n        \n        \"\"\"\n        if periods == 0:\n            return self\n\n        if periods > 0:\n            vslicer = slice(None, -periods)\n            islicer = slice(periods, None)\n        else:\n            vslicer = slice(-periods, None)\n            islicer = slice(None, periods)\n\n        new_obj = self._slice(vslicer, axis=axis)\n        shifted_axis = self._get_axis(axis)[islicer]\n        new_obj.set_axis(shifted_axis, axis=axis, inplace=True)\n\n        return new_obj.__finalize__(self)", "output": "Equivalent to `shift` without copying data. The shifted data will\n        not include the dropped periods and the shifted axis will be smaller\n        than the original.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n\n        Returns\n        -------\n        shifted : same type as caller\n\n        Notes\n        -----\n        While the `slice_shift` is faster than `shift`, you may pay for it\n        later during alignment.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def hostinterface_delete(interfaceids, **kwargs):\n    '''\n    \n    '''\n    conn_args = _login(**kwargs)\n    ret = {}\n    try:\n        if conn_args:\n            method = 'hostinterface.delete'\n            if isinstance(interfaceids, list):\n                params = interfaceids\n            else:\n                params = [interfaceids]\n            ret = _query(method, params, conn_args['url'], conn_args['auth'])\n            return ret['result']['interfaceids']\n        else:\n            raise KeyError\n    except KeyError:\n        return ret", "output": "Delete host interface\n\n    .. versionadded:: 2016.3.0\n\n    :param interfaceids: IDs of the host interfaces to delete\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n\n    :return: ID of deleted host interfaces, False on failure.\n\n    CLI Example:\n    .. code-block:: bash\n\n        salt '*' zabbix.hostinterface_delete 50", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update(self, other):\n        \"\"\"\"\"\"\n        if isinstance(other, cookielib.CookieJar):\n            for cookie in other:\n                self.set_cookie(copy.copy(cookie))\n        else:\n            super(RequestsCookieJar, self).update(other)", "output": "Updates this jar with cookies from another CookieJar or dict-like", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _delay_until_retry(exc, deadline):\n    \"\"\"\n    \"\"\"\n    cause = exc.errors[0]\n\n    now = time.time()\n\n    if now >= deadline:\n        raise\n\n    delay = _get_retry_delay(cause)\n    if delay is not None:\n\n        if now + delay > deadline:\n            raise\n\n        time.sleep(delay)", "output": "Helper for :meth:`Session.run_in_transaction`.\n\n    Detect retryable abort, and impose server-supplied delay.\n\n    :type exc: :class:`google.api_core.exceptions.Aborted`\n    :param exc: exception for aborted transaction\n\n    :type deadline: float\n    :param deadline: maximum timestamp to continue retrying the transaction.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_load(jid):\n    '''\n    \n    '''\n    options = _get_options()\n\n    index = options['master_job_cache_index']\n    doc_type = options['master_job_cache_doc_type']\n\n    if options['index_date']:\n        index = '{0}-{1}'.format(index,\n            datetime.date.today().strftime('%Y.%m.%d'))\n\n    data = __salt__['elasticsearch.document_get'](index=index,\n                                                  id=jid,\n                                                  doc_type=doc_type)\n    if data:\n        # Use salt.utils.json.dumps to convert elasticsearch unicode json to standard json\n        return salt.utils.json.loads(salt.utils.json.dumps(data))\n    return {}", "output": "Return the load data that marks a specified jid\n\n    .. versionadded:: 2015.8.1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _connect(user=None, password=None, host=None, port=None, database='admin', authdb=None):\n    '''\n    \n    '''\n    if not user:\n        user = __salt__['config.option']('mongodb.user')\n    if not password:\n        password = __salt__['config.option']('mongodb.password')\n    if not host:\n        host = __salt__['config.option']('mongodb.host')\n    if not port:\n        port = __salt__['config.option']('mongodb.port')\n    if not authdb:\n        authdb = database\n\n    try:\n        conn = pymongo.MongoClient(host=host, port=port)\n        mdb = pymongo.database.Database(conn, database)\n        if user and password:\n            mdb.authenticate(user, password, source=authdb)\n    except pymongo.errors.PyMongoError:\n        log.error('Error connecting to database %s', database)\n        return False\n\n    return conn", "output": "Returns a tuple of (user, host, port) with config, pillar, or default\n    values assigned to missing values.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def execute_script(self, script, *args):\n        \"\"\"\n        \n        \"\"\"\n        converted_args = list(args)\n        command = None\n        if self.w3c:\n            command = Command.W3C_EXECUTE_SCRIPT\n        else:\n            command = Command.EXECUTE_SCRIPT\n\n        return self.execute(command, {\n            'script': script,\n            'args': converted_args})['value']", "output": "Synchronously Executes JavaScript in the current window/frame.\n\n        :Args:\n         - script: The JavaScript to execute.\n         - \\\\*args: Any applicable arguments for your JavaScript.\n\n        :Usage:\n            ::\n\n                driver.execute_script('return document.title;')", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _raw_open(self, flags, mode=0o777):\n        \"\"\"\n        \n        \"\"\"\n        if self._closed:\n            self._raise_closed()\n        return self._accessor.open(self, flags, mode)", "output": "Open the file pointed by this path and return a file descriptor,\n        as os.open() does.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset_cooldown(self, ctx):\n        \"\"\"\n        \"\"\"\n        if self._buckets.valid:\n            bucket = self._buckets.get_bucket(ctx.message)\n            bucket.reset()", "output": "Resets the cooldown on this command.\n\n        Parameters\n        -----------\n        ctx: :class:`.Context`\n            The invocation context to reset the cooldown under.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shutdown(self):\r\n        \"\"\"\"\"\"\r\n        if self.get_kernel() is not None and not self.slave:\r\n            self.shellwidget.kernel_manager.shutdown_kernel()\r\n        if self.shellwidget.kernel_client is not None:\r\n            background(self.shellwidget.kernel_client.stop_channels)", "output": "Shutdown kernel", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rows(self):\n        \"\"\"\n        \n        \"\"\"\n        # We use DataFrames for serialization of IndexedRows from\n        # Java, so we first convert the RDD of rows to a DataFrame\n        # on the Scala/Java side. Then we map each Row in the\n        # DataFrame back to an IndexedRow on this side.\n        rows_df = callMLlibFunc(\"getIndexedRows\", self._java_matrix_wrapper._java_model)\n        rows = rows_df.rdd.map(lambda row: IndexedRow(row[0], row[1]))\n        return rows", "output": "Rows of the IndexedRowMatrix stored as an RDD of IndexedRows.\n\n        >>> mat = IndexedRowMatrix(sc.parallelize([IndexedRow(0, [1, 2, 3]),\n        ...                                        IndexedRow(1, [4, 5, 6])]))\n        >>> rows = mat.rows\n        >>> rows.first()\n        IndexedRow(0, [1.0,2.0,3.0])", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def grain_funcs(opts, proxy=None):\n    '''\n    \n    '''\n    ret = LazyLoader(\n        _module_dirs(\n            opts,\n            'grains',\n            'grain',\n            ext_type_dirs='grains_dirs',\n        ),\n        opts,\n        tag='grains',\n    )\n    ret.pack['__utils__'] = utils(opts, proxy=proxy)\n    return ret", "output": "Returns the grain functions\n\n      .. code-block:: python\n\n          import salt.config\n          import salt.loader\n\n          __opts__ = salt.config.minion_config('/etc/salt/minion')\n          grainfuncs = salt.loader.grain_funcs(__opts__)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_imported_modules(cells, nb_module_name=''):\n    \"\"\n    module_names = get_top_level_modules()\n    nb_imports = [match.group(1) for cell in cells for match in IMPORT_RE.finditer(cell['source']) if cell['cell_type'] == 'code']\n    parts = nb_module_name.split('.')\n    parent_modules = ['.'.join(parts[:(x+1)]) for x in range_of(parts)] # Imports parent modules - a.b.c = [a, a.b, a.b.c]\n    all_modules = module_names + nb_imports + parent_modules\n    mods = [import_mod(m, ignore_errors=True) for m in all_modules]\n    return [m for m in mods if m is not None]", "output": "Finds all submodules of notebook - sorted by submodules > top level modules > manual imports. This gives notebook imports priority", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_pending(self, tag, match_func=None):\n        \"\"\"\n        \"\"\"\n        if match_func is None:\n            match_func = self._get_match_func()\n        old_events = self.pending_events\n        self.pending_events = []\n        ret = None\n        for evt in old_events:\n            if match_func(evt['tag'], tag):\n                if ret is None:\n                    ret = evt\n                    log.trace('get_event() returning cached event = %s', ret)\n                else:\n                    self.pending_events.append(evt)\n            elif any(pmatch_func(evt['tag'], ptag) for ptag, pmatch_func in self.pending_tags):\n                self.pending_events.append(evt)\n            else:\n                log.trace('get_event() discarding cached event that no longer has any subscriptions = %s', evt)\n        return ret", "output": "Check the pending_events list for events that match the tag\n\n        :param tag: The tag to search for\n        :type tag: str\n        :param tags_regex: List of re expressions to search for also\n        :type tags_regex: list[re.compile()]\n        :return:", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ls_(active=None, cache=True, path=None):\n    '''\n    \n    '''\n    contextvar = 'lxc.ls{0}'.format(path)\n    if active:\n        contextvar += '.active'\n    if cache and (contextvar in __context__):\n        return __context__[contextvar]\n    else:\n        ret = []\n        cmd = 'lxc-ls'\n        if path:\n            cmd += ' -P {0}'.format(pipes.quote(path))\n        if active:\n            cmd += ' --active'\n        output = __salt__['cmd.run_stdout'](cmd, python_shell=False)\n        for line in output.splitlines():\n            ret.extend(line.split())\n        __context__[contextvar] = ret\n        return ret", "output": "Return a list of the containers available on the minion\n\n    path\n        path to the container parent directory\n        default: /var/lib/lxc (system)\n\n        .. versionadded:: 2015.8.0\n\n    active\n        If ``True``, return only active (i.e. running) containers\n\n        .. versionadded:: 2015.5.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' lxc.ls\n        salt '*' lxc.ls active=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_from_user_input(raw_properties, jamfile_module, location):\n    \"\"\"'\"\"\"\n    assert is_iterable_typed(raw_properties, basestring)\n    assert isinstance(jamfile_module, basestring)\n    assert isinstance(location, basestring)\n    properties = property.create_from_strings(raw_properties, True)\n    properties = property.translate_paths(properties, location)\n    properties = property.translate_indirect(properties, jamfile_module)\n\n    project_id = get_manager().projects().attributeDefault(jamfile_module, 'id', None)\n    if not project_id:\n        project_id = os.path.abspath(location)\n    properties = property.translate_dependencies(properties, project_id, location)\n    properties = property.expand_subfeatures_in_conditions(properties)\n    return create(properties)", "output": "Creates a property-set from the input given by the user, in the\n    context of 'jamfile-module' at 'location", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def zoom_in(self):\n        \"\"\"\"\"\"\n        if self._scalefactor <= self._sfmax:\n            self._scalefactor += 1\n            self.scale_image()\n            self._adjust_scrollbar(self._scalestep)\n            self.sig_zoom_changed.emit(self.get_scaling())", "output": "Scale the image up by one scale step.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def trim_join_unit(join_unit, length):\n    \"\"\"\n    \n    \"\"\"\n\n    if 0 not in join_unit.indexers:\n        extra_indexers = join_unit.indexers\n\n        if join_unit.block is None:\n            extra_block = None\n        else:\n            extra_block = join_unit.block.getitem_block(slice(length, None))\n            join_unit.block = join_unit.block.getitem_block(slice(length))\n    else:\n        extra_block = join_unit.block\n\n        extra_indexers = copy.copy(join_unit.indexers)\n        extra_indexers[0] = extra_indexers[0][length:]\n        join_unit.indexers[0] = join_unit.indexers[0][:length]\n\n    extra_shape = (join_unit.shape[0] - length,) + join_unit.shape[1:]\n    join_unit.shape = (length,) + join_unit.shape[1:]\n\n    return JoinUnit(block=extra_block, indexers=extra_indexers,\n                    shape=extra_shape)", "output": "Reduce join_unit's shape along item axis to length.\n\n    Extra items that didn't fit are returned as a separate block.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _agent_import_failed(trace):\n    \"\"\"\"\"\"\n\n    class _AgentImportFailed(Trainer):\n        _name = \"AgentImportFailed\"\n        _default_config = with_common_config({})\n\n        def _setup(self, config):\n            raise ImportError(trace)\n\n    return _AgentImportFailed", "output": "Returns dummy agent class for if PyTorch etc. is not installed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_screen_resolution(self):\n        \"\"\"\"\"\"\n        widget = QDesktopWidget()\n        geometry = widget.availableGeometry(widget.primaryScreen())\n        return geometry.width(), geometry.height()", "output": "Return the screen resolution of the primary screen.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def months_between(date1, date2, roundOff=True):\n    \"\"\"\n    \n    \"\"\"\n    sc = SparkContext._active_spark_context\n    return Column(sc._jvm.functions.months_between(\n        _to_java_column(date1), _to_java_column(date2), roundOff))", "output": "Returns number of months between dates date1 and date2.\n    If date1 is later than date2, then the result is positive.\n    If date1 and date2 are on the same day of month, or both are the last day of month,\n    returns an integer (time of day will be ignored).\n    The result is rounded off to 8 digits unless `roundOff` is set to `False`.\n\n    >>> df = spark.createDataFrame([('1997-02-28 10:30:00', '1996-10-30')], ['date1', 'date2'])\n    >>> df.select(months_between(df.date1, df.date2).alias('months')).collect()\n    [Row(months=3.94959677)]\n    >>> df.select(months_between(df.date1, df.date2, False).alias('months')).collect()\n    [Row(months=3.9495967741935485)]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update(database, table, key):\n    \"\"\"\"\"\"\n    field = random.randrange(10)\n    value = ''.join(random.choice(string.printable) for i in range(100))\n    with database.batch() as batch:\n        batch.update(table=table, columns=('id', 'field%d' % field),\n                     values=[(key, value)])", "output": "Does a single update operation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_pythonpath(self, at_start=False):\r\n        \"\"\"\"\"\"\r\n        if at_start:\r\n            current_path = self.get_option('current_project_path',\r\n                                           default=None)\r\n        else:\r\n            current_path = self.get_active_project_path()\r\n        if current_path is None:\r\n            return []\r\n        else:\r\n            return [current_path]", "output": "Get project path as a list to be added to PYTHONPATH", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def unload_extension(self, name):\n        \"\"\"\n        \"\"\"\n\n        lib = self.__extensions.get(name)\n        if lib is None:\n            raise errors.ExtensionNotLoaded(name)\n\n        self._remove_module_references(lib.__name__)\n        self._call_module_finalizers(lib, name)", "output": "Unloads an extension.\n\n        When the extension is unloaded, all commands, listeners, and cogs are\n        removed from the bot and the module is un-imported.\n\n        The extension can provide an optional global function, ``teardown``,\n        to do miscellaneous clean-up if necessary. This function takes a single\n        parameter, the ``bot``, similar to ``setup`` from\n        :meth:`~.Bot.load_extension`.\n\n        Parameters\n        ------------\n        name: :class:`str`\n            The extension name to unload. It must be dot separated like\n            regular Python imports if accessing a sub-module. e.g.\n            ``foo.test`` if you want to import ``foo/test.py``.\n\n        Raises\n        -------\n        ExtensionNotLoaded\n            The extension was not loaded.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def hypermedia_out():\n    '''\n    \n    '''\n    request = cherrypy.serving.request\n    request._hypermedia_inner_handler = request.handler\n\n    # If handler has been explicitly set to None, don't override.\n    if request.handler is not None:\n        request.handler = hypermedia_handler", "output": "Determine the best handler for the requested content type\n\n    Wrap the normal handler and transform the output from that handler into the\n    requested content type", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _indent(lines, prefix=\"  \"):\n    \"\"\"\n    \"\"\"\n    indented = []\n    for line in lines.split(\"\\n\"):\n        indented.append(prefix + line)\n    return \"\\n\".join(indented)", "output": "Indent some text.\n\n    Note that this is present as ``textwrap.indent``, but not in Python 2.\n\n    Args:\n        lines (str): The newline delimited string to be indented.\n        prefix (Optional[str]): The prefix to indent each line with. Default\n            to two spaces.\n\n    Returns:\n        str: The newly indented content.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def getconfig():\n    '''\n    \n    '''\n    try:\n        config = '/etc/selinux/config'\n        with salt.utils.files.fopen(config, 'r') as _fp:\n            for line in _fp:\n                line = salt.utils.stringutils.to_unicode(line)\n                if line.strip().startswith('SELINUX='):\n                    return line.split('=')[1].capitalize().strip()\n    except (IOError, OSError, AttributeError):\n        return None\n    return None", "output": "Return the selinux mode from the config file\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' selinux.getconfig", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def simple_cnn(actns:Collection[int], kernel_szs:Collection[int]=None,\n               strides:Collection[int]=None, bn=False) -> nn.Sequential:\n    \"\"\n    nl = len(actns)-1\n    kernel_szs = ifnone(kernel_szs, [3]*nl)\n    strides    = ifnone(strides   , [2]*nl)\n    layers = [conv_layer(actns[i], actns[i+1], kernel_szs[i], stride=strides[i],\n              norm_type=(NormType.Batch if bn and i<(len(strides)-1) else None)) for i in range_of(strides)]\n    layers.append(PoolFlatten())\n    return nn.Sequential(*layers)", "output": "CNN with `conv_layer` defined by `actns`, `kernel_szs` and `strides`, plus batchnorm if `bn`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def volume_show(name, profile=None, **kwargs):\n    '''\n    \n\n    '''\n    conn = _auth(profile, **kwargs)\n    return conn.volume_show(name)", "output": "Create a block storage volume\n\n    name\n        Name of the volume\n\n    profile\n        Profile to use\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' nova.volume_show myblock profile=openstack", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def replace_apply_state(meta_graph, state_ops, feed_map):\n  \"\"\"\"\"\"\n  for node in meta_graph.graph_def.node:\n    keys_to_purge = []\n    tensor_name = node.name + \":0\"\n    # Verify that the node is a state op and that its due to be rewired\n    # in the feedmap.\n    if node.op in state_ops and tensor_name in feed_map:\n      node.op = \"Placeholder\"\n      for key in node.attr:\n        # Only shape and dtype are required for Placeholder. Remove other\n        # attributes.\n        if key != \"shape\":\n          keys_to_purge.append(key)\n      for key in keys_to_purge:\n        del node.attr[key]\n      node.attr[\"dtype\"].type = types_pb2.DT_RESOURCE", "output": "Replaces state ops with non state Placeholder ops for the apply graph.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rename_set(set=None, new_set=None, family='ipv4'):\n    '''\n    \n    '''\n\n    if not set:\n        return 'Error: Set needs to be specified'\n\n    if not new_set:\n        return 'Error: New name for set needs to be specified'\n\n    settype = _find_set_type(set)\n    if not settype:\n        return 'Error: Set does not exist'\n\n    settype = _find_set_type(new_set)\n    if settype:\n        return 'Error: New Set already exists'\n\n    cmd = '{0} rename {1} {2}'.format(_ipset_cmd(), set, new_set)\n    out = __salt__['cmd.run'](cmd, python_shell=False)\n\n    if not out:\n        out = True\n    return out", "output": ".. versionadded:: 2014.7.0\n\n    Delete ipset set.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' ipset.rename_set custom_set new_set=new_set_name\n\n        IPv6:\n        salt '*' ipset.rename_set custom_set new_set=new_set_name family=ipv6", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_password_update(user_id=None, name=None, password=None,\n                         profile=None, **connection_args):\n    '''\n    \n    '''\n    kstone = auth(profile, **connection_args)\n    if name:\n        for user in kstone.users.list():\n            if user.name == name:\n                user_id = user.id\n                break\n    if not user_id:\n        return {'Error': 'Unable to resolve user id'}\n\n    if _OS_IDENTITY_API_VERSION > 2:\n        kstone.users.update(user=user_id, password=password)\n    else:\n        kstone.users.update_password(user=user_id, password=password)\n    ret = 'Password updated for user ID {0}'.format(user_id)\n    if name:\n        ret += ' ({0})'.format(name)\n    return ret", "output": "Update a user's password (keystone user-password-update)\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt '*' keystone.user_password_update c965f79c4f864eaaa9c3b41904e67082 password=12345\n        salt '*' keystone.user_password_update user_id=c965f79c4f864eaaa9c3b41904e67082 password=12345\n        salt '*' keystone.user_password_update name=nova password=12345", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def kernels_initialize(self, folder):\n        \"\"\" \n        \"\"\"\n        if not os.path.isdir(folder):\n            raise ValueError('Invalid folder: ' + folder)\n\n        resources = []\n        resource = {'path': 'INSERT_SCRIPT_PATH_HERE'}\n        resources.append(resource)\n\n        username = self.get_config_value(self.CONFIG_NAME_USER)\n        meta_data = {\n            'id': username + '/INSERT_KERNEL_SLUG_HERE',\n            'title': 'INSERT_TITLE_HERE',\n            'code_file': 'INSERT_CODE_FILE_PATH_HERE',\n            'language': 'INSERT_LANGUAGE_HERE',\n            'kernel_type': 'INSERT_KERNEL_TYPE_HERE',\n            'is_private': 'true',\n            'enable_gpu': 'false',\n            'enable_internet': 'false',\n            'dataset_sources': [],\n            'competition_sources': [],\n            'kernel_sources': [],\n        }\n        meta_file = os.path.join(folder, self.KERNEL_METADATA_FILE)\n        with open(meta_file, 'w') as f:\n            json.dump(meta_data, f, indent=2)\n\n        return meta_file", "output": "create a new kernel in a specified folder from template, including\n            json metadata that grabs values from the configuration.\n             Parameters\n            ==========\n            folder: the path of the folder", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def itemsize(self):\n        \"\"\"\n        \n        \"\"\"\n        warnings.warn(\"{obj}.itemsize is deprecated and will be removed \"\n                      \"in a future version\".format(obj=type(self).__name__),\n                      FutureWarning, stacklevel=2)\n        return self._ndarray_values.itemsize", "output": "Return the size of the dtype of the item of the underlying data.\n\n        .. deprecated:: 0.23.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def video_l1_loss(top_out, targets, model_hparams, vocab_size, weights_fn):\n  \"\"\"\"\"\"\n  del vocab_size  # unused arg\n  logits = top_out\n  logits = tf.reshape(logits, [-1] + common_layers.shape_list(logits)[2:-1])\n  targets = tf.reshape(targets, [-1] + common_layers.shape_list(targets)[2:])\n  weights = weights_fn(targets)\n  # Shift targets by 0.5 so later just casting to int gives the prediction.\n  # So for int targets, say 0 and 7, we actually train to predict 0.5 and 7.5.\n  # Later (in merics or infer) this is cast to int anyway. Also, we have no\n  # loss beyond cutoff = 0.2 as these are already correct predictions.\n  targets = tf.to_float(targets) + 0.5\n  loss = video_l1_internal_loss(logits, targets, model_hparams)\n  return tf.reduce_sum(loss * weights), tf.reduce_sum(weights)", "output": "Compute loss numerator and denominator for one shard of output.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _legacy_init(self, name, arr):\n        \"\"\"\n        \"\"\"\n        warnings.warn(\n            \"\\033[91mCalling initializer with init(str, NDArray) has been deprecated.\" \\\n            \"please use init(mx.init.InitDesc(...), NDArray) instead.\\033[0m\",\n            DeprecationWarning, stacklevel=3)\n        if not isinstance(name, string_types):\n            raise TypeError('name must be string')\n        if not isinstance(arr, NDArray):\n            raise TypeError('arr must be NDArray')\n        if name.startswith('upsampling'):\n            self._init_bilinear(name, arr)\n        elif name.startswith('stn_loc') and name.endswith('weight'):\n            self._init_zero(name, arr)\n        elif name.startswith('stn_loc') and name.endswith('bias'):\n            self._init_loc_bias(name, arr)\n        elif name.endswith('bias'):\n            self._init_bias(name, arr)\n        elif name.endswith('gamma'):\n            self._init_gamma(name, arr)\n        elif name.endswith('beta'):\n            self._init_beta(name, arr)\n        elif name.endswith('weight'):\n            self._init_weight(name, arr)\n        elif name.endswith(\"moving_mean\"):\n            self._init_zero(name, arr)\n        elif name.endswith(\"moving_var\"):\n            self._init_one(name, arr)\n        elif name.endswith(\"moving_inv_var\"):\n            self._init_zero(name, arr)\n        elif name.endswith(\"moving_avg\"):\n            self._init_zero(name, arr)\n        elif name.endswith('min'):\n            self._init_zero(name, arr)\n        elif name.endswith('max'):\n            self._init_one(name, arr)\n        else:\n            self._init_default(name, arr)", "output": "Legacy initialization method.\n\n        Parameters\n        ----------\n        name : str\n            Name of corresponding NDArray.\n\n        arr : NDArray\n            NDArray to be initialized.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_field_at(self, index, *, name, value, inline=True):\n        \"\"\"\n        \"\"\"\n\n        try:\n            field = self._fields[index]\n        except (TypeError, IndexError, AttributeError):\n            raise IndexError('field index out of range')\n\n        field['name'] = str(name)\n        field['value'] = str(value)\n        field['inline'] = inline\n        return self", "output": "Modifies a field to the embed object.\n\n        The index must point to a valid pre-existing field.\n\n        This function returns the class instance to allow for fluent-style\n        chaining.\n\n        Parameters\n        -----------\n        index: :class:`int`\n            The index of the field to modify.\n        name: :class:`str`\n            The name of the field.\n        value: :class:`str`\n            The value of the field.\n        inline: :class:`bool`\n            Whether the field should be displayed inline.\n\n        Raises\n        -------\n        IndexError\n            An invalid index was provided.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save(self, config=None):\n        \"\"\"\n        \"\"\"\n        if config is not None:\n            clist = [config]\n        else:\n            clist = [\n                self._system_config,\n                self._global_config,\n                self._repo_config,\n                self._local_config,\n            ]\n\n        for conf in clist:\n            if conf.filename is None:\n                continue\n\n            try:\n                logger.debug(\"Writing '{}'.\".format(conf.filename))\n                dname = os.path.dirname(os.path.abspath(conf.filename))\n                try:\n                    os.makedirs(dname)\n                except OSError as exc:\n                    if exc.errno != errno.EEXIST:\n                        raise\n                conf.write()\n            except Exception as exc:\n                msg = \"failed to write config '{}'\".format(conf.filename)\n                raise ConfigError(msg, exc)", "output": "Saves config to config files.\n\n        Args:\n            config (configobj.ConfigObj): optional config object to save.\n\n        Raises:\n            dvc.config.ConfigError: thrown if failed to write config file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def map_across_blocks(self, map_func):\n        \"\"\"\n        \"\"\"\n        preprocessed_map_func = self.preprocess_func(map_func)\n        new_partitions = np.array(\n            [\n                [part.apply(preprocessed_map_func) for part in row_of_parts]\n                for row_of_parts in self.partitions\n            ]\n        )\n        return self.__constructor__(new_partitions)", "output": "Applies `map_func` to every partition.\n\n        Args:\n            map_func: The function to apply.\n\n        Returns:\n            A new BaseFrameManager object, the type of object that called this.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_data(self, filename=None):\r\n        \"\"\"\"\"\"\r\n        if filename is None:\r\n            filename = self.filename\r\n            if filename is None:\r\n                filename = getcwd_or_home()\r\n            filename, _selfilter = getsavefilename(self, _(\"\"),\r\n                                                   filename,\r\n                                                   iofunctions.save_filters)\r\n            if filename:\r\n                self.filename = filename\r\n            else:\r\n                return False\r\n        QApplication.setOverrideCursor(QCursor(Qt.WaitCursor))\r\n        QApplication.processEvents()\r\n\r\n        error_message = self.shellwidget.save_namespace(self.filename)\r\n        self.shellwidget._kernel_reply = None\r\n\r\n        QApplication.restoreOverrideCursor()\r\n        QApplication.processEvents()\r\n        if error_message is not None:\r\n            if 'Some objects could not be saved:' in error_message:\r\n                save_data_message = (\r\n                    _('<b>Some objects could not be saved:</b>')\r\n                    + '<br><br><code>{obj_list}</code>'.format(\r\n                        obj_list=error_message.split(': ')[1]))\r\n            else:\r\n                save_data_message = _(\r\n                    '<b>Unable to save current workspace</b>'\r\n                    '<br><br>Error message:<br>') + error_message\r\n            QMessageBox.critical(self, _(\"\"), save_data_message)\r\n        self.save_button.setEnabled(self.filename is not None)", "output": "Save data", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mnist_common_generator(tmp_dir,\n                           training,\n                           how_many,\n                           data_filename,\n                           label_filename,\n                           start_from=0):\n  \"\"\"\n  \"\"\"\n  data_path = os.path.join(tmp_dir, data_filename)\n  labels_path = os.path.join(tmp_dir, label_filename)\n  images = _extract_mnist_images(data_path, 60000 if training else 10000)\n  labels = _extract_mnist_labels(labels_path, 60000 if training else 10000)\n  # Shuffle the data to make sure classes are well distributed.\n  data = list(zip(images, labels))\n  random.shuffle(data)\n  images, labels = list(zip(*data))\n  return image_utils.image_generator(images[start_from:start_from + how_many],\n                                     labels[start_from:start_from + how_many])", "output": "Image generator for MNIST.\n\n  Args:\n    tmp_dir: path to temporary storage directory.\n    training: a Boolean; if true, we use the train set, otherwise the test set.\n    how_many: how many images and labels to generate.\n    data_filename: file that contains features data.\n    label_filename: file that contains labels.\n    start_from: from which image to start.\n\n  Returns:\n    An instance of image_generator that produces MNIST images.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def regexpExec(self, content):\n        \"\"\" \"\"\"\n        ret = libxml2mod.xmlRegexpExec(self._o, content)\n        return ret", "output": "Check if the regular expression generates the value", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def coalesce(self, numPartitions, shuffle=False):\n        \"\"\"\n        \n        \"\"\"\n        if shuffle:\n            # Decrease the batch size in order to distribute evenly the elements across output\n            # partitions. Otherwise, repartition will possibly produce highly skewed partitions.\n            batchSize = min(10, self.ctx._batchSize or 1024)\n            ser = BatchedSerializer(PickleSerializer(), batchSize)\n            selfCopy = self._reserialize(ser)\n            jrdd_deserializer = selfCopy._jrdd_deserializer\n            jrdd = selfCopy._jrdd.coalesce(numPartitions, shuffle)\n        else:\n            jrdd_deserializer = self._jrdd_deserializer\n            jrdd = self._jrdd.coalesce(numPartitions, shuffle)\n        return RDD(jrdd, self.ctx, jrdd_deserializer)", "output": "Return a new RDD that is reduced into `numPartitions` partitions.\n\n        >>> sc.parallelize([1, 2, 3, 4, 5], 3).glom().collect()\n        [[1], [2, 3], [4, 5]]\n        >>> sc.parallelize([1, 2, 3, 4, 5], 3).coalesce(1).glom().collect()\n        [[1, 2, 3, 4, 5]]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(self, end_ix):\n        \"\"\"\n        \n        \"\"\"\n        if self.most_recent_ix == end_ix:\n            return self.current\n\n        target = end_ix - self.cal_start - self.offset + 1\n        self.current = self.window.seek(target)\n\n        self.most_recent_ix = end_ix\n        return self.current", "output": "Returns\n        -------\n        out : A np.ndarray of the equity pricing up to end_ix after adjustments\n              and rounding have been applied.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def nac(x, depth, name=None, reuse=None):\n  \"\"\"\"\"\"\n  with tf.variable_scope(name, default_name=\"nac\", values=[x], reuse=reuse):\n    x_shape = shape_list(x)\n    w = tf.get_variable(\"w\", [x_shape[-1], depth])\n    m = tf.get_variable(\"m\", [x_shape[-1], depth])\n    w = tf.tanh(w) * tf.nn.sigmoid(m)\n    x_flat = tf.reshape(x, [-1, x_shape[-1]])\n    res_flat = tf.matmul(x_flat, w)\n    return tf.reshape(res_flat, x_shape[:-1] + [depth])", "output": "NAC as in https://arxiv.org/abs/1808.00508.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def aggregate_task_lm_losses(hparams,\n                             problem_hparams,\n                             logits,\n                             feature_name,\n                             feature):\n  \"\"\"\"\"\"\n  summaries = []\n  vocab_size = problem_hparams.vocab_size[feature_name]\n  if vocab_size is not None and hasattr(hparams, \"vocab_divisor\"):\n    vocab_size += (-vocab_size) % hparams.vocab_divisor\n  modality = problem_hparams.modality[feature_name]\n  loss = hparams.loss.get(feature_name, modalities.get_loss(modality))\n  weights_fn = hparams.weights_fn.get(\n      feature_name, modalities.get_weights_fn(modality))\n  loss_num = 0.\n  loss_den = 0.\n  for task in hparams.problem.task_list:\n    loss_num_, loss_den_ = loss(\n        logits, feature,\n        lambda x: common_layers.weights_multi_problem_all(x, task.task_id),  # pylint: disable=cell-var-from-loop\n        hparams, vocab_size, weights_fn)\n\n    loss_num += loss_num_\n    loss_den += loss_den_\n\n    loss_val = loss_num_ / tf.maximum(1.0, loss_den_)\n    summaries.append([task.name+\"_loss\", loss_val])\n\n  return loss_num, loss_den, summaries", "output": "LM loss for multiproblems.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pad_to_multiple_2d(x, block_shape):\n  \"\"\"\n  \"\"\"\n  old_shape = x.get_shape().dims\n  last = old_shape[-1]\n  if len(old_shape) == 4:\n    height_padding = -common_layers.shape_list(x)[1] % block_shape[0]\n    width_padding = -common_layers.shape_list(x)[2] % block_shape[1]\n    paddings = [[0, 0], [0, height_padding], [0, width_padding], [0, 0]]\n  elif len(old_shape) == 5:\n    height_padding = -common_layers.shape_list(x)[2] % block_shape[0]\n    width_padding = -common_layers.shape_list(x)[3] % block_shape[1]\n    paddings = [[0, 0], [0, 0], [0, height_padding], [0, width_padding], [0, 0]]\n\n  padded_x = tf.pad(x, paddings)\n  padded_shape = padded_x.get_shape().as_list()\n  padded_shape = padded_shape[:-1] + [last]\n  padded_x.set_shape(padded_shape)\n  return padded_x", "output": "Making sure x is a multiple of shape.\n\n  Args:\n    x: a [batch, heads, h, w, depth] or [batch, h, w, depth] tensor\n    block_shape: a 2-d list of integer shapes\n\n  Returns:\n    padded_x: a [batch, heads, h, w, depth] or [batch, h, w, depth] tensor", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert(model, feature_names = None, target = 'target', force_32bit_float = True):\n    \"\"\"\n    \n    \"\"\"\n    return _MLModel(_convert_tree_ensemble(model, feature_names, target, force_32bit_float = force_32bit_float))", "output": "Convert a trained XGBoost model to Core ML format.\n\n    Parameters\n    ----------\n    decision_tree : Booster\n        A trained XGboost tree model.\n\n    feature_names: [str] | str\n        Names of input features that will be exposed in the Core ML model\n        interface.\n\n        Can be set to one of the following:\n\n        - None for using the feature names from the model.\n        - List of names of the input features that should be exposed in the\n          interface to the Core ML model. These input features are in the same\n          order as the XGboost model.\n\n    target: str\n        Name of the output feature name exposed to the Core ML model.\n\n    force_32bit_float: bool\n        If True, then the resulting CoreML model will use 32 bit floats internally.\n\n    Returns\n    -------\n    model:MLModel\n        Returns an MLModel instance representing a Core ML model.\n\n    Examples\n    --------\n    .. sourcecode:: python\n\n\t\t# Convert it with default input and output names\n\t\t>>> import coremltools\n\t\t>>> coreml_model = coremltools.converters.xgboost.convert(model)\n\n\t\t# Saving the Core ML model to a file.\n\t\t>>> coremltools.save('my_model.mlmodel')", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def make_simple_equity_info(sids,\n                            start_date,\n                            end_date,\n                            symbols=None,\n                            names=None,\n                            exchange='TEST'):\n    \"\"\"\n    \n    \"\"\"\n    num_assets = len(sids)\n    if symbols is None:\n        symbols = list(ascii_uppercase[:num_assets])\n    else:\n        symbols = list(symbols)\n\n    if names is None:\n        names = [str(s) + \" INC.\" for s in symbols]\n\n    return pd.DataFrame(\n        {\n            'symbol': symbols,\n            'start_date': pd.to_datetime([start_date] * num_assets),\n            'end_date': pd.to_datetime([end_date] * num_assets),\n            'asset_name': list(names),\n            'exchange': exchange,\n        },\n        index=sids,\n        columns=(\n            'start_date',\n            'end_date',\n            'symbol',\n            'exchange',\n            'asset_name',\n        ),\n    )", "output": "Create a DataFrame representing assets that exist for the full duration\n    between `start_date` and `end_date`.\n\n    Parameters\n    ----------\n    sids : array-like of int\n    start_date : pd.Timestamp, optional\n    end_date : pd.Timestamp, optional\n    symbols : list, optional\n        Symbols to use for the assets.\n        If not provided, symbols are generated from the sequence 'A', 'B', ...\n    names : list, optional\n        Names to use for the assets.\n        If not provided, names are generated by adding \" INC.\" to each of the\n        symbols (which might also be auto-generated).\n    exchange : str, optional\n        The exchange name.\n\n    Returns\n    -------\n    info : pd.DataFrame\n        DataFrame representing newly-created assets.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def train_batch(self, dataloader):\n        \"\"\"\n        \n        \"\"\"\n        sum_losses = 0\n        len_losses = 0\n        for input_data, input_label in tqdm(dataloader):\n            data = gluon.utils.split_and_load(input_data, self.ctx, even_split=False)\n            label = gluon.utils.split_and_load(input_label, self.ctx, even_split=False)\n            batch_size = input_data.shape[0]\n            sum_losses, len_losses = self.train(data, label, batch_size)\n            sum_losses += sum_losses\n            len_losses += len_losses\n\n        return sum_losses, len_losses", "output": "Description : training for LipNet", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _params_extend(params, _ignore_name=False, **kwargs):\n    '''\n    \n\n    '''\n    # extend params value by optional zabbix API parameters\n    for key in kwargs:\n        if not key.startswith('_'):\n            params.setdefault(key, kwargs[key])\n\n    # ignore name parameter passed from Salt state module, use firstname or visible_name instead\n    if _ignore_name:\n        params.pop('name', None)\n        if 'firstname' in params:\n            params['name'] = params.pop('firstname')\n        elif 'visible_name' in params:\n            params['name'] = params.pop('visible_name')\n\n    return params", "output": "Extends the params dictionary by values from keyword arguments.\n\n    .. versionadded:: 2016.3.0\n\n    :param params: Dictionary with parameters for zabbix API.\n    :param _ignore_name: Salt State module is passing first line as 'name' parameter. If API uses optional parameter\n    'name' (for ex. host_create, user_create method), please use 'visible_name' or 'firstname' instead of 'name' to\n    not mess these values.\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n\n    :return: Extended params dictionary with parameters.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rlmb_base_sv2p():\n  \"\"\"\"\"\"\n  hparams = rlmb_base()\n  hparams.learning_rate_bump = 1.0\n  hparams.generative_model = \"next_frame_sv2p\"\n  hparams.generative_model_params = \"next_frame_sv2p_atari\"\n  return hparams", "output": "Base setting with sv2p as world model.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def compress_encoder_2d(x, hparams, name=None):\n  \"\"\"\n  \"\"\"\n  return compress_encoder(\n      x,\n      hparams,\n      strides=(2, 2),\n      kernel_size=(hparams.kernel_size, hparams.kernel_size),\n      name=name)", "output": "Encoder that compresses 2-D inputs by 2**num_compress_steps.\n\n  Args:\n    x: Tensor of shape [batch, height, width, channels].\n    hparams: HParams.\n    name: string, variable scope.\n\n  Returns:\n    Tensor of shape [batch, latent_length, hparams.hidden_size], where\n      latent_length is\n      hparams.num_latents * (height*width) / 2**(hparams.num_compress_steps).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shift_right(x, pad_value=None):\n  \"\"\"\"\"\"\n  if pad_value is None:\n    shifted_targets = tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])[:, :-1, :, :]\n  else:\n    shifted_targets = tf.concat([pad_value, x], axis=1)[:, :-1, :, :]\n  return shifted_targets", "output": "Shift the second dimension of x right by one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_valid_version():\n    '''\n    \n    '''\n\n    # Locate the full path to npm\n    npm_path = salt.utils.path.which('npm')\n\n    # pylint: disable=no-member\n    res = salt.modules.cmdmod.run('{npm} --version'.format(npm=npm_path), output_loglevel='quiet')\n    npm_version, valid_version = _LooseVersion(res), _LooseVersion('1.2')\n    # pylint: enable=no-member\n    if npm_version < valid_version:\n        raise CommandExecutionError(\n            '\\'npm\\' is not recent enough({0} < {1}). Please Upgrade.'.format(\n                npm_version, valid_version\n            )\n        )", "output": "Check the version of npm to ensure this module will work. Currently\n    npm must be at least version 1.2.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cbday_roll(self):\n        \"\"\"\n        \n        \"\"\"\n        cbday = CustomBusinessDay(n=self.n, normalize=False, **self.kwds)\n\n        if self._prefix.endswith('S'):\n            # MonthBegin\n            roll_func = cbday.rollforward\n        else:\n            # MonthEnd\n            roll_func = cbday.rollback\n        return roll_func", "output": "Define default roll function to be called in apply method.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def websocket_url_for_server_url(url):\n    ''' \n\n    '''\n    if url.startswith(\"http:\"):\n        reprotocoled = \"ws\" + url[4:]\n    elif url.startswith(\"https:\"):\n        reprotocoled = \"wss\" + url[5:]\n    else:\n        raise ValueError(\"URL has unknown protocol \" + url)\n    if reprotocoled.endswith(\"/\"):\n        return reprotocoled + \"ws\"\n    else:\n        return reprotocoled + \"/ws\"", "output": "Convert an ``http(s)`` URL for a Bokeh server websocket endpoint into\n    the appropriate ``ws(s)`` URL\n\n    Args:\n        url (str):\n            An ``http(s)`` URL\n\n    Returns:\n        str:\n            The corresponding ``ws(s)`` URL ending in ``/ws``\n\n    Raises:\n        ValueError:\n            If the input URL is not of the proper form.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_util_code_tolist(code, auto_fill=True):\n    \"\"\"\n    \"\"\"\n\n    if isinstance(code, str):\n        if auto_fill:\n            return [QA_util_code_tostr(code)]\n        else:\n            return [code]\n\n    elif isinstance(code, list):\n        if auto_fill:\n            return [QA_util_code_tostr(item) for item in code]\n        else:\n            return [item for item in code]", "output": "\u8f6c\u6362code==> list\n\n    Arguments:\n        code {[type]} -- [description]\n\n    Keyword Arguments:\n        auto_fill {bool} -- \u662f\u5426\u81ea\u52a8\u8865\u5168(\u4e00\u822c\u662f\u7528\u4e8e\u80a1\u7968/\u6307\u6570/etf\u7b496\u4f4d\u6570,\u671f\u8d27\u4e0d\u9002\u7528) (default: {True})\n\n    Returns:\n        [list] -- [description]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stopped(name,\n            kill=False,\n            remote_addr=None,\n            cert=None,\n            key=None,\n            verify_cert=True):\n    '''\n    \n    '''\n    ret = {\n        'name': name,\n        'kill': kill,\n\n        'remote_addr': remote_addr,\n        'cert': cert,\n        'key': key,\n        'verify_cert': verify_cert,\n\n        'changes': {}\n    }\n\n    try:\n        container = __salt__['lxd.container_get'](\n            name, remote_addr, cert, key, verify_cert, _raw=True\n        )\n    except CommandExecutionError as e:\n        return _error(ret, six.text_type(e))\n    except SaltInvocationError as e:\n        # Container not found\n        return _error(ret, 'Container \"{0}\" not found'.format(name))\n\n    if container.status_code == CONTAINER_STATUS_STOPPED:\n        return _success(ret, 'Container \"{0}\" is already stopped'.format(name))\n\n    if __opts__['test']:\n        ret['changes']['stopped'] = \\\n            'Would stop the container \"{0}\"'.format(name)\n        return _unchanged(ret, ret['changes']['stopped'])\n\n    container.stop(force=kill, wait=True)\n    ret['changes']['stopped'] = \\\n        'Stopped the container \"{0}\"'.format(name)\n    return _success(ret, ret['changes']['stopped'])", "output": "Ensure a LXD container is stopped, kill it if kill is true else stop it\n\n    name :\n        The name of the container to stop\n\n    kill :\n        kill if true\n\n    remote_addr :\n        An URL to a remote Server, you also have to give cert and key if you\n        provide remote_addr!\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Zertifikate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Wherever to verify the cert, this is by default True\n        but in the most cases you want to set it off as LXD\n        normaly uses self-signed certificates.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def enable_plugin(name, runas=None):\n    '''\n    \n    '''\n    if runas is None and not salt.utils.platform.is_windows():\n        runas = salt.utils.user.get_user()\n    cmd = [_get_rabbitmq_plugin(), 'enable', name]\n    ret = __salt__['cmd.run_all'](cmd, reset_system_locale=False, runas=runas, python_shell=False)\n    return _format_response(ret, 'Enabled')", "output": "Enable a RabbitMQ plugin via the rabbitmq-plugins command.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' rabbitmq.enable_plugin foo", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def write_pid_to_pidfile(pidfile_path):\n    \"\"\" \n\n        \"\"\"\n    open_flags = (os.O_CREAT | os.O_EXCL | os.O_WRONLY)\n    open_mode = 0o644\n    pidfile_fd = os.open(pidfile_path, open_flags, open_mode)\n    pidfile = os.fdopen(pidfile_fd, 'w')\n\n    # According to the FHS 2.3 section on PID files in /var/run:\n    #\n    #   The file must consist of the process identifier in\n    #   ASCII-encoded decimal, followed by a newline character. For\n    #   example, if crond was process number 25, /var/run/crond.pid\n    #   would contain three characters: two, five, and newline.\n\n    pid = os.getpid()\n    pidfile.write(\"%s\\n\" % pid)\n    pidfile.close()", "output": "Write the PID in the named PID file.\n\n        Get the numeric process ID (\u201cPID\u201d) of the current process\n        and write it to the named file as a line of text.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resolve_revision(self, dest, url, rev_options):\n        \"\"\"\n        \n        \"\"\"\n        rev = rev_options.arg_rev\n        sha, is_branch = self.get_revision_sha(dest, rev)\n\n        if sha is not None:\n            rev_options = rev_options.make_new(sha)\n            rev_options.branch_name = rev if is_branch else None\n\n            return rev_options\n\n        # Do not show a warning for the common case of something that has\n        # the form of a Git commit hash.\n        if not looks_like_hash(rev):\n            logger.warning(\n                \"Did not find branch or tag '%s', assuming revision or ref.\",\n                rev,\n            )\n\n        if not rev.startswith('refs/'):\n            return rev_options\n\n        # If it looks like a ref, we have to fetch it explicitly.\n        self.run_command(\n            ['fetch', '-q', url] + rev_options.to_args(),\n            cwd=dest,\n        )\n        # Change the revision to the SHA of the ref we fetched\n        sha = self.get_revision(dest, rev='FETCH_HEAD')\n        rev_options = rev_options.make_new(sha)\n\n        return rev_options", "output": "Resolve a revision to a new RevOptions object with the SHA1 of the\n        branch, tag, or ref if found.\n\n        Args:\n          rev_options: a RevOptions object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def current_changed(self, index):\r\n        \"\"\"\"\"\"\r\n#        count = self.get_stack_count()\r\n#        for btn in (self.filelist_btn, self.previous_btn, self.next_btn):\r\n#            btn.setEnabled(count > 1)\r\n\r\n        editor = self.get_current_editor()\r\n        if editor.lsp_ready and not editor.document_opened:\r\n            editor.document_did_open()\r\n        if index != -1:\r\n            editor.setFocus()\r\n            logger.debug(\"Set focus to: %s\" % editor.filename)\r\n        else:\r\n            self.reset_statusbar.emit()\r\n        self.opened_files_list_changed.emit()\r\n\r\n        self.stack_history.refresh()\r\n        self.stack_history.remove_and_append(index)\r\n\r\n        # Needed to avoid an error generated after moving/renaming\r\n        # files outside Spyder while in debug mode.\r\n        # See issue 8749.\r\n        try:\r\n            logger.debug(\"Current changed: %d - %s\" %\r\n                         (index, self.data[index].editor.filename))\r\n        except IndexError:\r\n            pass\r\n\r\n        self.update_plugin_title.emit()\r\n        if editor is not None:\r\n            # Needed in order to handle the close of files open in a directory\r\n            # that has been renamed. See issue 5157\r\n            try:\r\n                self.current_file_changed.emit(self.data[index].filename,\r\n                                               editor.get_position('cursor'))\r\n            except IndexError:\r\n                pass", "output": "Stack index has changed", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert_activation(net, node, module, builder):\n    \"\"\"\n    \"\"\"\n    input_name, output_name = _get_input_output_name(net, node)\n    name = node['name']\n    mx_non_linearity = _get_attrs(node)['act_type']\n    #TODO add SCALED_TANH, SOFTPLUS, SOFTSIGN, SIGMOID_HARD, LEAKYRELU, PRELU, ELU, PARAMETRICSOFTPLUS, THRESHOLDEDRELU, LINEAR\n    if mx_non_linearity == 'relu':\n        non_linearity = 'RELU'\n    elif mx_non_linearity == 'tanh':\n        non_linearity = 'TANH'\n    elif mx_non_linearity == 'sigmoid':\n        non_linearity = 'SIGMOID'\n    else:\n        raise TypeError('Unknown activation type %s' % mx_non_linearity)\n    builder.add_activation(name = name,\n                           non_linearity = non_linearity,\n                           input_name = input_name,\n                           output_name = output_name)", "output": "Convert an activation layer from mxnet to coreml.\n\n    Parameters\n    ----------\n    network: net\n        A mxnet network object.\n\n    layer: node\n        Node to convert.\n\n    module: module\n        An module for MXNet\n\n    builder: NeuralNetworkBuilder\n        A neural network builder object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_hash():\n    '''\n    \n    '''\n    # Using bitmask to emulate rollover behavior of C unsigned 32 bit int\n    bitmask = 0xffffffff\n    h = 0\n\n    for i in bytearray(salt.utils.stringutils.to_bytes(__grains__['id'])):\n        h = (h + i) & bitmask\n        h = (h + (h << 10)) & bitmask\n        h = (h ^ (h >> 6)) & bitmask\n\n    h = (h + (h << 3)) & bitmask\n    h = (h ^ (h >> 11)) & bitmask\n    h = (h + (h << 15)) & bitmask\n\n    return (h & (_HASH_SIZE - 1)) & bitmask", "output": "Jenkins One-At-A-Time Hash Function\n    More Info: http://en.wikipedia.org/wiki/Jenkins_hash_function#one-at-a-time", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def entity_from_dict(self, entity_dict):\n        \"\"\"\n        \"\"\"\n        entity = entity_dict[\"entity\"]\n        role = entity_dict[\"role\"]\n\n        if entity == \"allUsers\":\n            entity = self.all()\n\n        elif entity == \"allAuthenticatedUsers\":\n            entity = self.all_authenticated()\n\n        elif \"-\" in entity:\n            entity_type, identifier = entity.split(\"-\", 1)\n            entity = self.entity(entity_type=entity_type, identifier=identifier)\n\n        if not isinstance(entity, _ACLEntity):\n            raise ValueError(\"Invalid dictionary: %s\" % entity_dict)\n\n        entity.grant(role)\n        return entity", "output": "Build an _ACLEntity object from a dictionary of data.\n\n        An entity is a mutable object that represents a list of roles\n        belonging to either a user or group or the special types for all\n        users and all authenticated users.\n\n        :type entity_dict: dict\n        :param entity_dict: Dictionary full of data from an ACL lookup.\n\n        :rtype: :class:`_ACLEntity`\n        :returns: An Entity constructed from the dictionary.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def replace_namespaced_ingress(self, name, namespace, body, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.replace_namespaced_ingress_with_http_info(name, namespace, body, **kwargs)\n        else:\n            (data) = self.replace_namespaced_ingress_with_http_info(name, namespace, body, **kwargs)\n            return data", "output": "replace the specified Ingress\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.replace_namespaced_ingress(name, namespace, body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str name: name of the Ingress (required)\n        :param str namespace: object name and auth scope, such as for teams and projects (required)\n        :param NetworkingV1beta1Ingress body: (required)\n        :param str pretty: If 'true', then the output is pretty printed.\n        :param str dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed\n        :param str field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.\n        :return: NetworkingV1beta1Ingress\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def addSibling(self, elem):\n        \"\"\" \"\"\"\n        if elem is None: elem__o = None\n        else: elem__o = elem._o\n        ret = libxml2mod.xmlAddSibling(self._o, elem__o)\n        if ret is None:raise treeError('xmlAddSibling() failed')\n        __tmp = xmlNode(_obj=ret)\n        return __tmp", "output": "Add a new element @elem to the list of siblings of @cur\n          merging adjacent TEXT nodes (@elem may be freed) If the new\n          element was already inserted in a document it is first\n           unlinked from its existing context.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_fetch_get_macroindex_list(ip=None, port=None):\n    \"\"\"\n\n\n    \"\"\"\n    global extension_market_list\n    extension_market_list = QA_fetch_get_extensionmarket_list(\n    ) if extension_market_list is None else extension_market_list\n\n    return extension_market_list.query('market==38')", "output": "\u5b8f\u89c2\u6307\u6807\u5217\u8868\n\n    Keyword Arguments:\n        ip {[type]} -- [description] (default: {None})\n        port {[type]} -- [description] (default: {None})\n\n        38        10      \u5b8f\u89c2\u6307\u6807         HG", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def winsorize(row, min_percentile, max_percentile):\n    \"\"\"\n    \n    \"\"\"\n    a = row.copy()\n    nan_count = isnan(row).sum()\n    nonnan_count = a.size - nan_count\n\n    # NOTE: argsort() sorts nans to the end of the array.\n    idx = a.argsort()\n\n    # Set values at indices below the min percentile to the value of the entry\n    # at the cutoff.\n    if min_percentile > 0:\n        lower_cutoff = int(min_percentile * nonnan_count)\n        a[idx[:lower_cutoff]] = a[idx[lower_cutoff]]\n\n    # Set values at indices above the max percentile to the value of the entry\n    # at the cutoff.\n    if max_percentile < 1:\n        upper_cutoff = int(ceil(nonnan_count * max_percentile))\n        # if max_percentile is close to 1, then upper_cutoff might not\n        # remove any values.\n        if upper_cutoff < nonnan_count:\n            start_of_nans = (-nan_count) if nan_count else None\n            a[idx[upper_cutoff:start_of_nans]] = a[idx[upper_cutoff - 1]]\n\n    return a", "output": "This implementation is based on scipy.stats.mstats.winsorize", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_banks_to_remove(redis_server, bank, path=''):\n    '''\n    \n    '''\n    current_path = bank if not path else '{path}/{bank}'.format(path=path, bank=bank)\n    bank_paths_to_remove = [current_path]\n    # as you got here, you'll be removed\n\n    bank_key = _get_bank_redis_key(current_path)\n    child_banks = redis_server.smembers(bank_key)\n    if not child_banks:\n        return bank_paths_to_remove  # this bank does not have any child banks so we stop here\n    for child_bank in child_banks:\n        bank_paths_to_remove.extend(_get_banks_to_remove(redis_server, child_bank, path=current_path))\n        # go one more level deeper\n        # and also remove the children of this child bank (if any)\n    return bank_paths_to_remove", "output": "A simple tree tarversal algorithm that builds the list of banks to remove,\n    starting from an arbitrary node in the tree.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_pillar_minions(self, expr, delimiter, greedy):\n        '''\n        \n        '''\n        return self._check_cache_minions(expr, delimiter, greedy, 'pillar')", "output": "Return the minions found by looking via pillar", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init_from_class_batches(self, class_batches, num_shards=None):\n    \"\"\"\n    \"\"\"\n    shards_for_submissions = {}\n    shard_idx = 0\n    for idx, (batch_id, batch_val) in enumerate(iteritems(class_batches)):\n      work_id = DEFENSE_WORK_ID_PATTERN.format(idx)\n      submission_id = batch_val['submission_id']\n      shard_id = None\n      if num_shards:\n        shard_id = shards_for_submissions.get(submission_id)\n        if shard_id is None:\n          shard_id = shard_idx % num_shards\n          shards_for_submissions[submission_id] = shard_id\n          shard_idx += 1\n      # Note: defense also might have following fields populated by worker:\n      # stat_correct, stat_error, stat_target_class, stat_num_images\n      self.work[work_id] = {\n          'claimed_worker_id': None,\n          'claimed_worker_start_time': None,\n          'is_completed': False,\n          'error': None,\n          'elapsed_time': None,\n          'submission_id': submission_id,\n          'shard_id': shard_id,\n          'output_classification_batch_id': batch_id,\n      }", "output": "Initializes work pieces from classification batches.\n\n    Args:\n      class_batches: dict with classification batches, could be obtained\n        as ClassificationBatches.data\n      num_shards: number of shards to split data into,\n        if None then no sharding is done.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def copy2(src, dst):\n    \"\"\"\n\n    \"\"\"\n    if os.path.isdir(dst):\n        dst = os.path.join(dst, os.path.basename(src))\n    copyfile(src, dst)\n    copystat(src, dst)", "output": "Copy data and all stat info (\"cp -p src dst\").\n\n    The destination may be a directory.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset(self):\n        \"\"\"\n        \"\"\"\n        info = self._env.reset()[self.brain_name]\n        n_agents = len(info.agents)\n        self._check_agents(n_agents)\n        self.game_over = False\n\n        if not self._multiagent:\n            obs, reward, done, info = self._single_step(info)\n        else:\n            obs, reward, done, info = self._multi_step(info)\n        return obs", "output": "Resets the state of the environment and returns an initial observation.\n        In the case of multi-agent environments, this is a list.\n        Returns: observation (object/list): the initial observation of the\n            space.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _authenticate(secrets_file):\n    \"\"\"\n    \"\"\"\n    flow = oauthclient.flow_from_clientsecrets(\n        secrets_file,\n        scope=OAUTH_SCOPE,\n        message=('Failed to initialized OAuth 2.0 flow with secrets '\n                 'file: %s' % secrets_file))\n    storage = oauthfile.Storage(OAUTH_CREDENTIALS_FILE)\n    credentials = storage.get()\n    if credentials is None or credentials.invalid:\n        credentials = oauthtools.run_flow(flow, storage, oauthtools.argparser.parse_args(args=[]))\n    http = httplib2.Http()\n    return credentials.authorize(http)", "output": "Runs the OAuth 2.0 installed application flow.\n\n    Returns:\n      An authorized httplib2.Http instance.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _ConsumeInteger(tokenizer, is_signed=False, is_long=False):\n  \"\"\"\n  \"\"\"\n  try:\n    result = ParseInteger(tokenizer.token, is_signed=is_signed, is_long=is_long)\n  except ValueError as e:\n    raise tokenizer.ParseError(str(e))\n  tokenizer.NextToken()\n  return result", "output": "Consumes an integer number from tokenizer.\n\n  Args:\n    tokenizer: A tokenizer used to parse the number.\n    is_signed: True if a signed integer must be parsed.\n    is_long: True if a long integer must be parsed.\n\n  Returns:\n    The integer parsed.\n\n  Raises:\n    ParseError: If an integer with given characteristics couldn't be consumed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def eval_valid(self, feval=None):\n        \"\"\"\n        \"\"\"\n        return [item for i in range_(1, self.__num_dataset)\n                for item in self.__inner_eval(self.name_valid_sets[i - 1], i, feval)]", "output": "Evaluate for validation data.\n\n        Parameters\n        ----------\n        feval : callable or None, optional (default=None)\n            Customized evaluation function.\n            Should accept two parameters: preds, train_data,\n            and return (eval_name, eval_result, is_higher_better) or list of such tuples.\n            For multi-class task, the preds is group by class_id first, then group by row_id.\n            If you want to get i-th row preds in j-th class, the access way is preds[j * num_data + i].\n\n        Returns\n        -------\n        result : list\n            List with evaluation results.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def schema(self):\n        \"\"\"\n        \"\"\"\n        prop = self._properties.get(\"schema\", {})\n        return [SchemaField.from_api_repr(field) for field in prop.get(\"fields\", [])]", "output": "List[:class:`~google.cloud.bigquery.schema.SchemaField`]: The schema\n        for the data.\n\n        See\n        https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs#configuration.query.tableDefinitions.(key).schema\n        https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#externalDataConfiguration.schema", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cmd(command, *args, **kwargs):\n    '''\n    \n    '''\n    for k in list(kwargs):\n        if k.startswith('__pub_'):\n            kwargs.pop(k)\n    local_command = '.'.join(['nxos', command])\n    log.info('local command: %s', local_command)\n    if local_command not in __salt__:\n        return False\n    return __salt__[local_command](*args, **kwargs)", "output": "NOTE: This function is preserved for backwards compatibilty.  This allows\n    commands to be executed using either of the following syntactic forms.\n\n    salt '*' nxos.cmd <function>\n\n    or\n\n    salt '*' nxos.<function>\n\n    command\n        function from `salt.modules.nxos` to run\n\n    args\n        positional args to pass to `command` function\n\n    kwargs\n        key word arguments to pass to `command` function\n\n    .. code-block:: bash\n\n        salt '*' nxos.cmd sendline 'show ver'\n        salt '*' nxos.cmd show_run\n        salt '*' nxos.cmd check_password username=admin password='$5$lkjsdfoi$blahblahblah' encrypted=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mode_number(self, rows: List[Row], column: NumberColumn) -> Number:\n        \"\"\"\n        \n        \"\"\"\n        most_frequent_list = self._get_most_frequent_values(rows, column)\n        if not most_frequent_list:\n            return 0.0  # type: ignore\n        most_frequent_value = most_frequent_list[0]\n        if not isinstance(most_frequent_value, Number):\n            raise ExecutionError(f\"Invalid valus for mode_number: {most_frequent_value}\")\n        return most_frequent_value", "output": "Takes a list of rows and a column and returns the most frequent value under\n        that column in those rows.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def readerForMemory(buffer, size, URL, encoding, options):\n    \"\"\" \"\"\"\n    ret = libxml2mod.xmlReaderForMemory(buffer, size, URL, encoding, options)\n    if ret is None:raise treeError('xmlReaderForMemory() failed')\n    return xmlTextReader(_obj=ret)", "output": "Create an xmltextReader for an XML in-memory document. The\n      parsing flags @options are a combination of xmlParserOption.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _crop_pad_default(x, size, padding_mode='reflection', row_pct:uniform = 0.5, col_pct:uniform = 0.5):\n    \"\"\n    padding_mode = _pad_mode_convert[padding_mode]\n    size = tis2hw(size)\n    if x.shape[1:] == torch.Size(size): return x\n    rows,cols = size\n    row_pct,col_pct = _minus_epsilon(row_pct,col_pct)\n    if x.size(1)<rows or x.size(2)<cols:\n        row_pad = max((rows-x.size(1)+1)//2, 0)\n        col_pad = max((cols-x.size(2)+1)//2, 0)\n        x = F.pad(x[None], (col_pad,col_pad,row_pad,row_pad), mode=padding_mode)[0]\n    row = int((x.size(1)-rows+1)*row_pct)\n    col = int((x.size(2)-cols+1)*col_pct)\n    x = x[:, row:row+rows, col:col+cols]\n    return x.contiguous()", "output": "Crop and pad tfm - `row_pct`,`col_pct` sets focal point.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def legal_graph(graph):\n    '''\n    '''\n\n    descriptor = graph.extract_descriptor()\n    skips = descriptor.skip_connections\n    if len(skips) != len(set(skips)):\n        return False\n    return True", "output": "judge if a graph is legal or not.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_request(name=None):\n    '''\n    \n    '''\n    notify_path = os.path.join(__opts__['cachedir'], 'req_state.p')\n    serial = salt.payload.Serial(__opts__)\n    if os.path.isfile(notify_path):\n        with salt.utils.files.fopen(notify_path, 'rb') as fp_:\n            req = serial.load(fp_)\n        if name:\n            return req[name]\n        return req\n    return {}", "output": ".. versionadded:: 2015.5.0\n\n    Return the state request information, if any\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' state.check_request", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _is_intrinsic_dict(self, input):\n        \"\"\"\n        \n        \"\"\"\n        # All intrinsic functions are dictionaries with just one key\n        return isinstance(input, dict) \\\n            and len(input) == 1 \\\n            and list(input.keys())[0] in self.supported_intrinsics", "output": "Can the input represent an intrinsic function in it?\n\n        :param input: Object to be checked\n        :return: True, if the input contains a supported intrinsic function.  False otherwise", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _reverse_op(name, doc=\"binary operator\"):\n    \"\"\" \n    \"\"\"\n    def _(self, other):\n        jother = _create_column_from_literal(other)\n        jc = getattr(jother, name)(self._jc)\n        return Column(jc)\n    _.__doc__ = doc\n    return _", "output": "Create a method for binary operator (this object is on right side)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sample_from_discretized_mix_logistic(pred, seed=None):\n  \"\"\"\n  \"\"\"\n\n  logits, locs, log_scales, coeffs = split_to_discretized_mix_logistic_params(\n      pred)\n\n  # Sample mixture indicator given logits using the gumbel max trick.\n  num_mixtures = shape_list(logits)[-1]\n  gumbel_noise = -tf.log(-tf.log(\n      tf.random_uniform(\n          tf.shape(logits), minval=1e-5, maxval=1. - 1e-5, seed=seed)))\n  sel = tf.one_hot(\n      tf.argmax(logits + gumbel_noise, -1),\n      depth=num_mixtures,\n      dtype=tf.float32)\n\n  # Select mixture component's parameters.\n  sel = tf.expand_dims(sel, -1)\n  locs = tf.reduce_sum(locs * sel, 3)\n  log_scales = tf.reduce_sum(log_scales * sel, 3)\n  coeffs = tf.reduce_sum(coeffs * sel, 3)\n\n  # Sample from 3-D logistic & clip to interval. Note we don't round to the\n  # nearest 8-bit value when sampling.\n  uniform_noise = tf.random_uniform(\n      tf.shape(locs), minval=1e-5, maxval=1. - 1e-5, seed=seed)\n  logistic_noise = tf.log(uniform_noise) - tf.log1p(-uniform_noise)\n  x = locs + tf.exp(log_scales) * logistic_noise\n  x0 = x[..., 0]\n  x1 = x[..., 1] + coeffs[..., 0] * x0\n  x2 = x[..., 2] + coeffs[..., 1] * x0 + coeffs[..., 2] * x1\n  x = tf.stack([x0, x1, x2], axis=-1)\n  x = tf.clip_by_value(x, -1., 1.)\n  return x", "output": "Sampling from a discretized mixture of logistics.\n\n  Args:\n    pred: A [batch, height, width, num_mixtures*10] tensor of floats\n      comprising one unconstrained mixture probability, three means\n      (one per channel), three standard deviations (one per channel),\n      and three coefficients which linearly parameterize dependence across\n      channels.\n    seed: Random seed.\n\n  Returns:\n    A tensor of shape [batch, height, width, 3] with real intensities scaled\n    between -1 and 1.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show(commands,\n         raw_text=True,\n         **kwargs):\n    '''\n    \n    '''\n    ret = []\n    if raw_text:\n        method = 'cli_ascii'\n        key = 'msg'\n    else:\n        method = 'cli'\n        key = 'body'\n    response_list = _cli_command(commands,\n                                 method=method,\n                                 **kwargs)\n    ret = [response[key] for response in response_list if response]\n    return ret", "output": "Execute one or more show (non-configuration) commands.\n\n    commands\n        The commands to be executed.\n\n    raw_text: ``True``\n        Whether to return raw text or structured data.\n\n    transport: ``https``\n        Specifies the type of connection transport to use. Valid values for the\n        connection are ``http``, and  ``https``.\n\n    host: ``localhost``\n        The IP address or DNS host name of the connection device.\n\n    username: ``admin``\n        The username to pass to the device to authenticate the NX-API connection.\n\n    password\n        The password to pass to the device to authenticate the NX-API connection.\n\n    port\n        The TCP port of the endpoint for the NX-API connection. If this keyword is\n        not specified, the default value is automatically determined by the\n        transport type (``80`` for ``http``, or ``443`` for ``https``).\n\n    timeout: ``60``\n        Time in seconds to wait for the device to respond. Default: 60 seconds.\n\n    verify: ``True``\n        Either a boolean, in which case it controls whether we verify the NX-API\n        TLS certificate, or a string, in which case it must be a path to a CA bundle\n        to use. Defaults to ``True``.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-call --local nxos_api.show 'show version'\n        salt '*' nxos_api.show 'show bgp sessions' 'show processes' raw_text=False\n        salt 'regular-minion' nxos_api.show 'show interfaces' host=sw01.example.com username=test password=test", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def batch_fn(dataset, training, shapes, target_names,\n             batch_size=32, eval_batch_size=32, bucket_batch_length=32,\n             bucket_max_length=256, bucket_min_length=8,\n             bucket_length_step=1.1, buckets=None):\n  \"\"\"\"\"\"\n  del target_names\n  # If bucketing is not specified, check if target shapes are variable.\n  cur_batch_size = batch_size if training else eval_batch_size\n  if buckets is None:\n    variable_target_shapes = False\n    target_shape = shapes[1]\n    for dim in target_shape:\n      if dim is None:\n        variable_target_shapes = True\n    tf.logging.info(\"Heuristically setting bucketing to %s based on shapes \"\n                    \"of target tensors.\" % variable_target_shapes)\n    if variable_target_shapes:\n      batch_size_per_token = cur_batch_size * bucket_batch_length\n      scheme = data_reader.batching_scheme(batch_size_per_token,\n                                           bucket_max_length,\n                                           bucket_min_length,\n                                           bucket_length_step,\n                                           drop_long_sequences=training)\n      buckets = (scheme[\"boundaries\"], scheme[\"batch_sizes\"])\n\n  if buckets:\n    tf.logging.info(\"Bucketing with buckets %s.\" % str(buckets))\n    def example_length(_, target):\n      return tf.shape(target)[0]\n    boundaries, batch_sizes = buckets\n    dataset = dataset.apply(tf.data.experimental.bucket_by_sequence_length(\n        example_length, boundaries, batch_sizes))\n  else:\n    dataset = dataset.padded_batch(cur_batch_size, shapes)\n  return dataset", "output": "Batching function.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def keypoint_vflip(kp, rows, cols):\n    \"\"\"\"\"\"\n    x, y, angle, scale = kp\n    c = math.cos(angle)\n    s = math.sin(angle)\n    angle = math.atan2(-s, c)\n    return [x, (rows - 1) - y, angle, scale]", "output": "Flip a keypoint vertically around the x-axis.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_django_admin(bin_env):\n    '''\n    \n    '''\n    if not bin_env:\n        if salt.utils.path.which('django-admin.py'):\n            return 'django-admin.py'\n        elif salt.utils.path.which('django-admin'):\n            return 'django-admin'\n        else:\n            raise salt.exceptions.CommandExecutionError(\n                    \"django-admin or django-admin.py not found on PATH\")\n\n    # try to get django-admin.py bin from env\n    if os.path.exists(os.path.join(bin_env, 'bin', 'django-admin.py')):\n        return os.path.join(bin_env, 'bin', 'django-admin.py')\n    return bin_env", "output": "Return the django admin", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show_bokehjs(bokehjs_action, develop=False):\n    ''' \n\n    '''\n    print()\n    if develop:\n        print(\"Installed Bokeh for DEVELOPMENT:\")\n    else:\n        print(\"Installed Bokeh:\")\n    if bokehjs_action in ['built', 'installed']:\n        print(\"  - using %s built BokehJS from bokehjs/build\\n\" % (bright(yellow(\"NEWLY\")) if bokehjs_action=='built' else bright(yellow(\"PREVIOUSLY\"))))\n    else:\n        print(\"  - using %s BokehJS, located in 'bokeh.server.static'\\n\" % bright(yellow(\"PACKAGED\")))\n    print()", "output": "Print a useful report after setuptools output describing where and how\n    BokehJS is installed.\n\n    Args:\n        bokehjs_action (str) : one of 'built', 'installed', or 'packaged'\n            how (or if) BokehJS was installed into the python source tree\n\n        develop (bool, optional) :\n            whether the command was for \"develop\" mode (default: False)\n\n    Returns:\n        None", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def xmoe_tr_dense_2k():\n  \"\"\"\n  \"\"\"\n  hparams = mtf_transformer2.mtf_bitransformer_base()\n  hparams.encoder_layers = [\"self_att\", \"drd\"] * 4\n  hparams.decoder_layers = [\"self_att\", \"enc_att\", \"drd\"] * 4\n  hparams.batch_size = 64\n  hparams.shared_embedding_and_softmax_weights = True\n  hparams.mesh_shape = \"batch:8\"\n  return hparams", "output": "Series of architectural experiments on Translation.\n\n  # run on 8-core setup\n\n  119M params, einsum=0.95e13\n\n  Returns:\n    a hparams", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def explore(self, title=None):\n        \"\"\"\n        \n        \"\"\"\n\n        import sys\n        import os\n\n        if sys.platform != 'darwin' and sys.platform != 'linux2' and sys.platform != 'linux':\n            raise NotImplementedError('Visualization is currently supported only on macOS and Linux.')\n\n        path_to_client = _get_client_app_path()\n\n        if title is None:\n            title = \"\"\n        self.__proxy__.explore(path_to_client, title)", "output": "Explore the SFrame in an interactive GUI. Opens a new app window.\n\n        Parameters\n        ----------\n        title : str\n            The plot title to show for the resulting visualization. Defaults to None.\n            If the title is None, a default title will be provided.\n\n        Returns\n        -------\n        None\n\n        Examples\n        --------\n        Suppose 'sf' is an SFrame, we can view it using:\n\n        >>> sf.explore()\n\n        To override the default plot title and axis labels:\n\n        >>> sf.explore(title=\"My Plot Title\")", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_datetime64_ns_dtype(arr_or_dtype):\n    \"\"\"\n    \n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    try:\n        tipo = _get_dtype(arr_or_dtype)\n    except TypeError:\n        if is_datetime64tz_dtype(arr_or_dtype):\n            tipo = _get_dtype(arr_or_dtype.dtype)\n        else:\n            return False\n    return tipo == _NS_DTYPE or getattr(tipo, 'base', None) == _NS_DTYPE", "output": "Check whether the provided array or dtype is of the datetime64[ns] dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the datetime64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_ns_dtype(str)\n    False\n    >>> is_datetime64_ns_dtype(int)\n    False\n    >>> is_datetime64_ns_dtype(np.datetime64)  # no unit\n    False\n    >>> is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_ns_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_ns_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=np.datetime64))  # no unit\n    False\n    >>> is_datetime64_ns_dtype(np.array([],\n                               dtype=\"datetime64[ps]\"))  # wrong unit\n    False\n    >>> is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3],\n                               dtype=np.datetime64))  # has 'ns' unit\n    True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def make_sparse(arr, kind='block', fill_value=None, dtype=None, copy=False):\n    \"\"\"\n    \n    \"\"\"\n\n    arr = _sanitize_values(arr)\n\n    if arr.ndim > 1:\n        raise TypeError(\"expected dimension <= 1 data\")\n\n    if fill_value is None:\n        fill_value = na_value_for_dtype(arr.dtype)\n\n    if isna(fill_value):\n        mask = notna(arr)\n    else:\n        # cast to object comparison to be safe\n        if is_string_dtype(arr):\n            arr = arr.astype(object)\n\n        if is_object_dtype(arr.dtype):\n            # element-wise equality check method in numpy doesn't treat\n            # each element type, eg. 0, 0.0, and False are treated as\n            # same. So we have to check the both of its type and value.\n            mask = splib.make_mask_object_ndarray(arr, fill_value)\n        else:\n            mask = arr != fill_value\n\n    length = len(arr)\n    if length != len(mask):\n        # the arr is a SparseArray\n        indices = mask.sp_index.indices\n    else:\n        indices = mask.nonzero()[0].astype(np.int32)\n\n    index = _make_index(length, indices, kind)\n    sparsified_values = arr[mask]\n    if dtype is not None:\n        sparsified_values = astype_nansafe(sparsified_values, dtype=dtype)\n    # TODO: copy\n    return sparsified_values, index, fill_value", "output": "Convert ndarray to sparse format\n\n    Parameters\n    ----------\n    arr : ndarray\n    kind : {'block', 'integer'}\n    fill_value : NaN or another value\n    dtype : np.dtype, optional\n    copy : bool, default False\n\n    Returns\n    -------\n    (sparse_values, index, fill_value) : (ndarray, SparseIndex, Scalar)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fixed_crop(src, x0, y0, w, h, size=None, interpolation=cv2.INTER_CUBIC):\n    \"\"\"\"\"\"\n    out = mx.nd.crop(src, begin=(y0, x0, 0), end=(y0+h, x0+w, int(src.shape[2])))\n    if size is not None and (w, h) != size:\n        out = resize(out, size, interpolation=interpolation)\n    return out", "output": "Crop src at fixed location, and (optionally) resize it to size", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def debug_print(*message):\r\n    \"\"\"\"\"\"\r\n    warnings.warn(\"debug_print is deprecated; use the logging module instead.\")\r\n    if get_debug_level():\r\n        ss = STDOUT\r\n        if PY3:\r\n            # This is needed after restarting and using debug_print\r\n            for m in message:\r\n                ss.buffer.write(str(m).encode('utf-8'))\r\n            print('', file=ss)\r\n        else:\r\n            print(*message, file=ss)", "output": "Output debug messages to stdout", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def denyMethodWithConditions(self, verb, resource, conditions):\n        \"\"\"\"\"\"\n        self._addMethod(\"Deny\", verb, resource, conditions)", "output": "Adds an API Gateway method (Http verb + Resource path) to the list of denied\n        methods and includes a condition for the policy statement. More on AWS policy\n        conditions here: http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#Condition", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _config_list(conf_tuples=None, only_net=False, **kwargs):\n    '''\n    \n\n    '''\n    # explicit cast\n    only_net = bool(only_net)\n    if not conf_tuples:\n        conf_tuples = []\n    kwargs = copy.deepcopy(kwargs)\n    ret = []\n    if not only_net:\n        default_data = _get_lxc_default_data(**kwargs)\n        for k, val in six.iteritems(default_data):\n            ret.append({k: val})\n    net_datas = _network_conf(conf_tuples=conf_tuples, **kwargs)\n    ret.extend(net_datas)\n    return ret", "output": "Return a list of dicts from the salt level configurations\n\n    conf_tuples\n        _LXCConfig compatible list of entries which can contain\n\n            - string line\n            - tuple (lxc config param,value)\n            - dict of one entry: {lxc config param: value)\n\n    only_net\n        by default we add to the tuples a reflection of both\n        the real config if avalaible and a certain amount of\n        default values like the cpu parameters, the memory\n        and etc.\n        On the other hand, we also no matter the case reflect\n        the network configuration computed from the actual config if\n        available and given values.\n        if no_default_loads is set, we will only\n        reflect the network configuration back to the conf tuples\n        list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def validNormalizeAttributeValue(self, elem, name, value):\n        \"\"\" \"\"\"\n        if elem is None: elem__o = None\n        else: elem__o = elem._o\n        ret = libxml2mod.xmlValidNormalizeAttributeValue(self._o, elem__o, name, value)\n        return ret", "output": "Does the validation related extra step of the normalization\n          of attribute values:  If the declared value is not CDATA,\n          then the XML processor must further process the normalized\n          attribute value by discarding any leading and trailing\n          space (#x20) characters, and by replacing sequences of\n           space (#x20) characters by single space (#x20) character.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def template_click_option(include_build=True):\n    \"\"\"\n    \n    \"\"\"\n    return click.option('--template', '-t',\n                        default=_TEMPLATE_OPTION_DEFAULT_VALUE,\n                        type=click.Path(),\n                        envvar=\"SAM_TEMPLATE_FILE\",\n                        callback=partial(get_or_default_template_file_name, include_build=include_build),\n                        show_default=True,\n                        help=\"AWS SAM template file\")", "output": "Click Option for template option", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def has_value(key, value=None):\n    '''\n    \n    '''\n    if not isinstance(key, six.string_types):\n        log.debug('%s: \\'key\\' argument is not a string type: \\'%s\\'', __name__, key)\n        return False\n    try:\n        cur_val = os.environ[key]\n        if value is not None:\n            if cur_val == value:\n                return True\n            else:\n                return False\n    except KeyError:\n        return False\n    return True", "output": "Determine whether the key exists in the current salt process\n    environment dictionary. Optionally compare the current value\n    of the environment against the supplied value string.\n\n    key\n        Must be a string. Used as key for environment lookup.\n\n    value:\n        Optional. If key exists in the environment, compare the\n        current value with this value. Return True if they are equal.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' environ.has_value foo", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def maybe_infer_tz(tz, inferred_tz):\n    \"\"\"\n    \n    \"\"\"\n    if tz is None:\n        tz = inferred_tz\n    elif inferred_tz is None:\n        pass\n    elif not timezones.tz_compare(tz, inferred_tz):\n        raise TypeError('data is already tz-aware {inferred_tz}, unable to '\n                        'set specified tz: {tz}'\n                        .format(inferred_tz=inferred_tz, tz=tz))\n    return tz", "output": "If a timezone is inferred from data, check that it is compatible with\n    the user-provided timezone, if any.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n    inferred_tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if both timezones are present but do not match", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_response(self):\n        \"\"\"\n        \n        \"\"\"\n        user_input = self.usr_input.get()\n        self.usr_input.delete(0, tk.END)\n\n        response = self.chatbot.get_response(user_input)\n\n        self.conversation['state'] = 'normal'\n        self.conversation.insert(\n            tk.END, \"Human: \" + user_input + \"\\n\" + \"ChatBot: \" + str(response.text) + \"\\n\"\n        )\n        self.conversation['state'] = 'disabled'\n\n        time.sleep(0.5)", "output": "Get a response from the chatbot and display it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove_datastore(datastore, service_instance=None):\n    '''\n    \n    '''\n    log.trace('Removing datastore \\'%s\\'', datastore)\n    target = _get_proxy_target(service_instance)\n    datastores = salt.utils.vmware.get_datastores(\n        service_instance,\n        reference=target,\n        datastore_names=[datastore])\n    if not datastores:\n        raise VMwareObjectRetrievalError(\n            'Datastore \\'{0}\\' was not found'.format(datastore))\n    if len(datastores) > 1:\n        raise VMwareObjectRetrievalError(\n            'Multiple datastores \\'{0}\\' were found'.format(datastore))\n    salt.utils.vmware.remove_datastore(service_instance, datastores[0])\n    return True", "output": "Removes a datastore. If multiple datastores an error is raised.\n\n    datastore\n        Datastore name\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter/ESXi host.\n        Default is None.\n\n    .. code-block:: bash\n\n        salt '*' vsphere.remove_datastore ds_name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def copy_value(self, orig_name, new_name):\r\n        \"\"\"\"\"\"\r\n        self.shellwidget.copy_value(orig_name, new_name)\r\n        self.shellwidget.refresh_namespacebrowser()", "output": "Copy value", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def restore(self):\n        \"\"\"\"\"\"\n        current, self.nlp.pipeline = self.nlp.pipeline, self.original_pipeline\n        unexpected = [name for name, pipe in current if not self.nlp.has_pipe(name)]\n        if unexpected:\n            # Don't change the pipeline if we're raising an error.\n            self.nlp.pipeline = current\n            raise ValueError(Errors.E008.format(names=unexpected))\n        self[:] = []", "output": "Restore the pipeline to its state when DisabledPipes was created.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def logical_and(lhs, rhs):\n    \"\"\"\n    \"\"\"\n    # pylint: disable= no-member, protected-access\n    return _ufunc_helper(\n        lhs,\n        rhs,\n        op.broadcast_logical_and,\n        lambda x, y: 1 if x and y else 0,\n        _internal._logical_and_scalar,\n        None)", "output": "Returns the result of element-wise **logical and** comparison\n    operation with broadcasting.\n\n    For each element in input arrays, return 1(true) if lhs elements and rhs elements\n    are true, otherwise return 0(false).\n\n    Equivalent to ``lhs and rhs`` and ``mx.nd.broadcast_logical_and(lhs, rhs)``.\n\n    .. note::\n\n       If the corresponding dimensions of two arrays have the same size or one of them has size 1,\n       then the arrays are broadcastable to a common shape.\n\n    Parameters\n    ----------\n    lhs : scalar or mxnet.ndarray.array\n        First input of the function.\n    rhs : scalar or mxnet.ndarray.array\n         Second input of the function. If ``lhs.shape != rhs.shape``, they must be\n        broadcastable to a common shape.\n\n    Returns\n    -------\n    NDArray\n        Output array of boolean values.\n\n    Examples\n    --------\n    >>> x = mx.nd.ones((2,3))\n    >>> y = mx.nd.arange(2).reshape((2,1))\n    >>> z = mx.nd.arange(2).reshape((1,2))\n    >>> x.asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> y.asnumpy()\n    array([[ 0.],\n           [ 1.]], dtype=float32)\n    >>> z.asnumpy()\n    array([[ 0.,  1.]], dtype=float32)\n    >>> mx.nd.logical_and(x, 1).asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.logical_and(x, y).asnumpy()\n    array([[ 0.,  0.,  0.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.logical_and(z, y).asnumpy()\n    array([[ 0.,  0.],\n           [ 0.,  1.]], dtype=float32)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def done(self):\n        \"\"\"\n        \"\"\"\n        return self._exception != self._SENTINEL or self._result != self._SENTINEL", "output": "Return True the future is done, False otherwise.\n\n        This still returns True in failure cases; checking :meth:`result` or\n        :meth:`exception` is the canonical way to assess success or failure.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fit_transform(self, data):\n        \"\"\"\n        \n\n        \"\"\"\n        if not self._transformers:\n            return self._preprocess(data)\n\n        transformed_data = self._preprocess(data)\n        final_step = self._transformers[-1]\n        return final_step[1].fit_transform(transformed_data)", "output": "First fit a transformer using the SFrame `data` and then return a transformed\n        version of `data`.\n\n        Parameters\n        ----------\n        data : SFrame\n            The data used to fit the transformer. The same data is then also\n            transformed.\n\n        Returns\n        -------\n        Transformed SFrame.\n\n        See Also\n        --------\n        transform, fit_transform\n\n        Notes\n        -----\n        - The default implementation calls fit() and then calls transform().\n          You may override this function with a more efficient implementation.\"\n\n        Examples\n        --------\n        .. sourcecode:: python\n\n          >> transformed_sf = chain.fit_transform(sf)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set(self, name, value):\n        \"\"\"\"\"\"\n        name = self._convert_name(name)\n\n        if ((name in _ELEMENTSFIELD or name == 'Platform') and\n            not isinstance(value, (list, tuple))):\n            if isinstance(value, string_types):\n                value = [v.strip() for v in value.split(',')]\n            else:\n                value = []\n        elif (name in _LISTFIELDS and\n              not isinstance(value, (list, tuple))):\n            if isinstance(value, string_types):\n                value = [value]\n            else:\n                value = []\n\n        if logger.isEnabledFor(logging.WARNING):\n            project_name = self['Name']\n\n            scheme = get_scheme(self.scheme)\n            if name in _PREDICATE_FIELDS and value is not None:\n                for v in value:\n                    # check that the values are valid\n                    if not scheme.is_valid_matcher(v.split(';')[0]):\n                        logger.warning(\n                            \"'%s': '%s' is not valid (field '%s')\",\n                            project_name, v, name)\n            # FIXME this rejects UNKNOWN, is that right?\n            elif name in _VERSIONS_FIELDS and value is not None:\n                if not scheme.is_valid_constraint_list(value):\n                    logger.warning(\"'%s': '%s' is not a valid version (field '%s')\",\n                                   project_name, value, name)\n            elif name in _VERSION_FIELDS and value is not None:\n                if not scheme.is_valid_version(value):\n                    logger.warning(\"'%s': '%s' is not a valid version (field '%s')\",\n                                   project_name, value, name)\n\n        if name in _UNICODEFIELDS:\n            if name == 'Description':\n                value = self._remove_line_prefix(value)\n\n        self._fields[name] = value", "output": "Control then set a metadata field.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _compute_edge_transforms(node_states,\n                             depth,\n                             num_transforms,\n                             name=\"transform\"):\n  \"\"\"\n  \"\"\"\n  node_shapes = common_layers.shape_list(node_states)\n  x = common_layers.dense(\n      node_states,\n      depth * num_transforms,\n      use_bias=False,\n      name=name)\n\n  batch = node_shapes[0]  # B.\n  length = node_shapes[1]  # N.\n\n  # Making the fourth dimension explicit by separating the vectors of size\n  # K*T (in k) and V*T (in v) into two-dimensional matrices with shape [K, T]\n  # (in k) and [V, T] in v.\n  #\n  x = tf.reshape(x, [batch, length, num_transforms, depth])\n\n  # Flatten out the fourth dimension.\n  x = tf.reshape(x, [batch, length * num_transforms, depth])\n\n  return x", "output": "Helper function that computes transformation for keys and values.\n\n  Let B be the number of batches.\n  Let N be the number of nodes in the graph.\n  Let D be the size of the node hidden states.\n  Let K be the size of the attention keys/queries (total_key_depth).\n  Let V be the size of the attention values (total_value_depth).\n  Let T be the total number of transforms (num_transforms).\n\n  Computes the transforms for keys or values for attention.\n  * For each node N_j and edge type t, a key K_jt of size K is computed. When an\n    edge of type t goes from node N_j to any other node, K_jt is the key that is\n    in the attention process.\n  * For each node N_j and edge type t, a value V_jt of size V is computed. When\n    an edge of type t goes from node N_j to node N_i, Attention(Q_i, K_jt)\n    produces a weight w_ijt. The message sent along this edge is w_ijt * V_jt.\n\n  Args:\n    node_states: A tensor of shape [B, L, D]\n    depth: An integer (K or V)\n    num_transforms: An integer (T),\n    name: A name for the function\n\n  Returns:\n    x: A The attention keys or values for each node and edge type\n      (shape [B, N*T, K or V])", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def context_menu_requested(self, event):\n        \"\"\"\"\"\"\n        if self.fig:\n            pos = QPoint(event.x(), event.y())\n            context_menu = QMenu(self)\n            context_menu.addAction(ima.icon('editcopy'), \"Copy Image\",\n                                   self.copy_figure,\n                                   QKeySequence(\n                                       get_shortcut('plots', 'copy')))\n            context_menu.popup(self.mapToGlobal(pos))", "output": "Popup context menu.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _string_width(string, *, _IS_ASCII=_IS_ASCII):\n    \"\"\"\"\"\"\n    match = _IS_ASCII.match(string)\n    if match:\n        return match.endpos\n\n    UNICODE_WIDE_CHAR_TYPE = 'WFA'\n    width = 0\n    func = unicodedata.east_asian_width\n    for char in string:\n        width += 2 if func(char) in UNICODE_WIDE_CHAR_TYPE else 1\n    return width", "output": "Returns string's width.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _equals(v1_indices, v1_values, v2_indices, v2_values):\n        \"\"\"\n        \n        \"\"\"\n        v1_size = len(v1_values)\n        v2_size = len(v2_values)\n        k1 = 0\n        k2 = 0\n        all_equal = True\n        while all_equal:\n            while k1 < v1_size and v1_values[k1] == 0:\n                k1 += 1\n            while k2 < v2_size and v2_values[k2] == 0:\n                k2 += 1\n\n            if k1 >= v1_size or k2 >= v2_size:\n                return k1 >= v1_size and k2 >= v2_size\n\n            all_equal = v1_indices[k1] == v2_indices[k2] and v1_values[k1] == v2_values[k2]\n            k1 += 1\n            k2 += 1\n        return all_equal", "output": "Check equality between sparse/dense vectors,\n        v1_indices and v2_indices assume to be strictly increasing.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def transform(self, X):\n        \"\"\"\n        \"\"\"\n        if isinstance(X, pd.DataFrame):\n            X_transformed = X[self.feat_list].values\n        elif isinstance(X, np.ndarray):\n            X_transformed = X[:, self.feat_list_idx]\n\n        return X_transformed.astype(np.float64)", "output": "Make subset after fit\n\n        Parameters\n        ----------\n        X: numpy ndarray, {n_samples, n_features}\n            New data, where n_samples is the number of samples and n_features is the number of features.\n\n        Returns\n        -------\n        X_transformed: array-like, shape (n_samples, n_features + 1) or (n_samples, n_features + 1 + n_classes) for classifier with predict_proba attribute\n            The transformed feature set.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stop(self, wait=True):\n        ''' \n\n        '''\n        assert not self._stopped, \"Already stopped\"\n        self._stopped = True\n        self._tornado.stop(wait)\n        self._http.stop()", "output": "Stop the Bokeh Server.\n\n        This stops and removes all Bokeh Server ``IOLoop`` callbacks, as well\n        as stops the ``HTTPServer`` that this instance was configured with.\n\n        Args:\n            fast (bool):\n                Whether to wait for orderly cleanup (default: True)\n\n        Returns:\n            None", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_users(root=None):\n    '''\n    \n    '''\n    if root is not None:\n        getspall = functools.partial(_getspall, root=root)\n    else:\n        getspall = functools.partial(spwd.getspall)\n\n    return sorted([user.sp_namp if hasattr(user, 'sp_namp') else user.sp_nam\n                   for user in getspall()])", "output": ".. versionadded:: 2018.3.0\n\n    Return a list of all shadow users\n\n    root\n        Directory to chroot into\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' shadow.list_users", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_user(username, **kwargs):\n    '''\n    \n    '''\n    command = 'show run | include \"^username {0} password 5 \"'.format(username)\n    info = ''\n    info = show(command, **kwargs)\n    if isinstance(info, list):\n        info = info[0]\n    return info", "output": "Get username line from switch.\n\n    .. code-block: bash\n\n        salt '*' nxos.cmd get_user username=admin", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def authorize_url(self, state=None):\n        '''\n        \n        '''\n        if not self._client_id:\n            raise ApiAuthError('No client id.')\n        kw = dict(client_id=self._client_id)\n        if self._redirect_uri:\n            kw['redirect_uri'] = self._redirect_uri\n        if self._scope:\n            kw['scope'] = self._scope\n        if state:\n            kw['state'] = state\n        return 'https://github.com/login/oauth/authorize?%s' % _encode_params(kw)", "output": "Generate authorize_url.\n\n        >>> GitHub(client_id='3ebf94c5776d565bcf75').authorize_url()\n        'https://github.com/login/oauth/authorize?client_id=3ebf94c5776d565bcf75'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def classify(self, dataset, verbose=True, batch_size=64):\n        \"\"\"\n        \n        \"\"\"\n        prob_vector = self.predict(dataset, output_type='probability_vector',\n                                   verbose=verbose, batch_size=batch_size)\n        id_to_label = self._id_to_class_label\n\n        return _tc.SFrame({\n            'class': prob_vector.apply(lambda v: id_to_label[_np.argmax(v)]),\n            'probability': prob_vector.apply(_np.max)\n        })", "output": "Return the classification for each examples in the ``dataset``.\n        The output SFrame contains predicted class labels and its probability.\n\n        Parameters\n        ----------\n        dataset : SFrame | SArray | dict\n            The audio data to be classified.\n            If dataset is an SFrame, it must have a column with the same name as\n            the feature used for model training, but does not require a target\n            column. Additional columns are ignored.\n\n        verbose : bool, optional\n            If True, prints progress updates and model details.\n\n        batch_size : int, optional\n            If you are getting memory errors, try decreasing this value. If you\n            have a powerful computer, increasing this value may improve performance.\n\n        Returns\n        -------\n        out : SFrame\n            An SFrame with model predictions, both class labels and probabilities.\n\n        See Also\n        ----------\n        create, evaluate, predict\n\n        Examples\n        ----------\n        >>> classes = model.classify(data)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_params(self, **params):\n        \"\"\"\n        \"\"\"\n        if not params:\n            # Simple optimization to gain speed (inspect is slow)\n            return self\n\n        for key, value in params.items():\n            if hasattr(self, key):\n                setattr(self, key, value)\n            else:\n                self.kwargs[key] = value\n\n        return self", "output": "Set the parameters of this estimator.\n        Modification of the sklearn method to allow unknown kwargs. This allows using\n        the full range of xgboost parameters that are not defined as member variables\n        in sklearn grid search.\n        Returns\n        -------\n        self", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def crop_or_pad_to(height, width):\n    \"\"\"\n    \"\"\"\n    def inner(t_image):\n        return tf.image.resize_image_with_crop_or_pad(t_image, height, width)\n    return inner", "output": "Ensures the specified spatial shape by either padding or cropping.\n    Meant to be used as a last transform for architectures insisting on a specific\n    spatial shape of their inputs.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _validate_schema(self, schema, field, value):\n        \"\"\"  \"\"\"\n        if schema is None:\n            return\n\n        if isinstance(value, Sequence) and not isinstance(value, _str_type):\n            self.__validate_schema_sequence(field, schema, value)\n        elif isinstance(value, Mapping):\n            self.__validate_schema_mapping(field, schema, value)", "output": "{'type': ['dict', 'string'],\n             'anyof': [{'validator': 'schema'},\n                       {'validator': 'bulk_schema'}]}", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show_lb(kwargs=None, call=None):\n    '''\n    \n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The show_lb function must be called with -f or --function.'\n        )\n    if not kwargs or 'name' not in kwargs:\n        log.error(\n            'Must specify name of load-balancer.'\n        )\n        return False\n\n    lb_conn = get_lb_conn(get_conn())\n    return _expand_balancer(lb_conn.get_balancer(kwargs['name']))", "output": "Show the details of an existing load-balancer.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -f show_lb gce name=lb", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def json2space(x, oldy=None, name=NodeType.Root.value):\n    \"\"\"\n    \"\"\"\n    y = list()\n    if isinstance(x, dict):\n        if NodeType.Type.value in x.keys():\n            _type = x[NodeType.Type.value]\n            name = name + '-' + _type\n            if _type == 'choice':\n                if oldy != None:\n                    _index = oldy[NodeType.Index.value]\n                    y += json2space(x[NodeType.Value.value][_index],\n                                    oldy[NodeType.Value.value], name=name+'[%d]' % _index)\n                else:\n                    y += json2space(x[NodeType.Value.value], None, name=name)\n            y.append(name)\n        else:\n            for key in x.keys():\n                y += json2space(x[key], (oldy[key] if oldy !=\n                                         None else None), name+\"[%s]\" % str(key))\n    elif isinstance(x, list):\n        for i, x_i in enumerate(x):\n            y += json2space(x_i, (oldy[i] if oldy !=\n                                  None else None), name+\"[%d]\" % i)\n    else:\n        pass\n    return y", "output": "Change search space from json format to hyperopt format", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def main_target_usage_requirements (self, specification, project):\n        \"\"\" \n        \"\"\"\n        assert is_iterable_typed(specification, basestring)\n        assert isinstance(project, ProjectTarget)\n        project_usage_requirements = project.get ('usage-requirements')\n\n        # We don't use 'refine-from-user-input' because I'm not sure if:\n        # - removing of parent's usage requirements makes sense\n        # - refining of usage requirements is not needed, since usage requirements\n        #   are always free.\n        usage_requirements = property_set.create_from_user_input(\n            specification, project.project_module(), project.get(\"location\"))\n\n        return project_usage_requirements.add (usage_requirements)", "output": "Returns the use requirement to use when declaraing a main target,\n            which are obtained by\n            - translating all specified property paths, and\n            - adding project's usage requirements\n            specification:  Use-properties explicitly specified for a main target\n            project:        Project where the main target is to be declared", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def signature(self):\n        \"\"\"\"\"\"\n        if self.usage is not None:\n            return self.usage\n\n\n        params = self.clean_params\n        if not params:\n            return ''\n\n        result = []\n        for name, param in params.items():\n            greedy = isinstance(param.annotation, converters._Greedy)\n\n            if param.default is not param.empty:\n                # We don't want None or '' to trigger the [name=value] case and instead it should\n                # do [name] since [name=None] or [name=] are not exactly useful for the user.\n                should_print = param.default if isinstance(param.default, str) else param.default is not None\n                if should_print:\n                    result.append('[%s=%s]' % (name, param.default) if not greedy else\n                                  '[%s=%s]...' % (name, param.default))\n                    continue\n                else:\n                    result.append('[%s]' % name)\n\n            elif param.kind == param.VAR_POSITIONAL:\n                result.append('[%s...]' % name)\n            elif greedy:\n                result.append('[%s]...' % name)\n            elif self._is_typing_optional(param.annotation):\n                result.append('[%s]' % name)\n            else:\n                result.append('<%s>' % name)\n\n        return ' '.join(result)", "output": "Returns a POSIX-like signature useful for help command output.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_dense_tensor(self, inputs, weight_collections=None, trainable=None):\n    \"\"\"\"\"\"\n    del weight_collections\n    text_batch = tf.reshape(inputs.get(self), shape=[-1])\n    m = module.Module(self.module_spec, trainable=self.trainable and trainable)\n    return m(text_batch)", "output": "Returns a `Tensor`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def join(self, timeout: Union[float, datetime.timedelta] = None) -> Awaitable[None]:\n        \"\"\"\n        \"\"\"\n        return self._finished.wait(timeout)", "output": "Block until all items in the queue are processed.\n\n        Returns an awaitable, which raises `tornado.util.TimeoutError` after a\n        timeout.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def createURLParserCtxt(filename, options):\n    \"\"\" \"\"\"\n    ret = libxml2mod.xmlCreateURLParserCtxt(filename, options)\n    if ret is None:raise parserError('xmlCreateURLParserCtxt() failed')\n    return parserCtxt(_obj=ret)", "output": "Create a parser context for a file or URL content.\n      Automatic support for ZLIB/Compress compressed document is\n      provided by default if found at compile-time and for file\n       accesses", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _log_error_and_abort(ret, obj):\n    '''\n    \n    '''\n    ret['result'] = False\n    ret['abort'] = True\n    if 'error' in obj:\n        ret['comment'] = '{0}'.format(obj.get('error'))\n    return ret", "output": "helper function to update errors in the return structure", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_instances(name, lifecycle_state=\"InService\", health_status=\"Healthy\",\n                  attribute=\"private_ip_address\", attributes=None, region=None,\n                  key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n    conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n    ec2_conn = _get_ec2_conn(region=region, key=key, keyid=keyid, profile=profile)\n    retries = 30\n    while True:\n        try:\n            asgs = conn.get_all_groups(names=[name])\n            break\n        except boto.exception.BotoServerError as e:\n            if retries and e.code == 'Throttling':\n                log.debug('Throttled by AWS API, retrying in 5 seconds...')\n                time.sleep(5)\n                retries -= 1\n                continue\n            log.error(e)\n            return False\n    if len(asgs) != 1:\n        log.debug(\"name '%s' returns multiple ASGs: %s\", name, [asg.name for asg in asgs])\n        return False\n    asg = asgs[0]\n    instance_ids = []\n    # match lifecycle_state and health_status\n    for i in asg.instances:\n        if lifecycle_state is not None and i.lifecycle_state != lifecycle_state:\n            continue\n        if health_status is not None and i.health_status != health_status:\n            continue\n        instance_ids.append(i.instance_id)\n    # get full instance info, so that we can return the attribute\n    instances = ec2_conn.get_only_instances(instance_ids=instance_ids)\n    if attributes:\n        return [[_convert_attribute(instance, attr) for attr in attributes] for instance in instances]\n    else:\n        # properly handle case when not all instances have the requested attribute\n        return [_convert_attribute(instance, attribute) for instance in instances if getattr(instance, attribute)]", "output": "return attribute of all instances in the named autoscale group.\n\n    CLI example::\n\n        salt-call boto_asg.get_instances my_autoscale_group_name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shell_split(text):\r\n    \"\"\"\r\n    \r\n    \"\"\"\r\n    assert is_text_string(text)  # in case a QString is passed...\r\n    pattern = r'(\\s+|(?<!\\\\)\".*?(?<!\\\\)\"|(?<!\\\\)\\'.*?(?<!\\\\)\\')'\r\n    out = []\r\n    for token in re.split(pattern, text):\r\n        if token.strip():\r\n            out.append(token.strip('\"').strip(\"'\"))\r\n    return out", "output": "Split the string `text` using shell-like syntax\r\n\r\n    This avoids breaking single/double-quoted strings (e.g. containing\r\n    strings with spaces). This function is almost equivalent to the shlex.split\r\n    function (see standard library `shlex`) except that it is supporting\r\n    unicode strings (shlex does not support unicode until Python 2.7.3).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def random_chars(number):\n    \"\"\"\"\"\"\n    char_map = {\n        k: v for k, v in chars.CHARS.iteritems()\n        if not format_character(k).startswith('\\\\x')\n    }\n\n    char_num = sum(char_map.values())\n    return (\n        format_character(nth_char(char_map, random.randint(0, char_num - 1)))\n        for _ in xrange(0, number)\n    )", "output": "Generate random characters", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def parse_services(rule):\n    '''\n    \n    '''\n    parser = argparse.ArgumentParser()\n    rules = shlex.split(rule)\n    rules.pop(0)\n    parser.add_argument('--disabled', dest='disabled', action='store')\n    parser.add_argument('--enabled', dest='enabled', action='store')\n\n    args = clean_args(vars(parser.parse_args(rules)))\n    parser = None\n    return args", "output": "Parse the services line", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def summary(self):\n        \"\"\"\n        \n        \"\"\"\n        if self.hasSummary:\n            return LinearRegressionTrainingSummary(super(LinearRegressionModel, self).summary)\n        else:\n            raise RuntimeError(\"No training summary available for this %s\" %\n                               self.__class__.__name__)", "output": "Gets summary (e.g. residuals, mse, r-squared ) of model on\n        training set. An exception is thrown if\n        `trainingSummary is None`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def exception(self, timeout=None):\n        \"\"\"\n        \"\"\"\n        # Wait until the future is done.\n        if not self._completed.wait(timeout=timeout):\n            raise exceptions.TimeoutError(\"Timed out waiting for result.\")\n\n        # If the batch completed successfully, this should return None.\n        if self._result != self._SENTINEL:\n            return None\n\n        # Okay, this batch had an error; this should return it.\n        return self._exception", "output": "Return the exception raised by the call, if any.\n\n        This blocks until the message has successfully been published, and\n        returns the exception. If the call succeeded, return None.\n\n        Args:\n            timeout (Union[int, float]): The number of seconds before this call\n                times out and raises TimeoutError.\n\n        Raises:\n            TimeoutError: If the request times out.\n\n        Returns:\n            Exception: The exception raised by the call, if any.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def schema_get(name, profile=None):\n    '''\n    \n    '''\n    g_client = _auth(profile)\n    schema_props = {}\n    for prop in g_client.schemas.get(name).properties:\n        schema_props[prop.name] = prop.description\n    log.debug(\n        'Properties of schema %s:\\n%s',\n        name, pprint.PrettyPrinter(indent=4).pformat(schema_props)\n    )\n    return {name: schema_props}", "output": "Known valid names of schemas are:\n      - image\n      - images\n      - member\n      - members\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' glance.schema_get name=f16-jeos", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def process(self, processor:PreProcessors=None):\n        \"\"\n        if processor is not None: self.processor = processor\n        self.processor = listify(self.processor)\n        for p in self.processor: p.process(self)\n        return self", "output": "Apply `processor` or `self.processor` to `self`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def relabel(self, change):\n        \"\"\n        class_new,class_old,file_path = change.new,change.old,change.owner.file_path\n        fp = Path(file_path)\n        parent = fp.parents[1]\n        self._csv_dict[fp] = class_new", "output": "Relabel images by moving from parent dir with old label `class_old` to parent dir with new label `class_new`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def view(self, dtype=None):\n        \"\"\"\n        \n        \"\"\"\n        return self._constructor(self._values.view(dtype),\n                                 index=self.index).__finalize__(self)", "output": "Create a new view of the Series.\n\n        This function will return a new Series with a view of the same\n        underlying values in memory, optionally reinterpreted with a new data\n        type. The new data type must preserve the same size in bytes as to not\n        cause index misalignment.\n\n        Parameters\n        ----------\n        dtype : data type\n            Data type object or one of their string representations.\n\n        Returns\n        -------\n        Series\n            A new Series object as a view of the same data in memory.\n\n        See Also\n        --------\n        numpy.ndarray.view : Equivalent numpy function to create a new view of\n            the same data in memory.\n\n        Notes\n        -----\n        Series are instantiated with ``dtype=float64`` by default. While\n        ``numpy.ndarray.view()`` will return a view with the same data type as\n        the original array, ``Series.view()`` (without specified dtype)\n        will try using ``float64`` and may fail if the original data type size\n        in bytes is not the same.\n\n        Examples\n        --------\n        >>> s = pd.Series([-2, -1, 0, 1, 2], dtype='int8')\n        >>> s\n        0   -2\n        1   -1\n        2    0\n        3    1\n        4    2\n        dtype: int8\n\n        The 8 bit signed integer representation of `-1` is `0b11111111`, but\n        the same bytes represent 255 if read as an 8 bit unsigned integer:\n\n        >>> us = s.view('uint8')\n        >>> us\n        0    254\n        1    255\n        2      0\n        3      1\n        4      2\n        dtype: uint8\n\n        The views share the same underlying values:\n\n        >>> us[0] = 128\n        >>> s\n        0   -128\n        1     -1\n        2      0\n        3      1\n        4      2\n        dtype: int8", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update(self, statement):\n        \"\"\"\n        \n        \"\"\"\n        Statement = self.get_model('statement')\n        Tag = self.get_model('tag')\n\n        if hasattr(statement, 'id'):\n            statement.save()\n        else:\n            statement = Statement.objects.create(\n                text=statement.text,\n                search_text=self.tagger.get_bigram_pair_string(statement.text),\n                conversation=statement.conversation,\n                in_response_to=statement.in_response_to,\n                search_in_response_to=self.tagger.get_bigram_pair_string(statement.in_response_to),\n                created_at=statement.created_at\n            )\n\n        for _tag in statement.tags.all():\n            tag, _ = Tag.objects.get_or_create(name=_tag)\n\n            statement.tags.add(tag)\n\n        return statement", "output": "Update the provided statement.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def choose_trial_to_run(self, trial_runner):\n        \"\"\"\n        \"\"\"\n\n        candidates = []\n        for trial in trial_runner.get_trials():\n            if trial.status in [Trial.PENDING, Trial.PAUSED] and \\\n                    trial_runner.has_resources(trial.resources):\n                candidates.append(trial)\n        candidates.sort(\n            key=lambda trial: self._trial_state[trial].last_perturbation_time)\n        return candidates[0] if candidates else None", "output": "Ensures all trials get fair share of time (as defined by time_attr).\n\n        This enables the PBT scheduler to support a greater number of\n        concurrent trials than can fit in the cluster at any given time.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def info_installed(*names, **kwargs):\n    '''\n    \n    '''\n    all_versions = kwargs.get('all_versions', False)\n    ret = dict()\n    for pkg_name, pkgs_nfo in __salt__['lowpkg.info'](*names, **kwargs).items():\n        pkg_nfo = pkgs_nfo if all_versions else [pkgs_nfo]\n        for _nfo in pkg_nfo:\n            t_nfo = dict()\n            # Translate dpkg-specific keys to a common structure\n            for key, value in _nfo.items():\n                if key == 'source_rpm':\n                    t_nfo['source'] = value\n                else:\n                    t_nfo[key] = value\n            if not all_versions:\n                ret[pkg_name] = t_nfo\n            else:\n                ret.setdefault(pkg_name, []).append(t_nfo)\n    return ret", "output": ".. versionadded:: 2015.8.1\n\n    Return the information of the named package(s), installed on the system.\n\n    :param all_versions:\n        Include information for all versions of the packages installed on the minion.\n\n    CLI example:\n\n    .. code-block:: bash\n\n        salt '*' pkg.info_installed <package1>\n        salt '*' pkg.info_installed <package1> <package2> <package3> ...\n        salt '*' pkg.info_installed <package1> <package2> <package3> all_versions=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_optional_arg_param(self, param_name, layer_index, blob_index):\n        \"\"\"\"\"\"\n        blobs = self.layers[layer_index].blobs\n        if blob_index < len(blobs):\n            self.add_arg_param(param_name, layer_index, blob_index)", "output": "Add an arg param. If there is no such param in .caffemodel fie, silently ignore it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset(self):\n        \"\"\"\"\"\"\n        if self.seq is not None and self.shuffle:\n            random.shuffle(self.seq)\n        if self.last_batch_handle != 'roll_over' or \\\n            self._cache_data is None:\n            if self.imgrec is not None:\n                self.imgrec.reset()\n            self.cur = 0\n            if self._allow_read is False:\n                self._allow_read = True", "output": "Resets the iterator to the beginning of the data.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def handle(self, message, connection):\n        ''' \n\n        '''\n\n        handler = self._handlers.get((message.msgtype, message.revision))\n\n        if handler is None:\n            handler = self._handlers.get(message.msgtype)\n\n        if handler is None:\n            raise ProtocolError(\"%s not expected on server\" % message)\n\n        try:\n            work = yield handler(message, connection)\n        except Exception as e:\n            log.error(\"error handling message %r: %r\", message, e)\n            log.debug(\"  message header %r content %r\", message.header, message.content, exc_info=1)\n            work = connection.error(message, repr(e))\n        raise gen.Return(work)", "output": "Delegate a received message to the appropriate handler.\n\n        Args:\n            message (Message) :\n                The message that was receive that needs to be handled\n\n            connection (ServerConnection) :\n                The connection that received this message\n\n        Raises:\n            ProtocolError", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_internet_gateway(internet_gateway_name=None, vpc_id=None,\n                            vpc_name=None, tags=None, region=None, key=None,\n                            keyid=None, profile=None):\n    '''\n    \n\n    '''\n\n    try:\n        if vpc_id or vpc_name:\n            vpc_id = check_vpc(vpc_id, vpc_name, region, key, keyid, profile)\n            if not vpc_id:\n                return {'created': False,\n                        'error': {'message': 'VPC {0} does not exist.'.format(vpc_name or vpc_id)}}\n\n        r = _create_resource('internet_gateway', name=internet_gateway_name,\n                             tags=tags, region=region, key=key, keyid=keyid,\n                             profile=profile)\n        if r.get('created') and vpc_id:\n            conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n            conn.attach_internet_gateway(r['id'], vpc_id)\n            log.info(\n                'Attached internet gateway %s to VPC %s',\n                r['id'], vpc_name or vpc_id\n            )\n        return r\n    except BotoServerError as e:\n        return {'created': False, 'error': __utils__['boto.get_error'](e)}", "output": "Create an Internet Gateway, optionally attaching it to an existing VPC.\n\n    Returns the internet gateway id if the internet gateway was created and\n    returns False if the internet gateways was not created.\n\n    .. versionadded:: 2015.8.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_vpc.create_internet_gateway \\\\\n                internet_gateway_name=myigw vpc_name=myvpc", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def iter_find_files(directory, patterns, ignored=None):\n    \"\"\"\n\n    \"\"\"\n    if isinstance(patterns, basestring):\n        patterns = [patterns]\n    pats_re = re.compile('|'.join([fnmatch.translate(p) for p in patterns]))\n\n    if not ignored:\n        ignored = []\n    elif isinstance(ignored, basestring):\n        ignored = [ignored]\n    ign_re = re.compile('|'.join([fnmatch.translate(p) for p in ignored]))\n    for root, dirs, files in os.walk(directory):\n        for basename in files:\n            if pats_re.match(basename):\n                if ignored and ign_re.match(basename):\n                    continue\n                filename = os.path.join(root, basename)\n                yield filename\n    return", "output": "Returns a generator that yields file paths under a *directory*,\n    matching *patterns* using `glob`_ syntax (e.g., ``*.txt``). Also\n    supports *ignored* patterns.\n\n    Args:\n        directory (str): Path that serves as the root of the\n            search. Yielded paths will include this as a prefix.\n        patterns (str or list): A single pattern or list of\n            glob-formatted patterns to find under *directory*.\n        ignored (str or list): A single pattern or list of\n            glob-formatted patterns to ignore.\n\n    For example, finding Python files in the directory of this module:\n\n    >>> files = set(iter_find_files(os.path.dirname(__file__), '*.py'))\n\n    Or, Python files while ignoring emacs lockfiles:\n\n    >>> filenames = iter_find_files('.', '*.py', ignored='.#*')\n\n    .. _glob: https://en.wikipedia.org/wiki/Glob_%28programming%29", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mask_sigint():\n    \"\"\"\n    \n    \"\"\"\n    if is_main_thread():\n        sigint_handler = signal.signal(signal.SIGINT, signal.SIG_IGN)\n        yield True\n        signal.signal(signal.SIGINT, sigint_handler)\n    else:\n        yield False", "output": "Returns:\n        If called in main thread, returns a context where ``SIGINT`` is ignored, and yield True.\n        Otherwise yield False.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_sid_string(principal):\n    '''\n    \n    '''\n    # If None is passed, use the Universal Well-known SID \"Null SID\"\n    if principal is None:\n        principal = 'NULL SID'\n\n    try:\n        return win32security.ConvertSidToStringSid(principal)\n    except TypeError:\n        # Not a PySID object\n        principal = get_sid(principal)\n\n    try:\n        return win32security.ConvertSidToStringSid(principal)\n    except pywintypes.error:\n        log.exception('Invalid principal %s', principal)\n        raise CommandExecutionError('Invalid principal {0}'.format(principal))", "output": "Converts a PySID object to a string SID.\n\n    Args:\n\n        principal(str):\n            The principal to lookup the sid. Must be a PySID object.\n\n    Returns:\n        str: A string sid\n\n    Usage:\n\n    .. code-block:: python\n\n        # Get a PySID object\n        py_sid = salt.utils.win_dacl.get_sid('jsnuffy')\n\n        # Get the string version of the SID\n        salt.utils.win_dacl.get_sid_string(py_sid)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def absent(name):\n    '''\n    \n    '''\n\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n\n    try:\n        index = __salt__['elasticsearch.index_get'](index=name)\n        if index and name in index:\n            if __opts__['test']:\n                ret['comment'] = 'Index {0} will be removed'.format(name)\n                ret['changes']['old'] = index[name]\n                ret['result'] = None\n            else:\n                ret['result'] = __salt__['elasticsearch.index_delete'](index=name)\n                if ret['result']:\n                    ret['comment'] = 'Successfully removed index {0}'.format(name)\n                    ret['changes']['old'] = index[name]\n                else:\n                    ret['comment'] = 'Failed to remove index {0} for unknown reasons'.format(name)\n        else:\n            ret['comment'] = 'Index {0} is already absent'.format(name)\n    except Exception as err:\n        ret['result'] = False\n        ret['comment'] = six.text_type(err)\n\n    return ret", "output": "Ensure that the named index is absent.\n\n    name\n        Name of the index to remove", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init(complete_options=False, match_incomplete=None):\n    \"\"\"\n    \"\"\"\n    global _initialized\n    if not _initialized:\n        _patch()\n        completion_configuration.complete_options = complete_options\n        if match_incomplete is not None:\n            completion_configuration.match_incomplete = match_incomplete\n        _initialized = True", "output": "Initialize the enhanced click completion\n\n    Parameters\n    ----------\n    complete_options : bool\n        always complete the options, even when the user hasn't typed a first dash (Default value = False)\n    match_incomplete : func\n        a function with two parameters choice and incomplete. Must return True\n        if incomplete is a correct match for choice, False otherwise.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def spacetodepth(attrs, inputs, proto_obj):\n    \"\"\"\"\"\"\n    new_attrs = translation_utils._fix_attribute_names(attrs, {'blocksize':'block_size'})\n\n    return \"space_to_depth\", new_attrs, inputs", "output": "Rearranges blocks of spatial data into depth.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def with_rank_at_most(self, rank):\n        \"\"\"\n        \"\"\"\n        if self.ndims is not None and self.ndims > rank:\n            raise ValueError(\"Shape %s must have rank at most %d\" % (self, rank))\n        else:\n            return self", "output": "Returns a shape based on `self` with at most the given rank.\n\n        Args:\n          rank: An integer.\n\n        Returns:\n          A shape that is at least as specific as `self` with at most the given\n          rank.\n\n        Raises:\n          ValueError: If `self` does not represent a shape with at most the given\n            `rank`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def f_comb(self, pos, sample):\n        \"\"\"\n        \"\"\"\n        ret = 0\n        for i in range(self.effective_model_num):\n            model = self.effective_model[i]\n            y = self.predict_y(model, pos)\n            ret += sample[i] * y\n        return ret", "output": "return the value of the f_comb when epoch = pos\n\n        Parameters\n        ----------\n        pos: int\n            the epoch number of the position you want to predict\n        sample: list\n            sample is a (1 * NUM_OF_FUNCTIONS) matrix, representing{w1, w2, ... wk}\n\n        Returns\n        -------\n        int\n            The expected matrix at pos with all the active function's prediction", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def perform_iteration(self):\n        \"\"\"\"\"\"\n        stats = self.get_all_stats()\n\n        self.redis_client.publish(\n            self.redis_key,\n            jsonify_asdict(stats),\n        )", "output": "Get any changes to the log files and push updates to Redis.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _generate_examples(self, filepath):\n    \"\"\"\n    \"\"\"\n    with tf.io.gfile.GFile(filepath, \"rb\") as f:\n      data = tfds.core.lazy_imports.scipy.io.loadmat(f)\n\n    # Maybe should shuffle ?\n\n    assert np.max(data[\"y\"]) <= 10  # Sanity check\n    assert np.min(data[\"y\"]) > 0\n\n    for image, label in zip(np.rollaxis(data[\"X\"], -1), data[\"y\"]):\n      yield {\n          \"image\": image,\n          \"label\": label % 10,  # digit 0 is saved as 0 (instead of 10)\n      }", "output": "Generate examples as dicts.\n\n    Args:\n      filepath: `str` path of the file to process.\n\n    Yields:\n      Generator yielding the next samples", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def snapshots_delete(container, name, remote_addr=None,\n                     cert=None, key=None, verify_cert=True):\n    '''\n    \n    '''\n    cont = container_get(\n        container, remote_addr, cert, key, verify_cert, _raw=True\n    )\n\n    try:\n        for s in cont.snapshots.all():\n            if s.name == name:\n                s.delete()\n                return True\n    except pylxd.exceptions.LXDAPIException:\n        pass\n\n    return False", "output": "Delete a snapshot for a container\n\n    container :\n        The name of the container to get.\n\n    name :\n        The name of the snapshot.\n\n    remote_addr :\n        An URL to a remote server. The 'cert' and 'key' fields must also be\n        provided if 'remote_addr' is defined.\n\n        Examples:\n            https://myserver.lan:8443\n            /var/lib/mysocket.sock\n\n    cert :\n        PEM Formatted SSL Certificate.\n\n        Examples:\n            ~/.config/lxc/client.crt\n\n    key :\n        PEM Formatted SSL Key.\n\n        Examples:\n            ~/.config/lxc/client.key\n\n    verify_cert : True\n        Verify the ssl certificate.  Default: True\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        $ salt '*' lxd.snapshots_delete test-container test-snapshot", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def next(self) -> Future:\n        \"\"\"\n        \"\"\"\n        self._running_future = Future()\n\n        if self._finished:\n            self._return_result(self._finished.popleft())\n\n        return self._running_future", "output": "Returns a `.Future` that will yield the next available result.\n\n        Note that this `.Future` will not be the same object as any of\n        the inputs.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def purge(name=None, slot=None, fromrepo=None, pkgs=None, **kwargs):\n    '''\n    \n    '''\n    ret = remove(name=name, slot=slot, fromrepo=fromrepo, pkgs=pkgs)\n    ret.update(depclean(name=name, slot=slot, fromrepo=fromrepo, pkgs=pkgs))\n    return ret", "output": ".. versionchanged:: 2015.8.12,2016.3.3,2016.11.0\n        On minions running systemd>=205, `systemd-run(1)`_ is now used to\n        isolate commands which modify installed packages from the\n        ``salt-minion`` daemon's control group. This is done to keep systemd\n        from killing any emerge commands spawned by Salt when the\n        ``salt-minion`` service is restarted. (see ``KillMode`` in the\n        `systemd.kill(5)`_ manpage for more information). If desired, usage of\n        `systemd-run(1)`_ can be suppressed by setting a :mod:`config option\n        <salt.modules.config.get>` called ``systemd.scope``, with a value of\n        ``False`` (no quotes).\n\n    .. _`systemd-run(1)`: https://www.freedesktop.org/software/systemd/man/systemd-run.html\n    .. _`systemd.kill(5)`: https://www.freedesktop.org/software/systemd/man/systemd.kill.html\n\n    Portage does not have a purge, this function calls remove followed\n    by depclean to emulate a purge process\n\n    name\n        The name of the package to be deleted.\n\n    slot\n        Restrict the remove to a specific slot. Ignored if name is None.\n\n    fromrepo\n        Restrict the remove to a specific slot. Ignored if ``name`` is None.\n\n    Multiple Package Options:\n\n    pkgs\n        Uninstall multiple packages. ``slot`` and ``fromrepo`` arguments are\n        ignored if this argument is present. Must be passed as a python list.\n\n    .. versionadded:: 0.16.0\n\n\n    Returns a dict containing the changes.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pkg.purge <package name>\n        salt '*' pkg.purge <package name> slot=4.4\n        salt '*' pkg.purge <package1>,<package2>,<package3>\n        salt '*' pkg.purge pkgs='[\"foo\", \"bar\"]'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lambda_not_found_response(*args):\n        \"\"\"\n        \n        \"\"\"\n        response_data = jsonify(ServiceErrorResponses._NO_LAMBDA_INTEGRATION)\n        return make_response(response_data, ServiceErrorResponses.HTTP_STATUS_CODE_502)", "output": "Constructs a Flask Response for when a Lambda function is not found for an endpoint\n\n        :return: a Flask Response", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def RelaxNGSetSchema(self, reader):\n        \"\"\" \"\"\"\n        if reader is None: reader__o = None\n        else: reader__o = reader._o\n        ret = libxml2mod.xmlTextReaderRelaxNGSetSchema(reader__o, self._o)\n        return ret", "output": "Use RelaxNG to validate the document as it is processed.\n          Activation is only possible before the first Read(). if\n          @schema is None, then RelaxNG validation is desactivated. @\n          The @schema should not be freed until the reader is\n           deallocated or its use has been deactivated.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_ubuntu():\n    \"\"\"\"\"\"\n    if sys.platform.startswith('linux') and osp.isfile('/etc/lsb-release'):\n        release_info = open('/etc/lsb-release').read()\n        if 'Ubuntu' in release_info:\n            return True\n        else:\n            return False\n    else:\n        return False", "output": "Detect if we are running in an Ubuntu-based distribution", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def not_allowed(subset=None, show_ip=False, show_ipv4=None):\n    '''\n    \n    '''\n    show_ip = _show_ip_migration(show_ip, show_ipv4)\n    return list_not_state(subset=subset, show_ip=show_ip)", "output": ".. versionadded:: 2015.8.0\n    .. versionchanged:: 2019.2.0\n        The 'show_ipv4' argument has been renamed to 'show_ip' as it now\n        includes IPv6 addresses for IPv6-connected minions.\n\n    Print a list of all minions that are NOT up according to Salt's presence\n    detection (no commands will be sent)\n\n    subset : None\n        Pass in a CIDR range to filter minions by IP address.\n\n    show_ip : False\n        Also show the IP address each minion is connecting from.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-run manage.not_allowed", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def live_processes(self):\n        \"\"\"\n        \"\"\"\n        result = []\n        for process_type, process_infos in self.all_processes.items():\n            for process_info in process_infos:\n                if process_info.process.poll() is None:\n                    result.append((process_type, process_info.process))\n        return result", "output": "Return a list of the live processes.\n\n        Returns:\n            A list of the live processes.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lovasz_softmax(probas, labels, only_present=False, per_image=False, ignore=None):\n    \"\"\"\n    \n    \"\"\"\n    if per_image:\n        loss = mean(lovasz_softmax_flat(*flatten_probas(prob.unsqueeze(0), lab.unsqueeze(0), ignore), only_present=only_present)\n                          for prob, lab in zip(probas, labels))\n    else:\n        loss = lovasz_softmax_flat(*flatten_probas(probas, labels, ignore), only_present=only_present)\n    return loss", "output": "Multi-class Lovasz-Softmax loss\n      probas: [B, C, H, W] Variable, class probabilities at each prediction (between 0 and 1)\n      labels: [B, H, W] Tensor, ground truth labels (between 0 and C - 1)\n      only_present: average only on classes present in ground truth\n      per_image: compute the loss per image instead of per batch\n      ignore: void class labels", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def human_to_bytes(size):\n    '''\n    \n    '''\n    sbytes = size[:-1]\n    unit = size[-1]\n    if sbytes.isdigit():\n        sbytes = int(sbytes)\n        if unit == 'P':\n            sbytes *= 1125899906842624\n        elif unit == 'T':\n            sbytes *= 1099511627776\n        elif unit == 'G':\n            sbytes *= 1073741824\n        elif unit == 'M':\n            sbytes *= 1048576\n        else:\n            sbytes = 0\n    else:\n        sbytes = 0\n    return sbytes", "output": "Given a human-readable byte string (e.g. 2G, 30M),\n    return the number of bytes.  Will return 0 if the argument has\n    unexpected form.\n\n    .. versionadded:: 2018.3.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def register_trainable(name, trainable):\n    \"\"\"\n    \"\"\"\n\n    from ray.tune.trainable import Trainable\n    from ray.tune.function_runner import wrap_function\n\n    if isinstance(trainable, type):\n        logger.debug(\"Detected class for trainable.\")\n    elif isinstance(trainable, FunctionType):\n        logger.debug(\"Detected function for trainable.\")\n        trainable = wrap_function(trainable)\n    elif callable(trainable):\n        logger.warning(\n            \"Detected unknown callable for trainable. Converting to class.\")\n        trainable = wrap_function(trainable)\n\n    if not issubclass(trainable, Trainable):\n        raise TypeError(\"Second argument must be convertable to Trainable\",\n                        trainable)\n    _global_registry.register(TRAINABLE_CLASS, name, trainable)", "output": "Register a trainable function or class.\n\n    Args:\n        name (str): Name to register.\n        trainable (obj): Function or tune.Trainable class. Functions must\n            take (config, status_reporter) as arguments and will be\n            automatically converted into a class during registration.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def returner(ret):\n    '''\n    \n    '''\n    log.debug('sqlite3 returner <returner> called with data: %s', ret)\n    conn = _get_conn(ret)\n    cur = conn.cursor()\n    sql = '''INSERT INTO salt_returns\n             (fun, jid, id, fun_args, date, full_ret, success)\n             VALUES (:fun, :jid, :id, :fun_args, :date, :full_ret, :success)'''\n    cur.execute(sql,\n                {'fun': ret['fun'],\n                 'jid': ret['jid'],\n                 'id': ret['id'],\n                 'fun_args': six.text_type(ret['fun_args']) if ret.get('fun_args') else None,\n                 'date': six.text_type(datetime.datetime.now()),\n                 'full_ret': salt.utils.json.dumps(ret['return']),\n                 'success': ret.get('success', '')})\n    _close_conn(conn)", "output": "Insert minion return data into the sqlite3 database", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_epoch_end(self, epoch, logs=None):\n        \"\"\"\n        \n        \"\"\"\n        if logs is None:\n            logs = dict()\n        logger.debug(logs)\n        nni.report_intermediate_result(logs[\"val_acc\"])", "output": "Run on end of each epoch", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_fetch_user(user_cookie, db=DATABASE):\n    \"\"\"\n    \n    \"\"\"\n    collection = DATABASE.account\n\n    return [res for res in collection.find({'user_cookie': user_cookie}, {\"_id\": 0})]", "output": "get the user\n\n    Arguments:\n        user_cookie : str the unique cookie_id for a user\n    Keyword Arguments:\n        db: database for query\n\n    Returns:\n        list ---  [ACCOUNT]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_logits(self, x, **kwargs):\n    \"\"\"\n    \n    \"\"\"\n    outputs = self.fprop(x, **kwargs)\n    if self.O_LOGITS in outputs:\n      return outputs[self.O_LOGITS]\n    raise NotImplementedError(str(type(self)) + \"must implement `get_logits`\"\n                              \" or must define a \" + self.O_LOGITS +\n                              \" output in `fprop`\")", "output": ":param x: A symbolic representation (Tensor) of the network input\n    :return: A symbolic representation (Tensor) of the output logits\n    (i.e., the values fed as inputs to the softmax layer).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resource_group_get(name, **kwargs):\n    '''\n    \n\n    '''\n    result = {}\n    resconn = __utils__['azurearm.get_client']('resource', **kwargs)\n    try:\n        group = resconn.resource_groups.get(name)\n        result = group.as_dict()\n\n    except CloudError as exc:\n        __utils__['azurearm.log_cloud_error']('resource', str(exc), **kwargs)\n        result = {'error': str(exc)}\n\n    return result", "output": ".. versionadded:: 2019.2.0\n\n    Get a dictionary representing a resource group's properties.\n\n    :param name: The resource group name to get.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-call azurearm_resource.resource_group_get testgroup", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_toolbar(self, title, object_name, iconsize=24):\r\n        \"\"\"\"\"\"\r\n        toolbar = self.addToolBar(title)\r\n        toolbar.setObjectName(object_name)\r\n        toolbar.setIconSize(QSize(iconsize, iconsize))\r\n        self.toolbarslist.append(toolbar)\r\n        return toolbar", "output": "Create and return toolbar with *title* and *object_name*", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_(profile=\"splunk\"):\n    '''\n    \n    '''\n    client = _get_splunk(profile)\n    searches = [x['name'] for x in client.saved_searches]\n    return searches", "output": "List splunk searches (names only)\n\n    CLI Example:\n        splunk_search.list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_full_slice(obj, l):\n    \"\"\"\n    \n    \"\"\"\n    return (isinstance(obj, slice) and obj.start == 0 and obj.stop == l and\n            obj.step is None)", "output": "We have a full length slice.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _read_info(info_path):\n  \"\"\"\"\"\"\n  if not tf.io.gfile.exists(info_path):\n    return None\n  with tf.io.gfile.GFile(info_path) as info_f:\n    return json.load(info_f)", "output": "Returns info dict or None.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _prep_acl_for_compare(ACL):\n    '''\n    \n    '''\n    ret = copy.deepcopy(ACL)\n    ret['Owner'] = _normalize_user(ret['Owner'])\n    for item in ret.get('Grants', ()):\n        item['Grantee'] = _normalize_user(item.get('Grantee'))\n    return ret", "output": "Prepares the ACL returned from the AWS API for comparison with a given one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def run(self):\n        \"\"\"\n        \n        \"\"\"\n        connection = self.output().connect()\n        # kill any sessions other than ours and\n        # internal Redshift sessions (rdsdb)\n        query = (\"select pg_terminate_backend(process) \"\n                 \"from STV_SESSIONS \"\n                 \"where db_name=%s \"\n                 \"and user_name != 'rdsdb' \"\n                 \"and process != pg_backend_pid()\")\n        cursor = connection.cursor()\n        logger.info('Killing all open Redshift sessions for database: %s', self.database)\n        try:\n            cursor.execute(query, (self.database,))\n            cursor.close()\n            connection.commit()\n        except psycopg2.DatabaseError as e:\n            if e.message and 'EOF' in e.message:\n                # sometimes this operation kills the current session.\n                # rebuild the connection. Need to pause for 30-60 seconds\n                # before Redshift will allow us back in.\n                connection.close()\n                logger.info('Pausing %s seconds for Redshift to reset connection', self.connection_reset_wait_seconds)\n                time.sleep(self.connection_reset_wait_seconds)\n                logger.info('Reconnecting to Redshift')\n                connection = self.output().connect()\n            else:\n                raise\n\n        try:\n            self.output().touch(connection)\n            connection.commit()\n        finally:\n            connection.close()\n\n        logger.info('Done killing all open Redshift sessions for database: %s', self.database)", "output": "Kill any open Redshift sessions for the given database.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def clone(zone, source, snapshot=None):\n    '''\n    \n    '''\n    ret = {'status': True}\n\n    ## install zone\n    res = __salt__['cmd.run_all']('zoneadm -z {zone} clone {snapshot}{source}'.format(\n        zone=zone,\n        source=source,\n        snapshot='-s {0} '.format(snapshot) if snapshot else '',\n    ))\n    ret['status'] = res['retcode'] == 0\n    ret['message'] = res['stdout'] if ret['status'] else res['stderr']\n    ret['message'] = ret['message'].replace('zoneadm: ', '')\n    if ret['message'] == '':\n        del ret['message']\n\n    return ret", "output": "Install a zone by copying an existing installed zone.\n\n    zone : string\n        name of the zone\n    source : string\n        zone to clone from\n    snapshot : string\n        optional name of snapshot to use as source\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' zoneadm.clone clementine dolores", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rounding_sequence_accuracy(predictions,\n                               labels,\n                               weights_fn=common_layers.weights_nonzero):\n  \"\"\"\"\"\"\n  outputs = tf.squeeze(tf.to_int32(predictions), axis=-1)\n  weights = weights_fn(labels)\n  labels = tf.to_int32(labels)\n  not_correct = tf.to_float(tf.not_equal(outputs, labels)) * weights\n  axis = list(range(1, len(outputs.get_shape())))\n  correct_seq = 1.0 - tf.minimum(1.0, tf.reduce_sum(not_correct, axis=axis))\n  return correct_seq, tf.constant(1.0)", "output": "Sequence accuracy for L1/L2 losses: round down the predictions to ints.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_args_for_reloading():\n    \"\"\"\"\"\"\n    rv = [sys.executable]\n    main_module = sys.modules[\"__main__\"]\n    mod_spec = getattr(main_module, \"__spec__\", None)\n    if mod_spec:\n        # Parent exe was launched as a module rather than a script\n        rv.extend([\"-m\", mod_spec.name])\n        if len(sys.argv) > 1:\n            rv.extend(sys.argv[1:])\n    else:\n        rv.extend(sys.argv)\n    return rv", "output": "Returns the executable.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _worker(reader: DatasetReader,\n            input_queue: Queue,\n            output_queue: Queue,\n            index: int) -> None:\n    \"\"\"\n    \n    \"\"\"\n    # Keep going until you get a file_path that's None.\n    while True:\n        file_path = input_queue.get()\n        if file_path is None:\n            # Put my index on the queue to signify that I'm finished\n            output_queue.put(index)\n            break\n\n        logger.info(f\"reading instances from {file_path}\")\n        for instance in reader.read(file_path):\n            output_queue.put(instance)", "output": "A worker that pulls filenames off the input queue, uses the dataset reader\n    to read them, and places the generated instances on the output queue.\n    When there are no filenames left on the input queue, it puts its ``index``\n    on the output queue and doesn't do anything else.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _is_valid_relpath(\n        relpath,\n        maxdepth=None):\n    '''\n    \n    '''\n    # Check relpath surrounded by slashes, so that `..` can be caught as\n    # a path component at the start, end, and in the middle of the path.\n    sep, pardir = posixpath.sep, posixpath.pardir\n    if sep + pardir + sep in sep + relpath + sep:\n        return False\n\n    # Check that the relative path's depth does not exceed maxdepth\n    if maxdepth is not None:\n        path_depth = relpath.strip(sep).count(sep)\n        if path_depth > maxdepth:\n            return False\n\n    return True", "output": "Performs basic sanity checks on a relative path.\n\n    Requires POSIX-compatible paths (i.e. the kind obtained through\n    cp.list_master or other such calls).\n\n    Ensures that the path does not contain directory transversal, and\n    that it does not exceed a stated maximum depth (if specified).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _byte_encode(self, token):\n    \"\"\"\"\"\"\n    # Vocab ids for all bytes follow ids for the subwords\n    offset = len(self._subwords)\n    if token == \"_\":\n      return [len(self._subwords) + ord(\" \")]\n    return [i + offset for i in list(bytearray(tf.compat.as_bytes(token)))]", "output": "Encode a single token byte-wise into integer ids.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _generate_examples(tmp_dir, dataset_split):\n  \"\"\"\n  \"\"\"\n  if dataset_split == problem.DatasetSplit.TRAIN:\n    file_name = _TRAINING_SET\n  else:\n    file_name = _DEV_SET\n  squad_file = generator_utils.maybe_download(tmp_dir,\n                                              file_name,\n                                              os.path.join(_URL, file_name))\n  with tf.gfile.GFile(squad_file, mode=\"r\") as fp:\n    squad = json.load(fp)\n\n  version = squad[\"version\"]\n  for article in squad[\"data\"]:\n    if \"title\" in article:\n      title = article[\"title\"].strip()\n    else:\n      title = \"no title\"\n    for paragraph in article[\"paragraphs\"]:\n      context = paragraph[\"context\"].strip()\n      for qa in paragraph[\"qas\"]:\n        question = qa[\"question\"].strip()\n        id_ = qa[\"id\"]\n        answer_starts = [answer[\"answer_start\"] for answer in qa[\"answers\"]]\n        answers = [answer[\"text\"].strip() for answer in qa[\"answers\"]]\n\n        # Features currently used are \"context\", \"question\", and \"answers\".\n        # Others are extracted here for the ease of future expansions.\n        example = {\n            \"version\": version,\n            \"title\": title,\n            \"context\": context,\n            \"question\": question,\n            \"id\": id_,\n            \"answer_starts\": answer_starts,\n            \"answers\": answers,\n            \"num_answers\": len(answers),\n            \"is_supervised\": True,\n        }\n        yield example", "output": "Generate squad examples.\n\n  Args:\n    tmp_dir: a string\n    dataset_split: problem.DatasetSplit.TRAIN or problem.DatasetSplit.EVAL\n  Yields:\n    dictionaries representing examples", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def CopyFrom(self, other_msg):\n    \"\"\"\n    \"\"\"\n    if self is other_msg:\n      return\n    self.Clear()\n    self.MergeFrom(other_msg)", "output": "Copies the content of the specified message into the current message.\n\n    The method clears the current message and then merges the specified\n    message using MergeFrom.\n\n    Args:\n      other_msg: Message to copy into the current one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_xsrf_cookie(self) -> None:\n        \"\"\"\n        \"\"\"\n        # Prior to release 1.1.1, this check was ignored if the HTTP header\n        # ``X-Requested-With: XMLHTTPRequest`` was present.  This exception\n        # has been shown to be insecure and has been removed.  For more\n        # information please see\n        # http://www.djangoproject.com/weblog/2011/feb/08/security/\n        # http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails\n        token = (\n            self.get_argument(\"_xsrf\", None)\n            or self.request.headers.get(\"X-Xsrftoken\")\n            or self.request.headers.get(\"X-Csrftoken\")\n        )\n        if not token:\n            raise HTTPError(403, \"'_xsrf' argument missing from POST\")\n        _, token, _ = self._decode_xsrf_token(token)\n        _, expected_token, _ = self._get_raw_xsrf_token()\n        if not token:\n            raise HTTPError(403, \"'_xsrf' argument has invalid format\")\n        if not hmac.compare_digest(utf8(token), utf8(expected_token)):\n            raise HTTPError(403, \"XSRF cookie does not match POST argument\")", "output": "Verifies that the ``_xsrf`` cookie matches the ``_xsrf`` argument.\n\n        To prevent cross-site request forgery, we set an ``_xsrf``\n        cookie and include the same value as a non-cookie\n        field with all ``POST`` requests. If the two do not match, we\n        reject the form submission as a potential forgery.\n\n        The ``_xsrf`` value may be set as either a form field named ``_xsrf``\n        or in a custom HTTP header named ``X-XSRFToken`` or ``X-CSRFToken``\n        (the latter is accepted for compatibility with Django).\n\n        See http://en.wikipedia.org/wiki/Cross-site_request_forgery\n\n        .. versionchanged:: 3.2.2\n           Added support for cookie version 2.  Both versions 1 and 2 are\n           supported.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_result(self, result):\n        \"\"\"\"\"\"\n        self._result = result\n        self._result_set = True\n        self._invoke_callbacks(self)", "output": "Set the Future's result.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show_image(kwargs, call=None):\n    '''\n    \n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The show_images function must be called with '\n            '-f or --function'\n        )\n\n    if not isinstance(kwargs, dict):\n        kwargs = {}\n\n    images = kwargs['image']\n    images = images.split(',')\n\n    params = {\n        'action': 'DescribeImages',\n        'images': images,\n        'zone': _get_specified_zone(kwargs, get_configured_provider()),\n    }\n\n    items = query(params=params)\n\n    if not items['image_set']:\n        raise SaltCloudNotFound('The specified image could not be found.')\n\n    result = {}\n    for image in items['image_set']:\n        result[image['image_id']] = {}\n        for key in image:\n            result[image['image_id']][key] = image[key]\n\n    return result", "output": "Show the details from QingCloud concerning an image.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-cloud -f show_image my-qingcloud image=trustysrvx64c\n        salt-cloud -f show_image my-qingcloud image=trustysrvx64c,coreos4\n        salt-cloud -f show_image my-qingcloud image=trustysrvx64c zone=ap1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_cache_key(self, name, filename=None):\n        \"\"\"\"\"\"\n        hash = sha1(name.encode('utf-8'))\n        if filename is not None:\n            filename = '|' + filename\n            if isinstance(filename, text_type):\n                filename = filename.encode('utf-8')\n            hash.update(filename)\n        return hash.hexdigest()", "output": "Returns the unique hash key for this template name.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def kernel_status(self, user_name, kernel_slug, **kwargs):  # noqa: E501\n        \"\"\"\n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.kernel_status_with_http_info(user_name, kernel_slug, **kwargs)  # noqa: E501\n        else:\n            (data) = self.kernel_status_with_http_info(user_name, kernel_slug, **kwargs)  # noqa: E501\n            return data", "output": "Get the status of the latest kernel version  # noqa: E501\n\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.kernel_status(user_name, kernel_slug, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str user_name: Kernel owner (required)\n        :param str kernel_slug: Kernel name (required)\n        :return: Result\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def explode(col):\n    \"\"\"\n    \n    \"\"\"\n    sc = SparkContext._active_spark_context\n    jc = sc._jvm.functions.explode(_to_java_column(col))\n    return Column(jc)", "output": "Returns a new row for each element in the given array or map.\n    Uses the default column name `col` for elements in the array and\n    `key` and `value` for elements in the map unless specified otherwise.\n\n    >>> from pyspark.sql import Row\n    >>> eDF = spark.createDataFrame([Row(a=1, intlist=[1,2,3], mapfield={\"a\": \"b\"})])\n    >>> eDF.select(explode(eDF.intlist).alias(\"anInt\")).collect()\n    [Row(anInt=1), Row(anInt=2), Row(anInt=3)]\n\n    >>> eDF.select(explode(eDF.mapfield).alias(\"key\", \"value\")).show()\n    +---+-----+\n    |key|value|\n    +---+-----+\n    |  a|    b|\n    +---+-----+", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_exists(username, domain='', database=None, **kwargs):\n    '''\n    \n    '''\n    if domain:\n        username = '{0}\\\\{1}'.format(domain, username)\n    if database:\n        kwargs['database'] = database\n    # We should get one, and only one row\n    return len(tsql_query(query=\"SELECT name FROM sysusers WHERE name='{0}'\".format(username), **kwargs)) == 1", "output": "Find if an user exists in a specific database on the MS SQL server.\n    domain, if provided, will be prepended to username\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt minion mssql.user_exists 'USERNAME' [database='DBNAME']", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fetch2(self, path, api='public', method='GET', params={}, headers=None, body=None):\n        \"\"\"\"\"\"\n        if self.enableRateLimit:\n            self.throttle()\n        self.lastRestRequestTimestamp = self.milliseconds()\n        request = self.sign(path, api, method, params, headers, body)\n        return self.fetch(request['url'], request['method'], request['headers'], request['body'])", "output": "A better wrapper over request for deferred signing", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def project_delete(project_id=None, name=None, profile=None, **connection_args):\n    '''\n    \n    '''\n    auth(profile, **connection_args)\n\n    if _OS_IDENTITY_API_VERSION > 2:\n        return tenant_delete(tenant_id=project_id, name=name, profile=None, **connection_args)\n    else:\n        return False", "output": "Delete a project (keystone project-delete).\n    Overrides keystone tenant-delete form api V2. For keystone api V3 only.\n\n    .. versionadded:: 2016.11.0\n\n    project_id\n        The project id.\n\n    name\n        The project name.\n\n    profile\n        Configuration profile - if configuration for multiple openstack accounts required.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt '*' keystone.project_delete c965f79c4f864eaaa9c3b41904e67082\n        salt '*' keystone.project_delete project_id=c965f79c4f864eaaa9c3b41904e67082\n        salt '*' keystone.project_delete name=demo", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def property_data_zpool():\n    '''\n    \n\n    '''\n    # NOTE: man page also mentions a few short forms\n    property_data = _property_parse_cmd(_zpool_cmd(), {\n        'allocated': 'alloc',\n        'autoexpand': 'expand',\n        'autoreplace': 'replace',\n        'listsnapshots': 'listsnaps',\n        'fragmentation': 'frag',\n    })\n\n    # NOTE: zpool status/iostat has a few extra fields\n    zpool_size_extra = [\n        'capacity-alloc', 'capacity-free',\n        'operations-read', 'operations-write',\n        'bandwith-read', 'bandwith-write',\n        'read', 'write',\n    ]\n    zpool_numeric_extra = [\n        'cksum', 'cap',\n    ]\n\n    for prop in zpool_size_extra:\n        property_data[prop] = {\n            'edit': False,\n            'type': 'size',\n            'values': '<size>',\n        }\n\n    for prop in zpool_numeric_extra:\n        property_data[prop] = {\n            'edit': False,\n            'type': 'numeric',\n            'values': '<count>',\n        }\n\n    return property_data", "output": "Return a dict of zpool properties\n\n    .. note::\n\n        Each property will have an entry with the following info:\n            - edit : boolean - is this property editable after pool creation\n            - type : str - either bool, bool_alt, size, numeric, or string\n            - values : str - list of possible values\n\n    .. warning::\n\n        This data is probed from the output of 'zpool get' with some suplimental\n        data that is hardcoded. There is no better way to get this informatio aside\n        from reading the code.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _parameter_objects(parameter_objects_from_pillars, parameter_object_overrides):\n    '''\n    \n    '''\n    from_pillars = copy.deepcopy(__salt__['pillar.get'](parameter_objects_from_pillars))\n    from_pillars.update(parameter_object_overrides)\n    parameter_objects = _standardize(_dict_to_list_ids(from_pillars))\n    for parameter_object in parameter_objects:\n        parameter_object['attributes'] = _properties_from_dict(parameter_object['attributes'])\n    return parameter_objects", "output": "Return a list of parameter objects that configure the pipeline\n\n    parameter_objects_from_pillars\n        The pillar key to use for lookup\n\n    parameter_object_overrides\n        Parameter objects to use. Will override objects read from pillars.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete_website(Bucket,\n           region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n\n    try:\n        conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n        conn.delete_bucket_website(Bucket=Bucket)\n        return {'deleted': True, 'name': Bucket}\n    except ClientError as e:\n        return {'deleted': False, 'error': __utils__['boto3.get_error'](e)}", "output": "Remove the website configuration from the given bucket\n\n    Returns {deleted: true} if website configuration was deleted and returns\n    {deleted: False} if website configuration was not deleted.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_s3_bucket.delete_website my_bucket", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _generate_examples(self, label_images):\n    \"\"\"\"\"\"\n\n    for label, image_paths in label_images.items():\n      for image_path in image_paths:\n        yield {\n            \"image\": image_path,\n            \"label\": label,\n        }", "output": "Generate example for each image in the dict.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def vanilla_lstm(num_hidden, indata, prev_state, param, seqidx, layeridx, is_batchnorm=False, gamma=None, beta=None, name=None):\n    \"\"\"\"\"\"\n    i2h = mx.sym.FullyConnected(data=indata,\n                                weight=param.i2h_weight,\n                                bias=param.i2h_bias,\n                                num_hidden=num_hidden * 4,\n                                name=\"t%d_l%d_i2h\" % (seqidx, layeridx))\n    if is_batchnorm:\n        if name is not None:\n            i2h = batchnorm(net=i2h, gamma=gamma, beta=beta, name=\"%s_batchnorm\" % name)\n        else:\n            i2h = batchnorm(net=i2h, gamma=gamma, beta=beta)\n    h2h = mx.sym.FullyConnected(data=prev_state.h,\n                                weight=param.h2h_weight,\n                                bias=param.h2h_bias,\n                                num_hidden=num_hidden * 4,\n                                name=\"t%d_l%d_h2h\" % (seqidx, layeridx))\n    gates = i2h + h2h\n    slice_gates = mx.sym.SliceChannel(gates, num_outputs=4,\n                                      name=\"t%d_l%d_slice\" % (seqidx, layeridx))\n    in_gate = mx.sym.Activation(slice_gates[0], act_type=\"sigmoid\")\n    in_transform = mx.sym.Activation(slice_gates[1], act_type=\"tanh\")\n    forget_gate = mx.sym.Activation(slice_gates[2], act_type=\"sigmoid\")\n    out_gate = mx.sym.Activation(slice_gates[3], act_type=\"sigmoid\")\n    next_c = (forget_gate * prev_state.c) + (in_gate * in_transform)\n    next_h = out_gate * mx.sym.Activation(next_c, act_type=\"tanh\")\n    return LSTMState(c=next_c, h=next_h)", "output": "LSTM Cell symbol", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rfc_cv(n_estimators, min_samples_split, max_features, data, targets):\n    \"\"\"\n    \"\"\"\n    estimator = RFC(\n        n_estimators=n_estimators,\n        min_samples_split=min_samples_split,\n        max_features=max_features,\n        random_state=2\n    )\n    cval = cross_val_score(estimator, data, targets,\n                           scoring='neg_log_loss', cv=4)\n    return cval.mean()", "output": "Random Forest cross validation.\n\n    This function will instantiate a random forest classifier with parameters\n    n_estimators, min_samples_split, and max_features. Combined with data and\n    targets this will in turn be used to perform cross validation. The result\n    of cross validation is returned.\n\n    Our goal is to find combinations of n_estimators, min_samples_split, and\n    max_features that minimzes the log loss.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_network_interface(name, resource_group):\n    '''\n    \n    '''\n    public_ips = []\n    private_ips = []\n    netapi_versions = get_api_versions(kwargs={\n        'resource_provider': 'Microsoft.Network',\n        'resource_type': 'publicIPAddresses'\n        }\n    )\n    netapi_version = netapi_versions[0]\n    netconn = get_conn(client_type='network')\n    netiface_query = netconn.network_interfaces.get(\n        resource_group_name=resource_group,\n        network_interface_name=name\n    )\n\n    netiface = netiface_query.as_dict()\n    for index, ip_config in enumerate(netiface['ip_configurations']):\n        if ip_config.get('private_ip_address') is not None:\n            private_ips.append(ip_config['private_ip_address'])\n        if 'id' in ip_config.get('public_ip_address', {}):\n            public_ip_name = get_resource_by_id(\n                ip_config['public_ip_address']['id'],\n                netapi_version,\n                'name'\n            )\n            public_ip = _get_public_ip(public_ip_name, resource_group)\n            public_ips.append(public_ip['ip_address'])\n            netiface['ip_configurations'][index]['public_ip_address'].update(public_ip)\n\n    return netiface, public_ips, private_ips", "output": "Get a network interface.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ID(self, ID):\n        \"\"\" \"\"\"\n        ret = libxml2mod.xmlGetID(self._o, ID)\n        if ret is None:raise treeError('xmlGetID() failed')\n        __tmp = xmlAttr(_obj=ret)\n        return __tmp", "output": "Search the attribute declaring the given ID", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_permissions(vhost, runas=None):\n    '''\n    \n    '''\n    if runas is None and not salt.utils.platform.is_windows():\n        runas = salt.utils.user.get_user()\n    res = __salt__['cmd.run_all'](\n        [RABBITMQCTL, 'list_permissions', '-q', '-p', vhost],\n        reset_system_locale=False,\n        runas=runas,\n        python_shell=False)\n\n    return _output_to_dict(res)", "output": "Lists permissions for vhost via rabbitmqctl list_permissions\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' rabbitmq.list_permissions /myvhost", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_weight_param_summary(wp):\n    \"\"\"\n    \"\"\"\n    summary_str = ''\n    if wp.HasField('quantization'):\n        nbits = wp.quantization.numberOfBits\n        quant_type = 'linearly' if wp.quantization.HasField('linearQuantization') else 'lookup-table'\n        summary_str += '{}-bit {} quantized'.format(nbits, quant_type)\n\n    if len(wp.floatValue) > 0:\n        summary_str += '({} floatValues)'.format(len(wp.floatValue))\n    if len(wp.float16Value) > 0:\n        summary_str += '({} bytes float16Values)'.format(len(wp.float16Value))\n    if len(wp.rawValue) > 0:\n        summary_str += '({} bytes rawValues)'.format(len(wp.rawValue))\n\n    return summary_str", "output": "Get a summary of _NeuralNetwork_pb2.WeightParams\n    Args:\n    wp : _NeuralNetwork_pb2.WeightParams - the _NeuralNetwork_pb2.WeightParams message to display\n    Returns:\n    a str summary for wp", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remote_addr(self):\n        \"\"\"\n        \"\"\"\n        if not hasattr(self, \"_remote_addr\"):\n            if self.app.config.PROXIES_COUNT == 0:\n                self._remote_addr = \"\"\n            elif self.app.config.REAL_IP_HEADER and self.headers.get(\n                self.app.config.REAL_IP_HEADER\n            ):\n                self._remote_addr = self.headers[\n                    self.app.config.REAL_IP_HEADER\n                ]\n            elif self.app.config.FORWARDED_FOR_HEADER:\n                forwarded_for = self.headers.get(\n                    self.app.config.FORWARDED_FOR_HEADER, \"\"\n                ).split(\",\")\n                remote_addrs = [\n                    addr\n                    for addr in [addr.strip() for addr in forwarded_for]\n                    if addr\n                ]\n                if self.app.config.PROXIES_COUNT == -1:\n                    self._remote_addr = remote_addrs[0]\n                elif len(remote_addrs) >= self.app.config.PROXIES_COUNT:\n                    self._remote_addr = remote_addrs[\n                        -self.app.config.PROXIES_COUNT\n                    ]\n                else:\n                    self._remote_addr = \"\"\n            else:\n                self._remote_addr = \"\"\n        return self._remote_addr", "output": "Attempt to return the original client ip based on X-Forwarded-For\n        or X-Real-IP. If HTTP headers are unavailable or untrusted, returns\n        an empty string.\n\n        :return: original client ip.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _shuffle_tfrecord(path, random_gen):\n  \"\"\"\"\"\"\n  # Read all records\n  record_iter = tf.compat.v1.io.tf_record_iterator(path)\n  all_records = [\n      r for r in utils.tqdm(\n          record_iter, desc=\"Reading...\", unit=\" examples\", leave=False)\n  ]\n  # Shuffling in memory\n  random_gen.shuffle(all_records)\n  # Write all record back\n  with tf.io.TFRecordWriter(path) as writer:\n    for record in utils.tqdm(\n        all_records, desc=\"Writing...\", unit=\" examples\", leave=False):\n      writer.write(record)", "output": "Shuffle a single record file in memory.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def append(self, key, _item):  # type: (Union[Key, str], Any) -> Table\n        \"\"\"\n        \n        \"\"\"\n        if not isinstance(_item, Item):\n            _item = item(_item)\n\n        self._value.append(key, _item)\n\n        if isinstance(key, Key):\n            key = key.key\n\n        if key is not None:\n            super(Table, self).__setitem__(key, _item)\n\n        m = re.match(\"(?s)^[^ ]*([ ]+).*$\", self._trivia.indent)\n        if not m:\n            return self\n\n        indent = m.group(1)\n\n        if not isinstance(_item, Whitespace):\n            m = re.match(\"(?s)^([^ ]*)(.*)$\", _item.trivia.indent)\n            if not m:\n                _item.trivia.indent = indent\n            else:\n                _item.trivia.indent = m.group(1) + indent + m.group(2)\n\n        return self", "output": "Appends a (key, item) to the table.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_principal(name, enctypes=None):\n    '''\n    \n    '''\n    ret = {}\n\n    krb_cmd = 'addprinc -randkey'\n\n    if enctypes:\n        krb_cmd += ' -e {0}'.format(enctypes)\n\n    krb_cmd += ' {0}'.format(name)\n\n    cmd = __execute_kadmin(krb_cmd)\n\n    if cmd['retcode'] != 0 or cmd['stderr']:\n        if not cmd['stderr'].splitlines()[-1].startswith('WARNING:'):\n            ret['comment'] = cmd['stderr'].splitlines()[-1]\n            ret['result'] = False\n\n            return ret\n\n    return True", "output": "Create Principal\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt 'kdc.example.com' kerberos.create_principal host/example.com", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _load_params(params, logger=logging):\n    \"\"\"\n    \"\"\"\n    if isinstance(params, str):\n        cur_path = os.path.dirname(os.path.realpath(__file__))\n        param_file_path = os.path.join(cur_path, params)\n        logger.info('Loading params from file %s' % param_file_path)\n        save_dict = nd_load(param_file_path)\n        arg_params = {}\n        aux_params = {}\n        for k, v in save_dict.items():\n            tp, name = k.split(':', 1)\n            if tp == 'arg':\n                arg_params[name] = v\n            if tp == 'aux':\n                aux_params[name] = v\n        return arg_params, aux_params\n    elif isinstance(params, (tuple, list)) and len(params) == 2:\n        return params[0], params[1]\n    else:\n        raise ValueError('Unsupported params provided. Must be either a path to the param file or'\n                         ' a pair of dictionaries representing arg_params and aux_params')", "output": "Given a str as a path to the .params file or a pair of params,\n    returns two dictionaries representing arg_params and aux_params.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove(self):\n        \"\"\n        if not self.removed:\n            self.hook.remove()\n            self.removed=True", "output": "Remove the hook from the model.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def shuffle_step(entries, step):\n    '''\n    \n    '''\n    answer = []\n    for i in range(0, len(entries), step):\n        sub = entries[i:i+step]\n        shuffle(sub)\n        answer += sub\n    return answer", "output": "Shuffle the step", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def imagetransformerpp_base_8l_8h_big_cond_dr03_dan():\n  \"\"\"\"\"\"\n  hparams = imagetransformerpp_sep_channels_8l_8h()\n  hparams.hidden_size = 512\n  hparams.num_heads = 8\n  hparams.filter_size = 2048\n  hparams.batch_size = 4\n  hparams.max_length = 3075\n  hparams.layer_prepostprocess_dropout = 0.3\n  hparams.layer_preprocess_sequence = \"none\"\n  hparams.layer_postprocess_sequence = \"dan\"\n  hparams.summarize_grads = True\n  hparams.learning_rate = 0.01\n  return hparams", "output": "big 1d model for conditional image generation.2.99 on cifar10.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _enum_elements(name, server=None):\n    '''\n    \n    '''\n    elements = []\n    data = _api_get(name, server)\n\n    if any(data['extraProperties']['childResources']):\n        for element in data['extraProperties']['childResources']:\n            elements.append(element)\n        return elements\n    return None", "output": "Enum elements", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sample(path, start, length):\n    \"\"\"\n    \n    \"\"\"\n    # initialize vocabulary and sequence length\n    param.seq_len = 1\n    ds = CharRNNData(param.corpus, 100000)\n\n    pred = OfflinePredictor(PredictConfig(\n        model=Model(),\n        session_init=SaverRestore(path),\n        input_names=['input', 'c0', 'h0', 'c1', 'h1'],\n        output_names=['prob', 'last_state']))\n\n    # feed the starting sentence\n    initial = np.zeros((1, param.rnn_size))\n    for c in start[:-1]:\n        x = np.array([[ds.char2idx[c]]], dtype='int32')\n        _, state = pred(x, initial, initial, initial, initial)\n\n    def pick(prob):\n        t = np.cumsum(prob)\n        s = np.sum(prob)\n        return(int(np.searchsorted(t, np.random.rand(1) * s)))\n\n    # generate more\n    ret = start\n    c = start[-1]\n    for k in range(length):\n        x = np.array([[ds.char2idx[c]]], dtype='int32')\n        prob, state = pred(x, state[0, 0], state[0, 1], state[1, 0], state[1, 1])\n        c = ds.chars[pick(prob[0])]\n        ret += c\n    print(ret)", "output": ":param path: path to the model\n    :param start: a `str`. the starting characters\n    :param length: a `int`. the length of text to generate", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_layer_converter_fn(layer, add_custom_layers = False):\n    \"\"\"\n    \"\"\"\n    layer_type = type(layer)\n    if layer_type in _KERAS_LAYER_REGISTRY:\n        convert_func = _KERAS_LAYER_REGISTRY[layer_type]\n        if convert_func is _layers2.convert_activation:\n            act_name = _layers2._get_activation_name_from_keras_layer(layer)\n            if act_name == 'CUSTOM':\n                return None\n        return convert_func\n    elif add_custom_layers:\n        return None\n    else:\n        raise TypeError(\"Keras layer of type %s is not supported.\" % type(layer))", "output": "Get the right converter function for Keras", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_feature(value):\n  \"\"\"\"\"\"\n  if isinstance(value, FeatureConnector):\n    return value\n  elif utils.is_dtype(value):  # tf.int32, tf.string,...\n    return Tensor(shape=(), dtype=tf.as_dtype(value))\n  elif isinstance(value, dict):\n    return FeaturesDict(value)\n  else:\n    raise ValueError('Feature not supported: {}'.format(value))", "output": "Convert the given value to Feature if necessary.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def put_multi(self, entities):\n        \"\"\"\n        \"\"\"\n        if isinstance(entities, Entity):\n            raise ValueError(\"Pass a sequence of entities\")\n\n        if not entities:\n            return\n\n        current = self.current_batch\n        in_batch = current is not None\n\n        if not in_batch:\n            current = self.batch()\n            current.begin()\n\n        for entity in entities:\n            current.put(entity)\n\n        if not in_batch:\n            current.commit()", "output": "Save entities in the Cloud Datastore.\n\n        :type entities: list of :class:`google.cloud.datastore.entity.Entity`\n        :param entities: The entities to be saved to the datastore.\n\n        :raises: :class:`ValueError` if ``entities`` is a single entity.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _find_coeffs(orig_pts:Points, targ_pts:Points)->Tensor:\n    \"\"\n    matrix = []\n    #The equations we'll need to solve.\n    for p1, p2 in zip(targ_pts, orig_pts):\n        matrix.append([p1[0], p1[1], 1, 0, 0, 0, -p2[0]*p1[0], -p2[0]*p1[1]])\n        matrix.append([0, 0, 0, p1[0], p1[1], 1, -p2[1]*p1[0], -p2[1]*p1[1]])\n\n    A = FloatTensor(matrix)\n    B = FloatTensor(orig_pts).view(8, 1)\n    #The 8 scalars we seek are solution of AX = B\n    return _solve_func(B,A)[0][:,0]", "output": "Find 8 coeff mentioned [here](https://web.archive.org/web/20150222120106/xenia.media.mit.edu/~cwren/interpolator/).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sorted(self, wantdirs=False):\n        \"\"\"\n        \n        \"\"\"\n\n        def add_dir(dirs, d):\n            dirs.add(d)\n            logger.debug('add_dir added %s', d)\n            if d != self.base:\n                parent, _ = os.path.split(d)\n                assert parent not in ('', '/')\n                add_dir(dirs, parent)\n\n        result = set(self.files)    # make a copy!\n        if wantdirs:\n            dirs = set()\n            for f in result:\n                add_dir(dirs, os.path.dirname(f))\n            result |= dirs\n        return [os.path.join(*path_tuple) for path_tuple in\n                sorted(os.path.split(path) for path in result)]", "output": "Return sorted files in directory order", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_policy(policyName, policyDocument,\n            region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n\n    try:\n        conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n        if not isinstance(policyDocument, string_types):\n            policyDocument = salt.utils.json.dumps(policyDocument)\n        policy = conn.create_policy(policyName=policyName,\n                                    policyDocument=policyDocument)\n        if policy:\n            log.info('The newly created policy version is %s', policy['policyVersionId'])\n\n            return {'created': True, 'versionId': policy['policyVersionId']}\n        else:\n            log.warning('Policy was not created')\n            return {'created': False}\n    except ClientError as e:\n        return {'created': False, 'error': __utils__['boto3.get_error'](e)}", "output": "Given a valid config, create a policy.\n\n    Returns {created: true} if the policy was created and returns\n    {created: False} if the policy was not created.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_iot.create_policy my_policy \\\\\n              '{\"Version\":\"2015-12-12\",\\\\\n              \"Statement\":[{\"Effect\":\"Allow\",\\\\\n                            \"Action\":[\"iot:Publish\"],\\\\\n                            \"Resource\":[\"arn:::::topic/foo/bar\"]}]}'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _SetPath(self, path):\n    \"\"\"\n    \"\"\"\n    old_path = self._path\n    if old_path and not io_wrapper.IsCloudPath(old_path):\n      try:\n        # We're done with the path, so store its size.\n        size = tf.io.gfile.stat(old_path).length\n        logger.debug('Setting latest size of %s to %d', old_path, size)\n        self._finalized_sizes[old_path] = size\n      except tf.errors.OpError as e:\n        logger.error('Unable to get size of %s: %s', old_path, e)\n\n    self._path = path\n    self._loader = self._loader_factory(path)", "output": "Sets the current path to watch for new events.\n\n    This also records the size of the old path, if any. If the size can't be\n    found, an error is logged.\n\n    Args:\n      path: The full path of the file to watch.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def construct_error_message(driver_id, error_type, message, timestamp):\n    \"\"\"\n    \"\"\"\n    builder = flatbuffers.Builder(0)\n    driver_offset = builder.CreateString(driver_id.binary())\n    error_type_offset = builder.CreateString(error_type)\n    message_offset = builder.CreateString(message)\n\n    ray.core.generated.ErrorTableData.ErrorTableDataStart(builder)\n    ray.core.generated.ErrorTableData.ErrorTableDataAddDriverId(\n        builder, driver_offset)\n    ray.core.generated.ErrorTableData.ErrorTableDataAddType(\n        builder, error_type_offset)\n    ray.core.generated.ErrorTableData.ErrorTableDataAddErrorMessage(\n        builder, message_offset)\n    ray.core.generated.ErrorTableData.ErrorTableDataAddTimestamp(\n        builder, timestamp)\n    error_data_offset = ray.core.generated.ErrorTableData.ErrorTableDataEnd(\n        builder)\n    builder.Finish(error_data_offset)\n\n    return bytes(builder.Output())", "output": "Construct a serialized ErrorTableData object.\n\n    Args:\n        driver_id: The ID of the driver that the error should go to. If this is\n            nil, then the error will go to all drivers.\n        error_type: The type of the error.\n        message: The error message.\n        timestamp: The time of the error.\n\n    Returns:\n        The serialized object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def link(src, path):\n    '''\n    \n    '''\n    src = os.path.expanduser(src)\n\n    if not os.path.isabs(src):\n        raise SaltInvocationError('File path must be absolute.')\n\n    try:\n        os.link(src, path)\n        return True\n    except (OSError, IOError):\n        raise CommandExecutionError('Could not create \\'{0}\\''.format(path))\n    return False", "output": ".. versionadded:: 2014.1.0\n\n    Create a hard link to a file\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' file.link /path/to/file /path/to/link", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_all(recommended=False, restart=True):\n    '''\n    \n    '''\n    to_update = _get_available(recommended, restart)\n\n    if not to_update:\n        return {}\n\n    for _update in to_update:\n        cmd = ['softwareupdate', '--install', _update]\n        salt.utils.mac_utils.execute_return_success(cmd)\n\n    ret = {}\n    updates_left = _get_available()\n\n    for _update in to_update:\n        ret[_update] = True if _update not in updates_left else False\n\n    return ret", "output": "Install all available updates. Returns a dictionary containing the name\n    of the update and the status of its installation.\n\n    :param bool recommended: If set to True, only install the recommended\n        updates. If set to False (default) all updates are installed.\n\n    :param bool restart: Set this to False if you do not want to install updates\n        that require a restart. Default is True\n\n    :return: A dictionary containing the updates that were installed and the\n        status of its installation. If no updates were installed an empty\n        dictionary is returned.\n\n    :rtype: dict\n\n    CLI Example:\n\n    .. code-block:: bash\n\n       salt '*' softwareupdate.update_all", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def setIfMissing(self, key, value):\n        \"\"\"\"\"\"\n        if self.get(key) is None:\n            self.set(key, value)\n        return self", "output": "Set a configuration property, if not already set.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def from_api_repr(cls, resource, client):\n        \"\"\"\n        \"\"\"\n        job_id, config_resource = cls._get_resource_config(resource)\n        config = CopyJobConfig.from_api_repr(config_resource)\n        # Copy required fields to the job.\n        copy_resource = config_resource[\"copy\"]\n        destination = TableReference.from_api_repr(copy_resource[\"destinationTable\"])\n        sources = []\n        source_configs = copy_resource.get(\"sourceTables\")\n        if source_configs is None:\n            single = copy_resource.get(\"sourceTable\")\n            if single is None:\n                raise KeyError(\"Resource missing 'sourceTables' / 'sourceTable'\")\n            source_configs = [single]\n        for source_config in source_configs:\n            table_ref = TableReference.from_api_repr(source_config)\n            sources.append(table_ref)\n        job = cls(job_id, sources, destination, client=client, job_config=config)\n        job._set_properties(resource)\n        return job", "output": "Factory:  construct a job given its API representation\n\n        .. note:\n\n           This method assumes that the project found in the resource matches\n           the client's project.\n\n        :type resource: dict\n        :param resource: dataset job representation returned from the API\n\n        :type client: :class:`google.cloud.bigquery.client.Client`\n        :param client: Client which holds credentials and project\n                       configuration for the dataset.\n\n        :rtype: :class:`google.cloud.bigquery.job.CopyJob`\n        :returns: Job parsed from ``resource``.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_repository(self, repository, body, params=None):\n        \"\"\"\n        \n        \"\"\"\n        for param in (repository, body):\n            if param in SKIP_IN_PATH:\n                raise ValueError(\"Empty value passed for a required argument.\")\n        return self.transport.perform_request('PUT', _make_path('_snapshot',\n            repository), params=params, body=body)", "output": "Registers a shared file system repository.\n        `<http://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html>`_\n\n        :arg repository: A repository name\n        :arg body: The repository definition\n        :arg master_timeout: Explicit operation timeout for connection to master\n            node\n        :arg timeout: Explicit operation timeout\n        :arg verify: Whether to verify the repository after creation", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def _retrieve_guilds_after_strategy(self, retrieve):\n        \"\"\"\"\"\"\n        after = self.after.id if self.after else None\n        data = await self.get_guilds(retrieve, after=after)\n        if len(data):\n            if self.limit is not None:\n                self.limit -= retrieve\n            self.after = Object(id=int(data[0]['id']))\n        return data", "output": "Retrieve guilds using after parameter.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def disable(name, stop=False, **kwargs):\n    '''\n    \n    '''\n\n    # non-existent as registrered service\n    if not enabled(name):\n        return False\n\n    # down_file: file that prevent sv autostart\n    svc_realpath = _get_svc_path(name)[0]\n    down_file = os.path.join(svc_realpath, 'down')\n\n    if stop:\n        stop(name)\n\n    if not os.path.exists(down_file):\n        try:\n            salt.utils.files.fopen(down_file, \"w\").close()  # pylint: disable=resource-leakage\n        except IOError:\n            log.error('Unable to create file %s', down_file)\n            return False\n\n    return True", "output": "Don't start service ``name`` at boot\n    Returns ``True`` if operation is successful\n\n    name\n        the service's name\n\n    stop\n        if True, also stops the service\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' service.disable <name> [stop=True]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def datasets_list_files(self, owner_slug, dataset_slug, **kwargs):  # noqa: E501\n        \"\"\"\n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.datasets_list_files_with_http_info(owner_slug, dataset_slug, **kwargs)  # noqa: E501\n        else:\n            (data) = self.datasets_list_files_with_http_info(owner_slug, dataset_slug, **kwargs)  # noqa: E501\n            return data", "output": "List dataset files  # noqa: E501\n\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.datasets_list_files(owner_slug, dataset_slug, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str owner_slug: Dataset owner (required)\n        :param str dataset_slug: Dataset name (required)\n        :return: Result\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def path(self):\n        \"\"\"\n        \n        \"\"\"\n        location = self.client.table_location(self.table, self.database)\n        if not location:\n            raise Exception(\"Couldn't find location for table: {0}\".format(str(self)))\n        return location", "output": "Returns the path to this table in HDFS.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_valid_project(self, path):\r\n        \"\"\"\"\"\"\r\n        spy_project_dir = osp.join(path, '.spyproject')\r\n        if osp.isdir(path) and osp.isdir(spy_project_dir):\r\n            return True\r\n        else:\r\n            return False", "output": "Check if a directory is a valid Spyder project", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resolve_pos(token):\n    \"\"\"\n    \"\"\"\n    # TODO: This is a first take. The rules here are crude approximations.\n    # For many of these, full dependencies are needed to properly resolve\n    # PoS mappings.\n    if token.pos == \"\u9023\u4f53\u8a5e,*,*,*\":\n        if re.match(r\"[\u3053\u305d\u3042\u3069\u6b64\u5176\u5f7c]\u306e\", token.surface):\n            return token.pos + \",DET\"\n        if re.match(r\"[\u3053\u305d\u3042\u3069\u6b64\u5176\u5f7c]\", token.surface):\n            return token.pos + \",PRON\"\n        return token.pos + \",ADJ\"\n    return token.pos", "output": "If necessary, add a field to the POS tag for UD mapping.\n    Under Universal Dependencies, sometimes the same Unidic POS tag can\n    be mapped differently depending on the literal token or its context\n    in the sentence. This function adds information to the POS tag to\n    resolve ambiguous mappings.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_update_available(self):\n        \"\"\"\n        \"\"\"\n        # Don't perform any check for development versions\n        if 'dev' in self.version:\n            return (False, latest_release)\n\n        # Filter releases\n        if is_stable_version(self.version):\n            releases = [r for r in self.releases if is_stable_version(r)]\n        else:\n            releases = [r for r in self.releases\n                        if not is_stable_version(r) or r in self.version]\n\n        latest_release = releases[-1]\n\n        return (check_version(self.version, latest_release, '<'),\n                latest_release)", "output": "Checks if there is an update available.\n\n        It takes as parameters the current version of Spyder and a list of\n        valid cleaned releases in chronological order.\n        Example: ['2.3.2', '2.3.3' ...] or with github ['2.3.4', '2.3.3' ...]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pairwise_euclid_distance(A, B):\n    \"\"\"\n    \"\"\"\n    batchA = tf.shape(A)[0]\n    batchB = tf.shape(B)[0]\n\n    sqr_norm_A = tf.reshape(tf.reduce_sum(tf.pow(A, 2), 1), [1, batchA])\n    sqr_norm_B = tf.reshape(tf.reduce_sum(tf.pow(B, 2), 1), [batchB, 1])\n    inner_prod = tf.matmul(B, A, transpose_b=True)\n\n    tile_1 = tf.tile(sqr_norm_A, [batchB, 1])\n    tile_2 = tf.tile(sqr_norm_B, [1, batchA])\n    return (tile_1 + tile_2 - 2 * inner_prod)", "output": "Pairwise Euclidean distance between two matrices.\n    :param A: a matrix.\n    :param B: a matrix.\n\n    :returns: A tensor for the pairwise Euclidean between A and B.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dropna(self, how='any', thresh=None, subset=None):\n        \"\"\"\n        \"\"\"\n        if how is not None and how not in ['any', 'all']:\n            raise ValueError(\"how ('\" + how + \"') should be 'any' or 'all'\")\n\n        if subset is None:\n            subset = self.columns\n        elif isinstance(subset, basestring):\n            subset = [subset]\n        elif not isinstance(subset, (list, tuple)):\n            raise ValueError(\"subset should be a list or tuple of column names\")\n\n        if thresh is None:\n            thresh = len(subset) if how == 'any' else 1\n\n        return DataFrame(self._jdf.na().drop(thresh, self._jseq(subset)), self.sql_ctx)", "output": "Returns a new :class:`DataFrame` omitting rows with null values.\n        :func:`DataFrame.dropna` and :func:`DataFrameNaFunctions.drop` are aliases of each other.\n\n        :param how: 'any' or 'all'.\n            If 'any', drop a row if it contains any nulls.\n            If 'all', drop a row only if all its values are null.\n        :param thresh: int, default None\n            If specified, drop rows that have less than `thresh` non-null values.\n            This overwrites the `how` parameter.\n        :param subset: optional list of column names to consider.\n\n        >>> df4.na.drop().show()\n        +---+------+-----+\n        |age|height| name|\n        +---+------+-----+\n        | 10|    80|Alice|\n        +---+------+-----+", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _convert_to_border(cls, border_dict):\n        \"\"\"\n        \n        \"\"\"\n\n        from openpyxl.styles import Border\n\n        _border_key_map = {\n            'diagonalup': 'diagonalUp',\n            'diagonaldown': 'diagonalDown',\n        }\n\n        border_kwargs = {}\n        for k, v in border_dict.items():\n            if k in _border_key_map:\n                k = _border_key_map[k]\n            if k == 'color':\n                v = cls._convert_to_color(v)\n            if k in ['left', 'right', 'top', 'bottom', 'diagonal']:\n                v = cls._convert_to_side(v)\n            border_kwargs[k] = v\n\n        return Border(**border_kwargs)", "output": "Convert ``border_dict`` to an openpyxl v2 Border object\n        Parameters\n        ----------\n        border_dict : dict\n            A dict with zero or more of the following keys (or their synonyms).\n                'left'\n                'right'\n                'top'\n                'bottom'\n                'diagonal'\n                'diagonal_direction'\n                'vertical'\n                'horizontal'\n                'diagonalUp' ('diagonalup')\n                'diagonalDown' ('diagonaldown')\n                'outline'\n        Returns\n        -------\n        border : openpyxl.styles.Border", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def main():\n    \"\"\"\"\"\"\n    desc = 'Generate character statistics from a source tree'\n    parser = argparse.ArgumentParser(description=desc)\n    parser.add_argument(\n        '--src',\n        dest='src',\n        required=True,\n        help='The root of the source tree'\n    )\n    parser.add_argument(\n        '--out',\n        dest='out',\n        default='chars.py',\n        help='The output filename'\n    )\n\n    args = parser.parse_args()\n\n    stats = generate_statistics(args.src)\n    with open(args.out, 'wb') as out_f:\n        out_f.write('CHARS={0}\\n'.format(stats))", "output": "The main function of the script", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def annotation_path(cls, project, incident, annotation):\n        \"\"\"\"\"\"\n        return google.api_core.path_template.expand(\n            \"projects/{project}/incidents/{incident}/annotations/{annotation}\",\n            project=project,\n            incident=incident,\n            annotation=annotation,\n        )", "output": "Return a fully-qualified annotation string.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __clean_tmp(sfn):\n    '''\n    \n    '''\n    if sfn.startswith(os.path.join(tempfile.gettempdir(),\n                                   salt.utils.files.TEMPFILE_PREFIX)):\n        # Don't remove if it exists in file_roots (any saltenv)\n        all_roots = itertools.chain.from_iterable(\n                six.itervalues(__opts__['file_roots']))\n        in_roots = any(sfn.startswith(root) for root in all_roots)\n        # Only clean up files that exist\n        if os.path.exists(sfn) and not in_roots:\n            os.remove(sfn)", "output": "Clean out a template temp file", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def catalog(self):\n        \"\"\"\n        \"\"\"\n        from pyspark.sql.catalog import Catalog\n        if not hasattr(self, \"_catalog\"):\n            self._catalog = Catalog(self)\n        return self._catalog", "output": "Interface through which the user may create, drop, alter or query underlying\n        databases, tables, functions etc.\n\n        :return: :class:`Catalog`", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def encode(self, s):\n    \"\"\"\n    \"\"\"\n    try:\n      import matplotlib.image as im  # pylint: disable=g-import-not-at-top\n    except ImportError as e:\n      tf.logging.warning(\n          \"Reading an image requires matplotlib to be installed: %s\", e)\n      raise NotImplementedError(\"Image reading not implemented.\")\n    return im.imread(s)", "output": "Transform a string with a filename into a list of RGB integers.\n\n    Args:\n      s: path to the file with an image.\n\n    Returns:\n      ids: list of integers", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def download_mp4(from_idx, to_idx, _params):\n    \"\"\"\n    \n    \"\"\"\n    succ = set()\n    fail = set()\n    for idx in range(from_idx, to_idx):\n        name = 's' + str(idx)\n        save_folder = '{src_path}/{nm}'.format(src_path=_params['src_path'], nm=name)\n        if idx == 0 or os.path.isdir(save_folder):\n            continue\n        script = \"http://spandh.dcs.shef.ac.uk/gridcorpus/{nm}/video/{nm}.mpg_vcd.zip\".format( \\\n                    nm=name)\n        down_sc = 'cd {src_path} && curl {script} --output {nm}.mpg_vcd.zip && \\\n                    unzip {nm}.mpg_vcd.zip'.format(script=script,\n                                                   nm=name,\n                                                   src_path=_params['src_path'])\n        try:\n            print(down_sc)\n            os.system(down_sc)\n            succ.add(idx)\n        except OSError as error:\n            print(error)\n            fail.add(idx)\n    return (succ, fail)", "output": "download mp4s", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def MapDecoder(field_descriptor, new_default, is_message_map):\n  \"\"\"\"\"\"\n\n  key = field_descriptor\n  tag_bytes = encoder.TagBytes(field_descriptor.number,\n                               wire_format.WIRETYPE_LENGTH_DELIMITED)\n  tag_len = len(tag_bytes)\n  local_DecodeVarint = _DecodeVarint\n  # Can't read _concrete_class yet; might not be initialized.\n  message_type = field_descriptor.message_type\n\n  def DecodeMap(buffer, pos, end, message, field_dict):\n    submsg = message_type._concrete_class()\n    value = field_dict.get(key)\n    if value is None:\n      value = field_dict.setdefault(key, new_default(message))\n    while 1:\n      # Read length.\n      (size, pos) = local_DecodeVarint(buffer, pos)\n      new_pos = pos + size\n      if new_pos > end:\n        raise _DecodeError('Truncated message.')\n      # Read sub-message.\n      submsg.Clear()\n      if submsg._InternalParse(buffer, pos, new_pos) != new_pos:\n        # The only reason _InternalParse would return early is if it\n        # encountered an end-group tag.\n        raise _DecodeError('Unexpected end-group tag.')\n\n      if is_message_map:\n        value[submsg.key].MergeFrom(submsg.value)\n      else:\n        value[submsg.key] = submsg.value\n\n      # Predict that the next tag is another copy of the same repeated field.\n      pos = new_pos + tag_len\n      if buffer[new_pos:pos] != tag_bytes or new_pos == end:\n        # Prediction failed.  Return.\n        return new_pos\n\n  return DecodeMap", "output": "Returns a decoder for a map field.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_summary_metadata(display_name, description, num_thresholds):\n  \"\"\"\n  \"\"\"\n  pr_curve_plugin_data = plugin_data_pb2.PrCurvePluginData(\n      version=PROTO_VERSION, num_thresholds=num_thresholds)\n  content = pr_curve_plugin_data.SerializeToString()\n  return summary_pb2.SummaryMetadata(\n      display_name=display_name,\n      summary_description=description,\n      plugin_data=summary_pb2.SummaryMetadata.PluginData(\n          plugin_name=PLUGIN_NAME,\n          content=content))", "output": "Create a `summary_pb2.SummaryMetadata` proto for pr_curves plugin data.\n\n  Arguments:\n    display_name: The display name used in TensorBoard.\n    description: The description to show in TensorBoard.\n    num_thresholds: The number of thresholds to use for PR curves.\n\n  Returns:\n    A `summary_pb2.SummaryMetadata` protobuf object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def error_msg_from_exception(e):\n    \"\"\"\n    \"\"\"\n    msg = ''\n    if hasattr(e, 'message'):\n        if isinstance(e.message, dict):\n            msg = e.message.get('message')\n        elif e.message:\n            msg = '{}'.format(e.message)\n    return msg or '{}'.format(e)", "output": "Translate exception into error message\n\n    Database have different ways to handle exception. This function attempts\n    to make sense of the exception object and construct a human readable\n    sentence.\n\n    TODO(bkyryliuk): parse the Presto error message from the connection\n                     created via create_engine.\n    engine = create_engine('presto://localhost:3506/silver') -\n      gives an e.message as the str(dict)\n    presto.connect('localhost', port=3506, catalog='silver') - as a dict.\n    The latter version is parsed correctly by this function.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _connect(**kwargs):\n    '''\n    \n    '''\n    connargs = {}\n    for name in ['uri', 'server', 'port', 'tls', 'no_verify', 'binddn',\n                 'bindpw', 'anonymous']:\n        connargs[name] = _config(name, **kwargs)\n\n    return _LDAPConnection(**connargs).ldap", "output": "Instantiate LDAP Connection class and return an LDAP connection object", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pprint(self, *args, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        pprint.pprint(self.asList(), *args, **kwargs)", "output": "Pretty-printer for parsed results as a list, using the\n        `pprint <https://docs.python.org/3/library/pprint.html>`_ module.\n        Accepts additional positional or keyword args as defined for\n        `pprint.pprint <https://docs.python.org/3/library/pprint.html#pprint.pprint>`_ .\n\n        Example::\n\n            ident = Word(alphas, alphanums)\n            num = Word(nums)\n            func = Forward()\n            term = ident | num | Group('(' + func + ')')\n            func <<= ident + Group(Optional(delimitedList(term)))\n            result = func.parseString(\"fna a,b,(fnb c,d,200),100\")\n            result.pprint(width=40)\n\n        prints::\n\n            ['fna',\n             ['a',\n              'b',\n              ['(', 'fnb', ['c', 'd', '200'], ')'],\n              '100']]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def filter_by_func(self, func:Callable)->'ItemList':\n        \"\"\n        self.items = array([o for o in self.items if func(o)])\n        return self", "output": "Only keep elements for which `func` returns `True`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _path_condition_name(self, api_id, path):\n        \"\"\"\n        \n        \"\"\"\n        # only valid characters for CloudFormation logical id are [A-Za-z0-9], but swagger paths can contain\n        # slashes and curly braces for templated params, e.g., /foo/{customerId}. So we'll replace\n        # non-alphanumeric characters.\n        path_logical_id = path.replace('/', 'SLASH').replace('{', 'OB').replace('}', 'CB')\n        return '{}{}PathCondition'.format(api_id, path_logical_id)", "output": "Generate valid condition logical id from the given API logical id and swagger resource path.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def process_request_body(fn):\n    '''\n    \n    '''\n    @functools.wraps(fn)\n    def wrapped(*args, **kwargs):  # pylint: disable=C0111\n        if cherrypy.request.process_request_body is not False:\n            fn(*args, **kwargs)\n    return wrapped", "output": "A decorator to skip a processor function if process_request_body is False", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_column(self, data, column_name=\"\", inplace=False):\n        \"\"\"\n        \n        \"\"\"\n        # Check type for pandas dataframe or SArray?\n        if not isinstance(data, SArray):\n            raise TypeError(\"Must give column as SArray\")\n        if not isinstance(column_name, str):\n            raise TypeError(\"Invalid column name: must be str\")\n\n        if inplace:\n            self.__is_dirty__ = True\n            with cython_context():\n                if self._is_vertex_frame():\n                    graph_proxy = self.__graph__.__proxy__.add_vertex_field(data.__proxy__, column_name)\n                    self.__graph__.__proxy__ = graph_proxy\n                elif self._is_edge_frame():\n                    graph_proxy = self.__graph__.__proxy__.add_edge_field(data.__proxy__, column_name)\n                    self.__graph__.__proxy__ = graph_proxy\n            return self\n        else:\n            return super(GFrame, self).add_column(data, column_name, inplace=inplace)", "output": "Adds the specified column to this SFrame.  The number of elements in\n        the data given must match every other column of the SFrame.\n\n        If inplace == False (default) this operation does not modify the\n        current SFrame, returning a new SFrame.\n\n        If inplace == True, this operation modifies the current\n        SFrame, returning self.\n\n        Parameters\n        ----------\n        data : SArray\n            The 'column' of data.\n\n        column_name : string\n            The name of the column. If no name is given, a default name is chosen.\n\n        inplace : bool, optional. Defaults to False.\n            Whether the SFrame is modified in place.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reraise(additional_msg):\n  \"\"\"\"\"\"\n  exc_type, exc_value, exc_traceback = sys.exc_info()\n  msg = str(exc_value) + \"\\n\" + additional_msg\n  six.reraise(exc_type, exc_type(msg), exc_traceback)", "output": "Reraise an exception with an additional message.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _memoize(f):\n  \"\"\"\"\"\"\n  nothing = object()  # Unique \"no value\" sentinel object.\n  cache = {}\n  # Use a reentrant lock so that if f references the resulting wrapper we die\n  # with recursion depth exceeded instead of deadlocking.\n  lock = threading.RLock()\n  @functools.wraps(f)\n  def wrapper(arg):\n    if cache.get(arg, nothing) is nothing:\n      with lock:\n        if cache.get(arg, nothing) is nothing:\n          cache[arg] = f(arg)\n    return cache[arg]\n  return wrapper", "output": "Memoizing decorator for f, which must have exactly 1 hashable argument.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_close(self):\n        ''' \n\n        '''\n        log.info('WebSocket connection closed: code=%s, reason=%r', self.close_code, self.close_reason)\n        if self.connection is not None:\n            self.application.client_lost(self.connection)", "output": "Clean up when the connection is closed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lossless_float_to_int(funcname, func, argname, arg):\n    \"\"\"\n    \n    \"\"\"\n    if not isinstance(arg, float):\n        return arg\n\n    arg_as_int = int(arg)\n    if arg == arg_as_int:\n        warnings.warn(\n            \"{f} expected an int for argument {name!r}, but got float {arg}.\"\n            \" Coercing to int.\".format(\n                f=funcname,\n                name=argname,\n                arg=arg,\n            ),\n        )\n        return arg_as_int\n\n    raise TypeError(arg)", "output": "A preprocessor that coerces integral floats to ints.\n\n    Receipt of non-integral floats raises a TypeError.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_indicator_MFI(DataFrame, N=14):\n    \"\"\"\n    \n    \"\"\"\n    C = DataFrame['close']\n    H = DataFrame['high']\n    L = DataFrame['low']\n    VOL = DataFrame['volume']\n    TYP = (C + H + L) / 3\n    V1 = SUM(IF(TYP > REF(TYP, 1), TYP * VOL, 0), N) / \\\n        SUM(IF(TYP < REF(TYP, 1), TYP * VOL, 0), N)\n    mfi = 100 - (100 / (1 + V1))\n    DICT = {'MFI': mfi}\n\n    return pd.DataFrame(DICT)", "output": "\u8d44\u91d1\u6307\u6807\n    TYP := (HIGH + LOW + CLOSE)/3;\n    V1:=SUM(IF(TYP>REF(TYP,1),TYP*VOL,0),N)/SUM(IF(TYP<REF(TYP,1),TYP*VOL,0),N);\n    MFI:100-(100/(1+V1));\n    \u8d4b\u503c: (\u6700\u9ad8\u4ef7 + \u6700\u4f4e\u4ef7 + \u6536\u76d8\u4ef7)/3\n    V1\u8d4b\u503c:\u5982\u679cTYP>1\u65e5\u524d\u7684TYP,\u8fd4\u56deTYP*\u6210\u4ea4\u91cf(\u624b),\u5426\u5219\u8fd4\u56de0\u7684N\u65e5\u7d2f\u548c/\u5982\u679cTYP<1\u65e5\u524d\u7684TYP,\u8fd4\u56deTYP*\u6210\u4ea4\u91cf(\u624b),\u5426\u5219\u8fd4\u56de0\u7684N\u65e5\u7d2f\u548c\n    \u8f93\u51fa\u8d44\u91d1\u6d41\u91cf\u6307\u6807:100-(100/(1+V1))", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def expand(tmpl, *args, **kwargs):\n    \"\"\"\n    \"\"\"\n    replacer = functools.partial(_expand_variable_match, list(args), kwargs)\n    return _VARIABLE_RE.sub(replacer, tmpl)", "output": "Expand a path template with the given variables.\n\n    ..code-block:: python\n\n        >>> expand('users/*/messages/*', 'me', '123')\n        users/me/messages/123\n        >>> expand('/v1/{name=shelves/*/books/*}', name='shelves/1/books/3')\n        /v1/shelves/1/books/3\n\n    Args:\n        tmpl (str): The path template.\n        args: The positional variables for the path.\n        kwargs: The named variables for the path.\n\n    Returns:\n        str: The expanded path\n\n    Raises:\n        ValueError: If a positional or named variable is required by the\n            template but not specified or if an unexpected template expression\n            is encountered.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def items(self):\n        \"\"\"\"\"\"\n        result = [(key, self._mapping[key]) for key in list(self._queue)]\n        result.reverse()\n        return result", "output": "Return a list of items.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def wait_for_winexe(host, port, username, password, timeout=900):\n    '''\n    \n    '''\n    start = time.time()\n    log.debug(\n        'Attempting winexe connection to host %s on port %s',\n        host, port\n    )\n    try_count = 0\n    while True:\n        try_count += 1\n        try:\n            # Shell out to winexe to check %TEMP%\n            ret_code = run_winexe_command(\n                \"sc\", \"query winexesvc\", host, username, password, port\n            )\n            if ret_code == 0:\n                log.debug('winexe connected...')\n                return True\n            log.debug('Return code was %s', ret_code)\n        except socket.error as exc:\n            log.debug('Caught exception in wait_for_winexesvc: %s', exc)\n\n        if time.time() - start > timeout:\n            return False\n        time.sleep(1)", "output": "Wait until winexe connection can be established.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_author(self, *, name, url=EmptyEmbed, icon_url=EmptyEmbed):\n        \"\"\"\n        \"\"\"\n\n        self._author = {\n            'name': str(name)\n        }\n\n        if url is not EmptyEmbed:\n            self._author['url'] = str(url)\n\n        if icon_url is not EmptyEmbed:\n            self._author['icon_url'] = str(icon_url)\n\n        return self", "output": "Sets the author for the embed content.\n\n        This function returns the class instance to allow for fluent-style\n        chaining.\n\n        Parameters\n        -----------\n        name: :class:`str`\n            The name of the author.\n        url: :class:`str`\n            The URL for the author.\n        icon_url: :class:`str`\n            The URL of the author icon. Only HTTP(S) is supported.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def minimum(lhs, rhs):\n    \"\"\"\n    \"\"\"\n    # pylint: disable= no-member, protected-access\n    return _ufunc_helper(\n        lhs,\n        rhs,\n        op.broadcast_minimum,\n        lambda x, y: x if x < y else y,\n        _internal._minimum_scalar,\n        None)", "output": "Returns element-wise minimum of the input arrays with broadcasting.\n\n    Equivalent to ``mx.nd.broadcast_minimum(lhs, rhs)``.\n\n    .. note::\n\n       If the corresponding dimensions of two arrays have the same size or one of them has size 1,\n       then the arrays are broadcastable to a common shape.\n\n    Parameters\n    ----------\n    lhs : scalar or mxnet.ndarray.array\n        First array to be compared.\n    rhs : scalar or mxnet.ndarray.array\n         Second array to be compared. If ``lhs.shape != rhs.shape``, they must be\n        broadcastable to a common shape.\n\n    Returns\n    -------\n    NDArray\n        The element-wise minimum of the input arrays.\n\n    Examples\n    --------\n    >>> x = mx.nd.ones((2,3))\n    >>> y = mx.nd.arange(2).reshape((2,1))\n    >>> z = mx.nd.arange(2).reshape((1,2))\n    >>> x.asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> y.asnumpy()\n    array([[ 0.],\n           [ 1.]], dtype=float32)\n    >>> z.asnumpy()\n    array([[ 0.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, 2).asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, y).asnumpy()\n    array([[ 0.,  0.,  0.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(z, y).asnumpy()\n    array([[ 0.,  0.],\n           [ 0.,  1.]], dtype=float32)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def diff(self, n, axis=0):\n        \"\"\"\n        \"\"\"\n        if axis == 0:\n            # Cannot currently calculate diff across multiple blocks since this\n            # function is invoked via apply\n            raise NotImplementedError\n        new_values = (self.values - self.shift(n, axis=axis)[0].values).asi8\n\n        # Reshape the new_values like how algos.diff does for timedelta data\n        new_values = new_values.reshape(1, len(new_values))\n        new_values = new_values.astype('timedelta64[ns]')\n        return [TimeDeltaBlock(new_values, placement=self.mgr_locs.indexer)]", "output": "1st discrete difference\n\n        Parameters\n        ----------\n        n : int, number of periods to diff\n        axis : int, axis to diff upon. default 0\n\n        Return\n        ------\n        A list with a new TimeDeltaBlock.\n\n        Note\n        ----\n        The arguments here are mimicking shift so they are called correctly\n        by apply.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read(domain, key, user=None):\n    '''\n    \n\n    '''\n    cmd = 'defaults read \"{0}\" \"{1}\"'.format(domain, key)\n    return __salt__['cmd.run'](cmd, runas=user)", "output": "Write a default to the system\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' macdefaults.read com.apple.CrashReporter DialogType\n\n        salt '*' macdefaults.read NSGlobalDomain ApplePersistence\n\n    domain\n        The name of the domain to read from\n\n    key\n        The key of the given domain to read from\n\n    user\n        The user to write the defaults to", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset(self):\n        \"\"\"\"\"\"\n        self.curr_idx = 0\n        #shuffle data in each bucket\n        random.shuffle(self.idx)\n        for i, buck in enumerate(self.sentences):\n            self.indices[i], self.sentences[i], self.characters[i], self.label[i] = shuffle(self.indices[i],\n                                                                                            self.sentences[i],\n                                                                                            self.characters[i],\n                                                                                            self.label[i])\n\n        self.ndindex = []\n        self.ndsent = []\n        self.ndchar = []\n        self.ndlabel = []\n\n        #for each bucket of data\n        for i, buck in enumerate(self.sentences):\n            #append the lists with an array\n            self.ndindex.append(ndarray.array(self.indices[i], dtype=self.dtype))\n            self.ndsent.append(ndarray.array(self.sentences[i], dtype=self.dtype))\n            self.ndchar.append(ndarray.array(self.characters[i], dtype=self.dtype))\n            self.ndlabel.append(ndarray.array(self.label[i], dtype=self.dtype))", "output": "Resets the iterator to the beginning of the data.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def DiagonalGate(x, params, **kwargs):\n  \"\"\"\"\"\"\n  del params\n  del kwargs\n  # x : [batch, 1, length, depth]\n  x = np.pad(\n      x, [(0, 0), (0, 0), (1, 1), (0, 0)], mode='constant', constant_values=0.0)\n  depth = x.shape[-1] // 3\n  assert 3 * depth == x.shape[-1], ('Depth must be divisible by 3', depth,\n                                    x.shape)\n  xs = [\n      x[:, :, :-2, :depth], x[:, :, 1:-1, depth:2 * depth],\n      x[:, :, 2:, 2 * depth:3 * depth]\n  ]\n  return np.concatenate(xs, axis=3)", "output": "Split channels in 3 parts. Shifts 1st and 3rd sections to left/right.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_thing_shadow(self, **kwargs):\n        \n        \"\"\"\n        thing_name = self._get_required_parameter('thingName', **kwargs)\n        payload = self._get_required_parameter('payload', **kwargs)\n\n        return self._shadow_op('update', thing_name, payload)", "output": "r\"\"\"\n        Updates the thing shadow for the specified thing.\n\n        :Keyword Arguments:\n            * *thingName* (``string``) --\n              [REQUIRED]\n              The name of the thing.\n            * *payload* (``bytes or seekable file-like object``) --\n              [REQUIRED]\n              The state information, in JSON format.\n\n        :returns: (``dict``) --\n        The output from the UpdateThingShadow operation\n            * *payload* (``bytes``) --\n              The state information, in JSON format.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def refresh(self):\r\n        \"\"\"\"\"\"\r\n        self._update_id_list()\r\n        for _id in self.history[:]:\r\n            if _id not in self.id_list:\r\n                self.history.remove(_id)", "output": "Remove editors that are not longer open.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_summary_struct(self):\n        \"\"\"\n        \n        \"\"\"\n\n        model_fields = [\n            (\"Method\", 'method'),\n            (\"Number of distance components\", 'num_distance_components'),\n            (\"Number of examples\", 'num_examples'),\n            (\"Number of feature columns\", 'num_features'),\n            (\"Number of unpacked features\", 'num_unpacked_features'),\n            (\"Total training time (seconds)\", 'training_time')]\n\n        ball_tree_fields = [\n            (\"Tree depth\", 'tree_depth'),\n            (\"Leaf size\", 'leaf_size')]\n\n        lsh_fields = [\n            (\"Number of hash tables\", 'num_tables'),\n            (\"Number of projections per table\", 'num_projections_per_table')]\n\n        sections = [model_fields]\n        section_titles = ['Attributes']\n\n        if (self.method == 'ball_tree'):\n            sections.append(ball_tree_fields)\n            section_titles.append('Ball Tree Attributes')\n\n        if (self.method == 'lsh'):\n            sections.append(lsh_fields)\n            section_titles.append('LSH Attributes')\n\n        return (sections, section_titles)", "output": "Returns a structured description of the model, including (where\n        relevant) the schema of the training data, description of the training\n        data, training statistics, and model hyperparameters.\n\n        Returns\n        -------\n        sections : list (of list of tuples)\n            A list of summary sections.\n              Each section is a list.\n                Each item in a section list is a tuple of the form:\n                  ('<label>','<field>')\n        section_titles: list\n            A list of section titles.\n              The order matches that of the 'sections' object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def parse(self, input):\n        \"\"\"\n        \n        \"\"\"\n        result = self._parseIso8601(input)\n        if not result:\n            result = self._parseSimple(input)\n        if result is not None:\n            return result\n        else:\n            raise ParameterException(\"Invalid time delta - could not parse %s\" % input)", "output": "Parses a time delta from the input.\n\n        See :py:class:`TimeDeltaParameter` for details on supported formats.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def run_migrations_online():\n    \"\"\"\n\n    \"\"\"\n\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: https://alembic.sqlalchemy.org/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):\n            script = directives[0]\n            if script.upgrade_ops.is_empty():\n                directives[:] = []\n                logger.info('No changes in schema detected.')\n\n    engine = engine_from_config(config.get_section(config.config_ini_section),\n                                prefix='sqlalchemy.',\n                                poolclass=pool.NullPool)\n\n    connection = engine.connect()\n    kwargs = {}\n    if engine.name in ('sqlite', 'mysql'):\n        kwargs = {\n            'transaction_per_migration': True,\n            'transactional_ddl': True,\n        }\n    configure_args = current_app.extensions['migrate'].configure_args\n    if configure_args:\n        kwargs.update(configure_args)\n\n    context.configure(connection=connection,\n                      target_metadata=target_metadata,\n                      # compare_type=True,\n                      process_revision_directives=process_revision_directives,\n                      **kwargs)\n\n    try:\n        with context.begin_transaction():\n            context.run_migrations()\n    finally:\n        connection.close()", "output": "Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def center_crop(im, min_sz=None):\n    \"\"\"  \"\"\"\n    r,c,*_ = im.shape\n    if min_sz is None: min_sz = min(r,c)\n    start_r = math.ceil((r-min_sz)/2)\n    start_c = math.ceil((c-min_sz)/2)\n    return crop(im, start_r, start_c, min_sz)", "output": "Return a center crop of an image", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _lazily_initialize(self):\n    \"\"\"\"\"\"\n    # TODO(nickfelt): remove on-demand imports once dep situation is fixed.\n    import tensorflow.compat.v1 as tf\n    with self._initialization_lock:\n      if self._session:\n        return\n      graph = tf.Graph()\n      with graph.as_default():\n        self.initialize_graph()\n      # Don't reserve GPU because libpng can't run on GPU.\n      config = tf.ConfigProto(device_count={'GPU': 0})\n      self._session = tf.Session(graph=graph, config=config)", "output": "Initialize the graph and session, if this has not yet been done.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def global_lppooling(attrs, inputs, proto_obj):\n    \"\"\"\"\"\"\n    p_value = attrs.get('p', 2)\n    new_attrs = translation_utils._add_extra_attributes(attrs, {'global_pool': True,\n                                                                'kernel': (1, 1),\n                                                                'pool_type': 'lp',\n                                                                'p_value': p_value})\n    new_attrs = translation_utils._remove_attributes(new_attrs, ['p'])\n    return 'Pooling', new_attrs, inputs", "output": "Performs global lp pooling on the input.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_train_begin(self, **kwargs: Any) -> None:\n        \"\"\n        self.path.parent.mkdir(parents=True, exist_ok=True)      \n        self.file = self.path.open('a') if self.append else self.path.open('w')\n        self.file.write(','.join(self.learn.recorder.names[:(None if self.add_time else -1)]) + '\\n')", "output": "Prepare file with metric names.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def apply(\n        self,\n        func,\n        num_splits=None,\n        other_axis_partition=None,\n        maintain_partitioning=True,\n        **kwargs\n    ):\n        \"\"\"\n        \"\"\"\n        import dask\n\n        if num_splits is None:\n            num_splits = len(self.list_of_blocks)\n\n        if other_axis_partition is not None:\n            return [\n                DaskFramePartition(dask.delayed(obj))\n                for obj in deploy_func_between_two_axis_partitions(\n                    self.axis,\n                    func,\n                    num_splits,\n                    len(self.list_of_blocks),\n                    kwargs,\n                    *dask.compute(\n                        *tuple(\n                            self.list_of_blocks + other_axis_partition.list_of_blocks\n                        )\n                    )\n                )\n            ]\n\n        args = [self.axis, func, num_splits, kwargs, maintain_partitioning]\n\n        args.extend(dask.compute(*self.list_of_blocks))\n        return [\n            DaskFramePartition(dask.delayed(obj)) for obj in deploy_axis_func(*args)\n        ]", "output": "Applies func to the object.\n\n        See notes in Parent class about this method.\n\n        Args:\n            func: The function to apply.\n            num_splits: The number of times to split the result object.\n            other_axis_partition: Another `DaskFrameAxisPartition` object to apply to\n                func with this one.\n\n        Returns:\n            A list of `DaskFramePartition` objects.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _field_to_json(field, row_value):\n    \"\"\"\n    \"\"\"\n    if row_value is None:\n        return None\n\n    if field.mode == \"REPEATED\":\n        return _repeated_field_to_json(field, row_value)\n\n    if field.field_type == \"RECORD\":\n        return _record_field_to_json(field.fields, row_value)\n\n    return _scalar_field_to_json(field, row_value)", "output": "Convert a field into JSON-serializable values.\n\n    Args:\n        field ( \\\n            :class:`~google.cloud.bigquery.schema.SchemaField`, \\\n        ):\n            The SchemaField to use for type conversion and field name.\n\n        row_value (Union[ \\\n            Sequence[list], \\\n            any, \\\n        ]):\n            Row data to be inserted. If the SchemaField's mode is\n            REPEATED, assume this is a list. If not, the type\n            is inferred from the SchemaField's field_type.\n\n    Returns:\n        any:\n            A JSON-serializable object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _generate_examples(self, filepath):\n    \"\"\"\n    \"\"\"\n    # Simultaneously iterating through the different data sets in the hdf5\n    # file is >100x slower and the data set is small (26.7MB). Hence, we first\n    # load everything into memory before yielding the samples.\n    image_array, class_array, values_array = _load_data(filepath)\n    for image, classes, values in moves.zip(image_array, class_array,\n                                            values_array):\n      yield dict(\n          image=np.expand_dims(image, -1),\n          label_shape=classes[1],\n          label_scale=classes[2],\n          label_orientation=classes[3],\n          label_x_position=classes[4],\n          label_y_position=classes[5],\n          value_shape=values[1],\n          value_scale=values[2],\n          value_orientation=values[3],\n          value_x_position=values[4],\n          value_y_position=values[5])", "output": "Generates examples for the dSprites data set.\n\n    Args:\n      filepath: path to the dSprites hdf5 file.\n\n    Yields:\n      Dictionaries with images, latent classes, and latent values.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def copy(self, existing_inputs):\n        \"\"\"\"\"\"\n        return PPOPolicyGraph(\n            self.observation_space,\n            self.action_space,\n            self.config,\n            existing_inputs=existing_inputs)", "output": "Creates a copy of self using existing input placeholders.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sinks_api(self):\n        \"\"\"\n        \"\"\"\n        if self._sinks_api is None:\n            if self._use_grpc:\n                self._sinks_api = _gapic.make_sinks_api(self)\n            else:\n                self._sinks_api = JSONSinksAPI(self)\n        return self._sinks_api", "output": "Helper for log sink-related API calls.\n\n        See\n        https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.sinks", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def detect_django_settings():\n    \"\"\"\n    \n    \"\"\"\n\n    matches = []\n    for root, dirnames, filenames in os.walk(os.getcwd()):\n        for filename in fnmatch.filter(filenames, '*settings.py'):\n            full = os.path.join(root, filename)\n            if 'site-packages' in full:\n                continue\n            full = os.path.join(root, filename)\n            package_path = full.replace(os.getcwd(), '')\n            package_module = package_path.replace(os.sep, '.').split('.', 1)[1].replace('.py', '')\n\n            matches.append(package_module)\n    return matches", "output": "Automatically try to discover Django settings files,\n    return them as relative module paths.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def exists(self, path):\n        \"\"\"\n        \n        \"\"\"\n        import hdfs\n        try:\n            self.client.status(path)\n            return True\n        except hdfs.util.HdfsError as e:\n            if str(e).startswith('File does not exist: '):\n                return False\n            else:\n                raise e", "output": "Returns true if the path exists and false otherwise.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dump(self, directory=''):\n        \"\"\"\n        \n        \"\"\"\n        with self.no_unpicklable_properties():\n            file_name = os.path.join(directory, 'job-instance.pickle')\n            if self.__module__ == '__main__':\n                d = pickle.dumps(self)\n                module_name = os.path.basename(sys.argv[0]).rsplit('.', 1)[0]\n                d = d.replace(b'(c__main__', \"(c\" + module_name)\n                open(file_name, \"wb\").write(d)\n\n            else:\n                pickle.dump(self, open(file_name, \"wb\"))", "output": "Dump instance to file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def install_given_reqs(\n    to_install,  # type: List[InstallRequirement]\n    install_options,  # type: List[str]\n    global_options=(),  # type: Sequence[str]\n    *args, **kwargs\n):\n    # type: (...) -> List[InstallRequirement]\n    \"\"\"\n    \n    \"\"\"\n\n    if to_install:\n        logger.info(\n            'Installing collected packages: %s',\n            ', '.join([req.name for req in to_install]),\n        )\n\n    with indent_log():\n        for requirement in to_install:\n            if requirement.conflicts_with:\n                logger.info(\n                    'Found existing installation: %s',\n                    requirement.conflicts_with,\n                )\n                with indent_log():\n                    uninstalled_pathset = requirement.uninstall(\n                        auto_confirm=True\n                    )\n            try:\n                requirement.install(\n                    install_options,\n                    global_options,\n                    *args,\n                    **kwargs\n                )\n            except Exception:\n                should_rollback = (\n                    requirement.conflicts_with and\n                    not requirement.install_succeeded\n                )\n                # if install did not succeed, rollback previous uninstall\n                if should_rollback:\n                    uninstalled_pathset.rollback()\n                raise\n            else:\n                should_commit = (\n                    requirement.conflicts_with and\n                    requirement.install_succeeded\n                )\n                if should_commit:\n                    uninstalled_pathset.commit()\n            requirement.remove_temporary_source()\n\n    return to_install", "output": "Install everything in the given list.\n\n    (to be called after having downloaded and unpacked the packages)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_balancers(profile, **libcloud_kwargs):\n    '''\n    \n    '''\n    conn = _get_driver(profile=profile)\n    libcloud_kwargs = salt.utils.args.clean_kwargs(**libcloud_kwargs)\n    balancers = conn.list_balancers(**libcloud_kwargs)\n    ret = []\n    for balancer in balancers:\n        ret.append(_simple_balancer(balancer))\n    return ret", "output": "Return a list of load balancers.\n\n    :param profile: The profile key\n    :type  profile: ``str``\n\n    :param libcloud_kwargs: Extra arguments for the driver's list_balancers method\n    :type  libcloud_kwargs: ``dict``\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion libcloud_storage.list_balancers profile1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(self):\n        \"\"\"\n        \"\"\"\n        if len(self.call_queue):\n            return self.apply(lambda x: x).get()\n        try:\n            return ray.get(self.oid)\n        except RayTaskError as e:\n            handle_ray_task_error(e)", "output": "Gets the object out of the plasma store.\n\n        Returns:\n            The object from the plasma store.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _create_blank_page(self):\r\n        \"\"\"\"\"\"\r\n        loading_template = Template(BLANK)\r\n        page = loading_template.substitute(css_path=self.css_path)\r\n        return page", "output": "Create html page to show while the kernel is starting", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _record_hyper_configs(self, hyper_configs):\n        \"\"\"\n        \"\"\"\n        self.hyper_configs.append(hyper_configs)\n        self.configs_perf.append(dict())\n        self.num_finished_configs.append(0)\n        self.num_configs_to_run.append(len(hyper_configs))\n        self.increase_i()", "output": "after generating one round of hyperconfigs, this function records the generated hyperconfigs,\n        creates a dict to record the performance when those hyperconifgs are running, set the number of finished configs\n        in this round to be 0, and increase the round number.\n\n        Parameters\n        ----------\n        hyper_configs: list\n            the generated hyperconfigs", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _to_java_object_rdd(self):\n        \"\"\" \n        \"\"\"\n        rdd = self._pickled()\n        return self.ctx._jvm.SerDeUtil.pythonToJava(rdd._jrdd, True)", "output": "Return a JavaRDD of Object by unpickling\n\n        It will convert each Python object into Java object by Pyrolite, whenever the\n        RDD is serialized in batch or not.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def chhome(name, home, persist=False):\n    '''\n    \n    '''\n    pre_info = info(name)\n    if not pre_info:\n        raise CommandExecutionError(\n            'User \\'{0}\\' does not exist'.format(name)\n        )\n    if home == pre_info['home']:\n        return True\n    cmd = ['usermod', '-d', home]\n    if persist:\n        cmd.append('-m')\n    cmd.append(name)\n    __salt__['cmd.run'](cmd, python_shell=False)\n    return info(name).get('home') == home", "output": "Set a new home directory for an existing user\n\n    name\n        Username to modify\n\n    home\n        New home directory to set\n\n    persist : False\n        Set to ``True`` to prevent configuration files in the new home\n        directory from being overwritten by the files from the skeleton\n        directory.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' user.chhome foo /home/users/foo True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_breakpoints(self):\n        \"\"\"\"\"\"\n        breakpoints = []\n        block = self.editor.document().firstBlock()\n        for line_number in range(1, self.editor.document().blockCount()+1):\n            data = block.userData()\n            if data and data.breakpoint:\n                breakpoints.append((line_number, data.breakpoint_condition))\n            block = block.next()\n        return breakpoints", "output": "Get breakpoints", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def imagetransformer_sep_channels_16l_16h_imgnet_lrg_loc():\n  \"\"\"\"\"\"\n  hparams = imagetransformer_sep_channels_12l_16h_imagenet_large()\n  hparams.num_hidden_layers = 16\n  hparams.local_attention = True\n  hparams.batch_size = 1\n  hparams.block_length = 256\n  return hparams", "output": "separate rgb embeddings.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stats(local=False, remote=False, jail=None, chroot=None, root=None):\n    '''\n    \n    '''\n\n    opts = ''\n    if local:\n        opts += 'l'\n    if remote:\n        opts += 'r'\n\n    cmd = _pkg(jail, chroot, root)\n    cmd.append('stats')\n    if opts:\n        cmd.append('-' + opts)\n    out = __salt__['cmd.run'](cmd, output_loglevel='trace', python_shell=False)\n    return [x.strip('\\t') for x in salt.utils.itertools.split(out, '\\n')]", "output": "Return pkgng stats.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pkg.stats\n\n    local\n        Display stats only for the local package database.\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            salt '*' pkg.stats local=True\n\n    remote\n        Display stats only for the remote package database(s).\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            salt '*' pkg.stats remote=True\n\n    jail\n        Retrieve stats from the specified jail.\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            salt '*' pkg.stats jail=<jail name or id>\n            salt '*' pkg.stats jail=<jail name or id> local=True\n            salt '*' pkg.stats jail=<jail name or id> remote=True\n\n    chroot\n        Retrieve stats from the specified chroot (ignored if ``jail`` is\n        specified).\n\n    root\n        Retrieve stats from the specified root (ignored if ``jail`` is\n        specified).\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            salt '*' pkg.stats chroot=/path/to/chroot\n            salt '*' pkg.stats chroot=/path/to/chroot local=True\n            salt '*' pkg.stats chroot=/path/to/chroot remote=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def toArray(self):\n        \"\"\"\n        \n        \"\"\"\n        if self.isTransposed:\n            return np.asfortranarray(\n                self.values.reshape((self.numRows, self.numCols)))\n        else:\n            return self.values.reshape((self.numRows, self.numCols), order='F')", "output": "Return an numpy.ndarray\n\n        >>> m = DenseMatrix(2, 2, range(4))\n        >>> m.toArray()\n        array([[ 0.,  2.],\n               [ 1.,  3.]])", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def identify_repo(repo_url):\n    \"\"\"\n    \"\"\"\n    repo_url_values = repo_url.split('+')\n    if len(repo_url_values) == 2:\n        repo_type = repo_url_values[0]\n        if repo_type in [\"git\", \"hg\"]:\n            return repo_type, repo_url_values[1]\n        else:\n            raise UnknownRepoType\n    else:\n        if 'git' in repo_url:\n            return 'git', repo_url\n        elif 'bitbucket' in repo_url:\n            return 'hg', repo_url\n        else:\n            raise UnknownRepoType", "output": "Determine if `repo_url` should be treated as a URL to a git or hg repo.\n\n    Repos can be identified by prepending \"hg+\" or \"git+\" to the repo URL.\n\n    :param repo_url: Repo URL of unknown type.\n    :returns: ('git', repo_url), ('hg', repo_url), or None.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_list(user=None, password=None, host=None, port=None, database='admin', authdb=None):\n    '''\n    \n    '''\n    conn = _connect(user, password, host, port, authdb=authdb)\n    if not conn:\n        return 'Failed to connect to mongo database'\n\n    try:\n        log.info('Listing users')\n        mdb = pymongo.database.Database(conn, database)\n\n        output = []\n        mongodb_version = _version(mdb)\n\n        if _LooseVersion(mongodb_version) >= _LooseVersion('2.6'):\n            for user in mdb.command('usersInfo')['users']:\n                output.append(\n                    {'user': user['user'],\n                     'roles': user['roles']}\n                )\n        else:\n            for user in mdb.system.users.find():\n                output.append(\n                    {'user': user['user'],\n                     'readOnly': user.get('readOnly', 'None')}\n                )\n        return output\n\n    except pymongo.errors.PyMongoError as err:\n        log.error('Listing users failed with error: %s', err)\n        return six.text_type(err)", "output": "List users of a MongoDB database\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' mongodb.user_list <user> <password> <host> <port> <database>", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_data(self, minion):\n        '''\n        \n        '''\n        if isinstance(self.raw[minion], six.string_types):\n            return {'host': self.raw[minion]}\n        if isinstance(self.raw[minion], dict):\n            return self.raw[minion]\n        return False", "output": "Return the configured ip", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def instr(str, substr):\n    \"\"\"\n    \n    \"\"\"\n    sc = SparkContext._active_spark_context\n    return Column(sc._jvm.functions.instr(_to_java_column(str), substr))", "output": "Locate the position of the first occurrence of substr column in the given string.\n    Returns null if either of the arguments are null.\n\n    .. note:: The position is not zero based, but 1 based index. Returns 0 if substr\n        could not be found in str.\n\n    >>> df = spark.createDataFrame([('abcd',)], ['s',])\n    >>> df.select(instr(df.s, 'b').alias('s')).collect()\n    [Row(s=2)]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def num_data(self):\n        \"\"\"\n        \"\"\"\n        if self.handle is not None:\n            ret = ctypes.c_int()\n            _safe_call(_LIB.LGBM_DatasetGetNumData(self.handle,\n                                                   ctypes.byref(ret)))\n            return ret.value\n        else:\n            raise LightGBMError(\"Cannot get num_data before construct dataset\")", "output": "Get the number of rows in the Dataset.\n\n        Returns\n        -------\n        number_of_rows : int\n            The number of rows in the Dataset.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def continuous_future(self,\n                          root_symbol_str,\n                          offset=0,\n                          roll='volume',\n                          adjustment='mul'):\n        \"\"\"\n        \"\"\"\n        return self.asset_finder.create_continuous_future(\n            root_symbol_str,\n            offset,\n            roll,\n            adjustment,\n        )", "output": "Create a specifier for a continuous contract.\n\n        Parameters\n        ----------\n        root_symbol_str : str\n            The root symbol for the future chain.\n\n        offset : int, optional\n            The distance from the primary contract. Default is 0.\n\n        roll_style : str, optional\n            How rolls are determined. Default is 'volume'.\n\n        adjustment : str, optional\n            Method for adjusting lookback prices between rolls. Options are\n            'mul', 'add', and None. Default is 'mul'.\n\n        Returns\n        -------\n        continuous_future : ContinuousFuture\n            The continuous future specifier.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pow(self, other, axis=\"columns\", level=None, fill_value=None):\r\n        \"\"\"\r\n        \"\"\"\r\n        return self._binary_op(\r\n            \"pow\", other, axis=axis, level=level, fill_value=fill_value\r\n        )", "output": "Pow this DataFrame against another DataFrame/Series/scalar.\r\n\r\n        Args:\r\n            other: The object to use to apply the pow against this.\r\n            axis: The axis to pow over.\r\n            level: The Multilevel index level to apply pow over.\r\n            fill_value: The value to fill NaNs with.\r\n\r\n        Returns:\r\n            A new DataFrame with the Pow applied.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def schema(self, schema):\n        \"\"\"\n        \"\"\"\n        from pyspark.sql import SparkSession\n        spark = SparkSession.builder.getOrCreate()\n        if isinstance(schema, StructType):\n            jschema = spark._jsparkSession.parseDataType(schema.json())\n            self._jreader = self._jreader.schema(jschema)\n        elif isinstance(schema, basestring):\n            self._jreader = self._jreader.schema(schema)\n        else:\n            raise TypeError(\"schema should be StructType or string\")\n        return self", "output": "Specifies the input schema.\n\n        Some data sources (e.g. JSON) can infer the input schema automatically from data.\n        By specifying the schema here, the underlying data source can skip the schema\n        inference step, and thus speed up data loading.\n\n        :param schema: a :class:`pyspark.sql.types.StructType` object or a DDL-formatted string\n                       (For example ``col0 INT, col1 DOUBLE``).\n\n        >>> s = spark.read.schema(\"col0 INT, col1 DOUBLE\")", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _blobs_page_start(iterator, page, response):\n    \"\"\"\n    \"\"\"\n    page.prefixes = tuple(response.get(\"prefixes\", ()))\n    iterator.prefixes.update(page.prefixes)", "output": "Grab prefixes after a :class:`~google.cloud.iterator.Page` started.\n\n    :type iterator: :class:`~google.api_core.page_iterator.Iterator`\n    :param iterator: The iterator that is currently in use.\n\n    :type page: :class:`~google.cloud.api.core.page_iterator.Page`\n    :param page: The page that was just created.\n\n    :type response: dict\n    :param response: The JSON API response for a page of blobs.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def config(_config=None, **kwargs):\n    \"\"\"\n    \n    \"\"\"\n    if _config is None:\n        _config = {}\n    _config.update(kwargs)\n\n    def wrapper(func):\n        func._config = _config\n        return func\n    return wrapper", "output": "A decorator for setting the default kwargs of `BaseHandler.crawl`.\n    Any self.crawl with this callback will use this config.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _ensure_timestamp_field(dataset_expr, deltas, checkpoints):\n    \"\"\"\n    \"\"\"\n    measure = dataset_expr.dshape.measure\n    if TS_FIELD_NAME not in measure.names:\n        dataset_expr = bz.transform(\n            dataset_expr,\n            **{TS_FIELD_NAME: dataset_expr[AD_FIELD_NAME]}\n        )\n        deltas = _ad_as_ts(deltas)\n        checkpoints = _ad_as_ts(checkpoints)\n    else:\n        _check_datetime_field(TS_FIELD_NAME, measure)\n\n    return dataset_expr, deltas, checkpoints", "output": "Verify that the baseline and deltas expressions have a timestamp field.\n\n    If there is not a ``TS_FIELD_NAME`` on either of the expressions, it will\n    be copied from the ``AD_FIELD_NAME``. If one is provided, then we will\n    verify that it is the correct dshape.\n\n    Parameters\n    ----------\n    dataset_expr : Expr\n        The baseline expression.\n    deltas : Expr or None\n        The deltas expression if any was provided.\n    checkpoints : Expr or None\n        The checkpoints expression if any was provided.\n\n    Returns\n    -------\n    dataset_expr, deltas : Expr\n        The new baseline and deltas expressions to use.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def evaluate(data_loader):\n    \"\"\"\n    \"\"\"\n    translation_out = []\n    all_inst_ids = []\n    avg_loss_denom = 0\n    avg_loss = 0.0\n    for _, (src_seq, tgt_seq, src_valid_length, tgt_valid_length, inst_ids) \\\n            in enumerate(data_loader):\n        src_seq = src_seq.as_in_context(ctx)\n        tgt_seq = tgt_seq.as_in_context(ctx)\n        src_valid_length = src_valid_length.as_in_context(ctx)\n        tgt_valid_length = tgt_valid_length.as_in_context(ctx)\n        # Calculating Loss\n        out, _ = model(src_seq, tgt_seq[:, :-1], src_valid_length, tgt_valid_length - 1)\n        loss = loss_function(out, tgt_seq[:, 1:], tgt_valid_length - 1).mean().asscalar()\n        all_inst_ids.extend(inst_ids.asnumpy().astype(np.int32).tolist())\n        avg_loss += loss * (tgt_seq.shape[1] - 1)\n        avg_loss_denom += (tgt_seq.shape[1] - 1)\n        # Translate\n        samples, _, sample_valid_length =\\\n            translator.translate(src_seq=src_seq, src_valid_length=src_valid_length)\n        max_score_sample = samples[:, 0, :].asnumpy()\n        sample_valid_length = sample_valid_length[:, 0].asnumpy()\n        for i in range(max_score_sample.shape[0]):\n            translation_out.append(\n                [tgt_vocab.idx_to_token[ele] for ele in\n                 max_score_sample[i][1:(sample_valid_length[i] - 1)]])\n    avg_loss = avg_loss / avg_loss_denom\n    real_translation_out = [None for _ in range(len(all_inst_ids))]\n    for ind, sentence in zip(all_inst_ids, translation_out):\n        real_translation_out[ind] = sentence\n    return avg_loss, real_translation_out", "output": "Evaluate given the data loader\n\n    Parameters\n    ----------\n    data_loader : DataLoader\n\n    Returns\n    -------\n    avg_loss : float\n        Average loss\n    real_translation_out : list of list of str\n        The translation output", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_resources_vms(call=None, resFilter=None, includeConfig=True):\n    '''\n    \n    '''\n\n    timeoutTime = time.time() + 60\n    while True:\n        log.debug('Getting resource: vms.. (filter: %s)', resFilter)\n        resources = query('get', 'cluster/resources')\n        ret = {}\n        badResource = False\n        for resource in resources:\n            if 'type' in resource and resource['type'] in ['openvz', 'qemu',\n                                                           'lxc']:\n                try:\n                    name = resource['name']\n                except KeyError:\n                    badResource = True\n                    log.debug('No name in VM resource %s', repr(resource))\n                    break\n\n                ret[name] = resource\n\n                if includeConfig:\n                    # Requested to include the detailed configuration of a VM\n                    ret[name]['config'] = get_vmconfig(\n                        ret[name]['vmid'],\n                        ret[name]['node'],\n                        ret[name]['type']\n                    )\n\n        if time.time() > timeoutTime:\n            raise SaltCloudExecutionTimeout('FAILED to get the proxmox '\n                                            'resources vms')\n\n        # Carry on if there wasn't a bad resource return from Proxmox\n        if not badResource:\n            break\n\n        time.sleep(0.5)\n\n    if resFilter is not None:\n        log.debug('Filter given: %s, returning requested '\n                  'resource: nodes', resFilter)\n        return ret[resFilter]\n\n    log.debug('Filter not given: %s, returning all resource: nodes', ret)\n    return ret", "output": "Retrieve all VMs available on this environment\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -f get_resources_vms my-proxmox-config", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_namespaced_replication_controller(self, namespace, body, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.create_namespaced_replication_controller_with_http_info(namespace, body, **kwargs)\n        else:\n            (data) = self.create_namespaced_replication_controller_with_http_info(namespace, body, **kwargs)\n            return data", "output": "create a ReplicationController\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_namespaced_replication_controller(namespace, body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str namespace: object name and auth scope, such as for teams and projects (required)\n        :param V1ReplicationController body: (required)\n        :param str pretty: If 'true', then the output is pretty printed.\n        :param str dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed\n        :param str field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.\n        :return: V1ReplicationController\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def table_spec_path(cls, project, location, dataset, table_spec):\n        \"\"\"\"\"\"\n        return google.api_core.path_template.expand(\n            \"projects/{project}/locations/{location}/datasets/{dataset}/tableSpecs/{table_spec}\",\n            project=project,\n            location=location,\n            dataset=dataset,\n            table_spec=table_spec,\n        )", "output": "Return a fully-qualified table_spec string.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def install(app_id, enable=True):\n    '''\n    \n    '''\n    ge_el_capitan = True if _LooseVersion(__grains__['osrelease']) >= salt.utils.stringutils.to_str('10.11') else False\n    client_type = _client_type(app_id)\n    enable_str = '1' if enable else '0'\n    cmd = 'sqlite3 \"/Library/Application Support/com.apple.TCC/TCC.db\" ' \\\n          '\"INSERT or REPLACE INTO access VALUES(\\'kTCCServiceAccessibility\\',\\'{0}\\',{1},{2},1,NULL{3})\"'.\\\n        format(app_id, client_type, enable_str, ',NULL' if ge_el_capitan else '')\n\n    call = __salt__['cmd.run_all'](\n        cmd,\n        output_loglevel='debug',\n        python_shell=False\n    )\n    if call['retcode'] != 0:\n        comment = ''\n        if 'stderr' in call:\n            comment += call['stderr']\n        if 'stdout' in call:\n            comment += call['stdout']\n\n        raise CommandExecutionError('Error installing app: {0}'.format(comment))\n\n    return True", "output": "Install a bundle ID or command as being allowed to use\n    assistive access.\n\n    app_id\n        The bundle ID or command to install for assistive access.\n\n    enabled\n        Sets enabled or disabled status. Default is ``True``.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' assistive.install /usr/bin/osascript\n        salt '*' assistive.install com.smileonmymac.textexpander", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def arrays_to_mgr(arrays, arr_names, index, columns, dtype=None):\n    \"\"\"\n    \n    \"\"\"\n    # figure out the index, if necessary\n    if index is None:\n        index = extract_index(arrays)\n    else:\n        index = ensure_index(index)\n\n    # don't force copy because getting jammed in an ndarray anyway\n    arrays = _homogenize(arrays, index, dtype)\n\n    # from BlockManager perspective\n    axes = [ensure_index(columns), index]\n\n    return create_block_manager_from_arrays(arrays, arr_names, axes)", "output": "Segregate Series based on type and coerce into matrices.\n\n    Needs to handle a lot of exceptional cases.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _common_prefix(names):\n    \"\"\"\"\"\"\n    if not names:\n        return ''\n    prefix = names[0]\n    for name in names:\n        i = 0\n        while i < len(prefix) and i < len(name) and prefix[i] == name[i]:\n            i += 1\n        prefix = prefix[:i]\n    return prefix", "output": "Get the common prefix for all names", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rank():\n    \"\"\" \n    \"\"\"\n    rank_data_url = 'https://raw.githubusercontent.com/Microsoft/LightGBM/master/examples/lambdarank/'\n    x_train, y_train = sklearn.datasets.load_svmlight_file(cache(rank_data_url + 'rank.train'))\n    x_test, y_test = sklearn.datasets.load_svmlight_file(cache(rank_data_url + 'rank.test'))\n    q_train = np.loadtxt(cache(rank_data_url + 'rank.train.query'))\n    q_test = np.loadtxt(cache(rank_data_url + 'rank.test.query'))\n    return x_train, y_train, x_test, y_test, q_train, q_test", "output": "Ranking datasets from lightgbm repository.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def registerJavaUDAF(self, name, javaClassName):\n        \"\"\"\n        \"\"\"\n\n        self.sparkSession._jsparkSession.udf().registerJavaUDAF(name, javaClassName)", "output": "Register a Java user-defined aggregate function as a SQL function.\n\n        :param name: name of the user-defined aggregate function\n        :param javaClassName: fully qualified name of java class\n\n        >>> spark.udf.registerJavaUDAF(\"javaUDAF\", \"test.org.apache.spark.sql.MyDoubleAvg\")\n        >>> df = spark.createDataFrame([(1, \"a\"),(2, \"b\"), (3, \"a\")],[\"id\", \"name\"])\n        >>> df.createOrReplaceTempView(\"df\")\n        >>> spark.sql(\"SELECT name, javaUDAF(id) as avg from df group by name\").collect()\n        [Row(name=u'b', avg=102.0), Row(name=u'a', avg=102.0)]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_df(self, data_file):\n        \"\"\"\n        \n        \"\"\"\n\n        crawler = QAHistoryFinancialCrawler()\n\n        with open(data_file, 'rb') as df:\n            data = crawler.parse(download_file=df)\n\n        return crawler.to_df(data)", "output": "\u8bfb\u53d6\u5386\u53f2\u8d22\u52a1\u6570\u636e\u6587\u4ef6\uff0c\u5e76\u8fd4\u56depandas\u7ed3\u679c \uff0c \u7c7b\u4f3cgpcw20171231.zip\u683c\u5f0f\uff0c\u5177\u4f53\u5b57\u6bb5\u542b\u4e49\u53c2\u8003\n\n        https://github.com/rainx/pytdx/issues/133\n\n        :param data_file: \u6570\u636e\u6587\u4ef6\u5730\u5740\uff0c \u6570\u636e\u6587\u4ef6\u7c7b\u578b\u53ef\u4ee5\u4e3a .zip \u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u89e3\u538b\u540e\u7684 .dat\n        :return: pandas DataFrame\u683c\u5f0f\u7684\u5386\u53f2\u8d22\u52a1\u6570\u636e", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def seek(self, idx):\n        \"\"\"\"\"\"\n        assert not self.writable\n        self._check_pid(allow_reset=True)\n        pos = ctypes.c_size_t(self.idx[idx])\n        check_call(_LIB.MXRecordIOReaderSeek(self.handle, pos))", "output": "Sets the current read pointer position.\n\n        This function is internally called by `read_idx(idx)` to find the current\n        reader pointer position. It doesn't return anything.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_render_wrapper(func):\n    \"\"\"\n    \"\"\"\n    global RENDER_WRAPPER\n    if not hasattr(func, \"__call__\"):\n        raise ValueError(Errors.E110.format(obj=type(func)))\n    RENDER_WRAPPER = func", "output": "Set an optional wrapper function that is called around the generated\n    HTML markup on displacy.render. This can be used to allow integration into\n    other platforms, similar to Jupyter Notebooks that require functions to be\n    called around the HTML. It can also be used to implement custom callbacks\n    on render, or to embed the visualization in a custom page.\n\n    func (callable): Function to call around markup before rendering it. Needs\n        to take one argument, the HTML markup, and should return the desired\n        output of displacy.render.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def setup(app):\n    '''  '''\n    app.add_autodocumenter(ColorDocumenter)\n    app.add_autodocumenter(EnumDocumenter)\n    app.add_autodocumenter(PropDocumenter)\n    app.add_autodocumenter(ModelDocumenter)", "output": "Required Sphinx extension setup function.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def find_train_knns(self, data_activations):\n    \"\"\"\n    \n    \"\"\"\n    knns_ind = {}\n    knns_labels = {}\n\n    for layer in self.layers:\n      # Pre-process representations of data to normalize and remove training data mean.\n      data_activations_layer = copy.copy(data_activations[layer])\n      nb_data = data_activations_layer.shape[0]\n      data_activations_layer /= np.linalg.norm(\n          data_activations_layer, axis=1).reshape(-1, 1)\n      data_activations_layer -= self.centers[layer]\n\n      # Use FALCONN to find indices of nearest neighbors in training data.\n      knns_ind[layer] = np.zeros(\n          (data_activations_layer.shape[0], self.neighbors), dtype=np.int32)\n      knn_errors = 0\n      for i in range(data_activations_layer.shape[0]):\n        query_res = self.query_objects[layer].find_k_nearest_neighbors(\n            data_activations_layer[i], self.neighbors)\n        try:\n          knns_ind[layer][i, :] = query_res\n        except:  # pylint: disable-msg=W0702\n          knns_ind[layer][i, :len(query_res)] = query_res\n          knn_errors += knns_ind[layer].shape[1] - len(query_res)\n\n      # Find labels of neighbors found in the training data.\n      knns_labels[layer] = np.zeros((nb_data, self.neighbors), dtype=np.int32)\n      for data_id in range(nb_data):\n        knns_labels[layer][data_id, :] = self.train_labels[knns_ind[layer][data_id]]\n\n    return knns_ind, knns_labels", "output": "Given a data_activation dictionary that contains a np array with activations for each layer,\n    find the knns in the training data.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_multi_precision(self, index, weight, grad, state):\n        \"\"\"\n        \"\"\"\n        if self.multi_precision and weight.dtype == numpy.float16:\n            # Wrapper for mixed precision\n            weight_master_copy = state[0]\n            original_state = state[1]\n            grad32 = grad.astype(numpy.float32)\n            self.update(index, weight_master_copy, grad32, original_state)\n            cast(weight_master_copy, dtype=weight.dtype, out=weight)\n        else:\n            self.update(index, weight, grad, state)", "output": "Updates the given parameter using the corresponding gradient and state.\n        Mixed precision version.\n\n        Parameters\n        ----------\n        index : int\n            The unique index of the parameter into the individual learning\n            rates and weight decays. Learning rates and weight decay\n            may be set via `set_lr_mult()` and `set_wd_mult()`, respectively.\n        weight : NDArray\n            The parameter to be updated.\n        grad : NDArray\n            The gradient of the objective with respect to this parameter.\n        state : any obj\n            The state returned by `create_state()`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _service_is_chkconfig(name):\n    '''\n    \n    '''\n    cmdline = '/sbin/chkconfig --list {0}'.format(name)\n    return __salt__['cmd.retcode'](cmdline, python_shell=False, ignore_retcode=True) == 0", "output": "Return True if the service is managed by chkconfig.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_categorical(y, nb_classes, num_classes=None):\n  \"\"\"\n  \n  \"\"\"\n  if num_classes is not None:\n    if nb_classes is not None:\n      raise ValueError(\"Should not specify both nb_classes and its deprecated \"\n                       \"alias, num_classes\")\n    warnings.warn(\"`num_classes` is deprecated. Switch to `nb_classes`.\"\n                  \" `num_classes` may be removed on or after 2019-04-23.\")\n    nb_classes = num_classes\n    del num_classes\n  y = np.array(y, dtype='int').ravel()\n  n = y.shape[0]\n  categorical = np.zeros((n, nb_classes))\n  categorical[np.arange(n), y] = 1\n  return categorical", "output": "Converts a class vector (integers) to binary class matrix.\n  This is adapted from the Keras function with the same name.\n  :param y: class vector to be converted into a matrix\n            (integers from 0 to nb_classes).\n  :param nb_classes: nb_classes: total number of classes.\n  :param num_classses: depricated version of nb_classes\n  :return: A binary matrix representation of the input.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _minion_event(self, load):\n        '''\n        \n        '''\n        if 'id' not in load:\n            return False\n        if 'events' not in load and ('tag' not in load or 'data' not in load):\n            return False\n        if 'events' in load:\n            for event in load['events']:\n                if 'data' in event:\n                    event_data = event['data']\n                else:\n                    event_data = event\n                self.event.fire_event(event_data, event['tag'])  # old dup event\n                if load.get('pretag') is not None:\n                    self.event.fire_event(event_data, salt.utils.event.tagify(event['tag'], base=load['pretag']))\n        else:\n            tag = load['tag']\n            self.event.fire_event(load, tag)\n        return True", "output": "Receive an event from the minion and fire it on the master event\n        interface", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def open_fileswitcher_dlg(self):\r\n        \"\"\"\"\"\"\r\n        if not self.tabs.count():\r\n            return\r\n        if self.fileswitcher_dlg is not None and \\\r\n          self.fileswitcher_dlg.is_visible:\r\n            self.fileswitcher_dlg.hide()\r\n            self.fileswitcher_dlg.is_visible = False\r\n            return\r\n        self.fileswitcher_dlg = FileSwitcher(self, self, self.tabs, self.data,\r\n                                             ima.icon('TextFileIcon'))\r\n        self.fileswitcher_dlg.sig_goto_file.connect(self.set_stack_index)\r\n        self.fileswitcher_dlg.show()\r\n        self.fileswitcher_dlg.is_visible = True", "output": "Open file list management dialog box", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_rsa_key(path, passphrase):\n    '''\n    \n    '''\n    log.debug('salt.crypt.get_rsa_key: Loading private key')\n    return _get_key_with_evict(path, six.text_type(os.path.getmtime(path)), passphrase)", "output": "Read a private key off the disk.  Poor man's simple cache in effect here,\n    we memoize the result of calling _get_rsa_with_evict.  This means the first\n    time _get_key_with_evict is called with a path and a timestamp the result\n    is cached.  If the file (the private key) does not change then its\n    timestamp will not change and the next time the result is returned from the\n    cache.  If the key DOES change the next time _get_rsa_with_evict is called\n    it is called with different parameters and the fn is run fully to retrieve\n    the key from disk.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def absent(name, **connection_args):\n    '''\n    \n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': ''}\n\n    #check if db exists and remove it\n    if __salt__['mysql.db_exists'](name, **connection_args):\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = \\\n                'Database {0} is present and needs to be removed'.format(name)\n            return ret\n        if __salt__['mysql.db_remove'](name, **connection_args):\n            ret['comment'] = 'Database {0} has been removed'.format(name)\n            ret['changes'][name] = 'Absent'\n            return ret\n        else:\n            err = _get_mysql_error()\n            if err is not None:\n                ret['comment'] = 'Unable to remove database {0} ' \\\n                                 '({1})'.format(name, err)\n                ret['result'] = False\n                return ret\n    else:\n        err = _get_mysql_error()\n        if err is not None:\n            ret['comment'] = err\n            ret['result'] = False\n            return ret\n\n    # fallback\n    ret['comment'] = ('Database {0} is not present, so it cannot be removed'\n            ).format(name)\n    return ret", "output": "Ensure that the named database is absent\n\n    name\n        The name of the database to remove", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def resolve(self, host: str,\n                      port: int, family: int) -> List[Dict[str, Any]]:\n        \"\"\"\"\"\"", "output": "Return IP address for given hostname", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_(prefix='', ruby=None, runas=None, gem_bin=None):\n    '''\n    \n    '''\n    cmd = ['list']\n    if prefix:\n        cmd.append(prefix)\n    stdout = _gem(cmd,\n                  ruby,\n                  gem_bin=gem_bin,\n                  runas=runas)\n    ret = {}\n    for line in salt.utils.itertools.split(stdout, '\\n'):\n        match = re.match(r'^([^ ]+) \\((.+)\\)', line)\n        if match:\n            gem = match.group(1)\n            versions = match.group(2).split(', ')\n            ret[gem] = versions\n    return ret", "output": "List locally installed gems.\n\n    :param prefix: string :\n        Only list gems when the name matches this prefix.\n    :param gem_bin: string : None\n        Full path to ``gem`` binary to use.\n    :param ruby: string : None\n        If RVM or rbenv are installed, the ruby version and gemset to use.\n        Ignored if ``gem_bin`` is specified.\n    :param runas: string : None\n        The user to run gem as.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' gem.list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _is_punctuation(self, char):\n        \"\"\"\"\"\"\n        cp = ord(char)\n        # We treat all non-letter/number ASCII as punctuation.\n        # Characters such as \"^\", \"$\", and \"`\" are not in the Unicode\n        # Punctuation class but we treat them as punctuation anyways, for\n        # consistency.\n        group0 = cp >= 33 and cp <= 47\n        group1 = cp >= 58 and cp <= 64\n        group2 = cp >= 91 and cp <= 96\n        group3 = cp >= 123 and cp <= 126\n        if (group0 or group1 or group2 or group3):\n            return True\n        cat = unicodedata.category(char)\n        if cat.startswith('P'):\n            return True\n        return False", "output": "Checks whether `chars` is a punctuation character.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_plugin_title(self):\n        \"\"\"\"\"\"\n        if self.dockwidget is not None:\n            win = self.dockwidget\n        elif self.undocked_window is not None:\n            win = self.undocked_window\n        else:\n            return\n        win.setWindowTitle(self.get_plugin_title())", "output": "Update plugin title, i.e. dockwidget or window title", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def wiki_2x2_base():\n  \"\"\"\n  \"\"\"\n  hparams = mtf_transformer.mtf_transformer_base_lm()\n  hparams.shared_embedding_and_softmax_weights = False\n  # no dropout - dataset is big enough to avoid overfitting.\n  hparams.attention_dropout = 0.0\n  hparams.relu_dropout = 0.0\n  hparams.layer_prepostprocess_dropout = 0.0\n  hparams.max_length = 1024\n  # 4 sequences per core\n  hparams.batch_size = 32\n  # We don't use linear decay in these experiments, since we don't want\n  # a sharp jump in quality at the end of the training schedule.\n  # You can insert this once you find the right architecture.\n  hparams.learning_rate_schedule = \"rsqrt_decay\"\n  hparams.mesh_shape = \"all:8\"\n  hparams.layout = \"batch:all;experts:all\"\n\n  # parameters for mixture-of-experts\n  moe.set_default_moe_hparams(hparams)\n  hparams.moe_num_experts = 16\n  hparams.moe_hidden_size = 8192\n\n  hparams.decoder_layers = [\"att\", \"drd\"] * 6\n  hparams.d_model = 1024\n  hparams.d_ff = 2048\n  hparams.d_kv = 128\n  hparams.num_heads = 4\n\n  return hparams", "output": "Set of architectural experiments - language model on wikipedia on a 2x2.\n\n  1 epoch = ~180k steps at batch size 32 - we may never finish an epoch!\n\n  Returns:\n    a hparams", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def optionally(preprocessor):\n    \"\"\"\n    \"\"\"\n    @wraps(preprocessor)\n    def wrapper(func, argname, arg):\n        return arg if arg is None else preprocessor(func, argname, arg)\n\n    return wrapper", "output": "Modify a preprocessor to explicitly allow `None`.\n\n    Parameters\n    ----------\n    preprocessor : callable[callable, str, any -> any]\n        A preprocessor to delegate to when `arg is not None`.\n\n    Returns\n    -------\n    optional_preprocessor : callable[callable, str, any -> any]\n        A preprocessor that delegates to `preprocessor` when `arg is not None`.\n\n    Examples\n    --------\n    >>> def preprocessor(func, argname, arg):\n    ...     if not isinstance(arg, int):\n    ...         raise TypeError('arg must be int')\n    ...     return arg\n    ...\n    >>> @preprocess(a=optionally(preprocessor))\n    ... def f(a):\n    ...     return a\n    ...\n    >>> f(1)  # call with int\n    1\n    >>> f('a')  # call with not int\n    Traceback (most recent call last):\n       ...\n    TypeError: arg must be int\n    >>> f(None) is None  # call with explicit None\n    True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stats_timing(stats_key, stats_logger):\n    \"\"\"\"\"\"\n    start_ts = now_as_float()\n    try:\n        yield start_ts\n    except Exception as e:\n        raise e\n    finally:\n        stats_logger.timing(stats_key, now_as_float() - start_ts)", "output": "Provide a transactional scope around a series of operations.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def isID(self, elem, attr):\n        \"\"\" \"\"\"\n        if elem is None: elem__o = None\n        else: elem__o = elem._o\n        if attr is None: attr__o = None\n        else: attr__o = attr._o\n        ret = libxml2mod.xmlIsID(self._o, elem__o, attr__o)\n        return ret", "output": "Determine whether an attribute is of type ID. In case we\n          have DTD(s) then this is done if DTD loading has been\n          requested. In the case of HTML documents parsed with the\n           HTML parser, then ID detection is done systematically.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _StructMessageToJsonObject(self, message):\n    \"\"\"\"\"\"\n    fields = message.fields\n    ret = {}\n    for key in fields:\n      ret[key] = self._ValueMessageToJsonObject(fields[key])\n    return ret", "output": "Converts Struct message according to Proto3 JSON Specification.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_system_date(newdate):\n    '''\n    \n    '''\n    fmts = ['%Y-%m-%d', '%m-%d-%Y', '%m-%d-%y',\n            '%m/%d/%Y', '%m/%d/%y', '%Y/%m/%d']\n    # Get date/time object from newdate\n    dt_obj = _try_parse_datetime(newdate, fmts)\n    if dt_obj is None:\n        return False\n\n    # Set time using set_system_date_time()\n    return set_system_date_time(years=dt_obj.year,\n                                months=dt_obj.month,\n                                days=dt_obj.day)", "output": "Set the Windows system date. Use <mm-dd-yy> format for the date.\n\n    Args:\n        newdate (str):\n            The date to set. Can be any of the following formats\n\n            - YYYY-MM-DD\n            - MM-DD-YYYY\n            - MM-DD-YY\n            - MM/DD/YYYY\n            - MM/DD/YY\n            - YYYY/MM/DD\n\n    Returns:\n        bool: ``True`` if successful, otherwise ``False``\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' system.set_system_date '03-28-13'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _ConvertScalarFieldValue(value, field, require_str=False):\n  \"\"\"\n  \"\"\"\n  if field.cpp_type in _INT_TYPES:\n    return _ConvertInteger(value)\n  elif field.cpp_type in _FLOAT_TYPES:\n    return _ConvertFloat(value)\n  elif field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_BOOL:\n    return _ConvertBool(value, require_str)\n  elif field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_STRING:\n    if field.type == descriptor.FieldDescriptor.TYPE_BYTES:\n      return base64.b64decode(value)\n    else:\n      # Checking for unpaired surrogates appears to be unreliable,\n      # depending on the specific Python version, so we check manually.\n      if _UNPAIRED_SURROGATE_PATTERN.search(value):\n        raise ParseError('Unpaired surrogate')\n      return value\n  elif field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_ENUM:\n    # Convert an enum value.\n    enum_value = field.enum_type.values_by_name.get(value, None)\n    if enum_value is None:\n      try:\n        number = int(value)\n        enum_value = field.enum_type.values_by_number.get(number, None)\n      except ValueError:\n        raise ParseError('Invalid enum value {0} for enum type {1}.'.format(\n            value, field.enum_type.full_name))\n      if enum_value is None:\n        raise ParseError('Invalid enum value {0} for enum type {1}.'.format(\n            value, field.enum_type.full_name))\n    return enum_value.number", "output": "Convert a single scalar field value.\n\n  Args:\n    value: A scalar value to convert the scalar field value.\n    field: The descriptor of the field to convert.\n    require_str: If True, the field value must be a str.\n\n  Returns:\n    The converted scalar field value\n\n  Raises:\n    ParseError: In case of convert problems.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _expand_sources(sources):\n    '''\n    \n    '''\n    if sources is None:\n        return []\n    if isinstance(sources, six.string_types):\n        sources = [x.strip() for x in sources.split(',')]\n    elif isinstance(sources, (float, six.integer_types)):\n        sources = [six.text_type(sources)]\n    return [path\n            for source in sources\n            for path in _glob(source)]", "output": "Expands a user-provided specification of source files into a list of paths.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset(self):\n        \"\"\"\"\"\"\n        self.alive.value = False\n        qsize = 0\n        try:\n            while True:\n                self.queue.get(timeout=0.1)\n                qsize += 1\n        except QEmptyExcept:\n            pass\n        print(\"Queue size on reset: {}\".format(qsize))\n        for i, p in enumerate(self.proc):\n            p.join()\n        self.proc.clear()", "output": "Resets the generator by stopping all processes", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def avail_images(conn=None):\n    '''\n    \n    '''\n    if not conn:\n        conn = get_conn()\n\n    all_images = []\n    # The list of public image projects can be found via:\n    #   % gcloud compute images list\n    # and looking at the \"PROJECT\" column in the output.\n    public_image_projects = (\n        'centos-cloud', 'coreos-cloud', 'debian-cloud', 'google-containers',\n        'opensuse-cloud', 'rhel-cloud', 'suse-cloud', 'ubuntu-os-cloud',\n        'windows-cloud'\n    )\n    for project in public_image_projects:\n        all_images.extend(conn.list_images(project))\n\n    # Finally, add the images in this current project last so that it overrides\n    # any image that also exists in any public project.\n    all_images.extend(conn.list_images())\n\n    ret = {}\n    for img in all_images:\n        ret[img.name] = {}\n        for attr in dir(img):\n            if attr.startswith('_'):\n                continue\n            ret[img.name][attr] = getattr(img, attr)\n    return ret", "output": "Return a dict of all available VM images on the cloud provider with\n    relevant data.\n\n    Note that for GCE, there are custom images within the project, but the\n    generic images are in other projects.  This returns a dict of images in\n    the project plus images in well-known public projects that provide supported\n    images, as listed on this page:\n    https://cloud.google.com/compute/docs/operating-systems/\n\n    If image names overlap, the image in the current project is used.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def info(vm, info_type='all', key='uuid'):\n    '''\n    \n    '''\n    ret = {}\n    if info_type not in ['all', 'block', 'blockstats', 'chardev', 'cpus', 'kvm', 'pci', 'spice', 'version', 'vnc']:\n        ret['Error'] = 'Requested info_type is not available'\n        return ret\n    if key not in ['uuid', 'alias', 'hostname']:\n        ret['Error'] = 'Key must be either uuid, alias or hostname'\n        return ret\n    vm = lookup('{0}={1}'.format(key, vm), one=True)\n    if 'Error' in vm:\n        return vm\n    # vmadm info <uuid> [type,...]\n    cmd = 'vmadm info {uuid} {type}'.format(\n        uuid=vm,\n        type=info_type\n    )\n    res = __salt__['cmd.run_all'](cmd)\n    retcode = res['retcode']\n    if retcode != 0:\n        ret['Error'] = res['stderr'] if 'stderr' in res else _exit_status(retcode)\n        return ret\n    return salt.utils.json.loads(res['stdout'])", "output": "Lookup info on running kvm\n\n    vm : string\n        vm to be targeted\n    info_type : string [all|block|blockstats|chardev|cpus|kvm|pci|spice|version|vnc]\n        info type to return\n    key : string [uuid|alias|hostname]\n        value type of 'vm' parameter\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' vmadm.info 186da9ab-7392-4f55-91a5-b8f1fe770543\n        salt '*' vmadm.info 186da9ab-7392-4f55-91a5-b8f1fe770543 vnc\n        salt '*' vmadm.info nacl key=alias\n        salt '*' vmadm.info nacl vnc key=alias", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _set_persistent_module(mod):\n    '''\n    \n    '''\n    conf = _get_modules_conf()\n    if not os.path.exists(conf):\n        __salt__['file.touch'](conf)\n    mod_name = _strip_module_name(mod)\n    if not mod_name or mod_name in mod_list(True) or mod_name \\\n            not in available():\n        return set()\n    escape_mod = re.escape(mod)\n    # If module is commented only uncomment it\n    if __salt__['file.search'](conf,\n                               '^#[\\t ]*{0}[\\t ]*$'.format(escape_mod),\n                               multiline=True):\n        __salt__['file.uncomment'](conf, escape_mod)\n    else:\n        __salt__['file.append'](conf, mod)\n    return set([mod_name])", "output": "Add module to configuration file to make it persistent. If module is\n    commented uncomment it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cluster_remove(version,\n                   name='main',\n                   stop=False):\n    '''\n    \n\n    '''\n    cmd = [salt.utils.path.which('pg_dropcluster')]\n    if stop:\n        cmd += ['--stop']\n    cmd += [version, name]\n    cmdstr = ' '.join([pipes.quote(c) for c in cmd])\n    ret = __salt__['cmd.run_all'](cmdstr, python_shell=False)\n    # FIXME - return Boolean ?\n    if ret.get('retcode', 0) != 0:\n        log.error('Error removing a Postgresql cluster %s/%s', version, name)\n    else:\n        ret['changes'] = ('Successfully removed'\n                          ' cluster {0}/{1}').format(version, name)\n    return ret", "output": "Remove a cluster on a Postgres server. By default it doesn't try\n    to stop the cluster.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' postgres.cluster_remove '9.3'\n\n        salt '*' postgres.cluster_remove '9.3' 'main'\n\n        salt '*' postgres.cluster_remove '9.3' 'main' stop=True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _aws_encode_changebatch(o):\n    '''\n    \n    '''\n    change_idx = 0\n    while change_idx < len(o['Changes']):\n        o['Changes'][change_idx]['ResourceRecordSet']['Name'] = aws_encode(o['Changes'][change_idx]['ResourceRecordSet']['Name'])\n        if 'ResourceRecords' in o['Changes'][change_idx]['ResourceRecordSet']:\n            rr_idx = 0\n            while rr_idx < len(o['Changes'][change_idx]['ResourceRecordSet']['ResourceRecords']):\n                o['Changes'][change_idx]['ResourceRecordSet']['ResourceRecords'][rr_idx]['Value'] = aws_encode(o['Changes'][change_idx]['ResourceRecordSet']['ResourceRecords'][rr_idx]['Value'])\n                rr_idx += 1\n        if 'AliasTarget' in o['Changes'][change_idx]['ResourceRecordSet']:\n            o['Changes'][change_idx]['ResourceRecordSet']['AliasTarget']['DNSName'] = aws_encode(o['Changes'][change_idx]['ResourceRecordSet']['AliasTarget']['DNSName'])\n        change_idx += 1\n    return o", "output": "helper method to process a change batch & encode the bits which need encoding.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def acquire(\n        self, timeout: Union[float, datetime.timedelta] = None\n    ) -> Awaitable[_ReleasingContextManager]:\n        \"\"\"\n        \"\"\"\n        waiter = Future()  # type: Future[_ReleasingContextManager]\n        if self._value > 0:\n            self._value -= 1\n            waiter.set_result(_ReleasingContextManager(self))\n        else:\n            self._waiters.append(waiter)\n            if timeout:\n\n                def on_timeout() -> None:\n                    if not waiter.done():\n                        waiter.set_exception(gen.TimeoutError())\n                    self._garbage_collect()\n\n                io_loop = ioloop.IOLoop.current()\n                timeout_handle = io_loop.add_timeout(timeout, on_timeout)\n                waiter.add_done_callback(\n                    lambda _: io_loop.remove_timeout(timeout_handle)\n                )\n        return waiter", "output": "Decrement the counter. Returns an awaitable.\n\n        Block if the counter is zero and wait for a `.release`. The awaitable\n        raises `.TimeoutError` after the deadline.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _split_result_for_readers(axis, num_splits, df):  # pragma: no cover\n    \"\"\"\n    \"\"\"\n    splits = split_result_of_axis_func_pandas(axis, num_splits, df)\n    if not isinstance(splits, list):\n        splits = [splits]\n    return splits", "output": "Splits the DataFrame read into smaller DataFrames and handles all edge cases.\n\n    Args:\n        axis: Which axis to split over.\n        num_splits: The number of splits to create.\n        df: The DataFrame after it has been read.\n\n    Returns:\n        A list of pandas DataFrames.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_backup(name):\n    \n    '''\n    if name in list_backups():\n        raise CommandExecutionError('Backup already present: {0}'.format(name))\n\n    ps_cmd = ['Backup-WebConfiguration',\n              '-Name', \"'{0}'\".format(name)]\n\n    cmd_ret = _srvmgr(ps_cmd)\n\n    if cmd_ret['retcode'] != 0:\n        msg = 'Unable to backup web configuration: {0}\\nError: {1}' \\\n              ''.format(name, cmd_ret['stderr'])\n        raise CommandExecutionError(msg)\n\n    return name in list_backups()", "output": "r'''\n    Backup an IIS Configuration on the System.\n\n    .. versionadded:: 2017.7.0\n\n    .. note::\n        Backups are stored in the ``$env:Windir\\System32\\inetsrv\\backup``\n        folder.\n\n    Args:\n        name (str): The name to give the backup\n\n    Returns:\n        bool: True if successful, otherwise False\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' win_iis.create_backup good_config_20170209", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def active():\n    '''\n    \n    '''\n    ret = {}\n    # TODO: This command should be extended to collect more information, such as UUID.\n    devices = __salt__['cmd.run_stdout']('dmsetup ls --target crypt')\n    out_regex = re.compile(r'(?P<devname>\\w+)\\W+\\((?P<major>\\d+), (?P<minor>\\d+)\\)')\n\n    log.debug(devices)\n    for line in devices.split('\\n'):\n        match = out_regex.match(line)\n        if match:\n            dev_info = match.groupdict()\n            ret[dev_info['devname']] = dev_info\n        else:\n            log.warning('dmsetup output does not match expected format')\n\n    return ret", "output": "List existing device-mapper device details.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dump(self):\n        \"\"\"\"\"\"\n        assert self.database is not None\n\n        cmd = \"SELECT count from {} WHERE rowid={}\"\n        self._execute(cmd.format(self.STATE_INFO_TABLE, self.STATE_INFO_ROW))\n        ret = self._fetchall()\n        assert len(ret) == 1\n        assert len(ret[0]) == 1\n        count = self._from_sqlite(ret[0][0]) + self.inserts\n\n        if count > self.row_limit:\n            msg = \"cleaning up state, this might take a while.\"\n            logger.warning(msg)\n\n            delete = count - self.row_limit\n            delete += int(self.row_limit * (self.row_cleanup_quota / 100.0))\n            cmd = (\n                \"DELETE FROM {} WHERE timestamp IN (\"\n                \"SELECT timestamp FROM {} ORDER BY timestamp ASC LIMIT {});\"\n            )\n            self._execute(\n                cmd.format(self.STATE_TABLE, self.STATE_TABLE, delete)\n            )\n\n            self._vacuum()\n\n            cmd = \"SELECT COUNT(*) FROM {}\"\n\n            self._execute(cmd.format(self.STATE_TABLE))\n            ret = self._fetchall()\n            assert len(ret) == 1\n            assert len(ret[0]) == 1\n            count = ret[0][0]\n\n        cmd = \"UPDATE {} SET count = {} WHERE rowid = {}\"\n        self._execute(\n            cmd.format(\n                self.STATE_INFO_TABLE,\n                self._to_sqlite(count),\n                self.STATE_INFO_ROW,\n            )\n        )\n\n        self._update_cache_directory_state()\n\n        self.database.commit()\n        self.cursor.close()\n        self.database.close()\n        self.database = None\n        self.cursor = None\n        self.inserts = 0", "output": "Saves state database.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_exists(name, user=None, password=None, host=None, port=None,\n                database='admin', authdb=None):\n    '''\n    \n    '''\n    users = user_list(user, password, host, port, database, authdb)\n\n    if isinstance(users, six.string_types):\n        return 'Failed to connect to mongo database'\n\n    for user in users:\n        if name == dict(user).get('user'):\n            return True\n\n    return False", "output": "Checks if a user exists in MongoDB\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' mongodb.user_exists <name> <user> <password> <host> <port> <database>", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def DownloadResource(url, path):\n    ''''''\n    import requests\n    from six import BytesIO\n    import zipfile\n    print(\"Downloading... {} to {}\".format(url, path))\n    r = requests.get(url, stream=True)\n    z = zipfile.ZipFile(BytesIO(r.content))\n    z.extractall(path)\n    print(\"Completed download and extraction.\")", "output": "Downloads resources from s3 by url and unzips them to the provided path", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_disk(self, path, **kwargs):\n        \"\"\"\n        \"\"\"\n        path = ensure_path(path)\n        path = path.with_suffix(\".jsonl\")\n        srsly.write_jsonl(path, self.patterns)", "output": "Save the entity ruler patterns to a directory. The patterns will be\n        saved as newline-delimited JSON (JSONL).\n\n        path (unicode / Path): The JSONL file to load.\n        **kwargs: Other config paramters, mostly for consistency.\n        RETURNS (EntityRuler): The loaded entity ruler.\n\n        DOCS: https://spacy.io/api/entityruler#to_disk", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def parse(format, string, extra_types=None, evaluate_result=True, case_sensitive=False):\n    '''\n    '''\n    p = Parser(format, extra_types=extra_types, case_sensitive=case_sensitive)\n    return p.parse(string, evaluate_result=evaluate_result)", "output": "Using \"format\" attempt to pull values from \"string\".\n\n    The format must match the string contents exactly. If the value\n    you're looking for is instead just a part of the string use\n    search().\n\n    If ``evaluate_result`` is True the return value will be an Result instance with two attributes:\n\n     .fixed - tuple of fixed-position values from the string\n     .named - dict of named values from the string\n\n    If ``evaluate_result`` is False the return value will be a Match instance with one method:\n\n     .evaluate_result() - This will return a Result instance like you would get\n                          with ``evaluate_result`` set to True\n\n    The default behaviour is to match strings case insensitively. You may match with\n    case by specifying case_sensitive=True.\n\n    If the format is invalid a ValueError will be raised.\n\n    See the module documentation for the use of \"extra_types\".\n\n    In the case there is no match parse() will return None.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def strip_extras_markers_from_requirement(req):\n    # type: (TRequirement) -> TRequirement\n    \"\"\"\n    \n    \"\"\"\n    if req is None:\n        raise TypeError(\"Must pass in a valid requirement, received {0!r}\".format(req))\n    if getattr(req, \"marker\", None) is not None:\n        marker = req.marker  # type: TMarker\n        marker._markers = _strip_extras_markers(marker._markers)\n        if not marker._markers:\n            req.marker = None\n        else:\n            req.marker = marker\n    return req", "output": "Given a :class:`~packaging.requirements.Requirement` instance with markers defining\n    *extra == 'name'*, strip out the extras from the markers and return the cleaned\n    requirement\n\n    :param PackagingRequirement req: A packaging requirement to clean\n    :return: A cleaned requirement\n    :rtype: PackagingRequirement", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def readerWalker(self):\n        \"\"\" \"\"\"\n        ret = libxml2mod.xmlReaderWalker(self._o)\n        if ret is None:raise treeError('xmlReaderWalker() failed')\n        __tmp = xmlTextReader(_obj=ret)\n        return __tmp", "output": "Create an xmltextReader for a preparsed document.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def exe(self):\n        \"\"\"\n        \"\"\"\n        return self._buckets[self.curr_bucket_key]['exe'][tuple(self.data_shapes.items())]", "output": "Get the current executor\n\n        Returns\n        -------\n        exe : mxnet.executor.Executor", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def safe_isinstance(value, types=None, class_names=None):\n    \"\"\"\n    \"\"\"\n    # inspect is being imported here because I seriously doubt\n    # that this function will be used outside of the type\n    # checking below.\n    import inspect\n    result = False\n    if types is not None:\n        result = result or isinstance(value, types)\n    if class_names is not None and not result:\n        # this doesn't work with inheritance, but normally\n        # either the class will already be imported within the module,\n        # or the class doesn't have any subclasses. For example: PropertySet\n        if isinstance(class_names, basestring):\n            class_names = [class_names]\n        # this is the part that makes it \"safe\".\n        try:\n            base_names = [class_.__name__ for class_ in inspect.getmro(value.__class__)]\n            for name in class_names:\n                if name in base_names:\n                    return True\n        except AttributeError:\n            pass\n    return result", "output": "To prevent circular imports, this extends isinstance()\n    by checking also if `value` has a particular class name (or inherits from a\n    particular class name). This check is safe in that an AttributeError is not\n    raised in case `value` doesn't have a __class__ attribute.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def revnet_step(name, x, hparams, reverse=True):\n  \"\"\"\n  \"\"\"\n  with tf.variable_scope(name, reuse=tf.AUTO_REUSE):\n    if hparams.coupling == \"additive\":\n      coupling_layer = functools.partial(\n          additive_coupling, name=\"additive\", reverse=reverse,\n          mid_channels=hparams.coupling_width,\n          activation=hparams.activation, dropout=hparams.coupling_dropout)\n    else:\n      coupling_layer = functools.partial(\n          affine_coupling, name=\"affine\", reverse=reverse,\n          mid_channels=hparams.coupling_width,\n          activation=hparams.activation, dropout=hparams.coupling_dropout)\n    ops = [\n        functools.partial(actnorm, name=\"actnorm\", reverse=reverse),\n        functools.partial(invertible_1x1_conv, name=\"invertible\",\n                          reverse=reverse), coupling_layer]\n\n    if reverse:\n      ops = ops[::-1]\n\n    objective = 0.0\n    for op in ops:\n      x, curr_obj = op(x=x)\n      objective += curr_obj\n    return x, objective", "output": "One step of glow generative flow.\n\n  Actnorm + invertible 1X1 conv + affine_coupling.\n\n  Args:\n    name: used for variable scope.\n    x: input\n    hparams: coupling_width is the only hparam that is being used in\n             this function.\n    reverse: forward or reverse pass.\n  Returns:\n    z: Output of one step of reversible flow.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_path(python):\n    \"\"\"\n    \"\"\"\n\n    python = Path(python).as_posix()\n    out, err = run(\n        [python, \"-c\", \"import json, sys; print(json.dumps(sys.path))\"], nospin=True\n    )\n    if out:\n        return json.loads(out)\n    else:\n        return []", "output": "Load the :mod:`sys.path` from the given python executable's environment as json\n\n    :param str python: Path to a valid python executable\n    :return: A python representation of the `sys.path` value of the given python executable.\n    :rtype: list\n\n    >>> load_path(\"/home/user/.virtualenvs/requirementslib-5MhGuG3C/bin/python\")\n    ['', '/home/user/.virtualenvs/requirementslib-5MhGuG3C/lib/python37.zip', '/home/user/.virtualenvs/requirementslib-5MhGuG3C/lib/python3.7', '/home/user/.virtualenvs/requirementslib-5MhGuG3C/lib/python3.7/lib-dynload', '/home/user/.pyenv/versions/3.7.0/lib/python3.7', '/home/user/.virtualenvs/requirementslib-5MhGuG3C/lib/python3.7/site-packages', '/home/user/git/requirementslib/src']", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _transform_should_cast(self, func_nm):\n        \"\"\"\n        \n        \"\"\"\n        return (self.size().fillna(0) > 0).any() and (\n            func_nm not in base.cython_cast_blacklist)", "output": "Parameters:\n        -----------\n        func_nm: str\n            The name of the aggregation function being performed\n\n        Returns:\n        --------\n        bool\n            Whether transform should attempt to cast the result of aggregation", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def wait_input(self, prompt=''):\r\n        \"\"\"\"\"\"\r\n        self.new_prompt(prompt)\r\n        self.setFocus()\r\n        self.input_mode = True\r\n        self.input_loop = QEventLoop()\r\n        self.input_loop.exec_()\r\n        self.input_loop = None", "output": "Wait for input (raw_input support)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_template_data(template_file):\n    \"\"\"\n    \n    \"\"\"\n\n    if not pathlib.Path(template_file).exists():\n        raise ValueError(\"Template file not found at {}\".format(template_file))\n\n    with open(template_file, 'r') as fp:\n        try:\n            return yaml_parse(fp.read())\n        except (ValueError, yaml.YAMLError) as ex:\n            raise ValueError(\"Failed to parse template: {}\".format(str(ex)))", "output": "Read the template file, parse it as JSON/YAML and return the template as a dictionary.\n\n    Parameters\n    ----------\n    template_file : string\n        Path to the template to read\n\n    Returns\n    -------\n    Template data as a dictionary", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def row(*args, **kwargs):\n    \"\"\" \n    \"\"\"\n\n    sizing_mode = kwargs.pop('sizing_mode', None)\n    children = kwargs.pop('children', None)\n\n    children = _handle_children(*args, children=children)\n\n    row_children = []\n    for item in children:\n        if isinstance(item, LayoutDOM):\n            if sizing_mode is not None and _has_auto_sizing(item):\n                item.sizing_mode = sizing_mode\n            row_children.append(item)\n        else:\n            raise ValueError(\"\"\"Only LayoutDOM items can be inserted into a row. Tried to insert: %s of type %s\"\"\" % (item, type(item)))\n\n    return Row(children=row_children, sizing_mode=sizing_mode, **kwargs)", "output": "Create a row of Bokeh Layout objects. Forces all objects to\n    have the same sizing_mode, which is required for complex layouts to work.\n\n    Args:\n        children (list of :class:`~bokeh.models.layouts.LayoutDOM` ): A list of instances for\n            the row. Can be any of the following - :class:`~bokeh.models.plots.Plot`,\n            :class:`~bokeh.models.widgets.widget.Widget`,\n            :class:`~bokeh.models.layouts.Row`,\n            :class:`~bokeh.models.layouts.Column`,\n            :class:`~bokeh.models.tools.ToolbarBox`,\n            :class:`~bokeh.models.layouts.Spacer`.\n\n        sizing_mode (``\"fixed\"``, ``\"stretch_both\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"`` ): How\n            will the items in the layout resize to fill the available space.\n            Default is ``\"fixed\"``. For more information on the different\n            modes see :attr:`~bokeh.models.layouts.LayoutDOM.sizing_mode`\n            description on :class:`~bokeh.models.layouts.LayoutDOM`.\n\n    Returns:\n        Row: A row of LayoutDOM objects all with the same sizing_mode.\n\n    Examples:\n\n        >>> row([plot_1, plot_2])\n        >>> row(children=[widget_box_1, plot_1], sizing_mode='stretch_both')", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def data(self, index, role):\r\n        \"\"\"\"\"\"\r\n        if role == Qt.ToolTipRole:\r\n            root_dir = self.path_list[0].split(osp.sep)[-1]\r\n            if index.data() == root_dir:\r\n                return osp.join(self.root_path, root_dir)\r\n        return QSortFilterProxyModel.data(self, index, role)", "output": "Show tooltip with full path only for the root directory", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _set_protobuf_value(value_pb, val):\n    \"\"\"\n    \"\"\"\n    attr, val = _pb_attr_value(val)\n    if attr == \"key_value\":\n        value_pb.key_value.CopyFrom(val)\n    elif attr == \"timestamp_value\":\n        value_pb.timestamp_value.CopyFrom(val)\n    elif attr == \"entity_value\":\n        entity_pb = entity_to_protobuf(val)\n        value_pb.entity_value.CopyFrom(entity_pb)\n    elif attr == \"array_value\":\n        if len(val) == 0:\n            array_value = entity_pb2.ArrayValue(values=[])\n            value_pb.array_value.CopyFrom(array_value)\n        else:\n            l_pb = value_pb.array_value.values\n            for item in val:\n                i_pb = l_pb.add()\n                _set_protobuf_value(i_pb, item)\n    elif attr == \"geo_point_value\":\n        value_pb.geo_point_value.CopyFrom(val)\n    else:  # scalar, just assign\n        setattr(value_pb, attr, val)", "output": "Assign 'val' to the correct subfield of 'value_pb'.\n\n    The Protobuf API uses different attribute names based on value types\n    rather than inferring the type.\n\n    Some value types (entities, keys, lists) cannot be directly\n    assigned; this function handles them correctly.\n\n    :type value_pb: :class:`.entity_pb2.Value`\n    :param value_pb: The value protobuf to which the value is being assigned.\n\n    :type val: :class:`datetime.datetime`, boolean, float, integer, string,\n               :class:`google.cloud.datastore.key.Key`,\n               :class:`google.cloud.datastore.entity.Entity`\n    :param val: The value to be assigned.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def contextMenuEvent(self, event):\r\n        \"\"\"\"\"\"\r\n        if self.model.showndata:\r\n            self.refresh_menu()\r\n            self.menu.popup(event.globalPos())\r\n            event.accept()\r\n        else:\r\n            self.empty_ws_menu.popup(event.globalPos())\r\n            event.accept()", "output": "Reimplement Qt method", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def save_img(object, handle, **kwargs):\n    \"\"\"\"\"\"\n\n    if isinstance(object, np.ndarray):\n        normalized = _normalize_array(object)\n        object = PIL.Image.fromarray(normalized)\n\n    if isinstance(object, PIL.Image.Image):\n        object.save(handle, **kwargs)  # will infer format from handle's url ext.\n    else:\n        raise ValueError(\"Can only save_img for numpy arrays or PIL.Images!\")", "output": "Save numpy array as image file on CNS.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def uniform_binning_correction(x, n_bits=8):\n  \"\"\"\n  \"\"\"\n  n_bins = 2**n_bits\n  batch_size, height, width, n_channels = common_layers.shape_list(x)\n  hwc = float(height * width * n_channels)\n\n  x = x + tf.random_uniform(\n      shape=(batch_size, height, width, n_channels),\n      minval=0.0, maxval=1.0/n_bins)\n  objective = -np.log(n_bins) * hwc * tf.ones(batch_size)\n  return x, objective", "output": "Replaces x^i with q^i(x) = U(x, x + 1.0 / 256.0).\n\n  Args:\n    x: 4-D Tensor of shape (NHWC)\n    n_bits: optional.\n  Returns:\n    x: x ~ U(x, x + 1.0 / 256)\n    objective: Equivalent to -q(x)*log(q(x)).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def draw_boxes(im, boxes, labels=None, color=None):\n    \"\"\"\n    \n    \"\"\"\n    boxes = np.asarray(boxes, dtype='int32')\n    if labels is not None:\n        assert len(labels) == len(boxes), \"{} != {}\".format(len(labels), len(boxes))\n    areas = (boxes[:, 2] - boxes[:, 0] + 1) * (boxes[:, 3] - boxes[:, 1] + 1)\n    sorted_inds = np.argsort(-areas)    # draw large ones first\n    assert areas.min() > 0, areas.min()\n    # allow equal, because we are not very strict about rounding error here\n    assert boxes[:, 0].min() >= 0 and boxes[:, 1].min() >= 0 \\\n        and boxes[:, 2].max() <= im.shape[1] and boxes[:, 3].max() <= im.shape[0], \\\n        \"Image shape: {}\\n Boxes:\\n{}\".format(str(im.shape), str(boxes))\n\n    im = im.copy()\n    if color is None:\n        color = (15, 128, 15)\n    if im.ndim == 2 or (im.ndim == 3 and im.shape[2] == 1):\n        im = cv2.cvtColor(im, cv2.COLOR_GRAY2BGR)\n    for i in sorted_inds:\n        box = boxes[i, :]\n        if labels is not None:\n            im = draw_text(im, (box[0], box[1]), labels[i], color=color)\n        cv2.rectangle(im, (box[0], box[1]), (box[2], box[3]),\n                      color=color, thickness=1)\n    return im", "output": "Args:\n        im (np.ndarray): a BGR image in range [0,255]. It will not be modified.\n        boxes (np.ndarray): a numpy array of shape Nx4 where each row is [x1, y1, x2, y2].\n        labels: (list[str] or None)\n        color: a 3-tuple BGR color (in range [0, 255])\n\n    Returns:\n        np.ndarray: a new image.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_blobs(self, prefix=''):\n    \"\"\"\"\"\"\n    return [b.name for b in self.bucket.list_blobs(prefix=prefix)]", "output": "Lists names of all blobs by their prefix.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_service(protocol=None, service_address=None, scheduler='wlc'):\n    '''\n    \n    '''\n\n    cmd = '{0} -A {1}'.format(__detect_os(),\n                              _build_cmd(protocol=protocol,\n                                         service_address=service_address,\n                                         scheduler=scheduler))\n    out = __salt__['cmd.run_all'](cmd, python_shell=False)\n\n    # A non-zero return code means fail\n    if out['retcode']:\n        ret = out['stderr'].strip()\n    else:\n        ret = True\n    return ret", "output": "Add a virtual service.\n\n    protocol\n        The service protocol(only support tcp, udp and fwmark service).\n\n    service_address\n        The LVS service address.\n\n    scheduler\n        Algorithm for allocating TCP connections and UDP datagrams to real servers.\n\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' lvs.add_service tcp 1.1.1.1:80 rr", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_dataset(self, dataset_ref, retry=DEFAULT_RETRY):\n        \"\"\"\n        \"\"\"\n        if isinstance(dataset_ref, str):\n            dataset_ref = DatasetReference.from_string(\n                dataset_ref, default_project=self.project\n            )\n\n        api_response = self._call_api(retry, method=\"GET\", path=dataset_ref.path)\n        return Dataset.from_api_repr(api_response)", "output": "Fetch the dataset referenced by ``dataset_ref``\n\n        Args:\n            dataset_ref (Union[ \\\n                :class:`~google.cloud.bigquery.dataset.DatasetReference`, \\\n                str, \\\n            ]):\n                A reference to the dataset to fetch from the BigQuery API.\n                If a string is passed in, this method attempts to create a\n                dataset reference from a string using\n                :func:`~google.cloud.bigquery.dataset.DatasetReference.from_string`.\n            retry (:class:`google.api_core.retry.Retry`):\n                (Optional) How to retry the RPC.\n\n        Returns:\n            google.cloud.bigquery.dataset.Dataset:\n                A ``Dataset`` instance.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def deploy_api(self, ret):\n        '''\n        \n        '''\n        if self.restApiId:\n            res = self._cleanup_api()\n            if not res.get('deleted'):\n                ret['comment'] = 'Failed to cleanup restAreId {0}'.format(self.restApiId)\n                ret['abort'] = True\n                ret['result'] = False\n                return ret\n            return ret\n\n        response = __salt__['boto_apigateway.create_api'](name=self.rest_api_name,\n                                                          description=_Swagger.AWS_API_DESCRIPTION,\n                                                          **self._common_aws_args)\n\n        if not response.get('created'):\n            ret['result'] = False\n            ret['abort'] = True\n            if 'error' in response:\n                ret['comment'] = 'Failed to create rest api: {0}.'.format(response['error']['message'])\n            return ret\n\n        self.restApiId = response.get('restapi', {}).get('id')\n\n        return _log_changes(ret, 'deploy_api', response.get('restapi'))", "output": "this method create the top level rest api in AWS apigateway", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read_data(label, image):\n    \"\"\"\n    \n    \"\"\"\n    base_url = 'http://yann.lecun.com/exdb/mnist/'\n    with gzip.open(download_file(base_url+label, os.path.join('data',label))) as flbl:\n        magic, num = struct.unpack(\">II\", flbl.read(8))\n        label = np.fromstring(flbl.read(), dtype=np.int8)\n    with gzip.open(download_file(base_url+image, os.path.join('data',image)), 'rb') as fimg:\n        magic, num, rows, cols = struct.unpack(\">IIII\", fimg.read(16))\n        image = np.fromstring(fimg.read(), dtype=np.uint8).reshape(len(label), rows, cols)\n    return (label, image)", "output": "download and read data into numpy", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def register_plugin(self):\r\n        \"\"\"\"\"\"\r\n        self.main.add_dockwidget(self)\r\n\r\n        self.focus_changed.connect(self.main.plugin_focus_changed)\r\n        self.edit_goto.connect(self.main.editor.load)\r\n        self.edit_goto[str, int, str, bool].connect(\r\n                         lambda fname, lineno, word, processevents:\r\n                         self.main.editor.load(fname, lineno, word,\r\n                                               processevents=processevents))\r\n        self.main.editor.breakpoints_saved.connect(self.set_spyder_breakpoints)\r\n        self.main.editor.run_in_current_ipyclient.connect(self.run_script)\r\n        self.main.editor.run_cell_in_ipyclient.connect(self.run_cell)\r\n        self.main.workingdirectory.set_current_console_wd.connect(\r\n                                     self.set_current_client_working_directory)\r\n\r\n        self.tabwidget.currentChanged.connect(self.update_working_directory)\r\n\r\n        self._remove_old_stderr_files()", "output": "Register plugin in Spyder's main window", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def find_elements_by_class_name(self, name):\n        \"\"\"\n        \n        \"\"\"\n        return self.find_elements(by=By.CLASS_NAME, value=name)", "output": "Finds elements by class name.\n\n        :Args:\n         - name: The class name of the elements to find.\n\n        :Returns:\n         - list of WebElement - a list with elements if any was found.  An\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = driver.find_elements_by_class_name('foo')", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def ntile(n):\n    \"\"\"\n    \n    \"\"\"\n    sc = SparkContext._active_spark_context\n    return Column(sc._jvm.functions.ntile(int(n)))", "output": "Window function: returns the ntile group id (from 1 to `n` inclusive)\n    in an ordered window partition. For example, if `n` is 4, the first\n    quarter of the rows will get value 1, the second quarter will get 2,\n    the third quarter will get 3, and the last quarter will get 4.\n\n    This is equivalent to the NTILE function in SQL.\n\n    :param n: an integer", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def gather_file_data(name):\n    \"\"\"\n    \n    \"\"\"\n    res = {'name': name}\n    try:\n        res['mtime'] = osp.getmtime(name)\n        res['size'] = osp.getsize(name)\n    except OSError:\n        pass\n    return res", "output": "Gather data about a given file.\n\n    Returns a dict with fields name, mtime and size, containing the relevant\n    data for the fiel.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def PositionalEncoding(x, params, **unused_kwargs):\n  \"\"\"\"\"\"\n  if not isinstance(x, (list, tuple)):  # non-chunked inputs\n    symbol_size = np.shape(x)[1]\n    return x + params[:, :symbol_size, :]\n  # Chunked case: apply to all chunks selecting as much as needed.\n  offset = 0\n  results = []\n  for chunk in x:\n    symbol_size = np.shape(chunk)[1]\n    results.append(chunk + params[:, offset:offset + symbol_size, :])\n    offset += symbol_size\n  return results", "output": "Implements bare positional encoding.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_shell(pid=None, max_depth=6):\n    \"\"\"\n    \"\"\"\n    pid = str(pid or os.getpid())\n    mapping = _get_process_mapping()\n    login_shell = os.environ.get('SHELL', '')\n    for _ in range(max_depth):\n        try:\n            proc = mapping[pid]\n        except KeyError:\n            break\n        name = os.path.basename(proc.args[0]).lower()\n        if name in SHELL_NAMES:\n            return (name, proc.args[0])\n        elif proc.args[0].startswith('-'):\n            # This is the login shell. Use the SHELL environ if possible\n            # because it provides better information.\n            if login_shell:\n                name = login_shell.lower()\n            else:\n                name = proc.args[0][1:].lower()\n            return (os.path.basename(name), name)\n        pid = proc.ppid     # Go up one level.\n    return None", "output": "Get the shell that the supplied pid or os.getpid() is running in.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _create_project(self, path):\r\n        \"\"\"\"\"\"\r\n        self.open_project(path=path)\r\n        self.setup_menu_actions()\r\n        self.add_to_recent(path)", "output": "Create a new project.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(self, name_or_klass):\n        \"\"\"\n        \n        \"\"\"\n        if not isinstance(name_or_klass, str):\n            name_or_klass = name_or_klass.__name__\n        return self._extensions[name_or_klass]", "output": "Get a extension by name (or class).\n\n        :param name_or_klass: The name or the class of the extension to get\n        :type name_or_klass: str or type\n        :rtype: spyder.api.mode.EditorExtension", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _create_rpmmacros(runas='root'):\n    '''\n    \n    '''\n    home = os.path.expanduser('~')\n    rpmbuilddir = os.path.join(home, 'rpmbuild')\n    if not os.path.isdir(rpmbuilddir):\n        __salt__['file.makedirs_perms'](name=rpmbuilddir, user=runas, group='mock')\n\n    mockdir = os.path.join(home, 'mock')\n    if not os.path.isdir(mockdir):\n        __salt__['file.makedirs_perms'](name=mockdir, user=runas, group='mock')\n\n    rpmmacros = os.path.join(home, '.rpmmacros')\n    with salt.utils.files.fopen(rpmmacros, 'w') as afile:\n        afile.write(\n            salt.utils.stringutils.to_str('%_topdir {0}\\n'.format(rpmbuilddir))\n        )\n        afile.write('%signature gpg\\n')\n        afile.write('%_source_filedigest_algorithm 8\\n')\n        afile.write('%_binary_filedigest_algorithm 8\\n')\n        afile.write('%_gpg_name packaging@saltstack.com\\n')", "output": "Create the .rpmmacros file in user's home directory", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rae(label, pred):\n    \"\"\"\"\"\"\n    numerator = np.mean(np.abs(label - pred), axis=None)\n    denominator = np.mean(np.abs(label - np.mean(label, axis=None)), axis=None)\n    return numerator / denominator", "output": "computes the relative absolute error (condensed using standard deviation formula)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _ParseAbstractInteger(text, is_long=False):\n  \"\"\"\n  \"\"\"\n  # Do the actual parsing. Exception handling is propagated to caller.\n  try:\n    # We force 32-bit values to int and 64-bit values to long to make\n    # alternate implementations where the distinction is more significant\n    # (e.g. the C++ implementation) simpler.\n    if is_long:\n      return long(text, 0)\n    else:\n      return int(text, 0)\n  except ValueError:\n    raise ValueError('Couldn\\'t parse integer: %s' % text)", "output": "Parses an integer without checking size/signedness.\n\n  Args:\n    text: The text to parse.\n    is_long: True if the value should be returned as a long integer.\n\n  Returns:\n    The integer value.\n\n  Raises:\n    ValueError: Thrown Iff the text is not a valid integer.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_selected_cb(parents, combobox):\n    \"\"\"\n    \n    \"\"\"\n    if parents is not None and len(parents) == 0:\n        combobox.setCurrentIndex(0)\n    else:\n        item = parents[-1]\n        for i in range(combobox.count()):\n            if combobox.itemData(i) == item:\n                combobox.setCurrentIndex(i)\n                break", "output": "Update the combobox with the selected item based on the parents.\n\n    Parameters\n    ----------\n    parents : list of :class:`FoldScopeHelper`\n    combobox : :class:`qtpy.QtWidets.QComboBox`\n        The combobox to populate\n\n    Returns\n    -------\n    None", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def bias(self, arr:Collection, is_item:bool=True):\n        \"\"\n        idx = self.get_idx(arr, is_item)\n        m = self.model\n        layer = m.i_bias if is_item else m.u_bias\n        return layer(idx).squeeze()", "output": "Bias for item or user (based on `is_item`) for all in `arr`. (Set model to `cpu` and no grad.)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def indexables(self):\n        \"\"\"  \"\"\"\n        if self._indexables is None:\n\n            d = self.description\n\n            # the index columns is just a simple index\n            self._indexables = [GenericIndexCol(name='index', axis=0)]\n\n            for i, n in enumerate(d._v_names):\n\n                dc = GenericDataIndexableCol(\n                    name=n, pos=i, values=[n], version=self.version)\n                self._indexables.append(dc)\n\n        return self._indexables", "output": "create the indexables from the table description", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def install(cert,\n            password,\n            keychain=\"/Library/Keychains/System.keychain\",\n            allow_any=False,\n            keychain_password=None):\n    '''\n    \n    '''\n    if keychain_password is not None:\n        unlock_keychain(keychain, keychain_password)\n\n    cmd = 'security import {0} -P {1} -k {2}'.format(cert, password, keychain)\n    if allow_any:\n        cmd += ' -A'\n    return __salt__['cmd.run'](cmd)", "output": "Install a certificate\n\n    cert\n        The certificate to install\n\n    password\n        The password for the certificate being installed formatted in the way\n        described for openssl command in the PASS PHRASE ARGUMENTS section.\n\n        Note: The password given here will show up as plaintext in the job returned\n        info.\n\n    keychain\n        The keychain to install the certificate to, this defaults to\n        /Library/Keychains/System.keychain\n\n    allow_any\n        Allow any application to access the imported certificate without warning\n\n    keychain_password\n        If your keychain is likely to be locked pass the password and it will be unlocked\n        before running the import\n\n        Note: The password given here will show up as plaintext in the returned job\n        info.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' keychain.install test.p12 test123", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_factors(n):\n    \"\"\"\n    \"\"\"\n\n    def factor(n, i, combi, res):\n        \"\"\"[summary]\n        helper function\n\n        Arguments:\n            n {[int]} -- [number]\n            i {[int]} -- [to tested divisor]\n            combi {[list]} -- [catch divisors]\n            res {[list]} -- [all factors of the number n]\n        \n        Returns:\n            [list] -- [res]\n        \"\"\"\n\n        while i * i <= n:\n            if n % i == 0:\n                res += combi + [i, int(n/i)],\n                factor(n/i, i, combi+[i], res)\n            i += 1\n        return res\n    return factor(n, 2, [], [])", "output": "[summary]\n    \n    Arguments:\n        n {[int]} -- [to analysed number]\n    \n    Returns:\n        [list of lists] -- [all factors of the number n]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __get_managed_files_rpm(self):\n        '''\n        \n        '''\n        dirs = set()\n        links = set()\n        files = set()\n\n        for line in salt.utils.stringutils.to_str(self._syscall(\"rpm\", None, None, '-qlav')[0]).split(os.linesep):\n            line = line.strip()\n            if not line:\n                continue\n            line = line.replace(\"\\t\", \" \").split(\" \")\n            if line[0][0] == \"d\":\n                dirs.add(line[-1])\n            elif line[0][0] == \"l\":\n                links.add(line[-1])\n            elif line[0][0] == \"-\":\n                files.add(line[-1])\n\n        return sorted(files), sorted(dirs), sorted(links)", "output": "Get a list of all system files, belonging to the RedHat package manager.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def chown(self, path, owner, group, recursive=False):\n        \"\"\"\n        \n        \"\"\"\n        bite = self.get_bite()\n        if owner:\n            if group:\n                return all(bite.chown(self.list_path(path), \"%s:%s\" % (owner, group),\n                                      recurse=recursive))\n            return all(bite.chown(self.list_path(path), owner, recurse=recursive))\n        return list(bite.chgrp(self.list_path(path), group, recurse=recursive))", "output": "Use snakebite.chown/chgrp, if available.\n\n        One of owner or group must be set. Just setting group calls chgrp.\n\n        :param path: update-able file(s)\n        :type path: either a string or sequence of strings\n        :param owner: new owner, can be blank\n        :type owner: string\n        :param group: new group, can be blank\n        :type group: string\n        :param recursive: change just listed entry(ies) or all in directories\n        :type recursive: boolean, default is False\n        :return: list of all changed items", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def image_list(auth=None, **kwargs):\n    '''\n    \n    '''\n    cloud = get_operator_cloud(auth)\n    kwargs = _clean_kwargs(**kwargs)\n    return cloud.list_images(**kwargs)", "output": "List images\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' glanceng.image_list\n        salt '*' glanceng.image_list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rand_zoom(scale:uniform=1.0, p:float=1.):\n    \"\"\n    return zoom(scale=scale, **rand_pos, p=p)", "output": "Randomized version of `zoom`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _init_vocab_from_list(self, vocab_list):\n    \"\"\"\n    \"\"\"\n    def token_gen():\n      for token in vocab_list:\n        if token not in RESERVED_TOKENS:\n          yield token\n\n    self._init_vocab(token_gen())", "output": "Initialize tokens from a list of tokens.\n\n    It is ok if reserved tokens appear in the vocab list. They will be\n    removed. The set of tokens in vocab_list should be unique.\n\n    Args:\n      vocab_list: A list of tokens.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dzip_exact(*dicts):\n    \"\"\"\n    \n    \"\"\"\n    if not same(*map(viewkeys, dicts)):\n        raise ValueError(\n            \"dict keys not all equal:\\n\\n%s\" % _format_unequal_keys(dicts)\n        )\n    return {k: tuple(d[k] for d in dicts) for k in dicts[0]}", "output": "Parameters\n    ----------\n    *dicts : iterable[dict]\n        A sequence of dicts all sharing the same keys.\n\n    Returns\n    -------\n    zipped : dict\n        A dict whose keys are the union of all keys in *dicts, and whose values\n        are tuples of length len(dicts) containing the result of looking up\n        each key in each dict.\n\n    Raises\n    ------\n    ValueError\n        If dicts don't all have the same keys.\n\n    Examples\n    --------\n    >>> result = dzip_exact({'a': 1, 'b': 2}, {'a': 3, 'b': 4})\n    >>> result == {'a': (1, 3), 'b': (2, 4)}\n    True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def forward_backward(self, x):\n        \"\"\"\"\"\"\n        (src_seq, tgt_seq, src_valid_length, tgt_valid_length), batch_size = x\n        with mx.autograd.record():\n            out, _ = self._model(src_seq, tgt_seq[:, :-1],\n                                 src_valid_length, tgt_valid_length - 1)\n            smoothed_label = self._label_smoothing(tgt_seq[:, 1:])\n            ls = self._loss(out, smoothed_label, tgt_valid_length - 1).sum()\n            ls = (ls * (tgt_seq.shape[1] - 1)) / batch_size / self._rescale_loss\n        ls.backward()\n        return ls", "output": "Perform forward and backward computation for a batch of src seq and dst seq", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_delete(self, path: str, handler: _WebHandler,\n                   **kwargs: Any) -> AbstractRoute:\n        \"\"\"\n        \n        \"\"\"\n        return self.add_route(hdrs.METH_DELETE, path, handler, **kwargs)", "output": "Shortcut for add_route with method DELETE", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dump(self):\n        \"\"\"\"\"\"\n        id = self.get(\"id\")\n        if not id:\n            id = \"(none)\"\n        else:\n            id = id[0]\n\n        parent = self.get(\"parent\")\n        if not parent:\n            parent = \"(none)\"\n        else:\n            parent = parent[0]\n\n        print \"'%s'\" % id\n        print \"Parent project:%s\", parent\n        print \"Requirements:%s\", self.get(\"requirements\")\n        print \"Default build:%s\", string.join(self.get(\"debuild-build\"))\n        print \"Source location:%s\", string.join(self.get(\"source-location\"))\n        print \"Projects to build:%s\", string.join(self.get(\"projects-to-build\").sort());", "output": "Prints the project attributes.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_search_space(path):\n    ''''''\n    content = json.dumps(get_json_content(path))\n    if not content:\n        raise ValueError('searchSpace file should not be empty')\n    return content", "output": "load search space content", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_bool(val):\n    '''\n    \n    '''\n    if val is None:\n        return False\n    if isinstance(val, bool):\n        return val\n    if isinstance(val, (six.text_type, six.string_types)):\n        return val.lower() in ('yes', '1', 'true')\n    if isinstance(val, six.integer_types):\n        return val > 0\n    if not isinstance(val, collections.Hashable):\n        return bool(val)\n    return False", "output": "Returns the logical value.\n\n    .. code-block:: jinja\n\n        {{ 'yes' | to_bool }}\n\n    will be rendered as:\n\n    .. code-block:: text\n\n        True", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def masked_rec_array_to_mgr(data, index, columns, dtype, copy):\n    \"\"\"\n    \n    \"\"\"\n\n    # essentially process a record array then fill it\n    fill_value = data.fill_value\n    fdata = ma.getdata(data)\n    if index is None:\n        index = get_names_from_index(fdata)\n        if index is None:\n            index = ibase.default_index(len(data))\n    index = ensure_index(index)\n\n    if columns is not None:\n        columns = ensure_index(columns)\n    arrays, arr_columns = to_arrays(fdata, columns)\n\n    # fill if needed\n    new_arrays = []\n    for fv, arr, col in zip(fill_value, arrays, arr_columns):\n        mask = ma.getmaskarray(data[col])\n        if mask.any():\n            arr, fv = maybe_upcast(arr, fill_value=fv, copy=True)\n            arr[mask] = fv\n        new_arrays.append(arr)\n\n    # create the manager\n    arrays, arr_columns = reorder_arrays(new_arrays, arr_columns, columns)\n    if columns is None:\n        columns = arr_columns\n\n    mgr = arrays_to_mgr(arrays, arr_columns, index, columns, dtype)\n\n    if copy:\n        mgr = mgr.copy()\n    return mgr", "output": "Extract from a masked rec array and create the manager.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_running():\n    '''\n    \n    '''\n    ret = []\n    for line in _machinectl('list')['stdout'].splitlines():\n        try:\n            ret.append(line.split()[0])\n        except IndexError:\n            pass\n    return sorted(ret)", "output": "Lists running nspawn containers\n\n    .. note::\n\n        ``nspawn.list`` also works to list running containers\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion nspawn.list_running\n        salt myminion nspawn.list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _nodetool(cmd):\n    '''\n    \n    '''\n    nodetool = __salt__['config.option']('cassandra.nodetool')\n    host = __salt__['config.option']('cassandra.host')\n    return __salt__['cmd.run_stdout']('{0} -h {1} {2}'.format(nodetool, host, cmd))", "output": "Internal cassandra nodetool wrapper. Some functions are not\n    available via pycassa so we must rely on nodetool.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def instance_norm(attrs, inputs, proto_obj):\n    \"\"\"\"\"\"\n    new_attrs = translation_utils._fix_attribute_names(attrs, {'epsilon' : 'eps'})\n    new_attrs['eps'] = attrs.get('epsilon', 1e-5)\n    return 'InstanceNorm', new_attrs, inputs", "output": "Instance Normalization.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_hg_revision(repopath):\r\n    \"\"\"\r\n    \"\"\"\r\n    try:\r\n        assert osp.isdir(osp.join(repopath, '.hg'))\r\n        proc = programs.run_program('hg', ['id', '-nib', repopath])\r\n        output, _err = proc.communicate()\r\n        # output is now: ('eba7273c69df+ 2015+ default\\n', None)\r\n        # Split 2 times max to allow spaces in branch names.\r\n        return tuple(output.decode().strip().split(None, 2))\r\n    except (subprocess.CalledProcessError, AssertionError, AttributeError,\r\n            OSError):\r\n        return (None, None, None)", "output": "Return Mercurial revision for the repository located at repopath\r\n       Result is a tuple (global, local, branch), with None values on error\r\n       For example:\r\n           >>> get_hg_revision(\".\")\r\n           ('eba7273c69df+', '2015+', 'default')", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def download_and_uncompress(self, fileobj, dst_path):\n    \"\"\"\n    \"\"\"\n    try:\n      with tarfile.open(mode=\"r|*\", fileobj=fileobj) as tgz:\n        for tarinfo in tgz:\n          abs_target_path = _merge_relative_path(dst_path, tarinfo.name)\n\n          if tarinfo.isfile():\n            self._extract_file(tgz, tarinfo, abs_target_path)\n          elif tarinfo.isdir():\n            tf_v1.gfile.MakeDirs(abs_target_path)\n          else:\n            # We do not support symlinks and other uncommon objects.\n            raise ValueError(\n                \"Unexpected object type in tar archive: %s\" % tarinfo.type)\n\n        total_size_str = tf_utils.bytes_to_readable_str(\n            self._total_bytes_downloaded, True)\n        self._print_download_progress_msg(\n            \"Downloaded %s, Total size: %s\" % (self._url, total_size_str),\n            flush=True)\n    except tarfile.ReadError:\n      raise IOError(\"%s does not appear to be a valid module.\" % self._url)", "output": "Streams the content for the 'fileobj' and stores the result in dst_path.\n\n    Args:\n      fileobj: File handle pointing to .tar/.tar.gz content.\n      dst_path: Absolute path where to store uncompressed data from 'fileobj'.\n\n    Raises:\n      ValueError: Unknown object encountered inside the TAR file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def gpu_memory_info(device_id=0):\n    \"\"\"\n\n    \"\"\"\n    free = ctypes.c_uint64()\n    total = ctypes.c_uint64()\n    dev_id = ctypes.c_int(device_id)\n    check_call(_LIB.MXGetGPUMemoryInformation64(dev_id, ctypes.byref(free), ctypes.byref(total)))\n    return (free.value, total.value)", "output": "Query CUDA for the free and total bytes of GPU global memory.\n\n    Parameters\n    ----------\n    device_id : int, optional\n        The device id of the GPU device.\n\n    Raises\n    ------\n    Will raise an exception on any CUDA error.\n\n    Returns\n    -------\n    (free, total) : (int, int)\n        The number of GPUs.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def discount_rewards(r):\n    \"\"\"\"\"\"\n    discounted_r = np.zeros_like(r)\n    running_add = 0\n    for t in reversed(range(0, r.size)):\n        # Reset the sum, since this was a game boundary (pong specific!).\n        if r[t] != 0:\n            running_add = 0\n        running_add = running_add * gamma + r[t]\n        discounted_r[t] = running_add\n    return discounted_r", "output": "take 1D float array of rewards and compute discounted reward", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mtf_image_transformer_cifar_mp_4x():\n  \"\"\"\"\"\"\n  hparams = mtf_image_transformer_base_cifar()\n  hparams.mesh_shape = \"model:4;batch:8\"\n  hparams.layout = \"batch:batch;d_ff:model;heads:model\"\n  hparams.batch_size = 32\n  hparams.num_heads = 8\n  hparams.d_ff = 8192\n  return hparams", "output": "Data parallel CIFAR parameters.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def status(self, targets, jobs=None, remote=None, show_checksums=False):\n        \"\"\"\n        \"\"\"\n        cloud = self._get_cloud(remote, \"status\")\n        return self.repo.cache.local.status(\n            targets, jobs=jobs, remote=cloud, show_checksums=show_checksums\n        )", "output": "Check status of data items in a cloud-agnostic way.\n\n        Args:\n            targets (list): list of targets to check status for.\n            jobs (int): number of jobs that can be running simultaneously.\n            remote (dvc.remote.base.RemoteBase): optional remote to compare\n                targets to. By default remote from core.remote config option\n                is used.\n            show_checksums (bool): show checksums instead of file names in\n                information messages.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def post_card(message,\n              hook_url=None,\n              title=None,\n              theme_color=None):\n    '''\n    \n    '''\n\n    if not hook_url:\n        hook_url = _get_hook_url()\n\n    if not message:\n        log.error('message is a required option.')\n\n    payload = {\n        \"text\": message,\n        \"title\": title,\n        \"themeColor\": theme_color\n    }\n\n    result = salt.utils.http.query(hook_url,\n                                   method='POST',\n                                   data=salt.utils.json.dumps(payload),\n                                   status=True)\n\n    if result['status'] <= 201:\n        return True\n    else:\n        return {\n            'res': False,\n            'message': result.get('body', result['status'])\n        }", "output": "Send a message to an MS Teams channel.\n    :param message:     The message to send to the MS Teams channel.\n    :param hook_url:    The Teams webhook URL, if not specified in the configuration.\n    :param title:       Optional title for the posted card\n    :param theme_color:  Optional hex color highlight for the posted card\n    :return:            Boolean if message was sent successfully.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' msteams.post_card message=\"Build is done\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _apply_with_random_selector(x, func, num_cases):\n  \"\"\"\n  \"\"\"\n  sel = tf.random_uniform([], maxval=num_cases, dtype=tf.int32)\n  # Pass the real x only to one of the func calls.\n  return control_flow_ops.merge([\n      func(control_flow_ops.switch(x, tf.equal(sel, case))[1], case)\n      for case in range(num_cases)\n  ])[0]", "output": "Computes func(x, sel), with sel sampled from [0...num_cases-1].\n\n  Args:\n    x: input Tensor.\n    func: Python function to apply.\n    num_cases: Python int32, number of cases to sample sel from.\n\n  Returns:\n    The result of func(x, sel), where func receives the value of the\n    selector as a python integer, but sel is sampled dynamically.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def encode(self, input_str):\n    \"\"\"\"\"\"\n    inputs = self.encoders[\"inputs\"].encode(input_str) + [EOS_ID]\n    batch_inputs = np.reshape(inputs, [1, -1, 1, 1])  # Make it 3D.\n    return batch_inputs", "output": "Input str to features dict, ready for inference.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_tags(filesystemid,\n                tags,\n                keyid=None,\n                key=None,\n                profile=None,\n                region=None,\n                **kwargs):\n    '''\n    \n    '''\n\n    client = _get_conn(key=key, keyid=keyid, profile=profile, region=region)\n\n    new_tags = []\n    for k, v in six.iteritems(tags):\n        new_tags.append({'Key': k, 'Value': v})\n\n    client.create_tags(FileSystemId=filesystemid, Tags=new_tags)", "output": "Creates or overwrites tags associated with a file system.\n    Each tag is a key-value pair. If a tag key specified in the request\n    already exists on the file system, this operation overwrites\n    its value with the value provided in the request.\n\n    filesystemid\n        (string) - ID of the file system for whose tags will be modified.\n\n    tags\n        (dict) - The tags to add to the file system\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt 'my-minion' boto_efs.create_tags", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_table_data(self):\r\n        \"\"\"\"\"\"\r\n        data = self._simplify_shape(\r\n                self.table_widget.get_data())\r\n        if self.table_widget.array_btn.isChecked():\r\n            return array(data)\r\n        elif pd and self.table_widget.df_btn.isChecked():\r\n            info = self.table_widget.pd_info\r\n            buf = io.StringIO(self.table_widget.pd_text)\r\n            return pd.read_csv(buf, **info)\r\n        return data", "output": "Return clipboard processed as data", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_delete(user_id=None, name=None, profile=None, **connection_args):\n    '''\n    \n    '''\n    kstone = auth(profile, **connection_args)\n    if name:\n        for user in kstone.users.list():\n            if user.name == name:\n                user_id = user.id\n                break\n    if not user_id:\n        return {'Error': 'Unable to resolve user id'}\n    kstone.users.delete(user_id)\n    ret = 'User ID {0} deleted'.format(user_id)\n    if name:\n\n        ret += ' ({0})'.format(name)\n    return ret", "output": "Delete a user (keystone user-delete)\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt '*' keystone.user_delete c965f79c4f864eaaa9c3b41904e67082\n        salt '*' keystone.user_delete user_id=c965f79c4f864eaaa9c3b41904e67082\n        salt '*' keystone.user_delete name=nova", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def hook(self, m:nn.Module, i:Tensors, o:Tensors)->Tuple[Rank0Tensor,Rank0Tensor]:\n        \"\"\n        return o.mean().item(),o.std().item()", "output": "Take the mean and std of `o`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _interfaces_ipconfig(out):\n    '''\n    \n    '''\n    ifaces = dict()\n    iface = None\n    adapter_iface_regex = re.compile(r'adapter (\\S.+):$')\n\n    for line in out.splitlines():\n        if not line:\n            continue\n        # TODO what does Windows call Infiniband and 10/40gige adapters\n        if line.startswith('Ethernet'):\n            iface = ifaces[adapter_iface_regex.search(line).group(1)]\n            iface['up'] = True\n            addr = None\n            continue\n        if iface:\n            key, val = line.split(',', 1)\n            key = key.strip(' .')\n            val = val.strip()\n            if addr and key == 'Subnet Mask':\n                addr['netmask'] = val\n            elif key in ('IP Address', 'IPv4 Address'):\n                if 'inet' not in iface:\n                    iface['inet'] = list()\n                addr = {'address': val.rstrip('(Preferred)'),\n                        'netmask': None,\n                        'broadcast': None}  # TODO find the broadcast\n                iface['inet'].append(addr)\n            elif 'IPv6 Address' in key:\n                if 'inet6' not in iface:\n                    iface['inet'] = list()\n                # XXX What is the prefixlen!?\n                addr = {'address': val.rstrip('(Preferred)'),\n                        'prefixlen': None}\n                iface['inet6'].append(addr)\n            elif key == 'Physical Address':\n                iface['hwaddr'] = val\n            elif key == 'Media State':\n                # XXX seen used for tunnel adaptors\n                # might be useful\n                iface['up'] = (val != 'Media disconnected')", "output": "Returns a dictionary of interfaces with various information about each\n    (up/down state, ip address, netmask, and hwaddr)\n\n    NOTE: This is not used by any function and may be able to be removed in the\n    future.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_(saltenv='base', test=None):\n    '''\n    \n    '''\n    sevent = salt.utils.event.get_event(\n            'master',\n            __opts__['sock_dir'],\n            __opts__['transport'],\n            opts=__opts__,\n            listen=True)\n\n    master_key = salt.utils.master.get_master_key('root', __opts__)\n\n    __jid_event__.fire_event({'key': master_key}, 'salt/reactors/manage/list')\n\n    results = sevent.get_event(wait=30, tag='salt/reactors/manage/list-results')\n    reactors = results['reactors']\n    return reactors", "output": "List currently configured reactors\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-run reactor.list", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert_instancenorm(net, node, model, builder):\n    \"\"\"\n    \"\"\"\n    import numpy as _np\n    input_name, output_name = _get_input_output_name(net, node)\n\n    name = node['name']\n    inputs = node['inputs']\n    outputs = node['outputs']\n\n\n    data_blob_name = _get_node_name(net, inputs[0][0])\n    gamma_blob_name = _get_node_name(net, inputs[1][0])\n    beta_blob_name = _get_node_name(net, inputs[2][0])\n    channels = _get_node_channels(net, inputs[0][0])\n\n    bn_output_name = output_name + '_bn_'\n\n    builder.add_batchnorm(\n        name = name + '_normalize',\n        channels = channels,\n        gamma = _np.ones((channels, )),\n        beta = _np.zeros((channels, )),\n        mean = None,\n        variance = None,\n        input_name = input_name,\n        output_name = bn_output_name,\n        compute_mean_var = True,\n        instance_normalization = True)\n\n    gamma_input_names = [bn_output_name, gamma_blob_name]\n    gamma_output_name = output_name + '_mult_gamma'\n    builder.add_elementwise(name=name+'_mult_gamma', input_names=gamma_input_names,\n        output_name = gamma_output_name, mode='MULTIPLY', alpha = None)\n    beta_input_names = [gamma_output_name, beta_blob_name]\n    builder.add_elementwise(name=name+'_add_beta', input_names=beta_input_names,\n        output_name = output_name, mode='ADD', alpha=None)", "output": "Convert an instance norm layer from mxnet to coreml.\n\n    Parameters\n    ----------\n    net: network\n        A mxnet network object.\n\n    node: layer\n        Node to convert.\n\n    model: model\n        An model for MXNet\n\n    builder: NeuralNetworkBuilder\n        A neural network builder object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def multi_split(s, split):\n    # type: (S, Iterable[S]) -> List[S]\n    \"\"\"\"\"\"\n    for r in split:\n        s = s.replace(r, \"|\")\n    return [i for i in s.split(\"|\") if len(i) > 0]", "output": "Splits on multiple given separators.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def AddRow(self, *args):\n        '''  '''\n        NumRows = len(self.Rows)  # number of existing rows is our row number\n        CurrentRowNumber = NumRows  # this row's number\n        CurrentRow = []  # start with a blank row and build up\n        # -------------------------  Add the elements to a row  ------------------------- #\n        for i, element in enumerate(args):  # Loop through list of elements and add them to the row\n            element.Position = (CurrentRowNumber, i)\n            element.ParentContainer = self\n            CurrentRow.append(element)\n        # -------------------------  Append the row to list of Rows  ------------------------- #\n        self.Rows.append(CurrentRow)", "output": "Parms are a variable number of Elements", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _copy_dist_from_dir(link_path, location):\n    \"\"\"\n\n    \"\"\"\n\n    # Note: This is currently VERY SLOW if you have a lot of data in the\n    # directory, because it copies everything with `shutil.copytree`.\n    # What it should really do is build an sdist and install that.\n    # See https://github.com/pypa/pip/issues/2195\n\n    if os.path.isdir(location):\n        rmtree(location)\n\n    # build an sdist\n    setup_py = 'setup.py'\n    sdist_args = [sys.executable]\n    sdist_args.append('-c')\n    sdist_args.append(SETUPTOOLS_SHIM % setup_py)\n    sdist_args.append('sdist')\n    sdist_args += ['--dist-dir', location]\n    logger.info('Running setup.py sdist for %s', link_path)\n\n    with indent_log():\n        call_subprocess(sdist_args, cwd=link_path, show_stdout=False)\n\n    # unpack sdist into `location`\n    sdist = os.path.join(location, os.listdir(location)[0])\n    logger.info('Unpacking sdist %s into %s', sdist, location)\n    unpack_file(sdist, location, content_type=None, link=None)", "output": "Copy distribution files in `link_path` to `location`.\n\n    Invoked when user requests to install a local directory. E.g.:\n\n        pip install .\n        pip install ~/dev/git-repos/python-prompt-toolkit", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_gl_class_type(obj_class):\n    \"\"\"\n    \n\n    \"\"\"\n\n    if obj_class == _SFrame:\n        return \"SFrame\"\n    elif obj_class == _SGraph:\n        return \"SGraph\"\n    elif obj_class == _SArray:\n        return \"SArray\"\n    elif _is_not_pickle_safe_gl_model_class(obj_class):\n        return \"Model\"\n    else:\n        return None", "output": "Internal util to get the type of the GLC class. The pickle file stores\n    this name so that it knows how to construct the object on unpickling.\n\n    Parameters\n    ----------\n    obj_class    : Class which has to be categorized.\n\n    Returns\n    ----------\n    A class type for the pickle file to save.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _ensure_running(name, no_start=False, path=None):\n    '''\n    \n    '''\n    _ensure_exists(name, path=path)\n    pre = state(name, path=path)\n    if pre == 'running':\n        # This will be a no-op but running the function will give us a pretty\n        # return dict.\n        return start(name, path=path)\n    elif pre == 'stopped':\n        if no_start:\n            raise CommandExecutionError(\n                'Container \\'{0}\\' is not running'.format(name)\n            )\n        return start(name, path=path)\n    elif pre == 'frozen':\n        if no_start:\n            raise CommandExecutionError(\n                'Container \\'{0}\\' is not running'.format(name)\n            )\n        return unfreeze(name, path=path)", "output": "If the container is not currently running, start it. This function returns\n    the state that the container was in before changing\n\n    path\n        path to the container parent directory\n        default: /var/lib/lxc (system)\n\n        .. versionadded:: 2015.8.0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def addCondition(self, *fns, **kwargs):\n        \"\"\"\n        \"\"\"\n        msg = kwargs.get(\"message\", \"failed user-defined condition\")\n        exc_type = ParseFatalException if kwargs.get(\"fatal\", False) else ParseException\n        for fn in fns:\n            fn = _trim_arity(fn)\n            def pa(s,l,t):\n                if not bool(fn(s,l,t)):\n                    raise exc_type(s,l,msg)\n            self.parseAction.append(pa)\n        self.callDuringTry = self.callDuringTry or kwargs.get(\"callDuringTry\", False)\n        return self", "output": "Add a boolean predicate function to expression's list of parse actions. See\n        :class:`setParseAction` for function call signatures. Unlike ``setParseAction``,\n        functions passed to ``addCondition`` need to return boolean success/fail of the condition.\n\n        Optional keyword arguments:\n        - message = define a custom message to be used in the raised exception\n        - fatal   = if True, will raise ParseFatalException to stop parsing immediately; otherwise will raise ParseException\n\n        Example::\n\n            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))\n            year_int = integer.copy()\n            year_int.addCondition(lambda toks: toks[0] >= 2000, message=\"Only support years 2000 and later\")\n            date_str = year_int + '/' + integer + '/' + integer\n\n            result = date_str.parseString(\"1999/12/31\")  # -> Exception: Only support years 2000 and later (at char 0), (line:1, col:1)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_group(path, follow_symlinks=True):\n    '''\n    \n    '''\n    func_name = '{0}.get_group'.format(__virtualname__)\n    if __opts__.get('fun', '') == func_name:\n        log.info('The function %s should not be used on Windows systems; '\n                 'see function docs for details. The value returned is the '\n                 'user (owner).', func_name)\n\n    return get_user(path, follow_symlinks)", "output": "Return the group that owns a given file\n\n    Under Windows, this will return the user (owner) of the file.\n\n    While a file in Windows does have a 'primary group', this rarely used\n    attribute generally has no bearing on permissions unless intentionally\n    configured and is only used to support Unix compatibility features (e.g.\n    Services For Unix, NFS services).\n\n    Salt, therefore, remaps this function to provide functionality that\n    somewhat resembles Unix behavior for API compatibility reasons. When\n    managing Windows systems, this function is superfluous and will generate\n    an info level log entry if used directly.\n\n    If you do actually want to access the 'primary group' of a file, use\n    `file.get_pgroup`.\n\n    Args:\n        path (str): The path to the file or directory\n\n        follow_symlinks (bool):\n            If the object specified by ``path`` is a symlink, get attributes of\n            the linked file instead of the symlink itself. Default is True\n\n    Returns:\n        str: The name of the owner\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' file.get_group c:\\\\temp\\\\test.txt", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def prepare_global_logging(serialization_dir: str, file_friendly_logging: bool) -> logging.FileHandler:\n    \"\"\"\n    \n    \"\"\"\n\n    # If we don't have a terminal as stdout,\n    # force tqdm to be nicer.\n    if not sys.stdout.isatty():\n        file_friendly_logging = True\n\n    Tqdm.set_slower_interval(file_friendly_logging)\n    std_out_file = os.path.join(serialization_dir, \"stdout.log\")\n    sys.stdout = TeeLogger(std_out_file, # type: ignore\n                           sys.stdout,\n                           file_friendly_logging)\n    sys.stderr = TeeLogger(os.path.join(serialization_dir, \"stderr.log\"), # type: ignore\n                           sys.stderr,\n                           file_friendly_logging)\n\n    stdout_handler = logging.FileHandler(std_out_file)\n    stdout_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s'))\n    logging.getLogger().addHandler(stdout_handler)\n\n    return stdout_handler", "output": "This function configures 3 global logging attributes - streaming stdout and stderr\n    to a file as well as the terminal, setting the formatting for the python logging\n    library and setting the interval frequency for the Tqdm progress bar.\n\n    Note that this function does not set the logging level, which is set in ``allennlp/run.py``.\n\n    Parameters\n    ----------\n    serialization_dir : ``str``, required.\n        The directory to stream logs to.\n    file_friendly_logging : ``bool``, required.\n        Whether logs should clean the output to prevent carriage returns\n        (used to update progress bars on a single terminal line). This\n        option is typically only used if you are running in an environment\n        without a terminal.\n\n    Returns\n    -------\n    ``logging.FileHandler``\n        A logging file handler that can later be closed and removed from the global logger.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def returner(ret):\n    '''\n    \n    '''\n    write_profile = __opts__.get('etcd.returner_write_profile')\n    if write_profile:\n        ttl = __opts__.get(write_profile, {}).get('etcd.ttl')\n    else:\n        ttl = __opts__.get('etcd.ttl')\n\n    client, path = _get_conn(__opts__, write_profile)\n    # Make a note of this minion for the external job cache\n    client.set(\n        '/'.join((path, 'minions', ret['id'])),\n        ret['jid'],\n        ttl=ttl,\n    )\n\n    for field in ret:\n        # Not using os.path.join because we're not dealing with file paths\n        dest = '/'.join((\n            path,\n            'jobs',\n            ret['jid'],\n            ret['id'],\n            field\n        ))\n        client.set(dest, salt.utils.json.dumps(ret[field]), ttl=ttl)", "output": "Return data to an etcd server or cluster", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_dorefa(bitW, bitA, bitG):\n    \"\"\"\n    \n    \"\"\"\n    def quantize(x, k):\n        n = float(2 ** k - 1)\n\n        @tf.custom_gradient\n        def _quantize(x):\n            return tf.round(x * n) / n, lambda dy: dy\n\n        return _quantize(x)\n\n    def fw(x):\n        if bitW == 32:\n            return x\n\n        if bitW == 1:   # BWN\n            E = tf.stop_gradient(tf.reduce_mean(tf.abs(x)))\n\n            @tf.custom_gradient\n            def _sign(x):\n                return tf.where(tf.equal(x, 0), tf.ones_like(x), tf.sign(x / E)) * E, lambda dy: dy\n\n            return _sign(x)\n\n        x = tf.tanh(x)\n        x = x / tf.reduce_max(tf.abs(x)) * 0.5 + 0.5\n        return 2 * quantize(x, bitW) - 1\n\n    def fa(x):\n        if bitA == 32:\n            return x\n        return quantize(x, bitA)\n\n    def fg(x):\n        if bitG == 32:\n            return x\n\n        @tf.custom_gradient\n        def _identity(input):\n            def grad_fg(x):\n                rank = x.get_shape().ndims\n                assert rank is not None\n                maxx = tf.reduce_max(tf.abs(x), list(range(1, rank)), keep_dims=True)\n                x = x / maxx\n                n = float(2**bitG - 1)\n                x = x * 0.5 + 0.5 + tf.random_uniform(\n                    tf.shape(x), minval=-0.5 / n, maxval=0.5 / n)\n                x = tf.clip_by_value(x, 0.0, 1.0)\n                x = quantize(x, bitG) - 0.5\n                return x * maxx * 2\n\n            return input, grad_fg\n\n        return _identity(x)\n    return fw, fa, fg", "output": "Return the three quantization functions fw, fa, fg, for weights, activations and gradients respectively", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def chmod(self, mode):\n        \"\"\"\n        \n        \"\"\"\n        if self._closed:\n            self._raise_closed()\n        self._accessor.chmod(self, mode)", "output": "Change the permissions of the path, like os.chmod().", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mouseReleaseEvent(self, event):\r\n        \"\"\"\"\"\"\r\n        self.QT_CLASS.mouseReleaseEvent(self, event)\r\n        text = self.get_line_at(event.pos())\r\n        if get_error_match(text) and not self.has_selected_text():\r\n            if self.go_to_error is not None:\r\n                self.go_to_error.emit(text)", "output": "Go to error", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update(\n    ctx,\n    state,\n    bare=False,\n    dry_run=None,\n    outdated=False,\n    **kwargs\n):\n    \"\"\"\"\"\"\n    from ..core import (\n        ensure_project,\n        do_outdated,\n        do_lock,\n        do_sync,\n        project,\n    )\n\n    ensure_project(three=state.three, python=state.python, warn=True, pypi_mirror=state.pypi_mirror)\n    if not outdated:\n        outdated = bool(dry_run)\n    if outdated:\n        do_outdated(pypi_mirror=state.pypi_mirror)\n    packages = [p for p in state.installstate.packages if p]\n    editable = [p for p in state.installstate.editables if p]\n    if not packages:\n        echo(\n            \"{0} {1} {2} {3}{4}\".format(\n                crayons.white(\"Running\", bold=True),\n                crayons.red(\"$ pipenv lock\", bold=True),\n                crayons.white(\"then\", bold=True),\n                crayons.red(\"$ pipenv sync\", bold=True),\n                crayons.white(\".\", bold=True),\n            )\n        )\n    else:\n        for package in packages + editable:\n            if package not in project.all_packages:\n                echo(\n                    \"{0}: {1} was not found in your Pipfile! Aborting.\"\n                    \"\".format(\n                        crayons.red(\"Warning\", bold=True),\n                        crayons.green(package, bold=True),\n                    ),\n                    err=True,\n                )\n                ctx.abort()\n\n    do_lock(\n        clear=state.clear,\n        pre=state.installstate.pre,\n        keep_outdated=state.installstate.keep_outdated,\n        pypi_mirror=state.pypi_mirror,\n    )\n    do_sync(\n        ctx=ctx,\n        dev=state.installstate.dev,\n        three=state.three,\n        python=state.python,\n        bare=bare,\n        dont_upgrade=not state.installstate.keep_outdated,\n        user=False,\n        clear=state.clear,\n        unused=False,\n        sequential=state.installstate.sequential,\n        pypi_mirror=state.pypi_mirror,\n    )", "output": "Runs lock, then sync.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def generate_lars_path(weighted_data, weighted_labels):\n        \"\"\"\n        \"\"\"\n        x_vector = weighted_data\n        alphas, _, coefs = lars_path(x_vector,\n                                     weighted_labels,\n                                     method='lasso',\n                                     verbose=False)\n        return alphas, coefs", "output": "Generates the lars path for weighted data.\n\n        Args:\n            weighted_data: data that has been weighted by kernel\n            weighted_label: labels, weighted by kernel\n\n        Returns:\n            (alphas, coefs), both are arrays corresponding to the\n            regularization parameter and coefficients, respectively", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_dummy_dataloader(dataloader, target_shape):\n    \"\"\"\"\"\"\n    data_iter = enumerate(dataloader)\n    _, data_batch = next(data_iter)\n    logging.debug('Searching target batch shape: %s', target_shape)\n    while data_batch[0].shape != target_shape:\n        logging.debug('Skip batch with shape %s', data_batch[0].shape)\n        _, data_batch = next(data_iter)\n    logging.debug('Found target dummy batch.')\n\n    class DummyIter():\n        def __init__(self, batch):\n            self._batch = batch\n\n        def __iter__(self):\n            while True:\n                yield self._batch\n\n    return DummyIter(data_batch)", "output": "Return a dummy data loader which returns a fixed data batch of target shape", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_model_snapshots(self, job_id, snapshot_id=None, body=None, params=None):\n        \"\"\"\n        \n        \"\"\"\n        if job_id in SKIP_IN_PATH:\n            raise ValueError(\"Empty value passed for a required argument 'job_id'.\")\n        return self.transport.perform_request(\n            \"GET\",\n            _make_path(\n                \"_ml\", \"anomaly_detectors\", job_id, \"model_snapshots\", snapshot_id\n            ),\n            params=params,\n            body=body,\n        )", "output": "`<http://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-snapshot.html>`_\n\n        :arg job_id: The ID of the job to fetch\n        :arg snapshot_id: The ID of the snapshot to fetch\n        :arg body: Model snapshot selection criteria\n        :arg desc: True if the results should be sorted in descending order\n        :arg end: The filter 'end' query parameter\n        :arg from_: Skips a number of documents\n        :arg size: The default number of documents returned in queries as a\n            string.\n        :arg sort: Name of the field to sort on\n        :arg start: The filter 'start' query parameter", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def select_header_accept(self, accepts):\n        \"\"\"\n        \n        \"\"\"\n        if not accepts:\n            return\n\n        accepts = [x.lower() for x in accepts]\n\n        if 'application/json' in accepts:\n            return 'application/json'\n        else:\n            return ', '.join(accepts)", "output": "Returns `Accept` based on an array of accepts provided.\n\n        :param accepts: List of headers.\n        :return: Accept (e.g. application/json).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def train(cls, rdd, k=10, maxIterations=20, docConcentration=-1.0,\n              topicConcentration=-1.0, seed=None, checkpointInterval=10, optimizer=\"em\"):\n        \"\"\"\n        \"\"\"\n        model = callMLlibFunc(\"trainLDAModel\", rdd, k, maxIterations,\n                              docConcentration, topicConcentration, seed,\n                              checkpointInterval, optimizer)\n        return LDAModel(model)", "output": "Train a LDA model.\n\n        :param rdd:\n          RDD of documents, which are tuples of document IDs and term\n          (word) count vectors. The term count vectors are \"bags of\n          words\" with a fixed-size vocabulary (where the vocabulary size\n          is the length of the vector). Document IDs must be unique\n          and >= 0.\n        :param k:\n          Number of topics to infer, i.e., the number of soft cluster\n          centers.\n          (default: 10)\n        :param maxIterations:\n          Maximum number of iterations allowed.\n          (default: 20)\n        :param docConcentration:\n          Concentration parameter (commonly named \"alpha\") for the prior\n          placed on documents' distributions over topics (\"theta\").\n          (default: -1.0)\n        :param topicConcentration:\n          Concentration parameter (commonly named \"beta\" or \"eta\") for\n          the prior placed on topics' distributions over terms.\n          (default: -1.0)\n        :param seed:\n          Random seed for cluster initialization. Set as None to generate\n          seed based on system time.\n          (default: None)\n        :param checkpointInterval:\n          Period (in iterations) between checkpoints.\n          (default: 10)\n        :param optimizer:\n          LDAOptimizer used to perform the actual calculation. Currently\n          \"em\", \"online\" are supported.\n          (default: \"em\")", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def find_parent_scope(block):\n        \"\"\"\"\"\"\n        original = block\n        if not TextBlockHelper.is_fold_trigger(block):\n            # search level of next non blank line\n            while block.text().strip() == '' and block.isValid():\n                block = block.next()\n            ref_lvl = TextBlockHelper.get_fold_lvl(block) - 1\n            block = original\n            while (block.blockNumber() and\n                   (not TextBlockHelper.is_fold_trigger(block) or\n                    TextBlockHelper.get_fold_lvl(block) > ref_lvl)):\n                block = block.previous()\n        return block", "output": "Find parent scope, if the block is not a fold trigger.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_keyid(keyname):\n    '''\n    \n    '''\n    if not keyname:\n        return None\n    keypairs = list_keypairs(call='function')\n    keyid = keypairs[keyname]['id']\n    if keyid:\n        return keyid\n    raise SaltCloudNotFound('The specified ssh key could not be found.')", "output": "Return the ID of the keyname", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cached_path(url_or_filename: Union[str, Path], cache_dir: str = None) -> str:\n    \"\"\"\n    \n    \"\"\"\n    if cache_dir is None:\n        cache_dir = CACHE_DIRECTORY\n    if isinstance(url_or_filename, Path):\n        url_or_filename = str(url_or_filename)\n\n    url_or_filename = os.path.expanduser(url_or_filename)\n    parsed = urlparse(url_or_filename)\n\n    if parsed.scheme in ('http', 'https', 's3'):\n        # URL, so get it from the cache (downloading if necessary)\n        return get_from_cache(url_or_filename, cache_dir)\n    elif os.path.exists(url_or_filename):\n        # File, and it exists.\n        return url_or_filename\n    elif parsed.scheme == '':\n        # File, but it doesn't exist.\n        raise FileNotFoundError(\"file {} not found\".format(url_or_filename))\n    else:\n        # Something unknown\n        raise ValueError(\"unable to parse {} as a URL or as a local path\".format(url_or_filename))", "output": "Given something that might be a URL (or might be a local path),\n    determine which. If it's a URL, download the file and cache it, and\n    return the path to the cached file. If it's already a local path,\n    make sure the file exists and then return the path.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _parse_node(graph, text):\n    \"\"\"\"\"\"\n    match = _NODEPAT.match(text)\n    if match is not None:\n        node = match.group(1)\n        graph.node(node, label=match.group(2), shape='circle')\n        return node\n    match = _LEAFPAT.match(text)\n    if match is not None:\n        node = match.group(1)\n        graph.node(node, label=match.group(2), shape='box')\n        return node\n    raise ValueError('Unable to parse node: {0}'.format(text))", "output": "parse dumped node", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_pkgs(versions_as_list=False, **kwargs):\n    '''\n    \n    '''\n    versions_as_list = salt.utils.data.is_true(versions_as_list)\n    # 'removed', 'purge_desired' not yet implemented or not applicable\n    if any([salt.utils.data.is_true(kwargs.get(x))\n            for x in ('removed', 'purge_desired')]):\n        return {}\n\n    if 'pkg.list_pkgs' in __context__:\n        if versions_as_list:\n            return __context__['pkg.list_pkgs']\n        else:\n            ret = copy.deepcopy(__context__['pkg.list_pkgs'])\n            __salt__['pkg_resource.stringify'](ret)\n            return ret\n\n    ret = {}\n    cmd = ['port', 'installed']\n    out = salt.utils.mac_utils.execute_return_result(cmd)\n    for line in out.splitlines():\n        try:\n            name, version_num, active = re.split(r'\\s+', line.lstrip())[0:3]\n            version_num = version_num[1:]\n        except ValueError:\n            continue\n        if not LIST_ACTIVE_ONLY or active == '(active)':\n            __salt__['pkg_resource.add_pkg'](ret, name, version_num)\n\n    __salt__['pkg_resource.sort_pkglist'](ret)\n    __context__['pkg.list_pkgs'] = copy.deepcopy(ret)\n    if not versions_as_list:\n        __salt__['pkg_resource.stringify'](ret)\n    return ret", "output": "List the packages currently installed in a dict::\n\n        {'<package_name>': '<version>'}\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pkg.list_pkgs", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def empty(self):\n        \"\"\"\n        \n        \"\"\"\n        self._lock.acquire()\n        try:\n            out = self._buffer_tobytes()\n            del self._buffer[:]\n            if (self._event is not None) and not self._closed:\n                self._event.clear()\n            return out\n        finally:\n            self._lock.release()", "output": "Clear out the buffer and return all data that was in it.\n\n        :return:\n            any data that was in the buffer prior to clearing it out, as a\n            `str`", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def build_save_containers(platforms, registry, load_cache) -> int:\n    \"\"\"\n    \n    \"\"\"\n    from joblib import Parallel, delayed\n    if len(platforms) == 0:\n        return 0\n\n    platform_results = Parallel(n_jobs=PARALLEL_BUILDS, backend=\"multiprocessing\")(\n        delayed(_build_save_container)(platform, registry, load_cache)\n        for platform in platforms)\n\n    is_error = False\n    for platform_result in platform_results:\n        if platform_result is not None:\n            logging.error('Failed to generate %s', platform_result)\n            is_error = True\n\n    return 1 if is_error else 0", "output": "Entry point to build and upload all built dockerimages in parallel\n    :param platforms: List of platforms\n    :param registry: Docker registry name\n    :param load_cache: Load cache before building\n    :return: 1 if error occurred, 0 otherwise", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read_tf_checkpoint(path):\n    \"\"\"\"\"\"\n    from tensorflow.python import pywrap_tensorflow\n    tensors = {}\n    reader = pywrap_tensorflow.NewCheckpointReader(path)\n    var_to_shape_map = reader.get_variable_to_shape_map()\n    for key in sorted(var_to_shape_map):\n        tensor = reader.get_tensor(key)\n        tensors[key] = tensor\n    return tensors", "output": "read tensorflow checkpoint", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def utime(self, path, times):\n        \"\"\"\n        \n        \"\"\"\n        path = self._adjust_cwd(path)\n        if times is None:\n            times = (time.time(), time.time())\n        self._log(DEBUG, \"utime({!r}, {!r})\".format(path, times))\n        attr = SFTPAttributes()\n        attr.st_atime, attr.st_mtime = times\n        self._request(CMD_SETSTAT, path, attr)", "output": "Set the access and modified times of the file specified by ``path``.\n        If ``times`` is ``None``, then the file's access and modified times\n        are set to the current time.  Otherwise, ``times`` must be a 2-tuple\n        of numbers, of the form ``(atime, mtime)``, which is used to set the\n        access and modified times, respectively.  This bizarre API is mimicked\n        from Python for the sake of consistency -- I apologize.\n\n        :param str path: path of the file to modify\n        :param tuple times:\n            ``None`` or a tuple of (access time, modified time) in standard\n            internet epoch time (seconds since 01 January 1970 GMT)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove_user(name, **client_args):\n    '''\n    \n    '''\n    if not user_exists(name, **client_args):\n        log.info('User \\'%s\\' does not exist', name)\n        return False\n\n    client = _client(**client_args)\n    client.drop_user(name)\n\n    return True", "output": "Remove a user.\n\n    name\n        Name of the user to remove\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' influxdb.remove_user <name>", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def daemonize(redirect_out=True):\n    '''\n    \n    '''\n    # Avoid circular import\n    import salt.utils.crypt\n    try:\n        pid = os.fork()\n        if pid > 0:\n            # exit first parent\n            salt.utils.crypt.reinit_crypto()\n            os._exit(salt.defaults.exitcodes.EX_OK)\n    except OSError as exc:\n        log.error('fork #1 failed: %s (%s)', exc.errno, exc)\n        sys.exit(salt.defaults.exitcodes.EX_GENERIC)\n\n    # decouple from parent environment\n    os.chdir('/')\n    # noinspection PyArgumentList\n    os.setsid()\n    os.umask(0o022)  # pylint: disable=blacklisted-function\n\n    # do second fork\n    try:\n        pid = os.fork()\n        if pid > 0:\n            salt.utils.crypt.reinit_crypto()\n            sys.exit(salt.defaults.exitcodes.EX_OK)\n    except OSError as exc:\n        log.error('fork #2 failed: %s (%s)', exc.errno, exc)\n        sys.exit(salt.defaults.exitcodes.EX_GENERIC)\n\n    salt.utils.crypt.reinit_crypto()\n\n    # A normal daemonization redirects the process output to /dev/null.\n    # Unfortunately when a python multiprocess is called the output is\n    # not cleanly redirected and the parent process dies when the\n    # multiprocessing process attempts to access stdout or err.\n    if redirect_out:\n        with salt.utils.files.fopen('/dev/null', 'r+') as dev_null:\n            # Redirect python stdin/out/err\n            # and the os stdin/out/err which can be different\n            os.dup2(dev_null.fileno(), sys.stdin.fileno())\n            os.dup2(dev_null.fileno(), sys.stdout.fileno())\n            os.dup2(dev_null.fileno(), sys.stderr.fileno())\n            os.dup2(dev_null.fileno(), 0)\n            os.dup2(dev_null.fileno(), 1)\n            os.dup2(dev_null.fileno(), 2)", "output": "Daemonize a process", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reshape(attrs, inputs, proto_obj):\n    \"\"\"\"\"\"\n    if len(inputs) == 1:\n        return 'reshape', attrs, inputs[0]\n    reshape_shape = list(proto_obj._params[inputs[1].name].asnumpy())\n    reshape_shape = [int(i) for i in reshape_shape]\n    new_attrs = {'shape': reshape_shape}\n    return 'reshape', new_attrs, inputs[:1]", "output": "Reshape the given array by the shape attribute.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def assign(name, value):\n    '''\n    \n    '''\n    ret = {}\n    cmd = 'sysctl {0}=\"{1}\"'.format(name, value)\n    data = __salt__['cmd.run_all'](cmd)\n\n    # Certain values cannot be set from this console, at the current\n    # securelevel or there are other restrictions that prevent us\n    # from applying the setting rightaway.\n    if re.match(r'^sysctl:.*: Operation not permitted$', data['stderr']) or \\\n      data['retcode'] != 0:\n        raise CommandExecutionError('sysctl failed: {0}'.format(\n            data['stderr']))\n    new_name, new_value = data['stdout'].split(':', 1)\n    ret[new_name] = new_value.split(' -> ')[-1]\n    return ret", "output": "Assign a single sysctl parameter for this minion\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' sysctl.assign net.inet.ip.forwarding 1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert_yielded(yielded: _Yieldable) -> Future:\n    \"\"\"\n\n    \"\"\"\n    if yielded is None or yielded is moment:\n        return moment\n    elif yielded is _null_future:\n        return _null_future\n    elif isinstance(yielded, (list, dict)):\n        return multi(yielded)  # type: ignore\n    elif is_future(yielded):\n        return typing.cast(Future, yielded)\n    elif isawaitable(yielded):\n        return _wrap_awaitable(yielded)  # type: ignore\n    else:\n        raise BadYieldError(\"yielded unknown object %r\" % (yielded,))", "output": "Convert a yielded object into a `.Future`.\n\n    The default implementation accepts lists, dictionaries, and\n    Futures. This has the side effect of starting any coroutines that\n    did not start themselves, similar to `asyncio.ensure_future`.\n\n    If the `~functools.singledispatch` library is available, this function\n    may be extended to support additional types. For example::\n\n        @convert_yielded.register(asyncio.Future)\n        def _(asyncio_future):\n            return tornado.platform.asyncio.to_tornado_future(asyncio_future)\n\n    .. versionadded:: 4.1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _canonize_content_input(self, dataset, single_style):\n        \"\"\"\n        \n        \"\"\"\n        unpack = lambda x: x\n        if isinstance(dataset, _tc.SArray):\n            dataset = _tc.SFrame({self.content_feature: dataset})\n            if single_style:\n                unpack = lambda sf: sf['stylized_' + self.content_feature]\n        elif isinstance(dataset, _tc.Image):\n            dataset = _tc.SFrame({self.content_feature: [dataset]})\n            if single_style:\n                unpack = lambda sf: sf['stylized_' + self.content_feature][0]\n        return dataset, unpack", "output": "Takes input and returns tuple of the input in canonical form (SFrame)\n        along with an unpack callback function that can be applied to\n        prediction results to \"undo\" the canonization.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def blink_figure(self):\n        \"\"\"\"\"\"\n        if self.fig:\n            self._blink_flag = not self._blink_flag\n            self.repaint()\n            if self._blink_flag:\n                timer = QTimer()\n                timer.singleShot(40, self.blink_figure)", "output": "Blink figure once.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def metric(self, name, filter_=None, description=\"\"):\n        \"\"\"\n        \"\"\"\n        return Metric(name, filter_, client=self, description=description)", "output": "Creates a metric bound to the current client.\n\n        :type name: str\n        :param name: the name of the metric to be constructed.\n\n        :type filter_: str\n        :param filter_: the advanced logs filter expression defining the\n                        entries tracked by the metric.  If not\n                        passed, the instance should already exist, to be\n                        refreshed via :meth:`Metric.reload`.\n\n        :type description: str\n        :param description: the description of the metric to be constructed.\n                            If not passed, the instance should already exist,\n                            to be refreshed via :meth:`Metric.reload`.\n\n        :rtype: :class:`google.cloud.logging.metric.Metric`\n        :returns: Metric created with the current client.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_colors(use=True, theme=None):\n    '''\n    \n\n    '''\n\n    colors = {\n        'BLACK': TextFormat('black'),\n        'DARK_GRAY': TextFormat('bold', 'black'),\n        'RED': TextFormat('red'),\n        'LIGHT_RED': TextFormat('bold', 'red'),\n        'GREEN': TextFormat('green'),\n        'LIGHT_GREEN': TextFormat('bold', 'green'),\n        'YELLOW': TextFormat('yellow'),\n        'LIGHT_YELLOW': TextFormat('bold', 'yellow'),\n        'BLUE': TextFormat('blue'),\n        'LIGHT_BLUE': TextFormat('bold', 'blue'),\n        'MAGENTA': TextFormat('magenta'),\n        'LIGHT_MAGENTA': TextFormat('bold', 'magenta'),\n        'CYAN': TextFormat('cyan'),\n        'LIGHT_CYAN': TextFormat('bold', 'cyan'),\n        'LIGHT_GRAY': TextFormat('white'),\n        'WHITE': TextFormat('bold', 'white'),\n        'DEFAULT_COLOR': TextFormat('default'),\n        'ENDC': TextFormat('reset'),\n    }\n    if theme:\n        colors.update(get_color_theme(theme))\n\n    if not use:\n        for color in colors:\n            colors[color] = ''\n    if isinstance(use, six.string_types):\n        # Try to set all of the colors to the passed color\n        if use in colors:\n            for color in colors:\n                # except for color reset\n                if color == 'ENDC':\n                    continue\n                colors[color] = colors[use]\n\n    return colors", "output": "Return the colors as an easy to use dict. Pass `False` to deactivate all\n    colors by setting them to empty strings. Pass a string containing only the\n    name of a single color to be used in place of all colors. Examples:\n\n    .. code-block:: python\n\n        colors = get_colors()  # enable all colors\n        no_colors = get_colors(False)  # disable all colors\n        red_colors = get_colors('RED')  # set all colors to red", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def profile_device_get(name, device_name, remote_addr=None,\n                       cert=None, key=None, verify_cert=True):\n    ''' \n    '''\n    profile = profile_get(\n        name,\n        remote_addr,\n        cert,\n        key,\n        verify_cert,\n        _raw=True\n    )\n\n    return _get_property_dict_item(profile, 'devices', device_name)", "output": "Get a profile device.\n\n        name :\n            The name of the profile to get the device from.\n\n        device_name :\n            The name of the device to retrieve.\n\n        remote_addr :\n            An URL to a remote Server, you also have to give cert and key if\n            you provide remote_addr and its a TCP Address!\n\n            Examples:\n                https://myserver.lan:8443\n                /var/lib/mysocket.sock\n\n        cert :\n            PEM Formatted SSL Certificate.\n\n            Examples:\n                ~/.config/lxc/client.crt\n\n        key :\n            PEM Formatted SSL Key.\n\n            Examples:\n                ~/.config/lxc/client.key\n\n        verify_cert : True\n            Wherever to verify the cert, this is by default True\n            but in the most cases you want to set it off as LXD\n            normaly uses self-signed certificates.\n\n        CLI Example:\n\n        .. code-block:: bash\n\n            $ salt '*' lxd.profile_device_get default eth0", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_numeric_feature_names(example):\n  \"\"\"\n  \"\"\"\n  numeric_features = ('float_list', 'int64_list')\n  features = get_example_features(example)\n  return sorted([\n      feature_name for feature_name in features\n      if features[feature_name].WhichOneof('kind') in numeric_features\n  ])", "output": "Returns a list of feature names for float and int64 type features.\n\n  Args:\n    example: An example.\n\n  Returns:\n    A list of strings of the names of numeric features.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def delete(self):\n        \"\"\"\n        \"\"\"\n        client = self._instance._client\n        client.instance_admin_client.delete_cluster(self.name)", "output": "Delete this cluster.\n\n        For example:\n\n        .. literalinclude:: snippets.py\n            :start-after: [START bigtable_delete_cluster]\n            :end-before: [END bigtable_delete_cluster]\n\n        Marks a cluster and all of its tables for permanent deletion in 7 days.\n\n        Immediately upon completion of the request:\n\n        * Billing will cease for all of the cluster's reserved resources.\n        * The cluster's ``delete_time`` field will be set 7 days in the future.\n\n        Soon afterward:\n\n        * All tables within the cluster will become unavailable.\n\n        At the cluster's ``delete_time``:\n\n        * The cluster and **all of its tables** will immediately and\n          irrevocably disappear from the API, and their data will be\n          permanently deleted.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_batch_begin(self, train, **kwargs):\n        \"\"\n        if not self.learn.gan_trainer.gen_mode and train: self.learn.opt.lr *= self.mult_lr", "output": "Multiply the current lr if necessary.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def undeploy(self, no_confirm=False, remove_logs=False):\n        \"\"\"\n        \n        \"\"\"\n\n        if not no_confirm: # pragma: no cover\n            confirm = input(\"Are you sure you want to undeploy? [y/n] \")\n            if confirm != 'y':\n                return\n\n        if self.use_alb:\n            self.zappa.undeploy_lambda_alb(self.lambda_name)\n\n        if self.use_apigateway:\n            if remove_logs:\n                self.zappa.remove_api_gateway_logs(self.lambda_name)\n\n            domain_name = self.stage_config.get('domain', None)\n            base_path = self.stage_config.get('base_path', None)\n\n            # Only remove the api key when not specified\n            if self.api_key_required and self.api_key is None:\n                api_id = self.zappa.get_api_id(self.lambda_name)\n                self.zappa.remove_api_key(api_id, self.api_stage)\n\n            gateway_id = self.zappa.undeploy_api_gateway(\n                self.lambda_name,\n                domain_name=domain_name,\n                base_path=base_path\n            )\n\n        self.unschedule()  # removes event triggers, including warm up event.\n\n        self.zappa.delete_lambda_function(self.lambda_name)\n        if remove_logs:\n            self.zappa.remove_lambda_function_logs(self.lambda_name)\n\n        click.echo(click.style(\"Done\", fg=\"green\", bold=True) + \"!\")", "output": "Tear down an existing deployment.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def train_eval_and_decode(self):\n    \"\"\"\"\"\"\n    eval_steps = self._hparams.eval_freq_in_steps\n    packed_dataset = \"_packed\" in self._hparams.problem.name\n    mlperf_log.transformer_print(key=mlperf_log.TRAIN_LOOP)\n    for i in range(0, self._train_spec.max_steps, eval_steps):\n      mlperf_log.transformer_print(\n          key=mlperf_log.TRAIN_EPOCH, value=i // eval_steps)\n      if packed_dataset and i > 0:\n        problem = registry.problem(self._hparams.problem.name + \"_packed\")\n        p_hparams = problem.get_hparams(self._hparams)\n        self._hparams.problem = problem\n        self._hparams.problem_hparams = p_hparams\n      self._estimator.train(\n          self._train_spec.input_fn,\n          steps=eval_steps,\n          hooks=self._train_spec.hooks)\n      self._set_eval_dir_name(\"eval\")\n      self._estimator.evaluate(\n          self._eval_spec.input_fn,\n          steps=self._eval_spec.steps,\n          hooks=self._eval_spec.hooks,\n          name=\"eval\")\n      if packed_dataset:\n        problem = registry.problem(\n            self._hparams.problem.name.replace(\"_packed\", \"\"))\n        p_hparams = problem.get_hparams(self._hparams)\n        self._hparams.problem = problem\n        self._hparams.problem_hparams = p_hparams\n      mlperf_log.transformer_print(key=mlperf_log.EVAL_START)\n      if self._hparams.mlperf_mode:\n        self._decode_hparams.mlperf_decode_step = i + eval_steps\n      self.decode(dataset_split=tf.estimator.ModeKeys.EVAL)\n      d_hparams = self._decode_hparams\n      if self._hparams.mlperf_mode and d_hparams.mlperf_success:\n        mlperf_log.transformer_print(\n            key=mlperf_log.RUN_STOP, value={\"success\": \"true\"})\n        break\n\n    d_hparams = self._decode_hparams\n    if self._hparams.mlperf_mode and not d_hparams.mlperf_success:\n      mlperf_log.transformer_print(\n          key=mlperf_log.RUN_STOP, value={\"success\": \"false\"})", "output": "Does eval and decode after training every eval_freq_in_steps.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def envs():\n    '''\n    \n    '''\n    saltenvs = []\n    for container in __opts__.get('azurefs', []):\n        saltenvs.append(container.get('saltenv', 'base'))\n    # Remove duplicates\n    return list(set(saltenvs))", "output": "Each container configuration can have an environment setting, or defaults\n    to base", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def orc(self, path):\n        \"\"\"\n        \"\"\"\n        if isinstance(path, basestring):\n            path = [path]\n        return self._df(self._jreader.orc(_to_seq(self._spark._sc, path)))", "output": "Loads ORC files, returning the result as a :class:`DataFrame`.\n\n        >>> df = spark.read.orc('python/test_support/sql/orc_partitioned')\n        >>> df.dtypes\n        [('a', 'bigint'), ('b', 'int'), ('c', 'int')]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _player_step_tuple(self, envs_step_tuples):\n    \"\"\"\"\"\"\n    ob, reward, done, info = envs_step_tuples[\"env\"]\n    ob = self._augment_observation(ob, reward, self.cumulative_reward)\n    return ob, reward, done, info", "output": "Augment observation, return usual step tuple.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _escalation_rules_to_string(escalation_rules):\n    ''\n    result = ''\n    for rule in escalation_rules:\n        result += 'escalation_delay_in_minutes: {0} '.format(rule['escalation_delay_in_minutes'])\n        for target in rule['targets']:\n            result += '{0}:{1} '.format(target['type'], target['id'])\n    return result", "output": "convert escalation_rules dict to a string for comparison", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _set_properties(self, response):\n        \"\"\"\n        \"\"\"\n        self._properties.clear()\n        self._properties.update(response)", "output": "Helper for :meth:`reload`.\n\n        :type response: dict\n        :param response: resource mapping from server", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def winrm_cmd(session, command, flags, **kwargs):\n    '''\n    \n    '''\n    log.debug('Executing WinRM command: %s %s', command, flags)\n    # rebuild the session to ensure we haven't timed out\n    session.protocol.transport.build_session()\n    r = session.run_cmd(command, flags)\n    return r.status_code", "output": "Wrapper for commands to be run against Windows boxes using WinRM.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_locations(self, provider=None):\n        '''\n        \n        '''\n        mapper = salt.cloud.Map(self._opts_defaults())\n        return salt.utils.data.simple_types_filter(\n            mapper.location_list(provider)\n        )", "output": "List all available locations in configured cloud systems", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _to_dict(self):\n        \"\"\"\n        \"\"\"\n        if self.all_:\n            return {\"all\": True}\n\n        return {\n            \"keys\": self.keys,\n            \"ranges\": [keyrange._to_dict() for keyrange in self.ranges],\n        }", "output": "Return keyset's state as a dict.\n\n        The result can be used to serialize the instance and reconstitute\n        it later using :meth:`_from_dict`.\n\n        :rtype: dict\n        :returns: state of this instance.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def keypair_add(name, pubfile=None, pubkey=None, profile=None, **kwargs):\n    '''\n    \n    '''\n    conn = _auth(profile, **kwargs)\n    return conn.keypair_add(\n        name,\n        pubfile,\n        pubkey\n    )", "output": "Add a keypair to nova (nova keypair-add)\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt '*' nova.keypair_add mykey pubfile='/home/myuser/.ssh/id_rsa.pub'\n        salt '*' nova.keypair_add mykey pubkey='ssh-rsa <key> myuser@mybox'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_list(self, name: str) -> List[str]:\n        \"\"\"\"\"\"\n        norm_name = _normalized_headers[name]\n        return self._as_list.get(norm_name, [])", "output": "Returns all values for the given header as a list.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def host_update(hostid, **kwargs):\n    '''\n    \n    '''\n    conn_args = _login(**kwargs)\n    ret = {}\n    try:\n        if conn_args:\n            method = 'host.update'\n            params = {\"hostid\": hostid}\n            params = _params_extend(params, _ignore_name=True, **kwargs)\n            ret = _query(method, params, conn_args['url'], conn_args['auth'])\n            return ret['result']['hostids']\n        else:\n            raise KeyError\n    except KeyError:\n        return ret", "output": ".. versionadded:: 2016.3.0\n\n    Update existing hosts\n\n    .. note::\n        This function accepts all standard host and host.update properties:\n        keyword argument names differ depending on your zabbix version, see the\n        documentation for `host objects`_ and the documentation for `updating\n        hosts`_.\n\n        .. _`host objects`: https://www.zabbix.com/documentation/2.4/manual/api/reference/host/object#host\n        .. _`updating hosts`: https://www.zabbix.com/documentation/2.4/manual/api/reference/host/update\n\n    :param hostid: ID of the host to update\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n    :param visible_name: string with visible name of the host, use\n        'visible_name' instead of 'name' parameter to not mess with value\n        supplied from Salt sls file.\n\n    :return: ID of the updated host.\n\n    CLI Example:\n    .. code-block:: bash\n\n        salt '*' zabbix.host_update 10084 name='Zabbix server2'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def handle_market_open(self, session_label, data_portal):\n        \"\"\"\n        \"\"\"\n        ledger = self._ledger\n        ledger.start_of_session(session_label)\n\n        adjustment_reader = data_portal.adjustment_reader\n        if adjustment_reader is not None:\n            # this is None when running with a dataframe source\n            ledger.process_dividends(\n                session_label,\n                self._asset_finder,\n                adjustment_reader,\n            )\n\n        self._current_session = session_label\n\n        cal = self._trading_calendar\n        self._market_open, self._market_close = self._execution_open_and_close(\n            cal,\n            session_label,\n        )\n\n        self.start_of_session(ledger, session_label, data_portal)", "output": "Handles the start of each session.\n\n        Parameters\n        ----------\n        session_label : Timestamp\n            The label of the session that is about to begin.\n        data_portal : DataPortal\n            The current data portal.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _reader(self, name, stream, outbuf):\n        \"\"\"\n        \n        \"\"\"\n        while True:\n            s = stream.readline()\n            if not s:\n                break\n            s = s.decode('utf-8').rstrip()\n            outbuf.append(s)\n            logger.debug('%s: %s' % (name, s))\n        stream.close()", "output": "Thread runner for reading lines of from a subprocess into a buffer.\n\n        :param name: The logical name of the stream (used for logging only).\n        :param stream: The stream to read from. This will typically a pipe\n                       connected to the output stream of a subprocess.\n        :param outbuf: The list to append the read lines to.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def aligned_umap(activations, umap_options={}, normalize=True, verbose=False):\n    \"\"\"\"\"\"\n\n    umap_defaults = dict(\n        n_components=2, n_neighbors=50, min_dist=0.05, verbose=verbose, metric=\"cosine\"\n    )\n    umap_defaults.update(umap_options)\n\n    # if passed a list of activations, we combine them and later split the layouts\n    if type(activations) is list or type(activations) is tuple:\n        num_activation_groups = len(activations)\n        combined_activations = np.concatenate(activations)\n    else:\n        num_activation_groups = 1\n        combined_activations = activations\n    try:\n        layout = UMAP(**umap_defaults).fit_transform(combined_activations)\n    except (RecursionError, SystemError) as exception:\n        log.error(\"UMAP failed to fit these activations. We're not yet sure why this sometimes occurs.\")\n        raise ValueError(\"UMAP failed to fit activations: %s\", exception)\n\n    if normalize:\n        layout = normalize_layout(layout)\n\n    if num_activation_groups > 1:\n        layouts = np.split(layout, num_activation_groups, axis=0)\n        return layouts\n    else:\n        return layout", "output": "`activations` can be a list of ndarrays. In that case a list of layouts is returned.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _sparse_series_to_coo(ss, row_levels=(0, ), column_levels=(1, ),\n                          sort_labels=False):\n    \"\"\"\n    \n    \"\"\"\n\n    import scipy.sparse\n\n    if ss.index.nlevels < 2:\n        raise ValueError('to_coo requires MultiIndex with nlevels > 2')\n    if not ss.index.is_unique:\n        raise ValueError('Duplicate index entries are not allowed in to_coo '\n                         'transformation.')\n\n    # to keep things simple, only rely on integer indexing (not labels)\n    row_levels = [ss.index._get_level_number(x) for x in row_levels]\n    column_levels = [ss.index._get_level_number(x) for x in column_levels]\n\n    v, i, j, rows, columns = _to_ijv(ss, row_levels=row_levels,\n                                     column_levels=column_levels,\n                                     sort_labels=sort_labels)\n    sparse_matrix = scipy.sparse.coo_matrix(\n        (v, (i, j)), shape=(len(rows), len(columns)))\n    return sparse_matrix, rows, columns", "output": "Convert a SparseSeries to a scipy.sparse.coo_matrix using index\n    levels row_levels, column_levels as the row and column\n    labels respectively. Returns the sparse_matrix, row and column labels.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def resume(profile_process='worker'):\n    \"\"\"\n    \n    \"\"\"\n    profile_process2int = {'worker': 0, 'server': 1}\n    check_call(_LIB.MXProcessProfilePause(int(0),\n                                          profile_process2int[profile_process],\n                                          profiler_kvstore_handle))", "output": "Resume paused profiling.\n\n    Parameters\n    ----------\n    profile_process : string\n        whether to profile kvstore `server` or `worker`.\n        server can only be profiled when kvstore is of type dist.\n        if this is not passed, defaults to `worker`", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def trading_pnl(self):\n        \"\"\"\n        \n        \"\"\"\n        last_price = self._data_proxy.get_last_price(self._order_book_id)\n        return self._contract_multiplier * (self._trade_quantity * last_price - self._trade_cost)", "output": "[float] \u4ea4\u6613\u76c8\u4e8f\uff0c\u7b56\u7565\u5728\u5f53\u524d\u4ea4\u6613\u65e5\u4ea7\u751f\u7684\u76c8\u4e8f\u4e2d\u6765\u6e90\u4e8e\u5f53\u65e5\u6210\u4ea4\u7684\u90e8\u5206", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_argument(self, dest, nargs=1, obj=None):\n        \"\"\"\n        \"\"\"\n        if obj is None:\n            obj = dest\n        self._args.append(Argument(dest=dest, nargs=nargs, obj=obj))", "output": "Adds a positional argument named `dest` to the parser.\n\n        The `obj` can be used to identify the option in the order list\n        that is returned from the parser.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def map_column(self, value):\n        \"\"\"\n        \n        \"\"\"\n        if value in self.null_values:\n            return r'\\\\N'\n        else:\n            return default_escape(six.text_type(value))", "output": "Applied to each column of every row returned by `rows`.\n\n        Default behaviour is to escape special characters and identify any self.null_values.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def edit(self, *, reason=None, **options):\n        \"\"\"\n        \"\"\"\n\n        try:\n            position = options.pop('position')\n        except KeyError:\n            pass\n        else:\n            await self._move(position, reason=reason)\n            self.position = position\n\n        if options:\n            data = await self._state.http.edit_channel(self.id, reason=reason, **options)\n            self._update(self.guild, data)", "output": "|coro|\n\n        Edits the channel.\n\n        You must have the :attr:`~Permissions.manage_channels` permission to\n        use this.\n\n        Parameters\n        ----------\n        name: :class:`str`\n            The new category's name.\n        position: :class:`int`\n            The new category's position.\n        nsfw: :class:`bool`\n            To mark the category as NSFW or not.\n        reason: Optional[:class:`str`]\n            The reason for editing this category. Shows up on the audit log.\n\n        Raises\n        ------\n        InvalidArgument\n            If position is less than 0 or greater than the number of categories.\n        Forbidden\n            You do not have permissions to edit the category.\n        HTTPException\n            Editing the category failed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sink(self, name, filter_=None, destination=None):\n        \"\"\"\n        \"\"\"\n        return Sink(name, filter_, destination, client=self)", "output": "Creates a sink bound to the current client.\n\n        :type name: str\n        :param name: the name of the sink to be constructed.\n\n        :type filter_: str\n        :param filter_: (optional) the advanced logs filter expression\n                        defining the entries exported by the sink.  If not\n                        passed, the instance should already exist, to be\n                        refreshed via :meth:`Sink.reload`.\n\n        :type destination: str\n        :param destination: destination URI for the entries exported by\n                            the sink.  If not passed, the instance should\n                            already exist, to be refreshed via\n                            :meth:`Sink.reload`.\n\n        :rtype: :class:`google.cloud.logging.sink.Sink`\n        :returns: Sink created with the current client.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_positional_embedding(x, max_length, name=None, positions=None):\n  \"\"\"\n  \"\"\"\n  with tf.name_scope(\"add_positional_embedding\"):\n    _, length, depth = common_layers.shape_list(x)\n    var = tf.cast(tf.get_variable(name, [max_length, depth]), x.dtype)\n    if positions is None:\n      pad_length = tf.maximum(0, length - max_length)\n      sliced = tf.cond(\n          tf.less(length, max_length),\n          lambda: tf.slice(var, [0, 0], [length, -1]),\n          lambda: tf.pad(var, [[0, pad_length], [0, 0]]))\n      return x + tf.expand_dims(sliced, 0)\n    else:\n      return x + tf.gather(var, tf.to_int32(positions))", "output": "Adds positional embedding.\n\n  Args:\n    x: Tensor with shape [batch, length, depth].\n    max_length: int representing static maximum size of any dimension.\n    name: str representing name of the embedding tf.Variable.\n    positions: Tensor with shape [batch, length].\n\n  Returns:\n    Tensor of same shape as x.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def evaluate_regressor(model, data, target=\"target\", verbose=False):\n    \"\"\"\n    \n    \"\"\"\n    model = _get_model(model)\n\n    if verbose:\n        print(\"\")\n        print(\"Other Framework\\t\\tPredicted\\t\\tDelta\")\n\n    max_error = 0\n    error_squared = 0\n\n    for index,row in data.iterrows():\n        predicted = model.predict(dict(row))[_to_unicode(target)]\n        other_framework = row[\"prediction\"]\n        delta = predicted - other_framework\n\n        if verbose:\n            print(\"%s\\t\\t\\t\\t%s\\t\\t\\t%0.4f\" % (other_framework, predicted, delta))\n\n        max_error = max(abs(delta), max_error)\n        error_squared = error_squared + (delta * delta)\n\n    ret = {\n        \"samples\": len(data),\n        \"rmse\": _math.sqrt(error_squared / len(data)),\n        \"max_error\": max_error\n    }\n\n    if verbose:\n        print(\"results: %s\" % ret)\n    return ret", "output": "Evaluate a CoreML regression model and compare against predictions\n    from the original framework (for testing correctness of conversion)\n\n    Parameters\n    ----------\n    filename: [str | MLModel]\n        File path from which to load the MLModel from (OR) a loaded version of\n        MLModel.\n\n    data: [str | Dataframe]\n        Test data on which to evaluate the models (dataframe,\n        or path to a .csv file).\n\n    target: str\n       Name of the column in the dataframe that must be interpreted\n       as the target column.\n\n    verbose: bool\n       Set to true for a more verbose output.\n\n    See Also\n    --------\n    evaluate_classifier\n\n    Examples\n    --------\n    .. sourcecode:: python\n\n        >>> metrics = coremltools.utils.evaluate_regressor(spec, 'data_and_predictions.csv', 'target')\n        >>> print(metrics)\n        {\"samples\": 10, \"rmse\": 0.0, max_error: 0.0}", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_checkout_target(self):\n        '''\n        \n        '''\n        if self.role == 'git_pillar' and self.branch == '__env__':\n            try:\n                return self.all_saltenvs\n            except AttributeError:\n                # all_saltenvs not configured for this remote\n                pass\n            target = self.opts.get('pillarenv') \\\n                or self.opts.get('saltenv') \\\n                or 'base'\n            return self.base \\\n                if target == 'base' \\\n                else six.text_type(target)\n        return self.branch", "output": "Resolve dynamically-set branch", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def group_get(auth=None, **kwargs):\n    '''\n    \n    '''\n    cloud = get_operator_cloud(auth)\n    kwargs = _clean_kwargs(**kwargs)\n    return cloud.get_group(**kwargs)", "output": "Get a single group\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' keystoneng.group_get name=group1\n        salt '*' keystoneng.group_get name=group2 domain_id=b62e76fbeeff4e8fb77073f591cf211e\n        salt '*' keystoneng.group_get name=0e4febc2a5ab4f2c8f374b054162506d", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(self, remotepath, localpath, callback=None):\n        \"\"\"\n        \n        \"\"\"\n        with open(localpath, \"wb\") as fl:\n            size = self.getfo(remotepath, fl, callback)\n        s = os.stat(localpath)\n        if s.st_size != size:\n            raise IOError(\n                \"size mismatch in get!  {} != {}\".format(s.st_size, size)\n            )", "output": "Copy a remote file (``remotepath``) from the SFTP server to the local\n        host as ``localpath``.  Any exception raised by operations will be\n        passed through.  This method is primarily provided as a convenience.\n\n        :param str remotepath: the remote file to copy\n        :param str localpath: the destination path on the local host\n        :param callable callback:\n            optional callback function (form: ``func(int, int)``) that accepts\n            the bytes transferred so far and the total bytes to be transferred\n\n        .. versionadded:: 1.4\n        .. versionchanged:: 1.7.4\n            Added the ``callback`` param", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def zip_html(self):\n        \"\"\"\n        \n        \"\"\"\n        zip_fname = os.path.join(BUILD_PATH, 'html', 'pandas.zip')\n        if os.path.exists(zip_fname):\n            os.remove(zip_fname)\n        dirname = os.path.join(BUILD_PATH, 'html')\n        fnames = os.listdir(dirname)\n        os.chdir(dirname)\n        self._run_os('zip',\n                     zip_fname,\n                     '-r',\n                     '-q',\n                     *fnames)", "output": "Compress HTML documentation into a zip file.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rlmb_long_stochastic_discrete_simulation_deterministic_starts():\n  \"\"\"\"\"\"\n  hparams = rlmb_base_stochastic_discrete()\n  hparams.generative_model_params = \"next_frame_basic_stochastic_discrete_long\"\n  hparams.ppo_epochs_num = 1000\n  hparams.simulation_random_starts = False\n  return hparams", "output": "Long setting with stochastic discrete model & deterministic sim starts.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def encode_schedule(schedule):\n  \"\"\"\n  \"\"\"\n  interpolation, steps, pmfs = schedule\n  return interpolation + ' ' + ' '.join(\n      '@' + str(s) + ' ' + ' '.join(map(str, p)) for s, p in zip(steps, pmfs))", "output": "Encodes a schedule tuple into a string.\n\n  Args:\n    schedule: A tuple containing (interpolation, steps, pmfs), where\n      interpolation is a string specifying the interpolation strategy, steps\n      is an int array_like of shape [N] specifying the global steps, and pmfs is\n      an array_like of shape [N, M] where pmf[i] is the sampling distribution\n      at global step steps[i]. N is the number of schedule requirements to\n      interpolate and M is the size of the probability space.\n\n  Returns:\n    The string encoding of the schedule tuple.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def RandomNormalInitializer(stddev=1e-2):\n  \"\"\"\"\"\"\n  def init(shape, rng):\n    return (stddev * backend.random.normal(rng, shape)).astype('float32')\n  return init", "output": "An initializer function for random normal coefficients.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def has_path_sum(root, sum):\n    \"\"\"\n    \n    \"\"\"\n    if root is None:\n        return False\n    if root.left is None and root.right is None and root.val == sum:\n        return True\n    sum -= root.val\n    return has_path_sum(root.left, sum) or has_path_sum(root.right, sum)", "output": ":type root: TreeNode\n    :type sum: int\n    :rtype: bool", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def dataset_generator(filepath,\n                      dataset,\n                      chunk_size=1,\n                      start_idx=None,\n                      end_idx=None):\n  \"\"\"\"\"\"\n  encoder = dna_encoder.DNAEncoder(chunk_size=chunk_size)\n  with h5py.File(filepath, \"r\") as h5_file:\n    # Get input keys from h5_file\n    src_keys = [s % dataset for s in [\"%s_in\", \"%s_na\", \"%s_out\"]]\n    src_values = [h5_file[k] for k in src_keys]\n    inp_data, mask_data, out_data = src_values\n    assert len(set([v.len() for v in src_values])) == 1\n\n    if start_idx is None:\n      start_idx = 0\n    if end_idx is None:\n      end_idx = inp_data.len()\n\n    for i in range(start_idx, end_idx):\n      if i % 100 == 0:\n        print(\"Generating example %d for %s\" % (i, dataset))\n      inputs, mask, outputs = inp_data[i], mask_data[i], out_data[i]\n      ex_dict = to_example_dict(encoder, inputs, mask, outputs)\n      # Original data has one output for every 128 input bases. Ensure that the\n      # ratio has been maintained given the chunk size and removing EOS.\n      assert (len(ex_dict[\"inputs\"]) - 1) == ((\n          128 // chunk_size) * ex_dict[\"targets_shape\"][0])\n      yield ex_dict", "output": "Generate example dicts.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _add_series_or_dataframe_operations(cls):\n        \"\"\"\n        \n        \"\"\"\n\n        from pandas.core import window as rwindow\n\n        @Appender(rwindow.rolling.__doc__)\n        def rolling(self, window, min_periods=None, center=False,\n                    win_type=None, on=None, axis=0, closed=None):\n            axis = self._get_axis_number(axis)\n            return rwindow.rolling(self, window=window,\n                                   min_periods=min_periods,\n                                   center=center, win_type=win_type,\n                                   on=on, axis=axis, closed=closed)\n\n        cls.rolling = rolling\n\n        @Appender(rwindow.expanding.__doc__)\n        def expanding(self, min_periods=1, center=False, axis=0):\n            axis = self._get_axis_number(axis)\n            return rwindow.expanding(self, min_periods=min_periods,\n                                     center=center, axis=axis)\n\n        cls.expanding = expanding\n\n        @Appender(rwindow.ewm.__doc__)\n        def ewm(self, com=None, span=None, halflife=None, alpha=None,\n                min_periods=0, adjust=True, ignore_na=False,\n                axis=0):\n            axis = self._get_axis_number(axis)\n            return rwindow.ewm(self, com=com, span=span, halflife=halflife,\n                               alpha=alpha, min_periods=min_periods,\n                               adjust=adjust, ignore_na=ignore_na, axis=axis)\n\n        cls.ewm = ewm", "output": "Add the series or dataframe only operations to the cls; evaluate\n        the doc strings again.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read_simple_binding(jboss_config, binding_name, profile=None):\n    '''\n    \n       '''\n    log.debug(\"======================== MODULE FUNCTION: jboss7.read_simple_binding, %s\", binding_name)\n    return __read_simple_binding(jboss_config, binding_name, profile=profile)", "output": "Read jndi binding in the running jboss instance\n\n    jboss_config\n        Configuration dictionary with properties specified above.\n    binding_name\n        Binding name to be created\n    profile\n        The profile name (JBoss domain mode only)\n\n    CLI Example:\n\n        .. code-block:: bash\n\n        salt '*' jboss7.read_simple_binding '{\"cli_path\": \"integration.modules.sysmod.SysModuleTest.test_valid_docs\", \"controller\": \"10.11.12.13:9999\", \"cli_user\": \"jbossadm\", \"cli_password\": \"jbossadm\"}' my_binding_name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_floating(self):\n        \"\"\"\"\"\"\n        return (\n            self.is_numpy_compatible and np.issubdtype(self.as_numpy_dtype, np.floating)\n        ) or self.base_dtype == bfloat16", "output": "Returns whether this is a (non-quantized, real) floating point type.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lookup_default(self, name):\n        \"\"\"\n        \"\"\"\n        if self.default_map is not None:\n            rv = self.default_map.get(name)\n            if callable(rv):\n                rv = rv()\n            return rv", "output": "Looks up the default for a parameter name.  This by default\n        looks into the :attr:`default_map` if available.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert_to_ascii(statement):\n    \"\"\"\n    \n    \"\"\"\n    import unicodedata\n\n    text = unicodedata.normalize('NFKD', statement.text)\n    text = text.encode('ascii', 'ignore').decode('utf-8')\n\n    statement.text = str(text)\n    return statement", "output": "Converts unicode characters to ASCII character equivalents.\n    For example: \"p\u00e5 f\u00e9d\u00e9ral\" becomes \"pa federal\".", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def super(self):\n        \"\"\"\"\"\"\n        if self._depth + 1 >= len(self._stack):\n            return self._context.environment. \\\n                undefined('there is no parent block called %r.' %\n                          self.name, name='super')\n        return BlockReference(self.name, self._context, self._stack,\n                              self._depth + 1)", "output": "Super the block.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _size_fmt(num):\n    '''\n    \n    '''\n    try:\n        num = int(num)\n        if num < 1024:\n            return '{0} bytes'.format(num)\n        num /= 1024.0\n        for unit in ('KiB', 'MiB', 'GiB', 'TiB', 'PiB'):\n            if num < 1024.0:\n                return '{0:3.1f} {1}'.format(num, unit)\n            num /= 1024.0\n    except Exception:\n        log.error('Unable to format file size for \\'%s\\'', num)\n        return 'unknown'", "output": "Format bytes as human-readable file sizes", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def clear_job_cache(hours=24):\n    '''\n    \n    '''\n    threshold = time.time() - hours * 60 * 60\n    for root, dirs, files in salt.utils.files.safe_walk(os.path.join(__opts__['cachedir'], 'minion_jobs'),\n                                                  followlinks=False):\n        for name in dirs:\n            try:\n                directory = os.path.join(root, name)\n                mtime = os.path.getmtime(directory)\n                if mtime < threshold:\n                    shutil.rmtree(directory)\n            except OSError as exc:\n                log.error('Attempt to clear cache with saltutil.clear_job_cache FAILED with: %s', exc)\n                return False\n    return True", "output": "Forcibly removes job cache folders and files on a minion.\n\n    .. versionadded:: 2018.3.0\n\n    WARNING: The safest way to clear a minion cache is by first stopping\n    the minion and then deleting the cache files before restarting it.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' saltutil.clear_job_cache hours=12", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def can_user_run(self, user, command, groups):\n        '''\n        \n\n        '''\n        log.info('%s wants to run %s with groups %s', user, command, groups)\n        for key, val in groups.items():\n            if user not in val['users']:\n                if '*' not in val['users']:\n                    continue  # this doesn't grant permissions, pass\n            if (command not in val['commands']) and (command not in val.get('aliases', {}).keys()):\n                if '*' not in val['commands']:\n                    continue  # again, pass\n            log.info('Slack user %s permitted to run %s', user, command)\n            return (key, val,)  # matched this group, return the group\n        log.info('Slack user %s denied trying to run %s', user, command)\n        return ()", "output": "Break out the permissions into the following:\n\n        Check whether a user is in any group, including whether a group has the '*' membership\n\n        :type user: str\n        :param user: The username being checked against\n\n        :type command: str\n        :param command: The command that is being invoked (e.g. test.ping)\n\n        :type groups: dict\n        :param groups: the dictionary with groups permissions structure.\n\n        :rtype: tuple\n        :returns: On a successful permitting match, returns 2-element tuple that contains\n            the name of the group that successfully matched, and a dictionary containing\n            the configuration of the group so it can be referenced.\n\n            On failure it returns an empty tuple", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_range_vector(size: int, device: int) -> torch.Tensor:\n    \"\"\"\n    \n    \"\"\"\n    if device > -1:\n        return torch.cuda.LongTensor(size, device=device).fill_(1).cumsum(0) - 1\n    else:\n        return torch.arange(0, size, dtype=torch.long)", "output": "Returns a range vector with the desired size, starting at 0. The CUDA implementation\n    is meant to avoid copy data from CPU to GPU.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list_mirrors(config_path=_DEFAULT_CONFIG_PATH):\n    '''\n    \n    '''\n    _validate_config(config_path)\n\n    cmd = ['mirror', 'list', '-config={}'.format(config_path), '-raw=true']\n\n    cmd_ret = _cmd_run(cmd)\n    ret = [line.strip() for line in cmd_ret.splitlines()]\n\n    log.debug('Found mirrors: %s', len(ret))\n    return ret", "output": "Get a list of all the mirrored remote repositories.\n\n    :param str config_path: The path to the configuration file for the aptly instance.\n\n    :return: A list of the mirror names.\n    :rtype: list\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' aptly.list_mirrors", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def infer(self, setup: QuaRelType, answer_0: QuaRelType, answer_1: QuaRelType) -> int:\n        \"\"\"\n        \n        \"\"\"\n        if self._check_quarels_compatible(setup, answer_0):\n            if self._check_quarels_compatible(setup, answer_1):\n                # Found two answers\n                return -2\n            else:\n                return 0\n        elif self._check_quarels_compatible(setup, answer_1):\n            return 1\n        else:\n            return -1", "output": "Take the question and check if it is compatible with either of the answer choices.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def decompress_decoder_1d(x, hparams, name=None):\n  \"\"\"\n  \"\"\"\n  x = tf.expand_dims(x, axis=2)\n  output = decompress_decoder(x, hparams,\n                              strides=(2, 1),\n                              kernel=(hparams.kernel_size, 1),\n                              name=name)\n  return tf.squeeze(output, axis=2)", "output": "Decoder that decompresses 1-D inputs by 2**num_compress_steps.\n\n  Args:\n    x: Tensor of shape [batch, compress_length, channels].\n    hparams: HParams.\n    name: string, variable scope.\n\n  Returns:\n    Tensor of shape [batch, length, hparams.hidden_size].", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def prepare_request(self, request):\n        \"\"\"\n        \"\"\"\n        cookies = request.cookies or {}\n\n        # Bootstrap CookieJar.\n        if not isinstance(cookies, cookielib.CookieJar):\n            cookies = cookiejar_from_dict(cookies)\n\n        # Merge with session cookies\n        merged_cookies = merge_cookies(\n            merge_cookies(RequestsCookieJar(), self.cookies), cookies)\n\n        # Set environment's basic authentication if not explicitly set.\n        auth = request.auth\n        if self.trust_env and not auth and not self.auth:\n            auth = get_netrc_auth(request.url)\n\n        p = PreparedRequest()\n        p.prepare(\n            method=request.method.upper(),\n            url=request.url,\n            files=request.files,\n            data=request.data,\n            json=request.json,\n            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),\n            params=merge_setting(request.params, self.params),\n            auth=merge_setting(auth, self.auth),\n            cookies=merged_cookies,\n            hooks=merge_hooks(request.hooks, self.hooks),\n        )\n        return p", "output": "Constructs a :class:`PreparedRequest <PreparedRequest>` for\n        transmission and returns it. The :class:`PreparedRequest` has settings\n        merged from the :class:`Request <Request>` instance and those of the\n        :class:`Session`.\n\n        :param request: :class:`Request` instance to prepare with this\n            session's settings.\n        :rtype: requests.PreparedRequest", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_weight(name, backend, socket=DEFAULT_SOCKET_URL):\n    '''\n    \n    '''\n    ha_conn = _get_conn(socket)\n    ha_cmd = haproxy.cmds.getWeight(server=name, backend=backend)\n    return ha_conn.sendCmd(ha_cmd)", "output": "Get server weight\n\n    name\n        Server name\n\n    backend\n        haproxy backend\n\n    socket\n        haproxy stats socket, default ``/var/run/haproxy.sock``\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' haproxy.get_weight web1.example.com www", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_network_settings():\n    '''\n    \n    '''\n    if __grains__['lsb_distrib_id'] == 'nilrt':\n        raise salt.exceptions.CommandExecutionError('Not supported in this version.')\n    settings = []\n    networking = 'no' if _get_state() == 'offline' else 'yes'\n    settings.append('networking={0}'.format(networking))\n    hostname = __salt__['network.get_hostname']\n    settings.append('hostname={0}'.format(hostname))\n    return settings", "output": "Return the contents of the global network script.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' ip.get_network_settings", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _passwd_opts(self):\n        '''\n        \n        '''\n        # TODO ControlMaster does not work without ControlPath\n        # user could take advantage of it if they set ControlPath in their\n        # ssh config.  Also, ControlPersist not widely available.\n        options = ['ControlMaster=auto',\n                   'StrictHostKeyChecking=no',\n                   ]\n        if self.opts['_ssh_version'] > (4, 9):\n            options.append('GSSAPIAuthentication=no')\n        options.append('ConnectTimeout={0}'.format(self.timeout))\n        if self.opts.get('ignore_host_keys'):\n            options.append('StrictHostKeyChecking=no')\n        if self.opts.get('no_host_keys'):\n            options.extend(['StrictHostKeyChecking=no',\n                            'UserKnownHostsFile=/dev/null'])\n\n        if self.passwd:\n            options.extend(['PasswordAuthentication=yes',\n                            'PubkeyAuthentication=yes'])\n        else:\n            options.extend(['PasswordAuthentication=no',\n                            'PubkeyAuthentication=yes',\n                            'KbdInteractiveAuthentication=no',\n                            'ChallengeResponseAuthentication=no',\n                            'BatchMode=yes'])\n        if self.port:\n            options.append('Port={0}'.format(self.port))\n        if self.user:\n            options.append('User={0}'.format(self.user))\n        if self.identities_only:\n            options.append('IdentitiesOnly=yes')\n\n        ret = []\n        for option in options:\n            ret.append('-o {0} '.format(option))\n        return ''.join(ret)", "output": "Return options to pass to ssh", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def render_as_text(self, limit=None):\n        \"\"\"\"\"\"\n        lines = traceback.format_exception(self.exc_type, self.exc_value,\n                                           self.frames[0], limit=limit)\n        return ''.join(lines).rstrip()", "output": "Return a string with the traceback.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_backward_begin(self, smooth_loss:Tensor, **kwargs:Any)->None:\n        \"\"\n        self.losses.append(smooth_loss)\n        if self.pbar is not None and hasattr(self.pbar,'child'):\n            self.pbar.child.comment = f'{smooth_loss:.4f}'", "output": "Record the loss before any other callback has a chance to modify it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def run(self):\n        \"\"\"\n        \"\"\"\n        _logger.info('Start dispatcher')\n        if dispatcher_env_vars.NNI_MODE == 'resume':\n            self.load_checkpoint()\n\n        while True:\n            command, data = receive()\n            if data:\n                data = json_tricks.loads(data)\n\n            if command is None or command is CommandType.Terminate:\n                break\n            if multi_thread_enabled():\n                result = self.pool.map_async(self.process_command_thread, [(command, data)])\n                self.thread_results.append(result)\n                if any([thread_result.ready() and not thread_result.successful() for thread_result in self.thread_results]):\n                    _logger.debug('Caught thread exception')\n                    break\n            else:\n                self.enqueue_command(command, data)\n                if self.worker_exceptions:\n                    break\n\n        _logger.info('Dispatcher exiting...')\n        self.stopping = True\n        if multi_thread_enabled():\n            self.pool.close()\n            self.pool.join()\n        else:\n            self.default_worker.join()\n            self.assessor_worker.join()\n\n        _logger.info('Terminated by NNI manager')", "output": "Run the tuner.\n        This function will never return unless raise.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def multinomial_sample(x, vocab_size=None, sampling_method=\"random\",\n                       temperature=1.0):\n  \"\"\"\n  \"\"\"\n  vocab_size = vocab_size or common_layers.shape_list(x)[-1]\n  if sampling_method == \"random\" and temperature > 0.0:\n    samples = tf.multinomial(tf.reshape(x, [-1, vocab_size]) / temperature, 1)\n  else:\n    samples = tf.argmax(x, axis=-1)\n  reshaped_samples = tf.reshape(samples, common_layers.shape_list(x)[:-1])\n  return reshaped_samples", "output": "Multinomial sampling from a n-dimensional tensor.\n\n  Args:\n    x: Tensor of shape [..., vocab_size]. Parameterizes logits of multinomial.\n    vocab_size: Number of classes in multinomial distribution.\n    sampling_method: String, \"random\" or otherwise deterministic.\n    temperature: Positive float.\n\n  Returns:\n    Tensor of shape [...].", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_cached_response(self, request, response):\n        \"\"\"\n        \"\"\"\n        cache_url = self.cache_url(request.url)\n\n        cached_response = self.serializer.loads(request, self.cache.get(cache_url))\n\n        if not cached_response:\n            # we didn't have a cached response\n            return response\n\n        # Lets update our headers with the headers from the new request:\n        # http://tools.ietf.org/html/draft-ietf-httpbis-p4-conditional-26#section-4.1\n        #\n        # The server isn't supposed to send headers that would make\n        # the cached body invalid. But... just in case, we'll be sure\n        # to strip out ones we know that might be problmatic due to\n        # typical assumptions.\n        excluded_headers = [\"content-length\"]\n\n        cached_response.headers.update(\n            dict(\n                (k, v)\n                for k, v in response.headers.items()\n                if k.lower() not in excluded_headers\n            )\n        )\n\n        # we want a 200 b/c we have content via the cache\n        cached_response.status = 200\n\n        # update our cache\n        self.cache.set(cache_url, self.serializer.dumps(request, cached_response))\n\n        return cached_response", "output": "On a 304 we will get a new set of headers that we want to\n        update our cached value with, assuming we have one.\n\n        This should only ever be called when we've sent an ETag and\n        gotten a 304 as the response.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def main(argv=None):\n  \"\"\"\n  \n  \"\"\"\n  try:\n    _name_of_script, filepath = argv\n  except ValueError:\n    raise ValueError(argv)\n  print_accuracies(filepath=filepath, test_start=FLAGS.test_start,\n                   test_end=FLAGS.test_end, which_set=FLAGS.which_set,\n                   nb_iter=FLAGS.nb_iter, base_eps_iter=FLAGS.base_eps_iter,\n                   batch_size=FLAGS.batch_size)", "output": "Print accuracies", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def crossproduct(d):\n    \"\"\"\n    \n    \"\"\"\n\n    from .. import SArray\n    d = [list(zip(list(d.keys()), x)) for x in _itertools.product(*list(d.values()))]\n    sa = [{k:v for (k,v) in x} for x in d]\n    return SArray(sa).unpack(column_name_prefix='')", "output": "Create an SFrame containing the crossproduct of all provided options.\n\n    Parameters\n    ----------\n    d : dict\n        Each key is the name of an option, and each value is a list\n        of the possible values for that option.\n\n    Returns\n    -------\n    out : SFrame\n        There will be a column for each key in the provided dictionary,\n        and a row for each unique combination of all values.\n\n    Example\n    -------\n    settings = {'argument_1':[0, 1],\n                'argument_2':['a', 'b', 'c']}\n    print crossproduct(settings)\n    +------------+------------+\n    | argument_2 | argument_1 |\n    +------------+------------+\n    |     a      |     0      |\n    |     a      |     1      |\n    |     b      |     0      |\n    |     b      |     1      |\n    |     c      |     0      |\n    |     c      |     1      |\n    +------------+------------+\n    [6 rows x 2 columns]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def write_info_file(tensorboard_info):\n  \"\"\"\n  \"\"\"\n  payload = \"%s\\n\" % _info_to_string(tensorboard_info)\n  with open(_get_info_file_path(), \"w\") as outfile:\n    outfile.write(payload)", "output": "Write TensorBoardInfo to the current process's info file.\n\n  This should be called by `main` once the server is ready. When the\n  server shuts down, `remove_info_file` should be called.\n\n  Args:\n    tensorboard_info: A valid `TensorBoardInfo` object.\n\n  Raises:\n    ValueError: If any field on `info` is not of the correct type.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def read(self):\n        \"\"\"\n        \n        \"\"\"\n\n        swagger = None\n\n        # First check if there is inline swagger\n        if self.definition_body:\n            swagger = self._read_from_definition_body()\n\n        if not swagger and self.definition_uri:\n            # If not, then try to download it from the given URI\n            swagger = self._download_swagger(self.definition_uri)\n\n        return swagger", "output": "Gets the Swagger document from either of the given locations. If we fail to retrieve or parse the Swagger\n        file, this method will return None.\n\n        Returns\n        -------\n        dict:\n            Swagger document. None, if we cannot retrieve the document", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def initialize_schema(connection):\n  \"\"\"\n  \"\"\"\n  cursor = connection.cursor()\n  cursor.execute(\"PRAGMA application_id={}\".format(_TENSORBOARD_APPLICATION_ID))\n  cursor.execute(\"PRAGMA user_version={}\".format(_TENSORBOARD_USER_VERSION))\n  with connection:\n    for statement in _SCHEMA_STATEMENTS:\n      lines = statement.strip('\\n').split('\\n')\n      message = lines[0] + ('...' if len(lines) > 1 else '')\n      logger.debug('Running DB init statement: %s', message)\n      cursor.execute(statement)", "output": "Initializes the TensorBoard sqlite schema using the given connection.\n\n  Args:\n    connection: A sqlite DB connection.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _clone(self):\n        \"\"\"\n        \"\"\"\n        cloned_self = self.__class__(\n            *self.flat_path, project=self.project, namespace=self.namespace\n        )\n        # If the current parent has already been set, we re-use\n        # the same instance\n        cloned_self._parent = self._parent\n        return cloned_self", "output": "Duplicates the Key.\n\n        Most attributes are simple types, so don't require copying. Other\n        attributes like ``parent`` are long-lived and so we re-use them.\n\n        :rtype: :class:`google.cloud.datastore.key.Key`\n        :returns: A new ``Key`` instance with the same data as the current one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __reg_query_value(handle, value_name):\n        '''\n        \n        '''\n        # item_value, item_type = win32api.RegQueryValueEx(self.__reg_uninstall_handle, value_name)\n        item_value, item_type = win32api.RegQueryValueEx(handle, value_name)  # pylint: disable=no-member\n        if six.PY2 and isinstance(item_value, six.string_types) and not isinstance(item_value, six.text_type):\n            try:\n                item_value = six.text_type(item_value, encoding='mbcs')\n            except UnicodeError:\n                pass\n        if item_type == win32con.REG_EXPAND_SZ:\n            # expects Unicode input\n            win32api.ExpandEnvironmentStrings(item_value)  # pylint: disable=no-member\n            item_type = win32con.REG_SZ\n        return item_value, item_type", "output": "Calls RegQueryValueEx\n\n        If PY2 ensure unicode string and expand REG_EXPAND_SZ before returning\n        Remember to catch not found exceptions when calling.\n\n        Args:\n            handle (object): open registry handle.\n            value_name (str): Name of the value you wished returned\n\n        Returns:\n            tuple: type, value", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def connect_database(url):\n    \"\"\"\n    \n\n    \"\"\"\n    db = _connect_database(url)\n    db.copy = lambda: _connect_database(url)\n    return db", "output": "create database object by url\n\n    mysql:\n        mysql+type://user:passwd@host:port/database\n    sqlite:\n        # relative path\n        sqlite+type:///path/to/database.db\n        # absolute path\n        sqlite+type:////path/to/database.db\n        # memory database\n        sqlite+type://\n    mongodb:\n        mongodb+type://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n        more: http://docs.mongodb.org/manual/reference/connection-string/\n    sqlalchemy:\n        sqlalchemy+postgresql+type://user:passwd@host:port/database\n        sqlalchemy+mysql+mysqlconnector+type://user:passwd@host:port/database\n        more: http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html\n    redis:\n        redis+taskdb://host:port/db\n    elasticsearch:\n        elasticsearch+type://host:port/?index=pyspider\n    local:\n        local+projectdb://filepath,filepath\n\n    type:\n        taskdb\n        projectdb\n        resultdb", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def project_present(name, description=None, enabled=True, profile=None,\n                    **connection_args):\n    '''\n    \n\n    '''\n\n    return tenant_present(name, description=description, enabled=enabled, profile=profile,\n                          **connection_args)", "output": "Ensures that the keystone project exists\n    Alias for tenant_present from V2 API to fulfill\n    V3 API naming convention.\n\n    .. versionadded:: 2016.11.0\n\n    name\n        The name of the project to manage\n\n    description\n        The description to use for this project\n\n    enabled\n        Availability state for this project\n\n    .. code-block:: yaml\n\n        nova:\n            keystone.project_present:\n                - enabled: True\n                - description: 'Nova Compute Service'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __create_orget_address(conn, name, region):\n    '''\n    \n    '''\n    try:\n        addy = conn.ex_get_address(name, region)\n    except ResourceNotFoundError:  # pylint: disable=W0703\n        addr_kwargs = {\n            'name': name,\n            'region': region\n        }\n        new_addy = create_address(addr_kwargs, \"function\")\n        addy = conn.ex_get_address(new_addy['name'], new_addy['region'])\n\n    return addy", "output": "Reuse or create a static IP address.\n    Returns a native GCEAddress construct to use with libcloud.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def queue_put_stoppable(self, q, obj):\n        \"\"\" \"\"\"\n        while not self.stopped():\n            try:\n                q.put(obj, timeout=5)\n                break\n            except queue.Full:\n                pass", "output": "Put obj to queue, but will give up when the thread is stopped", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def expires(self):\n        \"\"\"\n        \"\"\"\n        expiration_time = self._properties.get(\"expirationTime\")\n        if expiration_time is not None:\n            # expiration_time will be in milliseconds.\n            return google.cloud._helpers._datetime_from_microseconds(\n                1000.0 * float(expiration_time)\n            )", "output": "Union[datetime.datetime, None]: Datetime at which the table will be\n        deleted.\n\n        Raises:\n            ValueError: For invalid value types.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _resizeColumnsToContents(self, header, data, limit_ms):\r\n        \"\"\"\"\"\"\r\n        max_col = data.model().columnCount()\r\n        if limit_ms is None:\r\n            max_col_ms = None\r\n        else:\r\n            max_col_ms = limit_ms / max(1, max_col)\r\n        for col in range(max_col):\r\n            self._resizeColumnToContents(header, data, col, max_col_ms)", "output": "Resize all the colummns to its contents.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _query_response_to_snapshot(response_pb, collection, expected_prefix):\n    \"\"\"\n    \"\"\"\n    if not response_pb.HasField(\"document\"):\n        return None\n\n    document_id = _helpers.get_doc_id(response_pb.document, expected_prefix)\n    reference = collection.document(document_id)\n    data = _helpers.decode_dict(response_pb.document.fields, collection._client)\n    snapshot = document.DocumentSnapshot(\n        reference,\n        data,\n        exists=True,\n        read_time=response_pb.read_time,\n        create_time=response_pb.document.create_time,\n        update_time=response_pb.document.update_time,\n    )\n    return snapshot", "output": "Parse a query response protobuf to a document snapshot.\n\n    Args:\n        response_pb (google.cloud.proto.firestore.v1beta1.\\\n            firestore_pb2.RunQueryResponse): A\n        collection (~.firestore_v1beta1.collection.CollectionReference): A\n            reference to the collection that initiated the query.\n        expected_prefix (str): The expected prefix for fully-qualified\n            document names returned in the query results. This can be computed\n            directly from ``collection`` via :meth:`_parent_info`.\n\n    Returns:\n        Optional[~.firestore.document.DocumentSnapshot]: A\n        snapshot of the data returned in the query. If ``response_pb.document``\n        is not set, the snapshot will be :data:`None`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_settings(self, index=None, name=None, params=None):\n        \"\"\"\n        \n        \"\"\"\n        return self.transport.perform_request(\n            \"GET\", _make_path(index, \"_settings\", name), params=params\n        )", "output": "Retrieve settings for one or more (or all) indices.\n        `<http://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-settings.html>`_\n\n        :arg index: A comma-separated list of index names; use `_all` or empty\n            string to perform the operation on all indices\n        :arg name: The name of the settings that should be included\n        :arg allow_no_indices: Whether to ignore if a wildcard indices\n            expression resolves into no concrete indices. (This includes `_all`\n            string or when no indices have been specified)\n        :arg expand_wildcards: Whether to expand wildcard expression to concrete\n            indices that are open, closed or both., default ['open', 'closed'],\n            valid choices are: 'open', 'closed', 'none', 'all'\n        :arg flat_settings: Return settings in flat format (default: false)\n        :arg ignore_unavailable: Whether specified concrete indices should be\n            ignored when unavailable (missing or closed)\n        :arg include_defaults: Whether to return all default setting for each of\n            the indices., default False\n        :arg local: Return local information, do not retrieve the state from\n            master node (default: false)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_target_variable (self, targets, variable, value, append=0):\n        \"\"\" \n        \"\"\"\n        if isinstance (targets, str):\n            targets = [targets]\n        if isinstance(value, str):\n            value = [value]\n\n        assert is_iterable(targets)\n        assert isinstance(variable, basestring)\n        assert is_iterable(value)\n\n        if targets:\n            if append:\n                bjam_interface.call(\"set-target-variable\", targets, variable, value, \"true\")\n            else:\n                bjam_interface.call(\"set-target-variable\", targets, variable, value)", "output": "Sets a target variable.\n\n        The 'variable' will be available to bjam when it decides\n        where to generate targets, and will also be available to\n        updating rule for that 'taret'.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _decode_input_tensor_to_features_dict(feature_map, hparams):\n  \"\"\"\n  \"\"\"\n  inputs = tf.convert_to_tensor(feature_map[\"inputs\"])\n  input_is_image = False\n\n  x = inputs\n  p_hparams = hparams.problem_hparams\n  # Add a third empty dimension\n  x = tf.expand_dims(x, axis=[2])\n  x = tf.to_int32(x)\n  input_space_id = tf.constant(p_hparams.input_space_id)\n  target_space_id = tf.constant(p_hparams.target_space_id)\n\n  features = {}\n  features[\"input_space_id\"] = input_space_id\n  features[\"target_space_id\"] = target_space_id\n  features[\"decode_length\"] = (\n      IMAGE_DECODE_LENGTH if input_is_image else tf.shape(x)[1] + 50)\n  features[\"inputs\"] = x\n  return features", "output": "Convert the interactive input format (see above) to a dictionary.\n\n  Args:\n    feature_map: dict with inputs.\n    hparams: model hyperparameters\n\n  Returns:\n    a features dictionary, as expected by the decoder.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def insertInto(self, tableName, overwrite=False):\n        \"\"\"\n        \"\"\"\n        self._jwrite.mode(\"overwrite\" if overwrite else \"append\").insertInto(tableName)", "output": "Inserts the content of the :class:`DataFrame` to the specified table.\n\n        It requires that the schema of the class:`DataFrame` is the same as the\n        schema of the table.\n\n        Optionally overwriting any existing data.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cancel(self, client=None):\n        \"\"\"\n        \"\"\"\n        client = self._require_client(client)\n\n        extra_params = {}\n        if self.location:\n            extra_params[\"location\"] = self.location\n\n        api_response = client._connection.api_request(\n            method=\"POST\", path=\"%s/cancel\" % (self.path,), query_params=extra_params\n        )\n        self._set_properties(api_response[\"job\"])\n        # The Future interface requires that we return True if the *attempt*\n        # to cancel was successful.\n        return True", "output": "API call:  cancel job via a POST request\n\n        See\n        https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/cancel\n\n        :type client: :class:`~google.cloud.bigquery.client.Client` or\n                      ``NoneType``\n        :param client: the client to use.  If not passed, falls back to the\n                       ``client`` stored on the current dataset.\n\n        :rtype: bool\n        :returns: Boolean indicating that the cancel request was sent.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def clear_lock(self, lock_type='update'):\n        '''\n        \n        '''\n        lock_file = self._get_lock_file(lock_type=lock_type)\n\n        def _add_error(errlist, exc):\n            msg = ('Unable to remove update lock for {0} ({1}): {2} '\n                   .format(self.url, lock_file, exc))\n            log.debug(msg)\n            errlist.append(msg)\n\n        success = []\n        failed = []\n\n        try:\n            os.remove(lock_file)\n        except OSError as exc:\n            if exc.errno == errno.ENOENT:\n                # No lock file present\n                pass\n            elif exc.errno == errno.EISDIR:\n                # Somehow this path is a directory. Should never happen\n                # unless some wiseguy manually creates a directory at this\n                # path, but just in case, handle it.\n                try:\n                    shutil.rmtree(lock_file)\n                except OSError as exc:\n                    _add_error(failed, exc)\n            else:\n                _add_error(failed, exc)\n        else:\n            msg = 'Removed {0} lock for {1} remote \\'{2}\\''.format(\n                lock_type,\n                self.role,\n                self.id\n            )\n            log.debug(msg)\n            success.append(msg)\n        return success, failed", "output": "Clear update.lk", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_args(args, root):\n    \"\"\"\n    \n    \"\"\"\n\n    extension_args = {}\n\n    for arg in args:\n        parse_extension_arg(arg, extension_args)\n\n    for name in sorted(extension_args, key=len):\n        path = name.split('.')\n        update_namespace(root, path, extension_args[name])", "output": "Encapsulates a set of custom command line arguments in key=value\n    or key.namespace=value form into a chain of Namespace objects,\n    where each next level is an attribute of the Namespace object on the\n    current level\n\n    Parameters\n    ----------\n    args : list\n        A list of strings representing arguments in key=value form\n    root : Namespace\n        The top-level element of the argument tree", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_state_changed(self, state):\n        \"\"\"\"\"\"\n        if state:\n            self.editor.sig_key_pressed.connect(self._on_key_pressed)\n        else:\n            self.editor.sig_key_pressed.disconnect(self._on_key_pressed)", "output": "Connect/disconnect sig_key_pressed signal.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def stop(self):\n        \"\"\"\n        \n        \"\"\"\n        if self.log_file != PIPE and not (self.log_file == DEVNULL and _HAS_NATIVE_DEVNULL):\n            try:\n                self.log_file.close()\n            except Exception:\n                pass\n\n        if self.process is None:\n            return\n\n        try:\n            self.send_remote_shutdown_command()\n        except TypeError:\n            pass\n\n        try:\n            if self.process:\n                for stream in [self.process.stdin,\n                               self.process.stdout,\n                               self.process.stderr]:\n                    try:\n                        stream.close()\n                    except AttributeError:\n                        pass\n                self.process.terminate()\n                self.process.wait()\n                self.process.kill()\n                self.process = None\n        except OSError:\n            pass", "output": "Stops the service.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_allowed_shape_ranges(spec):\n    \"\"\"\n    \n    \"\"\"\n\n    shaper = NeuralNetworkShaper(spec, False)\n    inputs = _get_input_names(spec)\n    output = {}\n\n    for input in inputs:\n        output[input] = shaper.shape(input)\n\n    return output", "output": "For a given model specification, returns a dictionary with a shape range object for each input feature name.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_portfolio_info(self, portfolio_code):\n        \"\"\"\n        \n        \"\"\"\n        url = self.config[\"portfolio_url\"] + portfolio_code\n        html = self._get_html(url)\n        match_info = re.search(r\"(?<=SNB.cubeInfo = ).*(?=;\\n)\", html)\n        if match_info is None:\n            raise Exception(\n                \"cant get portfolio info, portfolio html : {}\".format(html)\n            )\n        try:\n            portfolio_info = json.loads(match_info.group())\n        except Exception as e:\n            raise Exception(\"get portfolio info error: {}\".format(e))\n        return portfolio_info", "output": "\u83b7\u53d6\u7ec4\u5408\u4fe1\u606f\n        :return: \u5b57\u5178", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def hybrid_forward(self, F, data, gamma, beta):\n        \"\"\"\"\"\"\n        # TODO(haibin): LayerNorm does not support fp16 safe reduction. Issue is tracked at:\n        # https://github.com/apache/incubator-mxnet/issues/14073\n        if self._dtype:\n            data = data.astype('float32')\n            gamma = gamma.astype('float32')\n            beta = beta.astype('float32')\n        norm_data = F.LayerNorm(data, gamma=gamma, beta=beta, axis=self._axis, eps=self._epsilon)\n        if self._dtype:\n            norm_data = norm_data.astype(self._dtype)\n        return norm_data", "output": "forward computation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_keys_to_action(self):\n    \"\"\"\n    \"\"\"\n    # Based on gym AtariEnv.get_keys_to_action()\n    keyword_to_key = {\n        \"UP\": ord(\"w\"),\n        \"DOWN\": ord(\"s\"),\n        \"LEFT\": ord(\"a\"),\n        \"RIGHT\": ord(\"d\"),\n        \"FIRE\": ord(\" \"),\n    }\n\n    keys_to_action = {}\n\n    for action_id, action_meaning in enumerate(self.action_meanings):\n      keys_tuple = tuple(sorted([\n          key for keyword, key in keyword_to_key.items()\n          if keyword in action_meaning]))\n      assert keys_tuple not in keys_to_action\n      keys_to_action[keys_tuple] = action_id\n\n    # Special actions:\n    keys_to_action[(ord(\"r\"),)] = self.RETURN_DONE_ACTION\n    keys_to_action[(ord(\"c\"),)] = self.TOGGLE_WAIT_ACTION\n    keys_to_action[(ord(\"n\"),)] = self.WAIT_MODE_NOOP_ACTION\n\n    return keys_to_action", "output": "Get mapping from keyboard keys to actions.\n\n    Required by gym.utils.play in environment or top level wrapper.\n\n    Returns:\n      {\n        Unicode code point for keyboard key: action (formatted for step()),\n        ...\n      }", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _absent(name, dataset_type, force=False, recursive=False, recursive_all=False):\n    '''\n    \n\n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': ''}\n\n    ## log configuration\n    dataset_type = dataset_type.lower()\n    log.debug('zfs.%s_absent::%s::config::force = %s',\n              dataset_type, name, force)\n    log.debug('zfs.%s_absent::%s::config::recursive = %s',\n              dataset_type, name, recursive)\n\n    ## destroy dataset if needed\n    if __salt__['zfs.exists'](name, **{'type': dataset_type}):\n        ## NOTE: dataset found with the name and dataset_type\n        if not __opts__['test']:\n            mod_res = __salt__['zfs.destroy'](name, **{'force': force, 'recursive': recursive, 'recursive_all': recursive_all})\n        else:\n            mod_res = OrderedDict([('destroyed', True)])\n\n        ret['result'] = mod_res['destroyed']\n        if ret['result']:\n            ret['changes'][name] = 'destroyed'\n            ret['comment'] = '{0} {1} was destroyed'.format(\n                dataset_type,\n                name,\n            )\n        else:\n            ret['comment'] = 'failed to destroy {0} {1}'.format(\n                dataset_type,\n                name,\n            )\n            if 'error' in mod_res:\n                ret['comment'] = mod_res['error']\n    else:\n        ## NOTE: no dataset found with name of the dataset_type\n        ret['comment'] = '{0} {1} is absent'.format(\n            dataset_type,\n            name\n        )\n\n    return ret", "output": "internal shared function for *_absent\n\n    name : string\n        name of dataset\n    dataset_type : string [filesystem, volume, snapshot, or bookmark]\n        type of dataset to remove\n    force : boolean\n        try harder to destroy the dataset\n    recursive : boolean\n        also destroy all the child datasets\n    recursive_all : boolean\n        recursively destroy all dependents, including cloned file systems\n        outside the target hierarchy. (-R)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def convert_padding(builder, layer, input_names, output_names, keras_layer):\n    \"\"\"\n    \n    \"\"\"\n    _check_data_format(keras_layer)\n    # Get input and output names\n    input_name, output_name = (input_names[0], output_names[0])\n\n    is_1d = isinstance(keras_layer, _keras.layers.ZeroPadding1D)\n\n    padding = keras_layer.padding\n    top = left = bottom = right = 0\n    if is_1d:\n        if type(padding) is int:\n            left = right = padding\n        elif type(padding) is tuple:\n            if type(padding[0]) is int:\n                left, right = padding\n            elif type(padding[0]) is tuple and len(padding[0]) == 2:\n                left, right = padding[0]\n            else:\n                raise ValueError(\"Unrecognized padding option: %s\" % (str(padding)))\n        else:\n            raise ValueError(\"Unrecognized padding option: %s\" % (str(padding)))\n    else:\n        if type(padding) is int:\n            top = left = bottom = right = padding\n        elif type(padding) is tuple:\n            if type(padding[0]) is int:\n                top, left = padding\n                bottom, right = padding\n            elif type(padding[0]) is tuple:\n                top, bottom = padding[0]\n                left, right = padding[1]\n            else:\n                raise ValueError(\"Unrecognized padding option: %s\" % (str(padding)))\n        else:\n            raise ValueError(\"Unrecognized padding option: %s\" % (str(padding)))\n\n    # Now add the layer\n    builder.add_padding(name = layer,\n        left = left, right=right, top=top, bottom=bottom, value = 0,\n        input_name = input_name, output_name=output_name\n        )", "output": "Convert padding layer from keras to coreml.\n    Keras only supports zero padding at this time.\n    Parameters\n    ----------\n    keras_layer: layer\n        A keras layer object.\n\n    builder: NeuralNetworkBuilder\n        A neural network builder object.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def avail_images(call=None):\n    '''\n    \n    '''\n    if call == 'action':\n        raise SaltCloudSystemExit(\n            'The avail_images function must be called with '\n            '-f or --function, or with the --list-images option.'\n        )\n\n    templates = {}\n    vm_properties = [\n        \"name\",\n        \"config.template\",\n        \"config.guestFullName\",\n        \"config.hardware.numCPU\",\n        \"config.hardware.memoryMB\"\n    ]\n\n    vm_list = salt.utils.vmware.get_mors_with_properties(_get_si(), vim.VirtualMachine, vm_properties)\n\n    for vm in vm_list:\n        if \"config.template\" in vm and vm[\"config.template\"]:\n            templates[vm[\"name\"]] = {\n                'name': vm[\"name\"],\n                'guest_fullname': vm[\"config.guestFullName\"] if \"config.guestFullName\" in vm else \"N/A\",\n                'cpus': vm[\"config.hardware.numCPU\"] if \"config.hardware.numCPU\" in vm else \"N/A\",\n                'ram': vm[\"config.hardware.memoryMB\"] if \"config.hardware.memoryMB\" in vm else \"N/A\"\n            }\n\n    return templates", "output": "Return a list of all the templates present in this VMware environment with basic\n    details\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud --list-images my-vmware-config", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_account(self, account):\n        ''\n        if account.account_cookie not in self.account_list:\n            if self.cash_available > account.init_cash:\n                account.portfolio_cookie = self.portfolio_cookie\n                account.user_cookie = self.user_cookie\n                self.cash.append(self.cash_available - account.init_cash)\n                self.account_list.append(account.account_cookie)\n                account.save()\n                return account\n        else:\n            pass", "output": "portfolio add a account/stratetgy", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _get_user_gnupghome(user):\n    '''\n    \n    '''\n    if user == 'salt':\n        gnupghome = os.path.join(__salt__['config.get']('config_dir'), 'gpgkeys')\n    else:\n        gnupghome = os.path.join(_get_user_info(user)['home'], '.gnupg')\n\n    return gnupghome", "output": "Return default GnuPG home directory path for a user", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove_dups(head):\n    \"\"\"\n    \n    \"\"\"\n    hashset = set()\n    prev = Node()\n    while head:\n        if head.val in hashset:\n            prev.next = head.next\n        else:\n            hashset.add(head.val)\n            prev = head\n        head = head.next", "output": "Time Complexity: O(N)\n    Space Complexity: O(N)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def unpause_trial(self, trial):\n        \"\"\"\"\"\"\n        assert trial.status == Trial.PAUSED, trial.status\n        self.set_status(trial, Trial.PENDING)", "output": "Sets PAUSED trial to pending to allow scheduler to start.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_history(self, directory):\r\n        \"\"\"\"\"\"\r\n        try:\r\n            directory = osp.abspath(to_text_string(directory))\r\n            if directory in self.history:\r\n                self.histindex = self.history.index(directory)\r\n        except Exception:\r\n            user_directory = get_home_dir()\r\n            self.chdir(directory=user_directory, browsing_history=True)", "output": "Update browse history", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(cont=None, path=None, local_file=None, return_bin=False, profile=None):\n    '''\n    \n\n    '''\n    swift_conn = _auth(profile)\n\n    if cont is None:\n        return swift_conn.get_account()\n\n    if path is None:\n        return swift_conn.get_container(cont)\n\n    if return_bin is True:\n        return swift_conn.get_object(cont, path, return_bin)\n\n    if local_file is not None:\n        return swift_conn.get_object(cont, path, local_file)\n\n    return False", "output": "List the contents of a container, or return an object from a container. Set\n    return_bin to True in order to retrieve an object wholesale. Otherwise,\n    Salt will attempt to parse an XML response.\n\n    CLI Example to list containers:\n\n    .. code-block:: bash\n\n        salt myminion swift.get\n\n    CLI Example to list the contents of a container:\n\n    .. code-block:: bash\n\n        salt myminion swift.get mycontainer\n\n    CLI Example to return the binary contents of an object:\n\n    .. code-block:: bash\n\n        salt myminion swift.get mycontainer myfile.png return_bin=True\n\n    CLI Example to save the binary contents of an object to a local file:\n\n    .. code-block:: bash\n\n        salt myminion swift.get mycontainer myfile.png local_file=/tmp/myfile.png", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def server_delete(s_name, **connection_args):\n    '''\n    \n    '''\n    ret = True\n    server = _server_get(s_name, **connection_args)\n    if server is None:\n        return False\n    nitro = _connect(**connection_args)\n    if nitro is None:\n        return False\n    try:\n        NSServer.delete(nitro, server)\n    except NSNitroError as error:\n        log.debug('netscaler module error - NSServer.delete() failed: %s', error)\n        ret = False\n    _disconnect(nitro)\n    return ret", "output": "Delete a server\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' netscaler.server_delete 'serverName'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mapPartitions(self, f, preservesPartitioning=False):\n        \"\"\"\n        \n        \"\"\"\n        def func(s, iterator):\n            return f(iterator)\n        return self.mapPartitionsWithIndex(func, preservesPartitioning)", "output": "Return a new RDD by applying a function to each partition of this RDD.\n\n        >>> rdd = sc.parallelize([1, 2, 3, 4], 2)\n        >>> def f(iterator): yield sum(iterator)\n        >>> rdd.mapPartitions(f).collect()\n        [3, 7]", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def unread_data(self, data: bytes) -> None:\n        \"\"\" \n        \"\"\"\n        warnings.warn(\"unread_data() is deprecated \"\n                      \"and will be removed in future releases (#3260)\",\n                      DeprecationWarning,\n                      stacklevel=2)\n        if not data:\n            return\n\n        if self._buffer_offset:\n            self._buffer[0] = self._buffer[0][self._buffer_offset:]\n            self._buffer_offset = 0\n        self._size += len(data)\n        self._cursor -= len(data)\n        self._buffer.appendleft(data)\n        self._eof_counter = 0", "output": "rollback reading some data from stream, inserting it to buffer head.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reverse_url(self, name: str, *args: Any) -> str:\n        \"\"\"\"\"\"\n        return self.application.reverse_url(name, *args)", "output": "Alias for `Application.reverse_url`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_mixed_type_key(obj):\n    \"\"\"\n\n    \"\"\"\n    if isinstance(obj, _BaseNetwork):\n        return obj._get_networks_key()\n    elif isinstance(obj, _BaseAddress):\n        return obj._get_address_key()\n    return NotImplemented", "output": "Return a key suitable for sorting between networks and addresses.\n\n    Address and Network objects are not sortable by default; they're\n    fundamentally different so the expression\n\n        IPv4Address('192.0.2.0') <= IPv4Network('192.0.2.0/24')\n\n    doesn't make any sense.  There are some times however, where you may wish\n    to have ipaddress sort these for you anyway. If you need to do this, you\n    can use this function as the key= argument to sorted().\n\n    Args:\n      obj: either a Network or Address object.\n    Returns:\n      appropriate key.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def group(self, *args, **kwargs):\n        \"\"\"\n        \"\"\"\n        def decorator(f):\n            cmd = group(*args, **kwargs)(f)\n            self.add_command(cmd)\n            return cmd\n        return decorator", "output": "A shortcut decorator for declaring and attaching a group to\n        the group.  This takes the same arguments as :func:`group` but\n        immediately registers the created command with this instance by\n        calling into :meth:`add_command`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_nested_object(obj):\n    \"\"\"\n    \n\n    \"\"\"\n\n    if isinstance(obj, ABCSeries) and is_object_dtype(obj):\n\n        if any(isinstance(v, ABCSeries) for v in obj.values):\n            return True\n\n    return False", "output": "return a boolean if we have a nested object, e.g. a Series with 1 or\n    more Series elements\n\n    This may not be necessarily be performant.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def hash_tuples(vals, encoding='utf8', hash_key=None):\n    \"\"\"\n    \n    \"\"\"\n    is_tuple = False\n    if isinstance(vals, tuple):\n        vals = [vals]\n        is_tuple = True\n    elif not is_list_like(vals):\n        raise TypeError(\"must be convertible to a list-of-tuples\")\n\n    from pandas import Categorical, MultiIndex\n\n    if not isinstance(vals, ABCMultiIndex):\n        vals = MultiIndex.from_tuples(vals)\n\n    # create a list-of-Categoricals\n    vals = [Categorical(vals.codes[level],\n                        vals.levels[level],\n                        ordered=False,\n                        fastpath=True)\n            for level in range(vals.nlevels)]\n\n    # hash the list-of-ndarrays\n    hashes = (_hash_categorical(cat,\n                                encoding=encoding,\n                                hash_key=hash_key)\n              for cat in vals)\n    h = _combine_hash_arrays(hashes, len(vals))\n    if is_tuple:\n        h = h[0]\n\n    return h", "output": "Hash an MultiIndex / list-of-tuples efficiently\n\n    .. versionadded:: 0.20.0\n\n    Parameters\n    ----------\n    vals : MultiIndex, list-of-tuples, or single tuple\n    encoding : string, default 'utf8'\n    hash_key : string key to encode, default to _default_hash_key\n\n    Returns\n    -------\n    ndarray of hashed values array", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_backward_begin(self, last_loss, last_output, **kwargs):\n        \"\"\n        last_loss = last_loss.detach().cpu()\n        if self.gen_mode:\n            self.smoothenerG.add_value(last_loss)\n            self.glosses.append(self.smoothenerG.smooth)\n            self.last_gen = last_output.detach().cpu()\n        else:\n            self.smoothenerC.add_value(last_loss)\n            self.closses.append(self.smoothenerC.smooth)", "output": "Record `last_loss` in the proper list.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _validate_logical(self, rule, field, value):\n        \"\"\"  \"\"\"\n        if not isinstance(value, Sequence):\n            self._error(field, errors.BAD_TYPE)\n            return\n\n        validator = self._get_child_validator(\n            document_crumb=rule, allow_unknown=False,\n            schema=self.target_validator.validation_rules)\n\n        for constraints in value:\n            _hash = (mapping_hash({'turing': constraints}),\n                     mapping_hash(self.target_validator.types_mapping))\n            if _hash in self.target_validator._valid_schemas:\n                continue\n\n            validator(constraints, normalize=False)\n            if validator._errors:\n                self._error(validator._errors)\n            else:\n                self.target_validator._valid_schemas.add(_hash)", "output": "{'allowed': ('allof', 'anyof', 'noneof', 'oneof')}", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def select_from(self, parent_path):\n        \"\"\"\"\"\"\n        path_cls = type(parent_path)\n        is_dir = path_cls.is_dir\n        exists = path_cls.exists\n        scandir = parent_path._accessor.scandir\n        if not is_dir(parent_path):\n            return iter([])\n        return self._select_from(parent_path, is_dir, exists, scandir)", "output": "Iterate over all child paths of `parent_path` matched by this\n        selector.  This can contain parent_path itself.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_cond_latents_at_level(cond_latents, level, hparams):\n  \"\"\"\"\"\"\n  if cond_latents:\n    if hparams.latent_dist_encoder in [\"conv_net\", \"conv3d_net\"]:\n      return [cond_latent[level] for cond_latent in cond_latents]\n    elif hparams.latent_dist_encoder in [\"pointwise\", \"conv_lstm\"]:\n      return cond_latents[level]", "output": "Returns a single or list of conditional latents at level 'level'.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def posix_rename(self, oldpath, newpath):\n        \"\"\"\n        \n        \"\"\"\n        oldpath = self._adjust_cwd(oldpath)\n        newpath = self._adjust_cwd(newpath)\n        self._log(DEBUG, \"posix_rename({!r}, {!r})\".format(oldpath, newpath))\n        self._request(\n            CMD_EXTENDED, \"posix-rename@openssh.com\", oldpath, newpath\n        )", "output": "Rename a file or folder from ``oldpath`` to ``newpath``, following\n        posix conventions.\n\n        :param str oldpath: existing name of the file or folder\n        :param str newpath: new name for the file or folder, will be\n            overwritten if it already exists\n\n        :raises:\n            ``IOError`` -- if ``newpath`` is a folder, posix-rename is not\n            supported by the server or something else goes wrong\n\n        :versionadded: 2.2", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def assign_default_storage_policy_to_datastore(policy, datastore,\n                                               service_instance=None):\n    '''\n    \n    '''\n    log.trace('Assigning policy %s to datastore %s', policy, datastore)\n    profile_manager = salt.utils.pbm.get_profile_manager(service_instance)\n    # Find policy\n    policies = salt.utils.pbm.get_storage_policies(profile_manager, [policy])\n    if not policies:\n        raise VMwareObjectRetrievalError('Policy \\'{0}\\' was not found'\n                                         ''.format(policy))\n    policy_ref = policies[0]\n    # Find datastore\n    target_ref = _get_proxy_target(service_instance)\n    ds_refs = salt.utils.vmware.get_datastores(service_instance, target_ref,\n                                               datastore_names=[datastore])\n    if not ds_refs:\n        raise VMwareObjectRetrievalError('Datastore \\'{0}\\' was not '\n                                         'found'.format(datastore))\n    ds_ref = ds_refs[0]\n    salt.utils.pbm.assign_default_storage_policy_to_datastore(\n        profile_manager, policy_ref, ds_ref)\n    return True", "output": "Assigns a storage policy as the default policy to a datastore.\n\n    policy\n        Name of the policy to assign.\n\n    datastore\n        Name of the datastore to assign.\n        The datastore needs to be visible to the VMware entity the proxy\n        points to.\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter.\n        Default is None.\n\n    .. code-block:: bash\n\n        salt '*' vsphere.assign_storage_policy_to_datastore\n            policy='policy name' datastore=ds1", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def connect_host(kwargs=None, call=None):\n    '''\n    \n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The connect_host function must be called with '\n            '-f or --function.'\n        )\n\n    host_name = kwargs.get('host') if kwargs and 'host' in kwargs else None\n\n    if not host_name:\n        raise SaltCloudSystemExit(\n            'You must specify name of the host system.'\n        )\n\n    # Get the service instance\n    si = _get_si()\n\n    host_ref = salt.utils.vmware.get_mor_by_property(si, vim.HostSystem, host_name)\n    if not host_ref:\n        raise SaltCloudSystemExit(\n            'Specified host system does not exist.'\n        )\n\n    if host_ref.runtime.connectionState == 'connected':\n        return {host_name: 'host system already connected'}\n\n    try:\n        task = host_ref.ReconnectHost_Task()\n        salt.utils.vmware.wait_for_task(task, host_name, 'connect host', 5, 'info')\n    except Exception as exc:\n        log.error(\n            'Error while connecting host %s: %s',\n            host_name, exc,\n            # Show the traceback if the debug logging level is enabled\n            exc_info_on_loglevel=logging.DEBUG\n        )\n        return {host_name: 'failed to connect host'}\n\n    return {host_name: 'connected host'}", "output": "Connect the specified host system in this VMware environment\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -f connect_host my-vmware-config host=\"myHostSystemName\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _set_environment(self, environ):\n        \"\"\"\"\"\"\n        if environ:\n            q_environ = self._process.processEnvironment()\n            for k, v in environ.items():\n                q_environ.insert(k, v)\n            self._process.setProcessEnvironment(q_environ)", "output": "Set the environment on the QProcess.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _create_comparison_method(cls, op):\n        \"\"\"\n        \n        \"\"\"\n        def wrapper(self, other):\n            if isinstance(other, ABCSeries):\n                # the arrays defer to Series for comparison ops but the indexes\n                #  don't, so we have to unwrap here.\n                other = other._values\n\n            result = op(self._data, maybe_unwrap_index(other))\n            return result\n\n        wrapper.__doc__ = op.__doc__\n        wrapper.__name__ = '__{}__'.format(op.__name__)\n        return wrapper", "output": "Create a comparison method that dispatches to ``cls.values``.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def start(name, quiet=False, path=None):\n    '''\n    \n    '''\n    data = _do_names(name, 'start', path=path)\n    if data and not quiet:\n        __jid_event__.fire_event(\n            {'data': data, 'outputter': 'lxc_start'}, 'progress')\n    return data", "output": "Start the named container.\n\n    path\n        path to the container parent\n        default: /var/lib/lxc (system default)\n\n        .. versionadded:: 2015.8.0\n\n    .. code-block:: bash\n\n        salt-run lxc.start name", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def bleu_wrapper(ref_filename, hyp_filename, case_sensitive=False):\n  \"\"\"\"\"\"\n  ref_lines = text_encoder.native_to_unicode(\n      tf.gfile.Open(ref_filename, \"r\").read()).split(\"\\n\")\n  hyp_lines = text_encoder.native_to_unicode(\n      tf.gfile.Open(hyp_filename, \"r\").read()).split(\"\\n\")\n  assert len(ref_lines) == len(hyp_lines), (\"{} != {}\".format(\n      len(ref_lines), len(hyp_lines)))\n  if not case_sensitive:\n    ref_lines = [x.lower() for x in ref_lines]\n    hyp_lines = [x.lower() for x in hyp_lines]\n  ref_tokens = [bleu_tokenize(x) for x in ref_lines]\n  hyp_tokens = [bleu_tokenize(x) for x in hyp_lines]\n  return compute_bleu(ref_tokens, hyp_tokens)", "output": "Compute BLEU for two files (reference and hypothesis translation).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def next_checkpoint(model_dir, timeout_mins=240):\n  \"\"\"\n  \"\"\"\n  last_ckpt = None\n  timeout_secs = None\n  if timeout_mins != -1:\n    timeout_secs = timeout_mins * 60\n  while True:\n    last_ckpt = tf.contrib.training.wait_for_new_checkpoint(\n        model_dir, last_ckpt, seconds_to_sleep=60, timeout=timeout_secs)\n\n    if last_ckpt is None:\n      tf.logging.info(\n          \"Eval timeout: no new checkpoints within %dm\" % timeout_mins)\n      break\n\n    yield last_ckpt", "output": "Yields successive checkpoints from model_dir.\n\n  Args:\n    model_dir: The directory in which checkpoints are saved.\n    timeout_mins: The maximum amount of time in minutes to wait\n                  between checkpoints. Set this to -1 to wait indefinitely.\n  Yields:\n    last_ckpt: a new checkpoint path, or None if the timeout was reached.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_dns(ip, interface='Local Area Connection', index=1):\n    '''\n    \n    '''\n    servers = get_dns_servers(interface)\n\n    # Return False if could not find the interface\n    if servers is False:\n        return False\n\n    # Return true if configured\n    try:\n        if servers[index - 1] == ip:\n            return True\n    except IndexError:\n        pass\n\n    # If configured in the wrong order delete it\n    if ip in servers:\n        rm_dns(ip, interface)\n\n    cmd = ['netsh', 'interface', 'ip', 'add', 'dns',\n           interface, ip, 'index={0}'.format(index), 'validate=no']\n\n    return __salt__['cmd.retcode'](cmd, python_shell=False) == 0", "output": "Add the DNS server to the network interface\n    (index starts from 1)\n\n    Note: if the interface DNS is configured by DHCP, all the DNS servers will\n    be removed from the interface and the requested DNS will be the only one\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' win_dns_client.add_dns <ip> <interface> <index>", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_states(self, states):\n        \"\"\"\"\"\"\n        states = pickle.loads(states)\n        if isinstance(states, tuple) and len(states) == 2:\n            self.states, self.optimizer = states\n        else:\n            self.states = states\n        self.states_synced = dict.fromkeys(self.states.keys(), False)", "output": "Sets updater states.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_unique_tags(tag_list):\n  \"\"\"\"\"\"\n  frozen_tags_seen = set()\n  for tags in tag_list:\n    frozen_tags = frozenset(tags)\n    if frozen_tags in frozen_tags_seen:\n      raise ValueError(\"Tags %r used repeatedly\" % tags)\n    frozen_tags_seen.add(frozen_tags)", "output": "Checks that tag list contains each set of tags only once.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def validate_order_params(self,\n                              asset,\n                              amount,\n                              limit_price,\n                              stop_price,\n                              style):\n        \"\"\"\n        \n        \"\"\"\n\n        if not self.initialized:\n            raise OrderDuringInitialize(\n                msg=\"order() can only be called from within handle_data()\"\n            )\n\n        if style:\n            if limit_price:\n                raise UnsupportedOrderParameters(\n                    msg=\"Passing both limit_price and style is not supported.\"\n                )\n\n            if stop_price:\n                raise UnsupportedOrderParameters(\n                    msg=\"Passing both stop_price and style is not supported.\"\n                )\n\n        for control in self.trading_controls:\n            control.validate(asset,\n                             amount,\n                             self.portfolio,\n                             self.get_datetime(),\n                             self.trading_client.current_data)", "output": "Helper method for validating parameters to the order API function.\n\n        Raises an UnsupportedOrderParameters if invalid arguments are found.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def run(self):\n        '''\n        \n        '''\n        import salt.runner\n        self.parse_args()\n\n        # Setup file logging!\n        self.setup_logfile_logger()\n        verify_log(self.config)\n        profiling_enabled = self.options.profiling_enabled\n\n        runner = salt.runner.Runner(self.config)\n        if self.options.doc:\n            runner.print_docs()\n            self.exit(salt.defaults.exitcodes.EX_OK)\n\n        # Run this here so SystemExit isn't raised anywhere else when\n        # someone tries to use the runners via the python API\n        try:\n            if check_user(self.config['user']):\n                pr = salt.utils.profile.activate_profile(profiling_enabled)\n                try:\n                    ret = runner.run()\n                    # In older versions ret['data']['retcode'] was used\n                    # for signaling the return code. This has been\n                    # changed for the orchestrate runner, but external\n                    # runners might still use it. For this reason, we\n                    # also check ret['data']['retcode'] if\n                    # ret['retcode'] is not available.\n                    if isinstance(ret, dict) and 'retcode' in ret:\n                        self.exit(ret['retcode'])\n                    elif isinstance(ret, dict) and 'retcode' in ret.get('data', {}):\n                        self.exit(ret['data']['retcode'])\n                finally:\n                    salt.utils.profile.output_profile(\n                        pr,\n                        stats_path=self.options.profiling_path,\n                        stop=True)\n\n        except SaltClientError as exc:\n            raise SystemExit(six.text_type(exc))", "output": "Execute salt-run", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def deviation(self, series, start, limit, mean):\n        '''\n        \n        '''\n        d = []\n        for x in range(start, limit):\n            d.append(float(series[x] - mean))\n        return d", "output": ":type start: int\n        :type limit: int\n        :type mean: int\n        :rtype: list()", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def from_bytes_list(cls, function_descriptor_list):\n        \"\"\"\n        \"\"\"\n        assert isinstance(function_descriptor_list, list)\n        if len(function_descriptor_list) == 0:\n            # This is a function descriptor of driver task.\n            return FunctionDescriptor.for_driver_task()\n        elif (len(function_descriptor_list) == 3\n              or len(function_descriptor_list) == 4):\n            module_name = ensure_str(function_descriptor_list[0])\n            class_name = ensure_str(function_descriptor_list[1])\n            function_name = ensure_str(function_descriptor_list[2])\n            if len(function_descriptor_list) == 4:\n                return cls(module_name, function_name, class_name,\n                           function_descriptor_list[3])\n            else:\n                return cls(module_name, function_name, class_name)\n        else:\n            raise Exception(\n                \"Invalid input for FunctionDescriptor.from_bytes_list\")", "output": "Create a FunctionDescriptor instance from list of bytes.\n\n        This function is used to create the function descriptor from\n        backend data.\n\n        Args:\n            cls: Current class which is required argument for classmethod.\n            function_descriptor_list: list of bytes to represent the\n                function descriptor.\n\n        Returns:\n            The FunctionDescriptor instance created from the bytes list.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _lstrip_word(word, prefix):\n    '''\n    \n    '''\n\n    if six.text_type(word).startswith(prefix):\n        return six.text_type(word)[len(prefix):]\n    return word", "output": "Return a copy of the string after the specified prefix was removed\n    from the beginning of the string", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def QA_util_get_trade_gap(start, end):\n    ''\n    start, end = QA_util_get_real_datelist(start, end)\n    if start is not None:\n        return trade_date_sse.index(end) + 1 - trade_date_sse.index(start)\n    else:\n        return 0", "output": "\u8fd4\u56destart_day\u5230end_day\u4e2d\u95f4\u6709\u591a\u5c11\u4e2a\u4ea4\u6613\u5929 \u7b97\u9996\u5c3e", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def toVector(value):\n        \"\"\"\n        \n        \"\"\"\n        if isinstance(value, Vector):\n            return value\n        elif TypeConverters._can_convert_to_list(value):\n            value = TypeConverters.toList(value)\n            if all(map(lambda v: TypeConverters._is_numeric(v), value)):\n                return DenseVector(value)\n        raise TypeError(\"Could not convert %s to vector\" % value)", "output": "Convert a value to a MLlib Vector, if possible.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def has_subdirectories(path, include, exclude, show_all):\r\n    \"\"\"\"\"\"\r\n    try:\r\n        # > 1 because of '..'\r\n        return len( listdir(path, include, exclude,\r\n                            show_all, folders_only=True) ) > 1\r\n    except (IOError, OSError):\r\n        return False", "output": "Return True if path has subdirectories", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def push_note(device=None, title=None, body=None):\n    '''\n    \n    '''\n    spb = _SaltPushbullet(device)\n    res = spb.push_note(title, body)\n\n    return res", "output": "Pushing a text note.\n\n    :param device:   Pushbullet target device\n    :param title:    Note title\n    :param body:     Note body\n\n    :return:            Boolean if message was sent successfully.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt \"*\" pushbullet.push_note device=\"Chrome\" title=\"Example title\" body=\"Example body.\"", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_secret(\n        name,\n        namespace='default',\n        data=None,\n        source=None,\n        template=None,\n        saltenv='base',\n        **kwargs):\n    '''\n    \n    '''\n    if source:\n        data = __read_and_render_yaml_file(source, template, saltenv)\n    elif data is None:\n        data = {}\n\n    data = __enforce_only_strings_dict(data)\n\n    # encode the secrets using base64 as required by kubernetes\n    for key in data:\n        data[key] = base64.b64encode(data[key])\n\n    body = kubernetes.client.V1Secret(\n        metadata=__dict_to_object_meta(name, namespace, {}),\n        data=data)\n\n    cfg = _setup_conn(**kwargs)\n\n    try:\n        api_instance = kubernetes.client.CoreV1Api()\n        api_response = api_instance.create_namespaced_secret(\n            namespace, body)\n\n        return api_response.to_dict()\n    except (ApiException, HTTPError) as exc:\n        if isinstance(exc, ApiException) and exc.status == 404:\n            return None\n        else:\n            log.exception(\n                'Exception when calling '\n                'CoreV1Api->create_namespaced_secret'\n            )\n            raise CommandExecutionError(exc)\n    finally:\n        _cleanup(**cfg)", "output": "Creates the kubernetes secret as defined by the user.\n\n    CLI Examples::\n\n        salt 'minion1' kubernetes.create_secret \\\n            passwords default '{\"db\": \"letmein\"}'\n\n        salt 'minion2' kubernetes.create_secret \\\n            name=passwords namespace=default data='{\"db\": \"letmein\"}'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _pipe(obj, func, *args, **kwargs):\n    \"\"\"\n    \n    \"\"\"\n    if isinstance(func, tuple):\n        func, target = func\n        if target in kwargs:\n            msg = '%s is both the pipe target and a keyword argument' % target\n            raise ValueError(msg)\n        kwargs[target] = obj\n        return func(*args, **kwargs)\n    else:\n        return func(obj, *args, **kwargs)", "output": "Apply a function ``func`` to object ``obj`` either by passing obj as the\n    first argument to the function or, in the case that the func is a tuple,\n    interpret the first element of the tuple as a function and pass the obj to\n    that function as a keyword argument whose key is the value of the second\n    element of the tuple.\n\n    Parameters\n    ----------\n    func : callable or tuple of (callable, string)\n        Function to apply to this object or, alternatively, a\n        ``(callable, data_keyword)`` tuple where ``data_keyword`` is a\n        string indicating the keyword of `callable`` that expects the\n        object.\n    args : iterable, optional\n        positional arguments passed into ``func``.\n    kwargs : dict, optional\n        a dictionary of keyword arguments passed into ``func``.\n\n    Returns\n    -------\n    object : the return type of ``func``.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def PopupGetText(message, title=None, default_text='', password_char='', size=(None, None), button_color=None,\n                 background_color=None, text_color=None, icon=DEFAULT_WINDOW_ICON, font=None, no_titlebar=False,\n                 grab_anywhere=False, keep_on_top=False, location=(None, None)):\n    \"\"\"\n    \n    \"\"\"\n\n    layout = [[Text(message, auto_size_text=True, text_color=text_color, background_color=background_color, font=font)],\n              [InputText(default_text=default_text, size=size, password_char=password_char)],\n              [CloseButton('Ok', size=(60, 20), bind_return_key=True), CloseButton('Cancel', size=(60, 20))]]\n\n    _title = title if title is not None else message\n\n    window = Window(title=_title, icon=icon, auto_size_text=True, button_color=button_color, no_titlebar=no_titlebar,\n                    background_color=background_color, grab_anywhere=grab_anywhere, keep_on_top=keep_on_top,\n                    location=location)\n\n    (button, input_values) = window.Layout(layout).Read()\n\n    if button != 'Ok':\n        return None\n    else:\n        return input_values[0]", "output": "Display Popup with text entry field\n    :param message:\n    :param default_text:\n    :param password_char:\n    :param size:\n    :param button_color:\n    :param background_color:\n    :param text_color:\n    :param icon:\n    :param font:\n    :param no_titlebar:\n    :param grab_anywhere:\n    :param keep_on_top:\n    :param location:\n    :return: Text entered or None if window was closed", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def compress_for_rename(paths):\n    \"\"\"\n    \"\"\"\n    case_map = dict((os.path.normcase(p), p) for p in paths)\n    remaining = set(case_map)\n    unchecked = sorted(set(os.path.split(p)[0]\n                           for p in case_map.values()), key=len)\n    wildcards = set()\n\n    def norm_join(*a):\n        return os.path.normcase(os.path.join(*a))\n\n    for root in unchecked:\n        if any(os.path.normcase(root).startswith(w)\n               for w in wildcards):\n            # This directory has already been handled.\n            continue\n\n        all_files = set()\n        all_subdirs = set()\n        for dirname, subdirs, files in os.walk(root):\n            all_subdirs.update(norm_join(root, dirname, d)\n                               for d in subdirs)\n            all_files.update(norm_join(root, dirname, f)\n                             for f in files)\n        # If all the files we found are in our remaining set of files to\n        # remove, then remove them from the latter set and add a wildcard\n        # for the directory.\n        if not (all_files - remaining):\n            remaining.difference_update(all_files)\n            wildcards.add(root + os.sep)\n\n    return set(map(case_map.__getitem__, remaining)) | wildcards", "output": "Returns a set containing the paths that need to be renamed.\n\n    This set may include directories when the original sequence of paths\n    included every file on disk.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fetch_defense_data(self):\n    \"\"\"\"\"\"\n    if self.defenses_data_initialized:\n      return\n    logging.info('Fetching defense data from datastore')\n    # init data from datastore\n    self.submissions.init_from_datastore()\n    self.dataset_batches.init_from_datastore()\n    self.adv_batches.init_from_datastore()\n    # read dataset metadata\n    self.read_dataset_metadata()\n    # mark as initialized\n    self.defenses_data_initialized = True", "output": "Lazy initialization of data necessary to execute defenses.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def createFileParserCtxt(filename):\n    \"\"\" \"\"\"\n    ret = libxml2mod.xmlCreateFileParserCtxt(filename)\n    if ret is None:raise parserError('xmlCreateFileParserCtxt() failed')\n    return parserCtxt(_obj=ret)", "output": "Create a parser context for a file content. Automatic\n      support for ZLIB/Compress compressed document is provided\n       by default if found at compile-time.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def value_opt_step(i,\n                   opt_state,\n                   opt_update,\n                   value_net_apply,\n                   padded_observations,\n                   padded_rewards,\n                   reward_mask,\n                   gamma=0.99):\n  \"\"\"\"\"\"\n  value_params = trax_opt.get_params(opt_state)\n  # Note this partial application here and argnums above in ppo_opt_step.\n  g = grad(functools.partial(value_loss, value_net_apply))(\n      value_params,\n      padded_observations,\n      padded_rewards,\n      reward_mask,\n      gamma=gamma)\n  return opt_update(i, g, opt_state)", "output": "Value optimizer step.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def state_apply(state_name, **kwargs):\n    '''\n    \n    '''\n    # A new salt client is instantiated with the default configuration because the main module's\n    # client is hardcoded to local\n    # If the minion is running with a master, a non-local client is needed to lookup states\n    caller = salt.client.Caller()\n    if kwargs:\n        return caller.cmd('state.apply', state_name, **kwargs)\n    else:\n        return caller.cmd('state.apply', state_name)", "output": "Runs :py:func:`state.apply <salt.modules.state.apply>` with given options to set up test data.\n    Intended to be used for optional test setup or teardown\n\n    Reference the :py:func:`state.apply <salt.modules.state.apply>` module documentation for arguments and usage options\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' saltcheck.state_apply postfix", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_pax_header(self, info, encoding):\n        \"\"\"\n        \"\"\"\n        info[\"magic\"] = POSIX_MAGIC\n        pax_headers = self.pax_headers.copy()\n\n        # Test string fields for values that exceed the field length or cannot\n        # be represented in ASCII encoding.\n        for name, hname, length in (\n                (\"name\", \"path\", LENGTH_NAME), (\"linkname\", \"linkpath\", LENGTH_LINK),\n                (\"uname\", \"uname\", 32), (\"gname\", \"gname\", 32)):\n\n            if hname in pax_headers:\n                # The pax header has priority.\n                continue\n\n            # Try to encode the string as ASCII.\n            try:\n                info[name].encode(\"ascii\", \"strict\")\n            except UnicodeEncodeError:\n                pax_headers[hname] = info[name]\n                continue\n\n            if len(info[name]) > length:\n                pax_headers[hname] = info[name]\n\n        # Test number fields for values that exceed the field limit or values\n        # that like to be stored as float.\n        for name, digits in ((\"uid\", 8), (\"gid\", 8), (\"size\", 12), (\"mtime\", 12)):\n            if name in pax_headers:\n                # The pax header has priority. Avoid overflow.\n                info[name] = 0\n                continue\n\n            val = info[name]\n            if not 0 <= val < 8 ** (digits - 1) or isinstance(val, float):\n                pax_headers[name] = str(val)\n                info[name] = 0\n\n        # Create a pax extended header if necessary.\n        if pax_headers:\n            buf = self._create_pax_generic_header(pax_headers, XHDTYPE, encoding)\n        else:\n            buf = b\"\"\n\n        return buf + self._create_header(info, USTAR_FORMAT, \"ascii\", \"replace\")", "output": "Return the object as a ustar header block. If it cannot be\n           represented this way, prepend a pax extended header sequence\n           with supplement information.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_trial_complete(self,\n                          trial_id,\n                          result=None,\n                          error=False,\n                          early_terminated=False):\n        \"\"\"\n        \"\"\"\n        ho_trial = self._get_hyperopt_trial(trial_id)\n        if ho_trial is None:\n            return\n        ho_trial[\"refresh_time\"] = hpo.utils.coarse_utcnow()\n        if error:\n            ho_trial[\"state\"] = hpo.base.JOB_STATE_ERROR\n            ho_trial[\"misc\"][\"error\"] = (str(TuneError), \"Tune Error\")\n        elif early_terminated:\n            ho_trial[\"state\"] = hpo.base.JOB_STATE_ERROR\n            ho_trial[\"misc\"][\"error\"] = (str(TuneError), \"Tune Removed\")\n        else:\n            ho_trial[\"state\"] = hpo.base.JOB_STATE_DONE\n            hp_result = self._to_hyperopt_result(result)\n            ho_trial[\"result\"] = hp_result\n        self._hpopt_trials.refresh()\n        del self._live_trial_mapping[trial_id]", "output": "Passes the result to HyperOpt unless early terminated or errored.\n\n        The result is internally negated when interacting with HyperOpt\n        so that HyperOpt can \"maximize\" this value, as it minimizes on default.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _check_valid_label(self, label):\n        \"\"\"\"\"\"\n        if len(label.shape) != 2 or label.shape[1] < 5:\n            msg = \"Label with shape (1+, 5+) required, %s received.\" % str(label)\n            raise RuntimeError(msg)\n        valid_label = np.where(np.logical_and(label[:, 0] >= 0, label[:, 3] > label[:, 1],\n                                              label[:, 4] > label[:, 2]))[0]\n        if valid_label.size < 1:\n            raise RuntimeError('Invalid label occurs.')", "output": "Validate label and its shape.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def label_from_re(self, pat:str, full_path:bool=False, label_cls:Callable=None, **kwargs)->'LabelList':\n        \"\"\n        pat = re.compile(pat)\n        def _inner(o):\n            s = str((os.path.join(self.path,o) if full_path else o).as_posix())\n            res = pat.search(s)\n            assert res,f'Failed to find \"{pat}\" in \"{s}\"'\n            return res.group(1)\n        return self.label_from_func(_inner, label_cls=label_cls, **kwargs)", "output": "Apply the re in `pat` to determine the label of every filename.  If `full_path`, search in the full name.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def copy_dash(self, dashboard_id):\n        \"\"\"\"\"\"\n        session = db.session()\n        data = json.loads(request.form.get('data'))\n        dash = models.Dashboard()\n        original_dash = (\n            session\n            .query(models.Dashboard)\n            .filter_by(id=dashboard_id).first())\n\n        dash.owners = [g.user] if g.user else []\n        dash.dashboard_title = data['dashboard_title']\n\n        if data['duplicate_slices']:\n            # Duplicating slices as well, mapping old ids to new ones\n            old_to_new_sliceids = {}\n            for slc in original_dash.slices:\n                new_slice = slc.clone()\n                new_slice.owners = [g.user] if g.user else []\n                session.add(new_slice)\n                session.flush()\n                new_slice.dashboards.append(dash)\n                old_to_new_sliceids['{}'.format(slc.id)] = \\\n                    '{}'.format(new_slice.id)\n\n            # update chartId of layout entities\n            # in v2_dash positions json data, chartId should be integer,\n            # while in older version slice_id is string type\n            for value in data['positions'].values():\n                if (\n                    isinstance(value, dict) and value.get('meta') and\n                    value.get('meta').get('chartId')\n                ):\n                    old_id = '{}'.format(value.get('meta').get('chartId'))\n                    new_id = int(old_to_new_sliceids[old_id])\n                    value['meta']['chartId'] = new_id\n        else:\n            dash.slices = original_dash.slices\n        dash.params = original_dash.params\n\n        self._set_dash_metadata(dash, data)\n        session.add(dash)\n        session.commit()\n        dash_json = json.dumps(dash.data)\n        session.close()\n        return json_success(dash_json)", "output": "Copy dashboard", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def setNNIManagerIp(experiment_config, port, config_file_name):\n    ''''''\n    if experiment_config.get('nniManagerIp') is None:\n        return True, None\n    ip_config_dict = dict()\n    ip_config_dict['nni_manager_ip'] = { 'nniManagerIp' : experiment_config['nniManagerIp'] }\n    response = rest_put(cluster_metadata_url(port), json.dumps(ip_config_dict), REST_TIME_OUT)\n    err_message = None\n    if not response or not response.status_code == 200:\n        if response is not None:\n            err_message = response.text\n            _, stderr_full_path = get_log_path(config_file_name)\n            with open(stderr_full_path, 'a+') as fout:\n                fout.write(json.dumps(json.loads(err_message), indent=4, sort_keys=True, separators=(',', ':')))\n        return False, err_message\n    return True, None", "output": "set nniManagerIp", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def preserve_channel_dim(func):\n    \"\"\"\"\"\"\n    @wraps(func)\n    def wrapped_function(img, *args, **kwargs):\n        shape = img.shape\n        result = func(img, *args, **kwargs)\n        if len(shape) == 3 and shape[-1] == 1 and len(result.shape) == 2:\n            result = np.expand_dims(result, axis=-1)\n        return result\n\n    return wrapped_function", "output": "Preserve dummy channel dim.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rename_client_tab(self, client, given_name):\r\n        \"\"\"\"\"\"\r\n        index = self.get_client_index_from_id(id(client))\r\n\r\n        if given_name is not None:\r\n            client.given_name = given_name\r\n        self.tabwidget.setTabText(index, client.get_name())", "output": "Rename client's tab", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _add_numeric_methods_binary(cls):\n        \"\"\"\n        \n        \"\"\"\n        cls.__add__ = _make_arithmetic_op(operator.add, cls)\n        cls.__radd__ = _make_arithmetic_op(ops.radd, cls)\n        cls.__sub__ = _make_arithmetic_op(operator.sub, cls)\n        cls.__rsub__ = _make_arithmetic_op(ops.rsub, cls)\n        cls.__rpow__ = _make_arithmetic_op(ops.rpow, cls)\n        cls.__pow__ = _make_arithmetic_op(operator.pow, cls)\n\n        cls.__truediv__ = _make_arithmetic_op(operator.truediv, cls)\n        cls.__rtruediv__ = _make_arithmetic_op(ops.rtruediv, cls)\n\n        # TODO: rmod? rdivmod?\n        cls.__mod__ = _make_arithmetic_op(operator.mod, cls)\n        cls.__floordiv__ = _make_arithmetic_op(operator.floordiv, cls)\n        cls.__rfloordiv__ = _make_arithmetic_op(ops.rfloordiv, cls)\n        cls.__divmod__ = _make_arithmetic_op(divmod, cls)\n        cls.__mul__ = _make_arithmetic_op(operator.mul, cls)\n        cls.__rmul__ = _make_arithmetic_op(ops.rmul, cls)", "output": "Add in numeric methods.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def masked_max(vector: torch.Tensor,\n               mask: torch.Tensor,\n               dim: int,\n               keepdim: bool = False,\n               min_val: float = -1e7) -> torch.Tensor:\n    \"\"\"\n    \n    \"\"\"\n    one_minus_mask = (1.0 - mask).byte()\n    replaced_vector = vector.masked_fill(one_minus_mask, min_val)\n    max_value, _ = replaced_vector.max(dim=dim, keepdim=keepdim)\n    return max_value", "output": "To calculate max along certain dimensions on masked values\n\n    Parameters\n    ----------\n    vector : ``torch.Tensor``\n        The vector to calculate max, assume unmasked parts are already zeros\n    mask : ``torch.Tensor``\n        The mask of the vector. It must be broadcastable with vector.\n    dim : ``int``\n        The dimension to calculate max\n    keepdim : ``bool``\n        Whether to keep dimension\n    min_val : ``float``\n        The minimal value for paddings\n\n    Returns\n    -------\n    A ``torch.Tensor`` of including the maximum values.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def generate_parameters(self, parameter_id):\n        \"\"\"\n        \n        \"\"\"\n        if not self.history:\n            self.init_search()\n\n        new_father_id = None\n        generated_graph = None\n        if not self.training_queue:\n            new_father_id, generated_graph = self.generate()\n            new_model_id = self.model_count\n            self.model_count += 1\n            self.training_queue.append((generated_graph, new_father_id, new_model_id))\n            self.descriptors.append(generated_graph.extract_descriptor())\n\n        graph, father_id, model_id = self.training_queue.pop(0)\n\n        # from graph to json\n        json_model_path = os.path.join(self.path, str(model_id) + \".json\")\n        json_out = graph_to_json(graph, json_model_path)\n        self.total_data[parameter_id] = (json_out, father_id, model_id)\n\n        return json_out", "output": "Returns a set of trial neural architecture, as a serializable object.\n\n        Parameters\n        ----------\n        parameter_id : int", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def show_in_notebook(self,\n                         labels=None,\n                         predict_proba=True,\n                         show_predicted_value=True,\n                         **kwargs):\n        \"\"\"\"\"\"\n\n        from IPython.core.display import display, HTML\n        display(HTML(self.as_html(labels=labels,\n                                  predict_proba=predict_proba,\n                                  show_predicted_value=show_predicted_value,\n                                  **kwargs)))", "output": "Shows html explanation in ipython notebook.\n\n        See as_html() for parameters.\n        This will throw an error if you don't have IPython installed", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def load_rabit_checkpoint(self):\n        \"\"\"\n        \"\"\"\n        version = ctypes.c_int()\n        _check_call(_LIB.XGBoosterLoadRabitCheckpoint(\n            self.handle, ctypes.byref(version)))\n        return version.value", "output": "Initialize the model by load from rabit checkpoint.\n\n        Returns\n        -------\n        version: integer\n            The version number of the model.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_bulk_size(size):\n    \"\"\"\n    \"\"\"\n    prev = ctypes.c_int()\n    check_call(_LIB.MXEngineSetBulkSize(\n        ctypes.c_int(size), ctypes.byref(prev)))\n    return prev.value", "output": "Set size limit on bulk execution.\n\n    Bulk execution bundles many operators to run together.\n    This can improve performance when running a lot of small\n    operators sequentially.\n\n    Parameters\n    ----------\n    size : int\n        Maximum number of operators that can be bundled in a bulk.\n\n    Returns\n    -------\n    int\n        Previous bulk size.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def getConf(self, key, defaultValue=_NoValue):\n        \"\"\"\n        \"\"\"\n        return self.sparkSession.conf.get(key, defaultValue)", "output": "Returns the value of Spark SQL configuration property for the given key.\n\n        If the key is not set and defaultValue is set, return\n        defaultValue. If the key is not set and defaultValue is not set, return\n        the system default value.\n\n        >>> sqlContext.getConf(\"spark.sql.shuffle.partitions\")\n        u'200'\n        >>> sqlContext.getConf(\"spark.sql.shuffle.partitions\", u\"10\")\n        u'10'\n        >>> sqlContext.setConf(\"spark.sql.shuffle.partitions\", u\"50\")\n        >>> sqlContext.getConf(\"spark.sql.shuffle.partitions\", u\"10\")\n        u'50'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def attr(self, key):\n        \"\"\"\n        \"\"\"\n        ret = ctypes.c_char_p()\n        success = ctypes.c_int()\n        _check_call(_LIB.XGBoosterGetAttr(\n            self.handle, c_str(key), ctypes.byref(ret), ctypes.byref(success)))\n        if success.value != 0:\n            return py_str(ret.value)\n        return None", "output": "Get attribute string from the Booster.\n\n        Parameters\n        ----------\n        key : str\n            The key to get attribute from.\n\n        Returns\n        -------\n        value : str\n            The attribute value of the key, returns None if attribute do not exist.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def port_policy_present(name, sel_type, protocol=None, port=None, sel_range=None):\n    '''\n    \n    '''\n    ret = {'name': name, 'result': False, 'changes': {}, 'comment': ''}\n    old_state = __salt__['selinux.port_get_policy'](\n        name=name,\n        sel_type=sel_type,\n        protocol=protocol,\n        port=port, )\n    if old_state:\n        ret.update({'result': True,\n                    'comment': 'SELinux policy for \"{0}\" already present '.format(name) +\n                               'with specified sel_type \"{0}\", protocol \"{1}\" and port \"{2}\".'.format(\n                                   sel_type, protocol, port)})\n        return ret\n    if __opts__['test']:\n        ret.update({'result': None})\n    else:\n        add_ret = __salt__['selinux.port_add_policy'](\n            name=name,\n            sel_type=sel_type,\n            protocol=protocol,\n            port=port,\n            sel_range=sel_range, )\n        if add_ret['retcode'] != 0:\n            ret.update({'comment': 'Error adding new policy: {0}'.format(add_ret)})\n        else:\n            ret.update({'result': True})\n            new_state = __salt__['selinux.port_get_policy'](\n                name=name,\n                sel_type=sel_type,\n                protocol=protocol,\n                port=port, )\n            ret['changes'].update({'old': old_state, 'new': new_state})\n    return ret", "output": ".. versionadded:: 2019.2.0\n\n    Makes sure an SELinux port policy for a given port, protocol and SELinux context type is present.\n\n    name\n        The protocol and port spec. Can be formatted as ``(tcp|udp)/(port|port-range)``.\n\n    sel_type\n        The SELinux Type.\n\n    protocol\n        The protocol for the port, ``tcp`` or ``udp``. Required if name is not formatted.\n\n    port\n        The port or port range. Required if name is not formatted.\n\n    sel_range\n        The SELinux MLS/MCS Security Range.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def wait(name, ignore_already_stopped=False, fail_on_exit_status=False):\n    '''\n    \n    '''\n    try:\n        pre = state(name)\n    except CommandExecutionError:\n        # Container doesn't exist anymore\n        return {'result': ignore_already_stopped,\n                'comment': 'Container \\'{0}\\' absent'.format(name)}\n    already_stopped = pre == 'stopped'\n    response = _client_wrapper('wait', name)\n    _clear_context()\n    try:\n        post = state(name)\n    except CommandExecutionError:\n        # Container doesn't exist anymore\n        post = None\n\n    if already_stopped:\n        success = ignore_already_stopped\n    elif post == 'stopped':\n        success = True\n    else:\n        success = False\n\n    result = {'result': success,\n              'state': {'old': pre, 'new': post},\n              'exit_status': response}\n    if already_stopped:\n        result['comment'] = 'Container \\'{0}\\' already stopped'.format(name)\n    if fail_on_exit_status and result['result']:\n        result['result'] = result['exit_status'] == 0\n    return result", "output": "Wait for the container to exit gracefully, and return its exit code\n\n    .. note::\n\n        This function will block until the container is stopped.\n\n    name\n        Container name or ID\n\n    ignore_already_stopped\n        Boolean flag that prevents execution to fail, if a container\n        is already stopped.\n\n    fail_on_exit_status\n        Boolean flag to report execution as failure if ``exit_status``\n        is different than 0.\n\n    **RETURN DATA**\n\n    A dictionary will be returned, containing the following keys:\n\n    - ``status`` - A dictionary showing the prior state of the container as\n      well as the new state\n    - ``result`` - A boolean noting whether or not the action was successful\n    - ``exit_status`` - Exit status for the container\n    - ``comment`` - Only present if the container is already stopped\n\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion docker.wait mycontainer", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set_(key, value, profile=None):\n    '''\n    \n    '''\n    db = _get_db(profile)\n    return db.save({'_id': uuid4().hex, key: value})", "output": "Set a key/value pair in couchdb", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _add_existing_weight(self, weight, trainable=None):\n    \"\"\"\"\"\"\n    if trainable is None: trainable = weight.trainable\n    self.add_weight(name=weight.name, shape=weight.shape, dtype=weight.dtype,\n                    trainable=trainable, getter=lambda *_, **__: weight)", "output": "Calls add_weight() to register but not create an existing weight.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_to_distribution(dist):\n    \"\"\"\"\"\"\n    try:\n        dist.add_qt_bindings()\n    except AttributeError:\n        raise ImportError(\"This script requires guidata 1.5+\")\n    for _modname in ('spyder', 'spyderplugins'):\n        dist.add_module_data_files(_modname, (\"\", ),\n                                   ('.png', '.svg', '.html', '.png', '.txt',\n                                    '.js', '.inv', '.ico', '.css', '.doctree',\n                                    '.qm', '.py',),\n                                   copy_to_root=False)", "output": "Add package to py2exe/cx_Freeze distribution object\n    Extension to guidata.disthelpers", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _reset_bind(self):\n        \"\"\"\"\"\"\n        self.binded = False\n        self._exec_group = None\n        self._data_shapes = None\n        self._label_shapes = None", "output": "Internal function to reset binded state.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def xpathNextFollowing(self, cur):\n        \"\"\" \"\"\"\n        if cur is None: cur__o = None\n        else: cur__o = cur._o\n        ret = libxml2mod.xmlXPathNextFollowing(self._o, cur__o)\n        if ret is None:raise xpathError('xmlXPathNextFollowing() failed')\n        __tmp = xmlNode(_obj=ret)\n        return __tmp", "output": "Traversal function for the \"following\" direction The\n          following axis contains all nodes in the same document as\n          the context node that are after the context node in\n          document order, excluding any descendants and excluding\n          attribute nodes and namespace nodes; the nodes are ordered\n           in document order", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def sample_view(min_dist, max_dist=None):\n  '''\n  '''\n  if max_dist is None:\n    max_dist = min_dist\n  dist = np.random.uniform(min_dist, max_dist)\n  eye = np.random.normal(size=3)\n  eye = normalize(eye)*dist\n  return lookat(eye)", "output": "Sample random camera position.\n  \n  Sample origin directed camera position in given distance\n  range from the origin. ModelView matrix is returned.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _update_expression_reference(self, # pylint: disable=no-self-use\n                                     grammar: Grammar,\n                                     parent_expression_nonterminal: str,\n                                     child_expression_nonterminal: str) -> None:\n        \"\"\"\n        \n        \"\"\"\n        grammar[parent_expression_nonterminal].members = \\\n                [member if member.name != child_expression_nonterminal\n                 else grammar[child_expression_nonterminal]\n                 for member in grammar[parent_expression_nonterminal].members]", "output": "When we add a new expression, there may be other expressions that refer to\n        it, and we need to update those to point to the new expression.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def local_attention2d_spatial_decoder(x, kv_dim, heads_dim,\n                                      feedforward_dim, hparams):\n  \"\"\"\"\"\"\n  batch_dim, length_dim, model_dim = x.shape.dims\n  blocks_h_dim = mtf.Dimension(\"blocksh\", hparams.block_height)\n  blocks_w_dim = mtf.Dimension(\"blocksw\", hparams.block_width)\n  num_h_blocks_dim = mtf.Dimension(\"num_h_blocks\",\n                                   hparams.img_len // hparams.block_height)\n  num_w_blocks_dim = mtf.Dimension(\n      \"num_w_blocks\",\n      hparams.img_len * hparams.num_channels // hparams.block_width)\n  x = mtf.transpose(\n      mtf.reshape(\n          x,\n          mtf.Shape([\n              batch_dim, num_h_blocks_dim, blocks_h_dim,\n              num_w_blocks_dim, blocks_w_dim, model_dim\n          ])),\n      mtf.Shape([\n          batch_dim, num_h_blocks_dim, num_w_blocks_dim,\n          blocks_h_dim, blocks_w_dim, model_dim\n      ]))\n  # Image Transformer Decoder\n  # [ self attention - ffn - residual + dropout] x n\n  for layer in range(hparams.num_decoder_layers):\n    layer_name = \"decoder_layer_%d\" % layer\n    with tf.variable_scope(layer_name):\n      # Self attention layer\n      x += layer_prepostprocess_dropout(\n          mtf.layers.local_2d_self_attention_spatial_blocks(\n              mtf.layers.layer_norm(x, model_dim, name=\"layer_norm_att\"),\n              kv_dim,\n              heads_dim,\n              memory_h_dim=num_h_blocks_dim,\n              memory_w_dim=num_w_blocks_dim,\n              name=\"self_att\"), hparams)\n      # ffn layer\n      x += layer_prepostprocess_dropout(\n          mtf.layers.dense_relu_dense(\n              mtf.layers.layer_norm(x, model_dim, name=\"layer_norm_ffn\"),\n              feedforward_dim,\n              hparams.dropout,\n              dropout_broadcast_dims=[length_dim]), hparams)\n\n  output = mtf.layers.layer_norm(x, model_dim, name=\"final_layer_norm\")\n  return output", "output": "Image Transformer decoder with local2D spatial layers.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _find_image(name):\n    '''\n    \n    '''\n    try:\n        images = __salt__['glance.image_list'](name=name)\n    except kstone_Unauthorized:\n        return False, 'keystoneclient: Unauthorized'\n    except glance_Unauthorized:\n        return False, 'glanceclient: Unauthorized'\n    log.debug('Got images: %s', images)\n\n    if type(images) is dict and len(images) == 1 and 'images' in images:\n        images = images['images']\n\n    images_list = images.values() if type(images) is dict else images\n\n    if not images_list:\n        return None, 'No image with name \"{0}\"'.format(name)\n    elif len(images_list) == 1:\n        return images_list[0], 'Found image {0}'.format(name)\n    elif len(images_list) > 1:\n        return False, 'Found more than one image with given name'\n    else:\n        raise NotImplementedError", "output": "Tries to find image with given name, returns\n        - image, 'Found image <name>'\n        - None, 'No such image found'\n        - False, 'Found more than one image with given name'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def close(self):\n        \"\"\"\n        \"\"\"\n        if self._closed:\n            return\n\n        await self.http.close()\n        self._closed = True\n\n        for voice in self.voice_clients:\n            try:\n                await voice.disconnect()\n            except Exception:\n                # if an error happens during disconnects, disregard it.\n                pass\n\n        if self.ws is not None and self.ws.open:\n            await self.ws.close()\n\n        self._ready.clear()", "output": "|coro|\n\n        Closes the connection to discord.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _write_file_ifaces(iface, data, **settings):\n    '''\n    \n    '''\n    try:\n        eth_template = JINJA.get_template('debian_eth.jinja')\n        source_template = JINJA.get_template('debian_source.jinja')\n    except jinja2.exceptions.TemplateNotFound:\n        log.error('Could not load template debian_eth.jinja')\n        return ''\n\n    # Read /etc/network/interfaces into a dict\n    adapters = _parse_interfaces()\n    # Apply supplied settings over on-disk settings\n    adapters[iface] = data\n\n    ifcfg = ''\n    for adapter in adapters:\n        if 'type' in adapters[adapter] and adapters[adapter]['type'] == 'source':\n            tmp = source_template.render({'name': adapter, 'data': adapters[adapter]})\n        else:\n            tmp = eth_template.render({'name': adapter, 'data': adapters[adapter]})\n        ifcfg = ifcfg + tmp\n        if adapter == iface:\n            saved_ifcfg = tmp\n\n    _SEPARATE_FILE = False\n    if 'filename' in settings:\n        if not settings['filename'].startswith('/'):\n            filename = '{0}/{1}'.format(_DEB_NETWORK_DIR, settings['filename'])\n        else:\n            filename = settings['filename']\n        _SEPARATE_FILE = True\n    else:\n        if 'filename' in adapters[adapter]['data']:\n            filename = adapters[adapter]['data']\n        else:\n            filename = _DEB_NETWORK_FILE\n\n    if not os.path.exists(os.path.dirname(filename)):\n        msg = '{0} cannot be written.'\n        msg = msg.format(os.path.dirname(filename))\n        log.error(msg)\n        raise AttributeError(msg)\n    with salt.utils.files.flopen(filename, 'w') as fout:\n        if _SEPARATE_FILE:\n            fout.write(salt.utils.stringutils.to_str(saved_ifcfg))\n        else:\n            fout.write(salt.utils.stringutils.to_str(ifcfg))\n\n    # Return as an array so the difflib works\n    return saved_ifcfg.split('\\n')", "output": "Writes a file to disk", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def create_namespaced_pod_preset(self, namespace, body, **kwargs):\n        \"\"\"\n        \n        \"\"\"\n        kwargs['_return_http_data_only'] = True\n        if kwargs.get('async_req'):\n            return self.create_namespaced_pod_preset_with_http_info(namespace, body, **kwargs)\n        else:\n            (data) = self.create_namespaced_pod_preset_with_http_info(namespace, body, **kwargs)\n            return data", "output": "create a PodPreset\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.create_namespaced_pod_preset(namespace, body, async_req=True)\n        >>> result = thread.get()\n\n        :param async_req bool\n        :param str namespace: object name and auth scope, such as for teams and projects (required)\n        :param V1alpha1PodPreset body: (required)\n        :param str pretty: If 'true', then the output is pretty printed.\n        :param str dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed\n        :param str field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.\n        :return: V1alpha1PodPreset\n                 If the method is called asynchronously,\n                 returns the request thread.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mask_zero_div_zero(x, y, result, copy=False):\n    \"\"\"\n    \n    \"\"\"\n    if is_scalar(y):\n        y = np.array(y)\n\n    zmask = y == 0\n    if zmask.any():\n        shape = result.shape\n\n        nan_mask = (zmask & (x == 0)).ravel()\n        neginf_mask = (zmask & (x < 0)).ravel()\n        posinf_mask = (zmask & (x > 0)).ravel()\n\n        if nan_mask.any() or neginf_mask.any() or posinf_mask.any():\n            # Fill negative/0 with -inf, positive/0 with +inf, 0/0 with NaN\n            result = result.astype('float64', copy=copy).ravel()\n\n            np.putmask(result, nan_mask, np.nan)\n            np.putmask(result, posinf_mask, np.inf)\n            np.putmask(result, neginf_mask, -np.inf)\n\n            result = result.reshape(shape)\n\n    return result", "output": "Set results of 0 / 0 or 0 // 0 to np.nan, regardless of the dtypes\n    of the numerator or the denominator.\n\n    Parameters\n    ----------\n    x : ndarray\n    y : ndarray\n    result : ndarray\n    copy : bool (default False)\n        Whether to always create a new array or try to fill in the existing\n        array if possible.\n\n    Returns\n    -------\n    filled_result : ndarray\n\n    Examples\n    --------\n    >>> x = np.array([1, 0, -1], dtype=np.int64)\n    >>> y = 0       # int 0; numpy behavior is different with float\n    >>> result = x / y\n    >>> result      # raw numpy result does not fill division by zero\n    array([0, 0, 0])\n    >>> mask_zero_div_zero(x, y, result)\n    array([ inf,  nan, -inf])", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def max_date(self, rows: List[Row], column: DateColumn) -> Date:\n        \"\"\"\n        \n        \"\"\"\n        cell_values = [row.values[column.name] for row in rows]\n        if not cell_values:\n            return Date(-1, -1, -1)\n        if not all([isinstance(value, Date) for value in cell_values]):\n            raise ExecutionError(f\"Invalid values for date selection function: {cell_values}\")\n        return max(cell_values)", "output": "Takes a list of rows and a column and returns the max of the values under that column in\n        those rows.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "async def delete_invite(self, invite):\n        \"\"\"\n        \"\"\"\n\n        invite_id = utils.resolve_invite(invite)\n        await self.http.delete_invite(invite_id)", "output": "|coro|\n\n        Revokes an :class:`.Invite`, URL, or ID to an invite.\n\n        You must have the :attr:`~.Permissions.manage_channels` permission in\n        the associated guild to do this.\n\n        Parameters\n        ----------\n        invite: Union[:class:`.Invite`, :class:`str`]\n            The invite to revoke.\n\n        Raises\n        -------\n        Forbidden\n            You do not have permissions to revoke invites.\n        NotFound\n            The invite is invalid or expired.\n        HTTPException\n            Revoking the invite failed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _adorn_subplots(self):\n        \"\"\"\"\"\"\n        if len(self.axes) > 0:\n            all_axes = self._get_subplots()\n            nrows, ncols = self._get_axes_layout()\n            _handle_shared_axes(axarr=all_axes, nplots=len(all_axes),\n                                naxes=nrows * ncols, nrows=nrows,\n                                ncols=ncols, sharex=self.sharex,\n                                sharey=self.sharey)\n\n        for ax in self.axes:\n            if self.yticks is not None:\n                ax.set_yticks(self.yticks)\n\n            if self.xticks is not None:\n                ax.set_xticks(self.xticks)\n\n            if self.ylim is not None:\n                ax.set_ylim(self.ylim)\n\n            if self.xlim is not None:\n                ax.set_xlim(self.xlim)\n\n            ax.grid(self.grid)\n\n        if self.title:\n            if self.subplots:\n                if is_list_like(self.title):\n                    if len(self.title) != self.nseries:\n                        msg = ('The length of `title` must equal the number '\n                               'of columns if using `title` of type `list` '\n                               'and `subplots=True`.\\n'\n                               'length of title = {}\\n'\n                               'number of columns = {}').format(\n                            len(self.title), self.nseries)\n                        raise ValueError(msg)\n\n                    for (ax, title) in zip(self.axes, self.title):\n                        ax.set_title(title)\n                else:\n                    self.fig.suptitle(self.title)\n            else:\n                if is_list_like(self.title):\n                    msg = ('Using `title` of type `list` is not supported '\n                           'unless `subplots=True` is passed')\n                    raise ValueError(msg)\n                self.axes[0].set_title(self.title)", "output": "Common post process unrelated to data", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def list(self, parts: Any) -> str:\n        \"\"\"\n        \"\"\"\n        _ = self.translate\n        if len(parts) == 0:\n            return \"\"\n        if len(parts) == 1:\n            return parts[0]\n        comma = u\" \\u0648 \" if self.code.startswith(\"fa\") else u\", \"\n        return _(\"%(commas)s and %(last)s\") % {\n            \"commas\": comma.join(parts[:-1]),\n            \"last\": parts[len(parts) - 1],\n        }", "output": "Returns a comma-separated list for the given list of parts.\n\n        The format is, e.g., \"A, B and C\", \"A and B\" or just \"A\" for lists\n        of size 1.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def htmlNewDocNoDtD(URI, ExternalID):\n    \"\"\" \"\"\"\n    ret = libxml2mod.htmlNewDocNoDtD(URI, ExternalID)\n    if ret is None:raise treeError('htmlNewDocNoDtD() failed')\n    return xmlDoc(_obj=ret)", "output": "Creates a new HTML document without a DTD node if @URI and\n       @ExternalID are None", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_resource_attribute(self, attr):\n        \"\"\"\n        \"\"\"\n        if attr not in self.resource_attributes:\n            raise KeyError(\"%s is not in resource attributes\" % attr)\n\n        return self.resource_attributes[attr]", "output": "Gets the resource attribute if available\n\n        :param attr: Name of the attribute\n        :return: Value of the attribute, if set in the resource. None otherwise", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def log_proto(self, message, **kw):\n        \"\"\"\n        \"\"\"\n        self.entries.append(ProtobufEntry(payload=message, **kw))", "output": "Add a protobuf entry to be logged during :meth:`commit`.\n\n        :type message: protobuf message\n        :param message: the protobuf entry\n\n        :type kw: dict\n        :param kw: (optional) additional keyword arguments for the entry.\n                   See :class:`~google.cloud.logging.entries.LogEntry`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def proxy_type(v):\n    \"\"\"  \"\"\"\n    proxies = []\n    if re.match(r\"((http|socks5):\\/\\/.)?(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}):(\\d{1,5})\", v):\n        proxies.append({\"http\": v,\n                        \"https\": v})\n        return proxies\n    elif re.match(r\"((http|socks5):\\/\\/.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}:(\\d{1,5})\", v):\n        proxies.append({\"http\": v,\n                        \"https\": v})\n        return proxies\n    elif is_proxy_list(v, proxies):\n        return proxies\n    else:\n        raise argparse.ArgumentTypeError(\n            \"Proxy should follow IP:PORT or DOMAIN:PORT format\")", "output": "Match IP:PORT or DOMAIN:PORT in a losse manner", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get(key, default=None):\n    '''\n    \n    '''\n    store = load()\n\n    if isinstance(key, six.string_types):\n        return store.get(key, default)\n    elif default is None:\n        return [store[k] for k in key if k in store]\n    else:\n        return [store.get(k, default) for k in key]", "output": "Get a (list of) value(s) from the minion datastore\n\n    .. versionadded:: 2015.8.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' data.get key\n        salt '*' data.get '[\"key1\", \"key2\"]'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def nearest_neighbor(self, x, means):\n    \"\"\"\n    \"\"\"\n    x_norm_sq = tf.reduce_sum(tf.square(x), axis=-1, keep_dims=True)\n    means_norm_sq = tf.reduce_sum(tf.square(means), axis=-1, keep_dims=True)\n    scalar_prod = tf.matmul(\n        tf.transpose(x, perm=[1, 0, 2]), tf.transpose(means, perm=[0, 2, 1]))\n    scalar_prod = tf.transpose(scalar_prod, perm=[1, 0, 2])\n    dist = x_norm_sq + tf.transpose(\n        means_norm_sq, perm=[2, 0, 1]) - 2 * scalar_prod\n\n    if self.hparams.soft_em:\n      nearest_idx = tf.stack(\n          [\n              tf.multinomial(\n                  -dist[:, i, :], num_samples=self.hparams.num_samples)\n              for i in range(self.hparams.num_blocks)\n          ],\n          axis=1)\n      nearest_hot = tf.one_hot(nearest_idx, depth=self.hparams.block_v_size)\n      nearest_hot = tf.reduce_mean(nearest_hot, axis=-2)\n    else:\n      if self.hparams.random_top_k > 1:\n        _, top_k_idx = tf.nn.top_k(-dist, k=self.hparams.random_top_k)\n        nearest_idx = tf.gather(\n            top_k_idx,\n            tf.random_uniform(\n                [1],\n                minval=0,\n                maxval=self.hparams.random_top_k - 1,\n                dtype=tf.int32),\n            axis=-1)\n      else:\n        if self.hparams.use_scales:\n          dist /= tf.reshape(self.hparams.scales,\n                             [1, 1, self.hparams.moe_num_experts])\n        nearest_idx = tf.argmax(-dist, axis=-1)\n      nearest_hot = tf.one_hot(nearest_idx, self.hparams.block_v_size)\n    return nearest_hot", "output": "Find the nearest element in means to elements in x.\n\n    Args:\n        x: Batch of encoder continuous latent states sliced/projected into\n           shape [-1, num_blocks, block_dim].\n        means: Embedding means of shape.\n\n    Returns:\n      Tensor with nearest element in mean encoded in one-hot notation.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def as_objective(obj):\n  \"\"\"\n  \"\"\"\n  if isinstance(obj, Objective):\n    return obj\n  elif callable(obj):\n    return obj\n  elif isinstance(obj, str):\n    layer, n = obj.split(\":\")\n    layer, n = layer.strip(), int(n)\n    return channel(layer, n)", "output": "Convert obj into Objective class.\n\n  Strings of the form \"layer:n\" become the Objective channel(layer, n).\n  Objectives are returned unchanged.\n\n  Args:\n    obj: string or Objective.\n\n  Returns:\n    Objective", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def execute_only_once():\n    \"\"\"\n    \n    \"\"\"\n    f = inspect.currentframe().f_back\n    ident = (f.f_code.co_filename, f.f_lineno)\n    if ident in _EXECUTE_HISTORY:\n        return False\n    _EXECUTE_HISTORY.add(ident)\n    return True", "output": "Each called in the code to this function is guaranteed to return True the\n    first time and False afterwards.\n\n    Returns:\n        bool: whether this is the first time this function gets called from this line of code.\n\n    Example:\n        .. code-block:: python\n\n            if execute_only_once():\n                # do something only once", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def task_absent(name):\n    '''\n    \n    '''\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n\n    task = __salt__['kapacitor.get_task'](name)\n\n    if task:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Task would have been deleted'\n        else:\n            result = __salt__['kapacitor.delete_task'](name)\n            ret['result'] = result['success']\n            if not ret['result']:\n                ret['comment'] = 'Could not disable task'\n                if result.get('stderr'):\n                    ret['comment'] += '\\n' + result['stderr']\n                return ret\n            ret['comment'] = 'Task was deleted'\n        ret['changes'][name] = 'deleted'\n    else:\n        ret['comment'] = 'Task does not exist'\n\n    return ret", "output": "Ensure that a task is absent from Kapacitor.\n\n    name\n        Name of the task.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def combine_concat_plans(plans, concat_axis):\n    \"\"\"\n    \n    \"\"\"\n    if len(plans) == 1:\n        for p in plans[0]:\n            yield p[0], [p[1]]\n\n    elif concat_axis == 0:\n        offset = 0\n        for plan in plans:\n            last_plc = None\n\n            for plc, unit in plan:\n                yield plc.add(offset), [unit]\n                last_plc = plc\n\n            if last_plc is not None:\n                offset += last_plc.as_slice.stop\n\n    else:\n        num_ended = [0]\n\n        def _next_or_none(seq):\n            retval = next(seq, None)\n            if retval is None:\n                num_ended[0] += 1\n            return retval\n\n        plans = list(map(iter, plans))\n        next_items = list(map(_next_or_none, plans))\n\n        while num_ended[0] != len(next_items):\n            if num_ended[0] > 0:\n                raise ValueError(\"Plan shapes are not aligned\")\n\n            placements, units = zip(*next_items)\n\n            lengths = list(map(len, placements))\n            min_len, max_len = min(lengths), max(lengths)\n\n            if min_len == max_len:\n                yield placements[0], units\n                next_items[:] = map(_next_or_none, plans)\n            else:\n                yielded_placement = None\n                yielded_units = [None] * len(next_items)\n                for i, (plc, unit) in enumerate(next_items):\n                    yielded_units[i] = unit\n                    if len(plc) > min_len:\n                        # trim_join_unit updates unit in place, so only\n                        # placement needs to be sliced to skip min_len.\n                        next_items[i] = (plc[min_len:],\n                                         trim_join_unit(unit, min_len))\n                    else:\n                        yielded_placement = plc\n                        next_items[i] = _next_or_none(plans[i])\n\n                yield yielded_placement, yielded_units", "output": "Combine multiple concatenation plans into one.\n\n    existing_plan is updated in-place.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def zfill(self, width):\n        \"\"\"\n        \n        \"\"\"\n        result = str_pad(self._parent, width, side='left', fillchar='0')\n        return self._wrap_result(result)", "output": "Pad strings in the Series/Index by prepending '0' characters.\n\n        Strings in the Series/Index are padded with '0' characters on the\n        left of the string to reach a total string length  `width`. Strings\n        in the Series/Index with length greater or equal to `width` are\n        unchanged.\n\n        Parameters\n        ----------\n        width : int\n            Minimum length of resulting string; strings with length less\n            than `width` be prepended with '0' characters.\n\n        Returns\n        -------\n        Series/Index of objects\n\n        See Also\n        --------\n        Series.str.rjust : Fills the left side of strings with an arbitrary\n            character.\n        Series.str.ljust : Fills the right side of strings with an arbitrary\n            character.\n        Series.str.pad : Fills the specified sides of strings with an arbitrary\n            character.\n        Series.str.center : Fills boths sides of strings with an arbitrary\n            character.\n\n        Notes\n        -----\n        Differs from :meth:`str.zfill` which has special handling\n        for '+'/'-' in the string.\n\n        Examples\n        --------\n        >>> s = pd.Series(['-1', '1', '1000', 10, np.nan])\n        >>> s\n        0      -1\n        1       1\n        2    1000\n        3      10\n        4     NaN\n        dtype: object\n\n        Note that ``10`` and ``NaN`` are not strings, therefore they are\n        converted to ``NaN``. The minus sign in ``'-1'`` is treated as a\n        regular character and the zero is added to the left of it\n        (:meth:`str.zfill` would have moved it to the left). ``1000``\n        remains unchanged as it is longer than `width`.\n\n        >>> s.str.zfill(3)\n        0     0-1\n        1     001\n        2    1000\n        3     NaN\n        4     NaN\n        dtype: object", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _combine_args(self):\n        \"\"\"\n        \"\"\"\n        child_path = self._parse_path(self._flat_path)\n\n        if self._parent is not None:\n            if self._parent.is_partial:\n                raise ValueError(\"Parent key must be complete.\")\n\n            # We know that _parent.path() will return a copy.\n            child_path = self._parent.path + child_path\n            self._flat_path = self._parent.flat_path + self._flat_path\n            if (\n                self._namespace is not None\n                and self._namespace != self._parent.namespace\n            ):\n                raise ValueError(\"Child namespace must agree with parent's.\")\n            self._namespace = self._parent.namespace\n            if self._project is not None and self._project != self._parent.project:\n                raise ValueError(\"Child project must agree with parent's.\")\n            self._project = self._parent.project\n\n        return child_path", "output": "Sets protected data by combining raw data set from the constructor.\n\n        If a ``_parent`` is set, updates the ``_flat_path`` and sets the\n        ``_namespace`` and ``_project`` if not already set.\n\n        :rtype: :class:`list` of :class:`dict`\n        :returns: A list of key parts with kind and ID or name set.\n        :raises: :class:`ValueError` if the parent key is not complete.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __interact_writen(self, fd, data):\n        '''\n        '''\n\n        while data != b'' and self.isalive():\n            n = os.write(fd, data)\n            data = data[n:]", "output": "This is used by the interact() method.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def user_create(alias, passwd, usrgrps, **kwargs):\n    '''\n    \n    '''\n    conn_args = _login(**kwargs)\n    ret = {}\n    try:\n        if conn_args:\n            method = 'user.create'\n            params = {\"alias\": alias, \"passwd\": passwd, \"usrgrps\": []}\n            # User groups\n            if not isinstance(usrgrps, list):\n                usrgrps = [usrgrps]\n            for usrgrp in usrgrps:\n                params['usrgrps'].append({\"usrgrpid\": usrgrp})\n\n            params = _params_extend(params, _ignore_name=True, **kwargs)\n            ret = _query(method, params, conn_args['url'], conn_args['auth'])\n            return ret['result']['userids']\n        else:\n            raise KeyError\n    except KeyError:\n        return ret", "output": ".. versionadded:: 2016.3.0\n\n    Create new zabbix user\n\n    .. note::\n        This function accepts all standard user properties: keyword argument\n        names differ depending on your zabbix version, see here__.\n\n        .. __: https://www.zabbix.com/documentation/2.0/manual/appendix/api/user/definitions#user\n\n    :param alias: user alias\n    :param passwd: user's password\n    :param usrgrps: user groups to add the user to\n\n    :param _connection_user: zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: url of zabbix frontend (can also be set in opts or pillar, see module's docstring)\n\n    :param firstname: string with firstname of the user, use 'firstname' instead of 'name' parameter to not mess\n                      with value supplied from Salt sls file.\n\n    :return: On success string with id of the created user.\n\n    CLI Example:\n    .. code-block:: bash\n\n        salt '*' zabbix.user_create james password007 '[7, 12]' firstname='James Bond'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def translate_bytes(val):\n    '''\n    \n    '''\n    try:\n        val = int(val)\n    except (TypeError, ValueError):\n        if not isinstance(val, six.string_types):\n            val = six.text_type(val)\n    return val", "output": "These values can be expressed as an integer number of bytes, or a string\n    expression (i.e. 100mb, 1gb, etc.).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def addlist(self, key, valuelist=[]):\n        \"\"\"\n        \n        \"\"\"\n        for value in valuelist:\n            self.add(key, value)\n        return self", "output": "Add the values in <valuelist> to the list of values for <key>. If <key>\n        is not in the dictionary, the values in <valuelist> become the values\n        for <key>.\n\n        Example:\n          omd = omdict([(1,1)])\n          omd.addlist(1, [11, 111])\n          omd.allitems() == [(1, 1), (1, 11), (1, 111)]\n          omd.addlist(2, [2])\n          omd.allitems() == [(1, 1), (1, 11), (1, 111), (2, 2)]\n\n        Returns: <self>.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def add_trial(self, name, specification):\n        \"\"\"\"\"\"\n        payload = {\"name\": name, \"spec\": specification}\n        response = requests.post(urljoin(self._path, \"trials\"), json=payload)\n        return self._deserialize(response)", "output": "Adds a trial by name and specification (dict).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _init_from_dt(self, data, nthread):\n        \"\"\"\n        \n        \"\"\"\n        ptrs = (ctypes.c_void_p * data.ncols)()\n        if hasattr(data, \"internal\") and hasattr(data.internal, \"column\"):\n            # datatable>0.8.0\n            for icol in range(data.ncols):\n                col = data.internal.column(icol)\n                ptr = col.data_pointer\n                ptrs[icol] = ctypes.c_void_p(ptr)\n        else:\n            # datatable<=0.8.0\n            from datatable.internal import frame_column_data_r  # pylint: disable=no-name-in-module,import-error\n            for icol in range(data.ncols):\n                ptrs[icol] = frame_column_data_r(data, icol)\n\n        # always return stypes for dt ingestion\n        feature_type_strings = (ctypes.c_char_p * data.ncols)()\n        for icol in range(data.ncols):\n            feature_type_strings[icol] = ctypes.c_char_p(data.stypes[icol].name.encode('utf-8'))\n\n        handle = ctypes.c_void_p()\n        _check_call(_LIB.XGDMatrixCreateFromDT(\n            ptrs, feature_type_strings,\n            c_bst_ulong(data.shape[0]),\n            c_bst_ulong(data.shape[1]),\n            ctypes.byref(handle),\n            nthread))\n        self.handle = handle", "output": "Initialize data from a datatable Frame.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def pandas_dtype(dtype):\n    \"\"\"\n    \n    \"\"\"\n    # short-circuit\n    if isinstance(dtype, np.ndarray):\n        return dtype.dtype\n    elif isinstance(dtype, (np.dtype, PandasExtensionDtype, ExtensionDtype)):\n        return dtype\n\n    # registered extension types\n    result = registry.find(dtype)\n    if result is not None:\n        return result\n\n    # try a numpy dtype\n    # raise a consistent TypeError if failed\n    try:\n        npdtype = np.dtype(dtype)\n    except Exception:\n        # we don't want to force a repr of the non-string\n        if not isinstance(dtype, str):\n            raise TypeError(\"data type not understood\")\n        raise TypeError(\"data type '{}' not understood\".format(\n            dtype))\n\n    # Any invalid dtype (such as pd.Timestamp) should raise an error.\n    # np.dtype(invalid_type).kind = 0 for such objects. However, this will\n    # also catch some valid dtypes such as object, np.object_ and 'object'\n    # which we safeguard against by catching them earlier and returning\n    # np.dtype(valid_dtype) before this condition is evaluated.\n    if is_hashable(dtype) and dtype in [object, np.object_, 'object', 'O']:\n        # check hashability to avoid errors/DeprecationWarning when we get\n        # here and `dtype` is an array\n        return npdtype\n    elif npdtype.kind == 'O':\n        raise TypeError(\"dtype '{}' not understood\".format(dtype))\n\n    return npdtype", "output": "Convert input into a pandas only dtype object or a numpy dtype object.\n\n    Parameters\n    ----------\n    dtype : object to be converted\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Raises\n    ------\n    TypeError if not a dtype", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init_optimizer(self, kvstore='local', optimizer='sgd',\n                       optimizer_params=(('learning_rate', 0.01),),\n                       force_init=False):\n        \"\"\"\n        \"\"\"\n        assert self.binded and self.params_initialized\n        if self.optimizer_initialized and not force_init:\n            self.logger.warning('optimizer already initialized, ignoring.')\n            return\n\n        for module in self._modules:\n            module.init_optimizer(kvstore=kvstore, optimizer=optimizer,\n                                  optimizer_params=optimizer_params, force_init=force_init)\n\n        self.optimizer_initialized = True", "output": "Installs and initializes optimizers.\n\n        Parameters\n        ----------\n        kvstore : str or KVStore\n            Default `'local'`.\n        optimizer : str or Optimizer\n            Default `'sgd'`\n        optimizer_params : dict\n            Default ``(('learning_rate', 0.01),)``. The default value is not a dictionary,\n            just to avoid pylint warning of dangerous default values.\n        force_init : bool\n            Default ``False``, indicating whether we should force re-initializing the\n            optimizer in the case an optimizer is already installed.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def join_options(options):\n    \"\"\"\n    \"\"\"\n    rv = []\n    any_prefix_is_slash = False\n    for opt in options:\n        prefix = split_opt(opt)[0]\n        if prefix == '/':\n            any_prefix_is_slash = True\n        rv.append((len(prefix), opt))\n\n    rv.sort(key=lambda x: x[0])\n\n    rv = ', '.join(x[1] for x in rv)\n    return rv, any_prefix_is_slash", "output": "Given a list of option strings this joins them in the most appropriate\n    way and returns them in the form ``(formatted_string,\n    any_prefix_is_slash)`` where the second item in the tuple is a flag that\n    indicates if any of the option prefixes was a slash.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mimic_adam_with_adafactor(hparams):\n  \"\"\"\n  \"\"\"\n  assert \"adam\" in hparams.optimizer\n  hparams.optimizer = \"adafactor\"\n  hparams.optimizer_adafactor_beta1 = hparams.optimizer_adam_beta1\n  hparams.optimizer_adafactor_beta2 = hparams.optimizer_adam_beta2\n  hparams.optimizer_adafactor_multiply_by_parameter_scale = False\n  hparams.optimizer_adafactor_factored = False\n  hparams.optimizer_adafactor_clipping_threshold = None\n  hparams.optimizer_adafactor_decay_type = \"adam\"", "output": "Switch from Adam to Adafactor, approximating the behavior of Adam.\n\n  Some minor things may be different, like epsilon and beta1 correction.\n\n  Args:\n    hparams: model hyperparameters where \"adam\" in hparams.optimizer", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def is_ipv6_filter(ip, options=None):\n    '''\n    \n    '''\n    _is_ipv6 = _is_ipv(ip, 6, options=options)\n    return isinstance(_is_ipv6, six.string_types)", "output": "Returns a bool telling if the value passed to it was a valid IPv6 address.\n\n    ip\n        The IP address.\n\n    net: False\n        Consider IP addresses followed by netmask.\n\n    options\n        CSV of options regarding the nature of the IP address. E.g.: loopback, multicast, private etc.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def train_eval():\n    \"\"\" \n    \"\"\"\n\n    global trainloader\n    global testloader\n    global net\n\n    (x_train, y_train) = trainloader\n    (x_test, y_test) = testloader\n\n    # train procedure\n    net.fit(\n        x=x_train,\n        y=y_train,\n        batch_size=args.batch_size,\n        validation_data=(x_test, y_test),\n        epochs=args.epochs,\n        shuffle=True,\n        callbacks=[\n            SendMetrics(),\n            EarlyStopping(min_delta=0.001, patience=10),\n            TensorBoard(log_dir=TENSORBOARD_DIR),\n        ],\n    )\n\n    # trial report final acc to tuner\n    _, acc = net.evaluate(x_test, y_test)\n    logger.debug(\"Final result is: %.3f\", acc)\n    nni.report_final_result(acc)", "output": "train and eval the model", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def check_env_cache(opts, env_cache):\n    '''\n    \n    '''\n    if not os.path.isfile(env_cache):\n        return None\n    try:\n        with salt.utils.files.fopen(env_cache, 'rb') as fp_:\n            log.trace('Returning env cache data from %s', env_cache)\n            serial = salt.payload.Serial(opts)\n            return salt.utils.data.decode(serial.load(fp_))\n    except (IOError, OSError):\n        pass\n    return None", "output": "Returns cached env names, if present. Otherwise returns None.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _StructPackEncoder(wire_type, format):\n  \"\"\"\n  \"\"\"\n\n  value_size = struct.calcsize(format)\n\n  def SpecificEncoder(field_number, is_repeated, is_packed):\n    local_struct_pack = struct.pack\n    if is_packed:\n      tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)\n      local_EncodeVarint = _EncodeVarint\n      def EncodePackedField(write, value):\n        write(tag_bytes)\n        local_EncodeVarint(write, len(value) * value_size)\n        for element in value:\n          write(local_struct_pack(format, element))\n      return EncodePackedField\n    elif is_repeated:\n      tag_bytes = TagBytes(field_number, wire_type)\n      def EncodeRepeatedField(write, value):\n        for element in value:\n          write(tag_bytes)\n          write(local_struct_pack(format, element))\n      return EncodeRepeatedField\n    else:\n      tag_bytes = TagBytes(field_number, wire_type)\n      def EncodeField(write, value):\n        write(tag_bytes)\n        return write(local_struct_pack(format, value))\n      return EncodeField\n\n  return SpecificEncoder", "output": "Return a constructor for an encoder for a fixed-width field.\n\n  Args:\n      wire_type:  The field's wire type, for encoding tags.\n      format:  The format string to pass to struct.pack().", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def symlink_remove(link):\n    \"\"\"\n    \"\"\"\n    # https://stackoverflow.com/q/26554135/6400719\n    if os.path.isdir(path2str(link)) and is_windows:\n        # this should only be on Py2.7 and windows\n        os.rmdir(path2str(link))\n    else:\n        os.unlink(path2str(link))", "output": "Remove a symlink. Used for model shortcut links.\n\n    link (unicode / Path): The path to the symlink.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cmd(tgt,\n        fun,\n        arg=(),\n        timeout=None,\n        tgt_type='glob',\n        kwarg=None):\n    '''\n    \n    '''\n    client = salt.client.ssh.client.SSHClient(mopts=__opts__)\n    return client.cmd(\n            tgt,\n            fun,\n            arg,\n            timeout,\n            tgt_type,\n            kwarg)", "output": ".. versionadded:: 2015.5.0\n    .. versionchanged:: 2017.7.0\n        The ``expr_form`` argument has been renamed to ``tgt_type``, earlier\n        releases must use ``expr_form``.\n\n    Execute a single command via the salt-ssh subsystem and return all\n    routines at once\n\n    A wrapper around the :py:meth:`SSHClient.cmd\n    <salt.client.ssh.client.SSHClient.cmd>` method.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def scheduled_sample_prob(ground_truth_x,\n                          generated_x,\n                          batch_size,\n                          scheduled_sample_var):\n  \"\"\"\n  \"\"\"\n  probability_threshold = scheduled_sample_var\n  probability_of_generated = tf.random_uniform([batch_size])\n  return tf.where(probability_of_generated > probability_threshold,\n                  generated_x, ground_truth_x)", "output": "Probability based scheduled sampling.\n\n  Args:\n    ground_truth_x: tensor of ground-truth data points.\n    generated_x: tensor of generated data points.\n    batch_size: batch size\n    scheduled_sample_var: probability of choosing from ground_truth.\n  Returns:\n    New batch with randomly selected data points.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_actions_from_items(self, items):\r\n        \"\"\"\"\"\"\r\n        fromcursor_act = create_action(self, text=_('Go to cursor position'),\r\n                                       icon=ima.icon('fromcursor'),\r\n                                       triggered=self.go_to_cursor_position)\r\n        fullpath_act = create_action(self, text=_('Show absolute path'),\r\n                                     toggled=self.toggle_fullpath_mode)\r\n        fullpath_act.setChecked(self.show_fullpath)\r\n        allfiles_act = create_action(self, text=_('Show all files'),\r\n                                     toggled=self.toggle_show_all_files)\r\n        allfiles_act.setChecked(self.show_all_files)\r\n        comment_act = create_action(self, text=_('Show special comments'),\r\n                                    toggled=self.toggle_show_comments)\r\n        comment_act.setChecked(self.show_comments)\r\n        group_cells_act = create_action(self, text=_('Group code cells'),\r\n                                        toggled=self.toggle_group_cells)\r\n        group_cells_act.setChecked(self.group_cells)\r\n        sort_files_alphabetically_act = create_action(\r\n            self, text=_('Sort files alphabetically'),\r\n            toggled=self.toggle_sort_files_alphabetically)\r\n        sort_files_alphabetically_act.setChecked(\r\n            self.sort_files_alphabetically)\r\n        actions = [fullpath_act, allfiles_act, group_cells_act, comment_act,\r\n                   sort_files_alphabetically_act, fromcursor_act]\r\n        return actions", "output": "Reimplemented OneColumnTree method", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def index_fields(self, vocab: Vocabulary) -> None:\n        \"\"\"\n        \n        \"\"\"\n        if not self.indexed:\n            self.indexed = True\n            for field in self.fields.values():\n                field.index(vocab)", "output": "Indexes all fields in this ``Instance`` using the provided ``Vocabulary``.\n        This `mutates` the current object, it does not return a new ``Instance``.\n        A ``DataIterator`` will call this on each pass through a dataset; we use the ``indexed``\n        flag to make sure that indexing only happens once.\n\n        This means that if for some reason you modify your vocabulary after you've\n        indexed your instances, you might get unexpected behavior.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def volume_detach(name, profile=None, timeout=300, **kwargs):\n    '''\n    \n\n    '''\n    conn = _auth(profile, **kwargs)\n    return conn.volume_detach(\n        name,\n        timeout\n    )", "output": "Attach a block storage volume\n\n    name\n        Name of the new volume to attach\n\n    server_name\n        Name of the server to detach from\n\n    profile\n        Profile to build on\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' nova.volume_detach myblock profile=openstack", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def enforce_tags(Resource, Tags, region=None, key=None, keyid=None, profile=None):\n    '''\n    \n\n    '''\n    authargs = {'region': region, 'key': key, 'keyid': keyid, 'profile': profile}\n    current = list_tags_for_resource(Resource=Resource, **authargs)\n    if current is None:\n        log.error('Failed to list tags for CloudFront resource `%s`.', Resource)\n        return False\n    if current == Tags:  # Short-ciruits save cycles!\n        return True\n    remove = [k for k in current if k not in Tags]\n    removed = untag_resource(Resource=Resource, TagKeys=remove, **authargs)\n    if removed is False:\n        log.error('Failed to remove tags (%s) from CloudFront resource `%s`.', remove, Resource)\n        return False\n    add = {k: v for k, v in Tags.items() if current.get(k) != v}\n    added = tag_resource(Resource=Resource, Tags=add, **authargs)\n    if added is False:\n        log.error('Failed to add tags (%s) to CloudFront resource `%s`.', add, Resource)\n        return False\n    return True", "output": "Enforce a given set of tags on a CloudFront resource:  adding, removing, or changing them\n    as necessary to ensure the resource's tags are exactly and only those specified.\n\n    Resource\n        The ARN of the affected CloudFront resource.\n\n    Tags\n        Dict of {'Tag': 'Value', ...} providing the tags to be enforced.\n\n    region\n        Region to connect to.\n\n    key\n        Secret key to use.\n\n    keyid\n        Access key to use.\n\n    profile\n        Dict, or pillar key pointing to a dict, containing AWS region/key/keyid.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_cloudfront.enforce_tags Tags='{Owner: Infra, Role: salt_master}' \\\\\n                Resource='arn:aws:cloudfront::012345678012:distribution/ETLNABCDEF123'", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def make_lib(self, version):\n        \"\"\"\n        \n        \"\"\"\n        if os.path.exists(POETRY_LIB_BACKUP):\n            shutil.rmtree(POETRY_LIB_BACKUP)\n\n        # Backup the current installation\n        if os.path.exists(POETRY_LIB):\n            shutil.copytree(POETRY_LIB, POETRY_LIB_BACKUP)\n            shutil.rmtree(POETRY_LIB)\n\n        try:\n            self._make_lib(version)\n        except Exception:\n            if not os.path.exists(POETRY_LIB_BACKUP):\n                raise\n\n            shutil.copytree(POETRY_LIB_BACKUP, POETRY_LIB)\n            shutil.rmtree(POETRY_LIB_BACKUP)\n\n            raise\n        finally:\n            if os.path.exists(POETRY_LIB_BACKUP):\n                shutil.rmtree(POETRY_LIB_BACKUP)", "output": "Packs everything into a single lib/ directory.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def fill(self, background_shape, img):\n        \"\"\"\n        \n        \"\"\"\n        background_shape = tuple(background_shape)\n        return self._fill(background_shape, img)", "output": "Return a proper background image of background_shape, given img.\n\n        Args:\n            background_shape (tuple): a shape (h, w)\n            img: an image\n        Returns:\n            a background image", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def to_np(v):\n    ''''''\n    if isinstance(v, float): return np.array(v)\n    if isinstance(v, (np.ndarray, np.generic)): return v\n    if isinstance(v, (list,tuple)): return [to_np(o) for o in v]\n    if isinstance(v, Variable): v=v.data\n    if torch.cuda.is_available():\n        if is_half_tensor(v): v=v.float()\n    if isinstance(v, torch.FloatTensor): v=v.float()\n    return v.cpu().numpy()", "output": "returns an np.array object given an input of np.array, list, tuple, torch variable or tensor.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_recent_repeated_responses(chatbot, conversation, sample=10, threshold=3, quantity=3):\n    \"\"\"\n    \n    \"\"\"\n    from collections import Counter\n\n    # Get the most recent statements from the conversation\n    conversation_statements = list(chatbot.storage.filter(\n        conversation=conversation,\n        order_by=['id']\n    ))[sample * -1:]\n\n    text_of_recent_responses = [\n        statement.text for statement in conversation_statements\n    ]\n\n    counter = Counter(text_of_recent_responses)\n\n    # Find the n most common responses from the conversation\n    most_common = counter.most_common(quantity)\n\n    return [\n        counted[0] for counted in most_common\n        if counted[1] >= threshold\n    ]", "output": "A filter that eliminates possibly repetitive responses to prevent\n    a chat bot from repeating statements that it has recently said.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove(app_id):\n    '''\n    \n    '''\n    cmd = 'sqlite3 \"/Library/Application Support/com.apple.TCC/TCC.db\" ' \\\n          '\"DELETE from access where client=\\'{0}\\'\"'.format(app_id)\n    call = __salt__['cmd.run_all'](\n        cmd,\n        output_loglevel='debug',\n        python_shell=False\n    )\n\n    if call['retcode'] != 0:\n        comment = ''\n        if 'stderr' in call:\n            comment += call['stderr']\n        if 'stdout' in call:\n            comment += call['stdout']\n\n        raise CommandExecutionError('Error removing app: {0}'.format(comment))\n\n    return True", "output": "Remove a bundle ID or command as being allowed to use assistive access.\n\n    app_id\n        The bundle ID or command to remove from assistive access list.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' assistive.remove /usr/bin/osascript\n        salt '*' assistive.remove com.smileonmymac.textexpander", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def on_train_begin(self, **kwargs:Any)->None:\n        \"\"\n        self.best = float('inf') if self.operator == np.less else -float('inf')", "output": "Initializes the best value.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def position_to_value(self, y):\n        \"\"\"\"\"\"\n        vsb = self.editor.verticalScrollBar()\n        return vsb.minimum()+max([0, (y-self.offset)/self.get_scale_factor()])", "output": "Convert position in pixels to value", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def running(opts):\n    '''\n    \n    '''\n\n    ret = []\n    proc_dir = os.path.join(opts['cachedir'], 'proc')\n    if not os.path.isdir(proc_dir):\n        return ret\n    for fn_ in os.listdir(proc_dir):\n        path = os.path.join(proc_dir, fn_)\n        try:\n            data = _read_proc_file(path, opts)\n            if data is not None:\n                ret.append(data)\n        except (IOError, OSError):\n            # proc files may be removed at any time during this process by\n            # the minion process that is executing the JID in question, so\n            # we must ignore ENOENT during this process\n            pass\n    return ret", "output": "Return the running jobs on this minion", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def merge(left, right, merged):\n    \"\"\" \n    \"\"\"\n\n    left_cursor, right_cursor = 0, 0\n    while left_cursor < len(left) and right_cursor < len(right):\n        # Sort each one and place into the result\n        if left[left_cursor] <= right[right_cursor]:\n            merged[left_cursor+right_cursor]=left[left_cursor]\n            left_cursor += 1\n        else:\n            merged[left_cursor + right_cursor] = right[right_cursor]\n            right_cursor += 1\n    # Add the left overs if there's any left to the result\n    for left_cursor in range(left_cursor, len(left)):\n        merged[left_cursor + right_cursor] = left[left_cursor]\n    # Add the left overs if there's any left to the result\n    for right_cursor in range(right_cursor, len(right)):\n        merged[left_cursor + right_cursor] = right[right_cursor]\n\n    # Return result\n    return merged", "output": "Merge helper\n        Complexity: O(n)", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def mtf_image_transformer_base_imagenet():\n  \"\"\"\"\"\"\n  hparams = mtf_image_transformer_base_cifar()\n  hparams.mesh_shape = \"batch:32\"\n  hparams.layout = \"batch:batch\"\n  hparams.batch_size = 128\n  hparams.d_ff = 2048\n  hparams.hidden_size = 512\n  hparams.num_decoder_layers = 12\n  hparams.learning_rate = 0.5\n  hparams.learning_rate_warmup_steps = 31250\n  hparams.layer_preprocess_sequence = \"none\"\n  hparams.layer_postprocess_sequence = \"dan\"\n  hparams.layer_prepostprocess_dropout = 0.1\n  hparams.unconditional = True\n  return hparams", "output": "Data parallel CIFAR parameters.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def cp(device, from_minor, to_minor):  # pylint: disable=C0103\n    '''\n    \n    '''\n    _validate_device(device)\n\n    try:\n        int(from_minor)\n        int(to_minor)\n    except Exception:\n        raise CommandExecutionError(\n            'Invalid minor number passed to partition.cp'\n        )\n\n    cmd = 'parted -m -s {0} cp {1} {2}'.format(device, from_minor, to_minor)\n    out = __salt__['cmd.run'](cmd).splitlines()\n    return out", "output": "Copies the file system on the partition <from-minor> to partition\n    <to-minor>, deleting the original contents of the destination\n    partition.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' partition.cp /dev/sda 2 3", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def foreach_model(self, fn):\n        \"\"\"\n        \"\"\"\n\n        results = ray.get([w.foreach_model.remote(fn) for w in self.workers])\n        out = []\n        for r in results:\n            out.extend(r)\n        return out", "output": "Apply the given function to each model replica in each worker.\n\n        Returns:\n            List of results from applying the function.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def del_password(name, root=None):\n    '''\n    \n    '''\n    cmd = ['passwd']\n    if root is not None:\n        cmd.extend(('-R', root))\n    cmd.extend(('-d', name))\n\n    __salt__['cmd.run'](cmd, python_shell=False, output_loglevel='quiet')\n    uinfo = info(name, root=root)\n    return not uinfo['passwd'] and uinfo['name'] == name", "output": ".. versionadded:: 2014.7.0\n\n    Delete the password from name user\n\n    name\n        User to delete\n\n    root\n        Directory to chroot into\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' shadow.del_password username", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _make_pretty_usage(usage):\n    \"\"\"\n    \n    \"\"\"\n\n    if usage is not None and usage.strip() != \"\":\n        usage = \"\\n\".join(map(lambda u: u.strip(), usage.split(\"\\n\")))\n        return \"%s\\n\\n\" % usage", "output": "Makes the usage description pretty and returns a formatted string if `usage`\n    is not an empty string. Otherwise, returns None.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def channel_interpolate(layer1, n_channel1, layer2, n_channel2):\n  \"\"\"\n  \"\"\"\n  def inner(T):\n    batch_n = T(layer1).get_shape().as_list()[0]\n    arr1 = T(layer1)[..., n_channel1]\n    arr2 = T(layer2)[..., n_channel2]\n    weights = (np.arange(batch_n)/float(batch_n-1))\n    S = 0\n    for n in range(batch_n):\n      S += (1-weights[n]) * tf.reduce_mean(arr1[n])\n      S += weights[n] * tf.reduce_mean(arr2[n])\n    return S\n  return inner", "output": "Interpolate between layer1, n_channel1 and layer2, n_channel2.\n\n  Optimize for a convex combination of layer1, n_channel1 and\n  layer2, n_channel2, transitioning across the batch.\n\n  Args:\n    layer1: layer to optimize 100% at batch=0.\n    n_channel1: neuron index to optimize 100% at batch=0.\n    layer2: layer to optimize 100% at batch=N.\n    n_channel2: neuron index to optimize 100% at batch=N.\n\n  Returns:\n    Objective", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def xpathNextParent(self, ctxt):\n        \"\"\" \"\"\"\n        if ctxt is None: ctxt__o = None\n        else: ctxt__o = ctxt._o\n        ret = libxml2mod.xmlXPathNextParent(ctxt__o, self._o)\n        if ret is None:raise xpathError('xmlXPathNextParent() failed')\n        __tmp = xmlNode(_obj=ret)\n        return __tmp", "output": "Traversal function for the \"parent\" direction The parent\n          axis contains the parent of the context node, if there is\n           one.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_root_path(self, language):\n        \"\"\"\n        \n        \"\"\"\n        path = None\n\n        # Get path of the current project\n        if self.main and self.main.projects:\n            path = self.main.projects.get_active_project_path()\n\n        # If there's no project, use the output of getcwd_or_home.\n        if not path:\n            # We can't use getcwd_or_home for Python because if it\n            # returns home and you have a lot of Python files on it\n            # then computing Rope completions takes a long time\n            # and blocks the PyLS server.\n            # Instead we use an empty directory inside our config one,\n            # just like we did for Rope in Spyder 3.\n            if language == 'python':\n                path = get_conf_path('lsp_root_path')\n                if not osp.exists(path):\n                    os.mkdir(path)\n            else:\n                path = getcwd_or_home()\n\n        return path", "output": "Get root path to pass to the LSP servers.\n\n        This can be the current project path or the output of\n        getcwd_or_home (except for Python, see below).", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def minion_config(opts, vm_):\n    '''\n    \n    '''\n\n    # Don't start with a copy of the default minion opts; they're not always\n    # what we need. Some default options are Null, let's set a reasonable default\n    minion = {\n        'master': 'salt',\n        'log_level': 'info',\n        'hash_type': 'sha256',\n    }\n\n    # Now, let's update it to our needs\n    minion['id'] = vm_['name']\n    master_finger = salt.config.get_cloud_config_value('master_finger', vm_, opts)\n    if master_finger is not None:\n        minion['master_finger'] = master_finger\n    minion.update(\n        # Get ANY defined minion settings, merging data, in the following order\n        # 1. VM config\n        # 2. Profile config\n        # 3. Global configuration\n        salt.config.get_cloud_config_value(\n            'minion', vm_, opts, default={}, search_global=True\n        )\n    )\n\n    make_master = salt.config.get_cloud_config_value('make_master', vm_, opts)\n    if 'master' not in minion and make_master is not True:\n        raise SaltCloudConfigError(\n            'A master setting was not defined in the minion\\'s configuration.'\n        )\n\n    # Get ANY defined grains settings, merging data, in the following order\n    # 1. VM config\n    # 2. Profile config\n    # 3. Global configuration\n    minion.setdefault('grains', {}).update(\n        salt.config.get_cloud_config_value(\n            'grains', vm_, opts, default={}, search_global=True\n        )\n    )\n    return minion", "output": "Return a minion's configuration for the provided options and VM", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _indent(s, indent='  '):\n    \"\"\"\"\"\"\n    if isinstance(s, six.string_types):\n        return '\\n'.join(('%s%s' % (indent, line) for line in s.splitlines()))\n    return s", "output": "Intent each line with indent", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _apply_cpu_config(config_spec, cpu_props):\n    '''\n    \n    '''\n    log.trace('Configuring virtual machine CPU '\n              'settings cpu_props=%s', cpu_props)\n    if 'count' in cpu_props:\n        config_spec.numCPUs = int(cpu_props['count'])\n    if 'cores_per_socket' in cpu_props:\n        config_spec.numCoresPerSocket = int(cpu_props['cores_per_socket'])\n    if 'nested' in cpu_props and cpu_props['nested']:\n        config_spec.nestedHVEnabled = cpu_props['nested']  # True\n    if 'hotadd' in cpu_props and cpu_props['hotadd']:\n        config_spec.cpuHotAddEnabled = cpu_props['hotadd']  # True\n    if 'hotremove' in cpu_props and cpu_props['hotremove']:\n        config_spec.cpuHotRemoveEnabled = cpu_props['hotremove']", "output": "Sets CPU core count to the given value\n\n    config_spec\n        vm.ConfigSpec object\n\n    cpu_props\n        CPU properties dict", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def remove(self, key, where=None, start=None, stop=None):\n        \"\"\"\n        \n\n        \"\"\"\n        where = _ensure_term(where, scope_level=1)\n        try:\n            s = self.get_storer(key)\n        except KeyError:\n            # the key is not a valid store, re-raising KeyError\n            raise\n        except Exception:\n\n            if where is not None:\n                raise ValueError(\n                    \"trying to remove a node with a non-None where clause!\")\n\n            # we are actually trying to remove a node (with children)\n            s = self.get_node(key)\n            if s is not None:\n                s._f_remove(recursive=True)\n                return None\n\n        # remove the node\n        if com._all_none(where, start, stop):\n            s.group._f_remove(recursive=True)\n\n        # delete from the table\n        else:\n            if not s.is_table:\n                raise ValueError(\n                    'can only remove with where on objects written as tables')\n            return s.delete(where=where, start=start, stop=stop)", "output": "Remove pandas object partially by specifying the where condition\n\n        Parameters\n        ----------\n        key : string\n            Node to remove or delete rows from\n        where : list of Term (or convertible) objects, optional\n        start : integer (defaults to None), row number to start selection\n        stop  : integer (defaults to None), row number to stop selection\n\n        Returns\n        -------\n        number of rows removed (or None if not a Table)\n\n        Exceptions\n        ----------\n        raises KeyError if key is not a valid store", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def setup_table(self):\r\n        \"\"\"\"\"\"\r\n        self.horizontalHeader().setStretchLastSection(True)\r\n        self.adjust_columns()\r\n        self.columnAt(0)\r\n        # Sorting columns\r\n        self.setSortingEnabled(False)\r\n        self.sortByColumn(0, Qt.DescendingOrder)", "output": "Setup table", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def face_locations(img, number_of_times_to_upsample=1, model=\"hog\"):\n    \"\"\"\n    \n    \"\"\"\n    if model == \"cnn\":\n        return [_trim_css_to_bounds(_rect_to_css(face.rect), img.shape) for face in _raw_face_locations(img, number_of_times_to_upsample, \"cnn\")]\n    else:\n        return [_trim_css_to_bounds(_rect_to_css(face), img.shape) for face in _raw_face_locations(img, number_of_times_to_upsample, model)]", "output": "Returns an array of bounding boxes of human faces in a image\n\n    :param img: An image (as a numpy array)\n    :param number_of_times_to_upsample: How many times to upsample the image looking for faces. Higher numbers find smaller faces.\n    :param model: Which face detection model to use. \"hog\" is less accurate but faster on CPUs. \"cnn\" is a more accurate\n                  deep-learning model which is GPU/CUDA accelerated (if available). The default is \"hog\".\n    :return: A list of tuples of found face locations in css (top, right, bottom, left) order", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def reset_window_layout(self):\r\n        \"\"\"\"\"\"\r\n        answer = QMessageBox.warning(self, _(\"Warning\"),\r\n                     _(\"Window layout will be reset to default settings: \"\r\n                       \"this affects window position, size and dockwidgets.\\n\"\r\n                       \"Do you want to continue?\"),\r\n                     QMessageBox.Yes | QMessageBox.No)\r\n        if answer == QMessageBox.Yes:\r\n            self.setup_layout(default=True)", "output": "Reset window layout to default", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _is_chinese_char(self, cp):\n        \"\"\"\"\"\"\n        # This defines a \"chinese character\" as anything in the CJK Unicode block:\n        #   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)\n        #\n        # Note that the CJK Unicode block is NOT all Japanese and Korean characters,\n        # despite its name. The modern Korean Hangul alphabet is a different block,\n        # as is Japanese Hiragana and Katakana. Those alphabets are used to write\n        # space-separated words, so they are not treated specially and handled\n        # like the all of the other languages.\n        if ((cp >= 0x4E00 and cp <= 0x9FFF) or  #\n                (cp >= 0x3400 and cp <= 0x4DBF) or  #\n                (cp >= 0x20000 and cp <= 0x2A6DF) or  #\n                (cp >= 0x2A700 and cp <= 0x2B73F) or  #\n                (cp >= 0x2B740 and cp <= 0x2B81F) or  #\n                (cp >= 0x2B820 and cp <= 0x2CEAF) or\n                (cp >= 0xF900 and cp <= 0xFAFF) or  #\n                (cp >= 0x2F800 and cp <= 0x2FA1F)):  #\n            return True\n\n        return False", "output": "Checks whether CP is the codepoint of a CJK character.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_cached_manylinux_wheel(self, package_name, package_version, disable_progress=False):\n        \"\"\"\n        \n        \"\"\"\n        cached_wheels_dir = os.path.join(tempfile.gettempdir(), 'cached_wheels')\n        if not os.path.isdir(cached_wheels_dir):\n            os.makedirs(cached_wheels_dir)\n\n        wheel_file = '{0!s}-{1!s}-{2!s}'.format(package_name, package_version, self.manylinux_wheel_file_suffix)\n        wheel_path = os.path.join(cached_wheels_dir, wheel_file)\n\n        if not os.path.exists(wheel_path) or not zipfile.is_zipfile(wheel_path):\n            # The file is not cached, download it.\n            wheel_url = self.get_manylinux_wheel_url(package_name, package_version)\n            if not wheel_url:\n                return None\n\n            print(\" - {}=={}: Downloading\".format(package_name, package_version))\n            with open(wheel_path, 'wb') as f:\n                self.download_url_with_progress(wheel_url, f, disable_progress)\n\n            if not zipfile.is_zipfile(wheel_path):\n                return None\n        else:\n            print(\" - {}=={}: Using locally cached manylinux wheel\".format(package_name, package_version))\n\n        return wheel_path", "output": "Gets the locally stored version of a manylinux wheel. If one does not exist, the function downloads it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _render_filenames(filenames, zip_file, saltenv, template):\n    '''\n    \n    '''\n    if not template:\n        return (filenames, zip_file)\n\n    # render the path as a template using path_template_engine as the engine\n    if template not in salt.utils.templates.TEMPLATE_REGISTRY:\n        raise CommandExecutionError(\n            'Attempted to render file paths with unavailable engine '\n            '{0}'.format(template)\n        )\n\n    kwargs = {}\n    kwargs['salt'] = __salt__\n    kwargs['pillar'] = __pillar__\n    kwargs['grains'] = __grains__\n    kwargs['opts'] = __opts__\n    kwargs['saltenv'] = saltenv\n\n    def _render(contents):\n        '''\n        Render :param:`contents` into a literal pathname by writing it to a\n        temp file, rendering that file, and returning the result.\n        '''\n        # write out path to temp file\n        tmp_path_fn = salt.utils.files.mkstemp()\n        with salt.utils.files.fopen(tmp_path_fn, 'w+') as fp_:\n            fp_.write(salt.utils.stringutils.to_str(contents))\n        data = salt.utils.templates.TEMPLATE_REGISTRY[template](\n            tmp_path_fn,\n            to_str=True,\n            **kwargs\n        )\n        salt.utils.files.safe_rm(tmp_path_fn)\n        if not data['result']:\n            # Failed to render the template\n            raise CommandExecutionError(\n                'Failed to render file path with error: {0}'.format(\n                    data['data']\n                )\n            )\n        else:\n            return data['data']\n\n    filenames = _render(filenames)\n    zip_file = _render(zip_file)\n    return (filenames, zip_file)", "output": "Process markup in the :param:`filenames` and :param:`zipfile` variables (NOT the\n    files under the paths they ultimately point to) according to the markup\n    format provided by :param:`template`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def lock(backend=None, remote=None):\n    '''\n    \n    '''\n    fileserver = salt.fileserver.Fileserver(__opts__)\n    locked, errors = fileserver.lock(back=backend, remote=remote)\n    ret = {}\n    if locked:\n        ret['locked'] = locked\n    if errors:\n        ret['errors'] = errors\n    if not ret:\n        return 'No locks were set'\n    return ret", "output": ".. versionadded:: 2015.5.0\n\n    Set a fileserver update lock for VCS fileserver backends (:mod:`git\n    <salt.fileserver.gitfs>`, :mod:`hg <salt.fileserver.hgfs>`, :mod:`svn\n    <salt.fileserver.svnfs>`).\n\n    .. note::\n\n        This will only operate on enabled backends (those configured in\n        :conf_master:`fileserver_backend`).\n\n    backend\n        Only set the update lock for the specified backend(s).\n\n    remote\n        If not None, then any remotes which contain the passed string will have\n        their lock cleared. For example, a ``remote`` value of ``*github.com*``\n        will remove the lock from all github.com remotes.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-run fileserver.lock\n        salt-run fileserver.lock backend=git,hg\n        salt-run fileserver.lock backend=git remote='*github.com*'\n        salt-run fileserver.lock remote=bitbucket", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_scanner (type, prop_set):\n    \"\"\" \n    \"\"\"\n    if __debug__:\n        from .property_set import PropertySet\n        assert isinstance(type, basestring)\n        assert isinstance(prop_set, PropertySet)\n    if registered (type):\n        scanner_type = __types [type]['scanner']\n        if scanner_type:\n            return scanner.get (scanner_type, prop_set.raw ())\n            pass\n\n    return None", "output": "Returns a scanner instance appropriate to 'type' and 'property_set'.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def __init_from_np2d(self, mat, params_str, ref_dataset):\n        \"\"\"\"\"\"\n        if len(mat.shape) != 2:\n            raise ValueError('Input numpy.ndarray must be 2 dimensional')\n\n        self.handle = ctypes.c_void_p()\n        if mat.dtype == np.float32 or mat.dtype == np.float64:\n            data = np.array(mat.reshape(mat.size), dtype=mat.dtype, copy=False)\n        else:\n            # change non-float data to float data, need to copy\n            data = np.array(mat.reshape(mat.size), dtype=np.float32)\n\n        ptr_data, type_ptr_data, _ = c_float_array(data)\n        _safe_call(_LIB.LGBM_DatasetCreateFromMat(\n            ptr_data,\n            ctypes.c_int(type_ptr_data),\n            ctypes.c_int(mat.shape[0]),\n            ctypes.c_int(mat.shape[1]),\n            ctypes.c_int(C_API_IS_ROW_MAJOR),\n            c_str(params_str),\n            ref_dataset,\n            ctypes.byref(self.handle)))\n        return self", "output": "Initialize data from a 2-D numpy matrix.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def public_url(self):\n        \"\"\"\n        \"\"\"\n        return \"{storage_base_url}/{bucket_name}/{quoted_name}\".format(\n            storage_base_url=_API_ACCESS_ENDPOINT,\n            bucket_name=self.bucket.name,\n            quoted_name=quote(self.name.encode(\"utf-8\")),\n        )", "output": "The public URL for this blob.\n\n        Use :meth:`make_public` to enable anonymous access via the returned\n        URL.\n\n        :rtype: `string`\n        :returns: The public URL for this blob.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _jitter(c, magnitude:uniform):\n    \"\"\n    c.flow.add_((torch.rand_like(c.flow)-0.5)*magnitude*2)\n    return c", "output": "Replace pixels by random neighbors at `magnitude`.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def request_cert(name, master, ticket, port=\"5665\"):\n    '''\n    \n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': ''}\n    cert = \"{0}ca.crt\".format(get_certs_path())\n\n    # Checking if execution is needed.\n    if os.path.isfile(cert):\n        ret['comment'] = 'No execution needed. Cert: {0} already exists.'.format(cert)\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['comment'] = 'Certificate request from icinga2 master would be executed'\n        return ret\n\n    # Executing the command.\n    cert_request = __salt__['icinga2.request_cert'](name, master, ticket, port)\n    if not cert_request['retcode']:\n        ret['comment'] = \"Certificate request from icinga2 master executed\"\n        ret['changes']['cert'] = \"Executed. Certificate requested: {0}\".format(cert)\n        return ret\n\n    ret['comment'] = \"FAILED. Certificate requested failed with output: {0}\".format(cert_request['stdout'])\n    ret['result'] = False\n    return ret", "output": "Request CA certificate from master icinga2 node.\n\n    name\n        The domain name for which this certificate will be saved\n\n    master\n        Icinga2 master node for which this certificate will be saved\n\n    ticket\n        Authentication ticket generated on icinga2 master\n\n    port\n        Icinga2 port, defaults to 5665", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def get_all(self):\n        \"\"\"\n        \"\"\"\n        if not self.vars:\n            return self.parent\n        if not self.parent:\n            return self.vars\n        return dict(self.parent, **self.vars)", "output": "Return the complete context as dict including the exported\n        variables.  For optimizations reasons this might not return an\n        actual copy so be careful with using it.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def _GetMessageFromFactory(factory, full_name):\n  \"\"\"\n  \"\"\"\n  proto_descriptor = factory.pool.FindMessageTypeByName(full_name)\n  proto_cls = factory.GetPrototype(proto_descriptor)\n  return proto_cls", "output": "Get a proto class from the MessageFactory by name.\n\n  Args:\n    factory: a MessageFactory instance.\n    full_name: str, the fully qualified name of the proto type.\n  Returns:\n    A class, for the type identified by full_name.\n  Raises:\n    KeyError, if the proto is not found in the factory's descriptor pool.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def rename(self, new_name):\r\n        \"\"\"\"\"\"\r\n        old_name = self.name\r\n        self.name = new_name\r\n        pypath = self.relative_pythonpath  # ??\r\n        self.root_path = self.root_path[:-len(old_name)]+new_name\r\n        self.relative_pythonpath = pypath  # ??\r\n        self.save()", "output": "Rename project and rename its root path accordingly.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def Expand(self, macro_ref_str):\n    \"\"\"\n    \"\"\"\n    match = _MACRO_RE.match(macro_ref_str)\n    if match is None or match.group(0) != macro_ref_str:\n      raise PDDMError('Failed to parse macro reference: \"%s\"' % macro_ref_str)\n    if match.group('name') not in self._macros:\n      raise PDDMError('No macro named \"%s\".' % match.group('name'))\n    return self._Expand(match, [], macro_ref_str)", "output": "Expands the macro reference.\n\n    Args:\n      macro_ref_str: String of a macro reference (i.e. foo(a, b)).\n\n    Returns:\n      The text from the expansion.\n\n    Raises:\n      PDDMError if there are any issues.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def set(config, section, opt, value):\n        \"\"\"\n        \"\"\"\n        if section not in config.keys():\n            config[section] = {}\n\n        config[section][opt] = value", "output": "Sets specified option in the config.\n\n        Args:\n            config (configobj.ConfigObj): config to work on.\n            section (str): section name.\n            opt (str): option name.\n            value: value to set option to.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def format(self, source):\n        \"\"\"\n        \"\"\"\n        self._jwrite = self._jwrite.format(source)\n        return self", "output": "Specifies the underlying output data source.\n\n        :param source: string, name of the data source, e.g. 'json', 'parquet'.\n\n        >>> df.write.format('json').save(os.path.join(tempfile.mkdtemp(), 'data'))", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def init_params(net):\n    \"\"\"\"\"\"\n    for module in net.modules():\n        if isinstance(module, nn.Conv2d):\n            init.kaiming_normal(module.weight, mode=\"fan_out\")\n            if module.bias:\n                init.constant(module.bias, 0)\n        elif isinstance(module, nn.BatchNorm2d):\n            init.constant(module.weight, 1)\n            init.constant(module.bias, 0)\n        elif isinstance(module, nn.Linear):\n            init.normal(module.weight, std=1e-3)\n            if module.bias:\n                init.constant(module.bias, 0)", "output": "Init layer parameters.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def update_warning_menu(self):\r\n        \"\"\"\"\"\"\r\n        editor = self.get_current_editor()\r\n        check_results = editor.get_current_warnings()\r\n        self.warning_menu.clear()\r\n        filename = self.get_current_filename()\r\n        for message, line_number in check_results:\r\n            error = 'syntax' in message\r\n            text = message[:1].upper() + message[1:]\r\n            icon = ima.icon('error') if error else ima.icon('warning')\r\n            slot = lambda _checked, _l=line_number: self.load(filename, goto=_l)\r\n            action = create_action(self, text=text, icon=icon, triggered=slot)\r\n            self.warning_menu.addAction(action)", "output": "Update warning list menu", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def chugid_and_umask(runas, umask, group=None):\n    '''\n    \n    '''\n    set_runas = False\n    set_grp = False\n\n    current_user = getpass.getuser()\n    if runas and runas != current_user:\n        set_runas = True\n        runas_user = runas\n    else:\n        runas_user = current_user\n\n    current_grp = grp.getgrgid(pwd.getpwnam(getpass.getuser()).pw_gid).gr_name\n    if group and group != current_grp:\n        set_grp = True\n        runas_grp = group\n    else:\n        runas_grp = current_grp\n\n    if set_runas or set_grp:\n        chugid(runas_user, runas_grp)\n    if umask is not None:\n        os.umask(umask)", "output": "Helper method for for subprocess.Popen to initialise uid/gid and umask\n    for the new process.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def gae_advantages(td_deltas, mask, lambda_=0.95, gamma=0.99):\n  \n  \"\"\"\n\n  return rewards_to_go(td_deltas, mask, lambda_ * gamma)", "output": "r\"\"\"Computes the GAE advantages given the one step TD-residuals.\n\n  The formula for a GAE advantage estimator is as follows:\n\n  A_{bt} = \\sum_{l=0}^{\\infty}(\\gamma * \\lambda)^{l}(\\delta_{b,t+l}).\n\n  Internally we just call rewards_to_go, since it is the same computation.\n\n  Args:\n    td_deltas: np.ndarray of shape (B, T) of one step TD-residuals.\n    mask: np.ndarray of shape (B, T) of mask for the residuals. It maybe the\n      case that the `td_deltas` are already masked correctly since they are\n      produced by `deltas(...)`\n    lambda_: float, lambda parameter for GAE estimators.\n    gamma: float, lambda parameter for GAE estimators.\n\n  Returns:\n    GAE advantage estimates.", "category": "Python"}, {"instruction": "Summarizing the code.", "input": "def highlight_max(self, subset=None, color='yellow', axis=0):\n        \"\"\"\n        \n        \"\"\"\n        return self._highlight_handler(subset=subset, color=color, axis=axis,\n                                       max_=True)", "output": "Highlight the maximum by shading the background.\n\n        Parameters\n        ----------\n        subset : IndexSlice, default None\n            a valid slice for ``data`` to limit the style application to.\n        color : str, default 'yellow'\n        axis : {0 or 'index', 1 or 'columns', None}, default 0\n            apply to each column (``axis=0`` or ``'index'``), to each row\n            (``axis=1`` or ``'columns'``), or to the entire DataFrame at once\n            with ``axis=None``.\n\n        Returns\n        -------\n        self : Styler", "category": "Python"}]